{
    "openapi": "3.0.3",
    "info": {
        "version": "1.0.0",
        "description": "Use these API definitions to develop and integrate applications with the IBM Security Verify services such as authentication, customization, users and groups management, and others. A new version of the API will be released if there are attributes that are removed or renamed. New resources, parameters, or attributes can be added without advance notice. When you use these APIs, ignore the unrecognized response parameters. </br></br>[API compatibility policy](https://www.ibm.com/support/knowledgecenter/SSCT62/com.ibm.iamservice.doc/references/r_api_compatibility_policy.html) </br>[Deprecated APIs](https://www.ibm.com/support/knowledgecenter/SSCT62/com.ibm.iamservice.doc/references/r_deprecated_apis.html)",
        "title": "IBM Security Verify API"
    },
    "servers": [
        {
            "url": "https://{tenanturl}",
            "variables": {
                "tenanturl": {
                    "default": "{tenant_url}",
                    "description": "URL of your IBM Security Verify tenant"
                }
            }
        }
    ],
    "security": [
        {
            "BasicAuth": []
        }
    ],
    "tags": [
        {
            "name": "Adapter Management"
        },
        {
            "name": "Agent Bridge Support Service"
        },
        {
            "name": "API Clients"
        },
        {
            "name": "Application Access"
        },
        {
            "name": "Attributes"
        },
        {
            "name": "Deprecated - Attribute Evaluation. Replaced by /v2.0/attributequery. "
        },
        {
            "name": "Account expiration configuration"
        },
        {
            "name": "Tenant policy configuration"
        },
        {
            "name": "Identity Provider Attribute Mappings"
        },
        {
            "name": "Session Exchange Configuration"
        },
        {
            "name": "Identity Sources V1 - Deprecated"
        },
        {
            "name": "Partner Reseller Identity Providers Management"
        },
        {
            "name": "Identity Source Types"
        },
        {
            "name": "Identity Sources V2"
        },
        {
            "name": "Authentication Token Exchange"
        },
        {
            "name": "Authentication Manage User Sessions"
        },
        {
            "name": "Social JWT Exchange"
        },
        {
            "name": "Access Policy Management v3.0 (deprecated)"
        },
        {
            "name": "Certification Campaign assignments v2.0"
        },
        {
            "name": "Certification Campaign configurations v2.0"
        },
        {
            "name": "Certification Campaign instances v2.0"
        },
        {
            "name": "Certification Campaign statistics v2.0"
        },
        {
            "name": "Certification Campaign assignments v1.0 - Deprecated"
        },
        {
            "name": "Certification Campaign configurations v1.0 - Deprecated"
        },
        {
            "name": "Certification Campaign instances v1.0 - Deprecated"
        },
        {
            "name": "Certification Campaign statistics v1.0 - Deprecated"
        },
        {
            "name": "Password Policy Management 2.0"
        },
        {
            "name": "Dictionary Policy Management 3.0"
        },
        {
            "name": "Password Dictionary Management 3.0"
        },
        {
            "name": "Password Policy Management 3.0"
        },
        {
            "name": "Users Management Version 2.0"
        },
        {
            "name": "Groups Management Version 2.0"
        },
        {
            "name": "Data Privacy and Consent"
        },
        {
            "name": "Data Privacy and Consent Management"
        },
        {
            "name": "Password Vault Configuration"
        },
        {
            "name": "Email One-time Password Configuration 2.0"
        },
        {
            "name": "FIDO Configuration"
        },
        {
            "name": "FIDO MDS Configuration"
        },
        {
            "name": "One-time Password Configuration 2.0"
        },
        {
            "name": "QR Code Login Configuration"
        },
        {
            "name": "Knowledge Questions Configuration"
        },
        {
            "name": "SMS One-time Password Configuration 2.0"
        },
        {
            "name": "Time-based One-time Password Configuration 2.0"
        },
        {
            "name": "Voice One-time Password Configuration"
        },
        {
            "name": "External MFA Providers"
        },
        {
            "name": "reCAPTCHA"
        },
        {
            "name": "Password Vault"
        },
        {
            "name": "Well-Known Uniform Resource Identifiers"
        },
        {
            "name": "Authentication Factors 2.0"
        },
        {
            "name": "Email One-time Password 2.0"
        },
        {
            "name": "FIDO"
        },
        {
            "name": "One-time Password"
        },
        {
            "name": "QR Code Login"
        },
        {
            "name": "Knowledge Questions"
        },
        {
            "name": "SMS One-time Password 2.0"
        },
        {
            "name": "Time-based One-time Password 2.0"
        },
        {
            "name": "Voice One-time Password"
        },
        {
            "name": "Authenticator Clients"
        },
        {
            "name": "Signature Authentication Configuration"
        },
        {
            "name": "Authenticators"
        },
        {
            "name": "Password Authentication"
        },
        {
            "name": "Signature Authentication"
        },
        {
            "name": "User Self Care API"
        },
        {
            "name": "Tenant Properties API 2.0"
        },
        {
            "name": "Access Management"
        },
        {
            "name": "Admin Entitlement Management"
        },
        {
            "name": "Entitlement Management"
        },
        {
            "name": "Provisioning Management"
        },
        {
            "name": "Certificates"
        },
        {
            "name": "Device manager configuration"
        },
        {
            "name": "Smartcard and other X.509 certificate provider configuration"
        },
        {
            "name": "Smartcard or certificate provider operations"
        },
        {
            "name": "Push Credentials Management"
        },
        {
            "name": "OpenID Connect Consent Management (deprecated)"
        },
        {
            "name": "OpenID Connect Grant Management"
        },
        {
            "name": "OpenID Connect Dynamic Client Profile"
        },
        {
            "name": "OpenID Connect Federation"
        },
        {
            "name": "OpenID Connect Token Types"
        },
        {
            "name": "OpenID Connect"
        },
        {
            "name": "Events"
        },
        {
            "name": "Reports"
        },
        {
            "name": "Access Request Management V1.0"
        },
        {
            "name": "Access Policy Management V5.0"
        },
        {
            "name": "OpenID Connect API v2"
        },
        {
            "name": "SAML 2.0 Alias Management"
        },
        {
            "name": "SAML 2.0 Federations Management"
        },
        {
            "name": "WS Federation Management"
        },
        {
            "name": "Template File Registration"
        },
        {
            "name": "Customization - Themes"
        },
        {
            "name": "Threat Insights Configurations API"
        },
        {
            "name": "Webhook-Configuration"
        }
    ],
    "paths": {
        "/oauth2/token": {
            "post": {
                "summary": "Get the access token.",
                "description": "Use this API to get the OIDC tokens by using the client credentials. For API clients, the returned access tokens can be used to access the APIs that the API client has been granted access to.",
                "x-publicAPI": "true",
                "tags": [
                    "OpenID Connect API v2"
                ],
                "parameters": [
                    {
                        "description": "The basic authorization header that contains a base64-encoded client ID and the client secret. Use this header as an alternative to sending the client ID and secret in the form parameters.",
                        "required": false,
                        "name": "Authorization",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The access token was returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokenResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error_0"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource was not found."
                    },
                    "500": {
                        "description": "An internal server error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error_0"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1.0/attributes": {
            "get": {
                "tags": [
                    "Attributes"
                ],
                "summary": "Lists all attributes",
                "description": "Retrieves the list of attributes for this tenant.<br><br>Entitlements required: readAttributes, manageAttributes.",
                "operationId": "getAllAttributes",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization Header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Returns results based on the search criteria.<br><br>The format to use the search query parameter is 'search={parameter}{operator}{value}<br><br>The following search parameters are allowed: name, credname, tags, sourcetype, id, scope.<br><br>Parameters name, credname, tags, sourcetype, id, scope only support search by string values.<br><br>Valid operators for string values are =, !=, contains, startswith, endswith, and exists.<br> Only for the 'exists' operator, there is no need to specify search value. <br> And for all rest operators, use double quotation marks for the search values.<br><br>Multiple search conditions can be combined using either the & (AND) or | (OR) operators.<br><br>Conditions in parentheses () have a higher priority and are evaluated first. Without parentheses, & (AND) is evaluated first.<br><b>Example</b>: (tags=\"sso\"|name=\"email\")&id=\"10\"<br><b>Note</b>: Nested parentheses are not supported.<br><br><b>Example</b>: Search for attributes with 'sso' tag: search=tags=\"sso\"<br><b>Example</b>: Search for attributes with name startwith 'pre': search=name%20startswith%20\"pre\"<br><b>Example</b>: Search for attributes with tag: search=tags%20exists<br>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Returns sorted results.<br>The following sort parameters are allowed: name, credname, tags, sourcetype, scope.<br>Each sort parameter must be prefixed with either + or -.<br><br><b>Example</b>: Sort attributes by ascending 'name': sort=+name<br>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pagination",
                        "in": "query",
                        "description": "Returns results based on the requested limit and page.<br>The following pagination parameters are allowed: limit, page.<br><br><b>Example</b>: Get only 5 results at the second page: pagination=limit=5%26page=2<br>",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Query",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Attribute_0"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBean"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No resource found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBean"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBean"
                                }
                            }
                        }
                    }
                },
                "x-publicAPI": "true"
            },
            "post": {
                "tags": [
                    "Attributes"
                ],
                "summary": "Creates an attribute",
                "description": "Creates a custom attribute for this tenant.<br><br>Entitlements required: manageAttributes.",
                "operationId": "createAttribute",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization Header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Attribute Payload",
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/Attribute_0"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {}
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBean"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBean"
                                }
                            }
                        }
                    }
                },
                "x-publicAPI": "true",
                "x-codegen-request-body-name": "Payload"
            },
            "patch": {
                "tags": [
                    "Attributes"
                ],
                "summary": "Bulk management operations of attributes",
                "description": "Deletes or updates the attributes with the specified ID for this tenant.<br><br>Entitlements required: manageAttributes.",
                "operationId": "patchAttributes",
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization Header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "List of Patch Operations",
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchOperation"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No content",
                        "content": {}
                    },
                    "207": {
                        "description": "Multi-Status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PatchOperationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PatchOperationResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBean"
                                }
                            }
                        }
                    }
                },
                "x-publicAPI": "true",
                "x-codegen-request-body-name": "Payload"
            }
        },
        "/v1.0/attributes/{attrId}": {
            "get": {
                "tags": [
                    "Attributes"
                ],
                "summary": "Gets an attribute",
                "description": "Retrieves the attribute with the specified ID for this tenant.<br><br>Entitlements required: readAttributes, manageAttributes.",
                "operationId": "getAttribute_0",
                "parameters": [
                    {
                        "name": "attrId",
                        "in": "path",
                        "description": "attribute identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization Header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Query",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/Attribute_0"
                                        },
                                        {
                                            "$ref": "#/components/schemas/PaginatedAttribute_0"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBean"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No resource found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBean"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBean"
                                }
                            }
                        }
                    }
                },
                "x-publicAPI": "true"
            },
            "put": {
                "tags": [
                    "Attributes"
                ],
                "summary": "Modifies an attribute",
                "description": "Modifies the attribute with the specified ID for this tenant.<br><br>Entitlements required: manageAttributes.",
                "operationId": "updateAttribute",
                "parameters": [
                    {
                        "name": "attrId",
                        "in": "path",
                        "description": "attribute identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization Header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Attribute Payload",
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/Attribute_0"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No content",
                        "content": {}
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBean"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No resource found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBean"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBean"
                                }
                            }
                        }
                    }
                },
                "x-publicAPI": "true",
                "x-codegen-request-body-name": "Payload"
            },
            "delete": {
                "tags": [
                    "Attributes"
                ],
                "summary": "Deletes an attribute",
                "description": "Deletes the attribute with the specified ID for this tenant.<br><br>Entitlements required: manageAttributes.",
                "operationId": "deleteAttribute",
                "parameters": [
                    {
                        "name": "attrId",
                        "in": "path",
                        "description": "attribute identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization Header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content",
                        "content": {}
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBean"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No resource found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBean"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBean"
                                }
                            }
                        }
                    }
                },
                "x-publicAPI": "true"
            },
            "patch": {
                "tags": [
                    "Attributes"
                ],
                "summary": "Modifies selected properties of an attribute",
                "description": "Modifies the attribute with the specified ID for this tenant.<br>Unlike the PUT API, the request body for PATCH does not need to be the full attribute model but instead should only contain the properties of the attribute that need to be updated.<br><br>Entitlements required: manageAttributes.",
                "operationId": "patchSingleAttribute",
                "parameters": [
                    {
                        "name": "attrId",
                        "in": "path",
                        "description": "attribute identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Authorization Header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Attribute Payload",
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchSingleAttributeReqModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No content",
                        "content": {}
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBean"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No resource found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBean"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorBean"
                                }
                            }
                        }
                    }
                },
                "x-publicAPI": "true",
                "x-codegen-request-body-name": "Payload"
            }
        },
        "/v1.0/branding/themes": {
            "get": {
                "tags": [
                    "Customization - Themes"
                ],
                "summary": "List all the themes",
                "description": "List all the themes that are registered for the tenant. <br> Generates a list of registered themes for the tenant, which includes theme name and description(optional).<br><br>Default theme is always present since it is the current themeID for your Verify tenant.<br><br> Entitlements required:<br> manageTemplates (Manage templates and themes) or readTemplates (Read templates and themes)",
                "operationId": "getThemeRegistrations",
                "parameters": [
                    {
                        "name": "pagination",
                        "in": "query",
                        "description": "Controls the results that are returned in a page. If no pagination parameters are passed in all results are returned.<br><br>You can use the following query parameters:<br><br><b>count</b> - Use to define the total number of results that are returned from the data store. The maximum allowed value is 1000.<br><br><b>page</b> - Use to identify the requested page, or the offset.<br><br><b>limit</b> - Use to define the total number of results that are returned per page. The maximum allowed value is 1000.<br><br><b>Note</b>: If you are not using the Swagger UI, the pagination parameter value must be HTML encoded. Use the prefix \"pagination=\" in the query parameter.<br><br><b>Example</b>: Paginate on count=10&page=1&limit=5<br>pagination=count%3D10%26page%3D1%26limit%3D5",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request was successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ThemeRegistrationPaginatedResponseContainer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request was malformed or might not be handled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "The client was not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The client was not authorized to perform the request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource could not be located",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "The HTTP method that is specified in the request is not supported by the resource",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "The resource cannot produce the representation that is specified in the Accept header of the request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "The resource cannot consume the representation that is specified in the Content-Type header of the request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An error occurred processing the request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    }
                },
                "x-publicAPI": "true"
            },
            "post": {
                "tags": [
                    "Customization - Themes"
                ],
                "summary": "Register a new theme",
                "description": "Register a new theme by using the supported templates and language locales. <br><br> This API generates a unique themeId for each theme registered.<br><br> Upload template customizations in a .zip theme file. Use the following format to add the entries to the compressed theme file:<br><br>/templates/&lt;template_path&gt;/&lt;locale&gt;/&lt;file_name&gt;<br><br>",
                "operationId": "registerThemeTemplates",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "configuration",
                                    "files"
                                ],
                                "type": "object",
                                "properties": {
                                    "configuration": {
                                        "type": "string",
                                        "description": "Theme Registration configuration payload. String-encoded JSON Object.<br><br>Example:<br>{<br>\"name\": \"string\",<br>\"description\": \"string (optional)\"<br>}<br><br>"
                                    },
                                    "files": {
                                        "type": "string",
                                        "description": "Customized Template .zip File",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The request was successful.",
                        "content": {}
                    },
                    "400": {
                        "description": "The request was malformed or might not be handled",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "The client was not authenticated",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The client was not authorized to perform the request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource could not be located",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "The HTTP method that is specified in the request is not supported by the resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "The resource cannot produce the representation that is specified in the Accept header of the request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "A conflict occurred with an existing Template Registration.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "The resource cannot consume the representation that is specified in the Content-Type header of the request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An error occurred processing the request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    }
                },
                "x-publicAPI": "true"
            }
        },
        "/v1.0/branding/themes/{themeId}": {
            "get": {
                "tags": [
                    "Customization - Themes"
                ],
                "summary": "Download theme-based templates",
                "description": "Download all templates that are registered for the theme in a .zip file format. Typically used to later provide customizations to templates by using the PUT API. See the \"Update a theme registration\" API. <br><br> Downloads the customizations in a .zip file. The entries in the .zip file are in the following format:<br><br>/templates/&lt;template_path&gt;/&lt;locale&gt;/&lt;file_name&gt;<br><br><br> Note : <br> 1. Use 'master' to download the global theme for the Verify product. The master theme can be used as a template for a registering a new theme.<br> 2. Use 'default' to download the current customizations for your Verify tenant.<br><br> Entitlements required: <br> manageTemplates (Manage templates and themes) or readTemplates (Read templates and themes)",
                "operationId": "downloadThemeTemplates",
                "parameters": [
                    {
                        "name": "themeId",
                        "in": "path",
                        "description": "Generated themeId for the requested theme. The themeID can be obtained from the GET call. See the \"List all the themes\" API.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customized_only",
                        "in": "query",
                        "description": "Includes templates that are customized only. Returns global templates if false",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request was successful.",
                        "content": {}
                    },
                    "400": {
                        "description": "The request was malformed or might not be handled",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "The client was not authenticated",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The client was not authorized to perform the request",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource could not be located",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "The HTTP method that is specified in the request is not supported by the resource",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "The resource cannot produce the representation that is specified in the Accept header of the request",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "The resource cannot consume the representation that is specified in the Content-Type header of the request",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An error occurred processing the request",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    }
                },
                "x-publicAPI": "true"
            },
            "put": {
                "tags": [
                    "Customization - Themes"
                ],
                "summary": "Update a theme registration",
                "description": "Used to update the theme name, the theme description, and the template files for a theme registered.",
                "operationId": "updateThemeTemplates",
                "parameters": [
                    {
                        "name": "themeId",
                        "in": "path",
                        "description": "Generated themeId for the requested theme. The themeID can be obtained from the GET call. See the \"List all the themes\" API.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "configuration"
                                ],
                                "type": "object",
                                "properties": {
                                    "configuration": {
                                        "type": "string",
                                        "description": "Theme Registration configuration payload. String-encoded JSON Object.<br><br>Example:<br>{<br>\"name\": \"string\",<br>\"description\": \"string (optional)\"<br>}<br><br>"
                                    },
                                    "files": {
                                        "type": "string",
                                        "description": "Customized Theme .zip File",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The request was successful.",
                        "content": {}
                    },
                    "400": {
                        "description": "The request was malformed or might not be handled",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "The client was not authenticated",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The client was not authorized to perform the request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource could not be located",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "The HTTP method that is specified in the request is not supported by the resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "The resource cannot produce the representation that is specified in the Accept header of the request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "A conflict occurred updating this template.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "The resource cannot consume the representation that is specified in the Content-Type header of the request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An error occurred processing the request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    }
                },
                "x-publicAPI": "true"
            },
            "delete": {
                "tags": [
                    "Customization - Themes"
                ],
                "summary": "Delete a theme registration",
                "description": "Delete a theme registration and the associated template files. Checks whether the theme is used by any application before it is deleted.",
                "operationId": "deregisterTheme",
                "parameters": [
                    {
                        "name": "themeId",
                        "in": "path",
                        "description": "Generated themeId for the requested theme. The themeID can be obtained from the GET call. See the \"List all the themes\" API.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The request was successful.",
                        "content": {}
                    },
                    "400": {
                        "description": "The request was malformed or might not be handled",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "The client was not authenticated",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The client was not authorized to perform the request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource could not be located",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "The HTTP method that is specified in the request is not supported by the resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "The resource cannot produce the representation that is specified in the Accept header of the request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "A conflict occurred unregistering this template.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "The resource cannot consume the representation that is specified in the Content-Type header of the request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An error occurred processing the request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    }
                },
                "x-publicAPI": "true"
            }
        },
        "/v1.0/branding/themes/{themeId}/{templatePath}": {
            "get": {
                "tags": [
                    "Customization - Themes"
                ],
                "summary": "Download a specific template file from a theme",
                "description": "Downloads a single template file from a theme.",
                "operationId": "getTemplate_0",
                "parameters": [
                    {
                        "name": "themeId",
                        "in": "path",
                        "description": "Generated themeId for the requested theme. The themeID can be obtained from the GET call. See the \"List all the themes\" API.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "templatePath",
                        "in": "path",
                        "description": "Path to the template file as found in the theme .zip file. Example templatePath: authentication/saml/error/fr/routing_error.html",
                        "required": true,
                        "schema": {
                            "pattern": ".*",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The request was successful.",
                        "content": {}
                    },
                    "400": {
                        "description": "The request was malformed or might not be handled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "The client was not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The client was not authorized to perform the request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource could not be located",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "The HTTP method that is specified in the request is not supported by the resource",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "The resource cannot produce the representation that is specified in the Accept header of the request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "The resource cannot consume the representation that is specified in the Content-Type header of the request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An error occurred processing the request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    }
                },
                "x-publicAPI": "true"
            },
            "put": {
                "tags": [
                    "Customization - Themes"
                ],
                "summary": "Update a specific template file for a theme",
                "description": "Updates the contents of a single file from a themeId.",
                "operationId": "updateThemeTemplate",
                "parameters": [
                    {
                        "name": "themeId",
                        "in": "path",
                        "description": "Generated themeId for the requested theme. The themeID can be obtained from the GET call. See the \"List all the themes\" API.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "templatePath",
                        "in": "path",
                        "description": "Path to the template file as found in the theme .zip file. Example templatePath value: authentication/saml/error/default/routing_error.html",
                        "required": true,
                        "schema": {
                            "pattern": ".*",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "Translation Archive File",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The request was successful.",
                        "content": {}
                    },
                    "400": {
                        "description": "The request was malformed or might not be handled",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "The client was not authenticated",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The client was not authorized to perform the request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource could not be located",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "The HTTP method that is specified in the request is not supported by the resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "The resource cannot produce the representation that is specified in the Accept header of the request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "A conflict occurred updating this template.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "The resource cannot consume the representation that is specified in the Content-Type header of the request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An error occurred processing the request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    }
                },
                "x-publicAPI": "true"
            },
            "delete": {
                "tags": [
                    "Customization - Themes"
                ],
                "summary": "Deletes a customization for a specific template file in a theme",
                "description": "Deletes a single customized template file from a theme. The file is restored to the default version of the template file.",
                "operationId": "deleteSingleThemeFile",
                "parameters": [
                    {
                        "name": "themeId",
                        "in": "path",
                        "description": "Generated themeId for the requested theme. The themeID can be obtained from the GET call. See the \"List all the themes\" API.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "templatePath",
                        "in": "path",
                        "description": "Path to the template file as found in the theme .zip file. Example templatePath: authentication/saml/error/default/routing_error.html",
                        "required": true,
                        "schema": {
                            "pattern": ".*",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The request was successful.",
                        "content": {}
                    },
                    "400": {
                        "description": "The request was malformed or might not be handled",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "The client was not authenticated",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The client was not authorized to perform the request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The resource could not be located",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "The HTTP method that is specified in the request is not supported by the resource",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "The resource cannot produce the representation that is specified in the Accept header of the request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "A conflict occurred deregistering this template.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "The resource cannot consume the representation that is specified in the Content-Type header of the request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An error occurred processing the request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateError"
                                }
                            }
                        }
                    }
                },
                "x-publicAPI": "true"
            }
        },
        "/v2.0/Users": {
            "get": {
                "tags": [
                    "Users Management Version 2.0"
                ],
                "summary": "Retrieves a list of users that belong to a specified tenant and match the search filter criteria.",
                "description": "Entitlement required: readUserGroups (Read users and groups), or manageUserGroups (Manage users and groups), or manageAllUserGroups (Synchronize users and groups), or manageUserStandardGroups (Manage users and standard groups), or readUsers (Read all users but not group memberships), or readUsersGroupMembership (Read all users and group memberships), or readUsersStandardGroupMembership (Read all users and standard group memberships), or manageUsers (Manage all users), or manageUsersInStandardGroups (Manage users in standard groups).<br>Note: You only need one entitlement, but you can have more than one.<br><br>Searching, sorting, paging, and filtering are supported. A maximum of 2500 records are returned for a search query.<br><br>To improve performance, specify the list of the attributes that you want returned by using the attributes query parameter.<br><br>Search operators supported:<table><tr><td>eq</td><td>The attribute and operator values must be identical for a match.</td></tr><tr><td>ne</td><td>The attribute and operator values are not identical.</td></tr><tr><td>co</td><td>The entire operator value must be a substring of the attribute value for a match.  For performance reasons, use sw or ew operators instead of co.</td></tr><tr><td>sw</td><td>The entire operator value must be a substring of the attribute value, starting at the beginning of the attribute value.</td></tr><tr><td>ew</td><td>The entire operator value must be a substring of the attribute value, matching at the end of the attribute value.</td></tr><tr><td>pr</td><td>If the attribute has a value, there is a match.</td></tr><tr><td>npr</td><td>If the attribute does not have a value, there is a match.</td></tr><tr><td>gt</td><td>If the attribute value is greater than the operator value, there is a match.  The actual comparison is dependent on the attribute type.</td></tr><tr><td>ge</td><td>If the attribute value is greater than or equal to the operator value, there is a match.  The actual comparison is dependent on the attribute type.</td></tr><tr><td>lt</td><td>If the attribute value is less than the operator value, there is a match.  The actual comparison is dependent on the attribute type.</td></tr><tr><td>le</td><td>If the attribute value is less than or equal to the operator value, there is a match.  The actual comparison is dependent on the attribute type.</td></tr></table><br><br>Example search queries:<table><tr><td>filter=userName eq \"bob\"&attributes=userName</td></tr><tr><td>filter=name.familyName eq \"Marley\"&attributes=name</td></tr><tr><td>filter=meta.created ge \"2011-09-20T00:00:00Z\" and meta.created le \"2021-09-21T00:00:00Z\"&attributes=userName,meta.created,emails&sortBy=userName&count=2500</td></tr><tr><td>filter=urn:ietf:params:scim:schemas:extension:ibm:2.0:User:customAttributes.favoriteColor eq \"blue\"&attributes=userName,urn:ietf:params:scim:schemas:extension:ibm:2.0:User:customAttributes.favoriteColor&count=2500</td></tr><tr><td>filter=urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:department eq \"2A\"&attributes=userName,emails,urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:manager</td></tr><tr><td>filter=not (emails ew \"@example.com\")&attributes=userName,emails</td></tr><tr><td>filter=emails ew \"@example.com\" and (phoneNumbers eq \"15551212\" or phoneNumbers eq \"1(555)1212\")&attributes=userName,phoneNumbers,emails</td></tr><tr><td>Note: There are some special syntax for \"phoneNumbers\" to allow filtering using the type, such as GET /v2.0/Users?filter=phoneNumbers.work eq \"{value}\"&attributes=phoneNumbers.work</td></tr></table><br><br>For tenants that support large groups, additional feature are available.  They are:<table><tr><td>- Search for users in a specific group by using the \"memberOf\" SCIM attribute.  For example.  GET /v2.0/Users?filter=userName sw \"patel\" and memberOf eq \"{group ID}\"</td></tr><tr><td>- Restrict HelpDesk administrators to manage specific groups of users by using Admin Roles.</td></tr></table><br>To check whether the tenant supports large groups, run the GET /v2.0/SCIM/capabilities API.",
                "operationId": "getUsers",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "The SCIM compliant search filter. For example, userName eq \"john\". The filter should be no longer than 4096 characters in length.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "attributes",
                        "in": "query",
                        "description": "The list of attributes that are passed in as comma-separated values that are used when passing the result back to the caller. To improve performance, specify in the list only the attributes that you want returned. If no list is provided, the default action is to return all attributes.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Specifies the maximum number of query results per page. A negative value is interpreted as 0.  A value of 0 indicates that no resource results are to be returned, except for totalResults.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "startIndex",
                        "in": "query",
                        "description": "A 1-based index that indicates the start index that is used when the number of users is returned. A value less than 1 is interpreted as 1.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Sort the results by the specified criteria when the users are returned.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortOrder",
                        "in": "query",
                        "description": "The sorting order when the number of users is returned.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ascending",
                                "descending"
                            ]
                        }
                    },
                    {
                        "name": "hashed",
                        "in": "query",
                        "description": "The comma-separated list of attributes whose values are to be hashed.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fullText",
                        "in": "query",
                        "description": "A string that is searched for in the user records.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "includeGroups",
                        "in": "query",
                        "description": "Include group information in the response.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation was successful.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUsersResponseV2"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request was incorrect.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An internal server error occurred.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    },
                    "529": {
                        "description": "The request timed out.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    }
                },
                "x-publicAPI": "true"
            },
            "post": {
                "tags": [
                    "Users Management Version 2.0"
                ],
                "summary": "Creates a user in Cloud Directory.",
                "description": "Entitlement required: manageUserGroups (Manage users and groups), or manageAllUserGroups (Synchronize users and groups), or manageUserStandardGroups (Manage users and standard groups), or manageUsers (Manage all users), or manageUsersInStandardGroups (Manage users in standard groups). <br>Note: You only need one entitlement, but you can have more than one.<br><br>The users are created for a specific tenant that is specified in the request.  Users are either created to use Cloud Directory as an identity source or as a just-in-time provisioning sequence when the user is authenticated at a remote identity source such as an enterprise authentication.<br><br>By default, an email is sent with the password to the user that was created, unless its a federated user. Federated users do not get an email notification. The email templates for branding are at \"notifications/user_management/profile/{locale}/account_created_email.xml\" and \"notifications/user_management/profile/{locale}/account_created_email_with_no_password.xml\". Pass in the themeId query parameter to brand the email templates for notifications. To turn off email notifications, send the notifications option  \"urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification\": {\"notifyType\":\"NONE\"} in the payload.<br><br>If custom password intelligence warning is enabled and a password is provided that is listed in it, the 201 response includes the header 'isv-dictionary-policy' with the value: 'WARNLOCAL'.<br>If X-Force password intelligence warning is enabled and a password is provided that is listed in it, the 201 response includes the header 'isv-dictionary-policy' with the value: 'WARNGLOBAL'.<br>If custom password intelligence prevention is enabled and a password is provided that is listed in it, the 400 response can include the header 'isv-dictionary-policy' with the value: 'ENFORCELOCAL'. The corresponding error status is 'PWD_IN_DICTIONARY'.<br>If X-Force password intelligence prevention is enabled and a password is provided that is listed in it, the 400 response can include the header 'isv-dictionary-policy' with the value: 'ENFORCEGLOBAL'. The corresponding error status is 'PWD_IN_GLOBAL_DICTIONARY'.",
                "operationId": "createUser",
                "parameters": [
                    {
                        "name": "hashed",
                        "in": "query",
                        "description": "The comma-separated list of attributes whose values are to be hashed.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "themeId",
                        "in": "query",
                        "description": "The identifier of the theme that you want to apply.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "usershouldnotneedtoresetpassword",
                        "in": "header",
                        "description": "If set to true, the user is not required to change the password after login.<br>Only honored when the password element of UserV2 is set.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "description": "The user object that contains the attributes for the user that is to be created.",
                    "content": {
                        "application/scim+json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserV2"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponseV2"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request was incorrect.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "The user exists.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An internal server error occurred.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    }
                },
                "x-publicAPI": "true",
                "x-codegen-request-body-name": "body"
            }
        },
        "/v2.0/Users/{id}": {
            "get": {
                "tags": [
                    "Users Management Version 2.0"
                ],
                "summary": "Retrieves the details of a user in Cloud Directory for a tenant.",
                "description": "Entitlement required: readUserGroups (Read users and groups), or manageUserGroups (Manage users and groups), or manageAllUserGroups (Synchronize users and groups), or manageUserStandardGroups (Manage users and standard groups), or readUsers (Read all users but not group memberships), or readUsersGroupMembership (Read all users and group memberships), or readUsersStandardGroupMembership (Read all users and standard group memberships), or manageUsers (Manage all users), or manageUsersInStandardGroups (Manage users in standard groups).<br>Note: You only need one entitlement, but you can have more than one.<br><br>To improve performance, specify the list of the attributes that you want returned by using the attributes query parameter.<br><br>On Success, the returned response includes the user and group membership details. The group membership that is returned includes the group ID and displayName attributes.<br><br>The memberAttributes, memberCount, and memberStartIndex query parameters are currently ignored.",
                "operationId": "getUser_0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The identifier of the user whose details are being retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "attributes",
                        "in": "query",
                        "description": "The list of attributes that are passed in as comma-separated values that are used when passing the result back to the caller. To improve performance, specify in the list only the attributes that you want returned. If no list is provided, the default action is to return all attributes.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "memberAttributes",
                        "in": "query",
                        "description": "The list of group attributes that are passed in as comma separated values that are used when passing the result back to the caller. For example, the ID and displayName attributes.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "memberCount",
                        "in": "query",
                        "description": "Specifies the maximum number of query results per page. A negative value is interpreted as 0.  A value of 0 indicates that no member resource results are to be returned, except for totalResults.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "memberStartIndex",
                        "in": "query",
                        "description": "The starting index of the search.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation was successful.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponseV2"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request was incorrect.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An internal server error occurred.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    },
                    "529": {
                        "description": "The request timed out.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    }
                },
                "x-publicAPI": "true"
            },
            "put": {
                "tags": [
                    "Users Management Version 2.0"
                ],
                "summary": "Replaces the user's attributes in Cloud Directory.",
                "description": "Entitlement required: manageUserGroups (Manage users and groups), or manageAllUserGroups (Synchronize users and groups), or manageUserStandardGroups (Manage users and standard groups), or updateAnyUser (Update any user), or manageUsers (Manage all users), or manageUsersInStandardGroups (Manage users in standard groups).<br>Note: You only need one entitlement, but you can have more than one.<br><br> On Success, the return response contains the user and group membership details. The HTTP PUT method is used to replace the resource's attributes.  For example, clients that previously retrieved the entire resource and revised it, can replace the resource by using an HTTP PUT.<br><br>Only certain attributes for federated users can be modified unless you have the manageAllUserGroups entitlement.  The user's groups cannot be modified and are ignored in the payload. Group membership is managed by using the PUT /v2.0/Groups/{id} and PATCH /v2.0/Groups/{id} API.<br><br>By default, an email is sent to regular users that includes the changed attributes. Federated users do not get an email notification. The email template for branding is at \"notifications/user_management/profile/{locale}/user_profile_modified_email.xml\". Pass in the themeId query parameter to brand the email template for notifications. To turn off email notifications, send the notifications option  \"urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification\": {\"notifyType\":\"NONE\"} in the payload.<br><br>If custom password intelligence warning is enabled and a password is provided that is listed in it, the 200 response includes the header 'isv-dictionary-policy' with the value: 'WARNLOCAL'.<br>If X-Force password intelligence warning is enabled and a password is provided that is listed in it, the 200 response includes the header 'isv-dictionary-policy' with the value: 'WARNGLOBAL'.<br>If custom password intelligence prevention is enabled and a password is provided that is listed in it, the 400 response can include the header 'isv-dictionary-policy' with the value: 'ENFORCELOCAL'. The corresponding error status is 'PWD_IN_DICTIONARY'.<br>If X-Force password intelligence prevention is enabled and a password is provided that is listed in it, the 400 response can include the header 'isv-dictionary-policy' with the value: 'ENFORCEGLOBAL'. The corresponding error status is 'PWD_IN_GLOBAL_DICTIONARY'.",
                "operationId": "putUser_0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hashed",
                        "in": "query",
                        "description": "The comma separated list of attributes whose values are to be hashed.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "themeId",
                        "in": "query",
                        "description": "The identifier of the theme that you want to apply.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "usershouldnotneedtoresetpassword",
                        "in": "header",
                        "description": "If set to true for a password change, the user is not required to change the password after login.<br>Only honored when the password element of UserV2 is set.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "description": "The user object that contains attributes for the user that is to be modified.",
                    "content": {
                        "application/scim+json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserV2"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The operation was successful.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponseV2"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The request was incorrect.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "A conflict exists.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An internal server error occurred.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    }
                },
                "x-publicAPI": "true",
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "Users Management Version 2.0"
                ],
                "summary": "Deletes a user from a specified tenant in Cloud Directory.",
                "description": "Entitlement required: manageUserGroups (Manage users and groups), or manageAllUserGroups (Synchronize users and groups), or manageUserStandardGroups (Manage users and standard groups), or manageUsers (Manage all users), or manageUsersInStandardGroups (Manage users in standard groups). <br>Note: You only need one entitlement, but you can have more than one.<br><br>By default, an email is sent to regular users that the account was deleted. Federated users do not get an email notification. The email template for branding is at \"notifications/user_management/profile/{locale}/account_deleted_email.xml\". Pass in the themeId query parameter to brand the email template for notifications.<br><br>To turn off email notifications, send notifyType=NONE as a query parameter.",
                "operationId": "deleteUser_0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The identifier of the user that is being deleted.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "notifyType",
                        "in": "query",
                        "description": "An optional query parameter that denotes the notification type.  If not present, the EMAIL notification is used. Specify NONE if no notification to the user that their account has been deleted is required.",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "EMAIL",
                                "NONE"
                            ]
                        }
                    },
                    {
                        "name": "themeId",
                        "in": "query",
                        "description": "The identifier of the theme that you want to apply.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content.",
                        "content": {}
                    },
                    "400": {
                        "description": "The request was incorrect.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An internal server error occurred.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    }
                },
                "x-publicAPI": "true"
            },
            "patch": {
                "tags": [
                    "Users Management Version 2.0"
                ],
                "summary": "Modify a user's attributes in Cloud Directory.  It can be used to update one or more attributes.",
                "description": "Entitlement required: manageUserGroups (Manage users and groups), or manageAllUserGroups (Synchronize users and groups), or manageUserStandardGroups (Manage users and standard groups), or updateAnyUser (Update any user), or manageUsers (Manage all users), or manageUsersInStandardGroups (Manage users in standard groups). <br>Note: You only need one entitlement, but you can have more than one.<br><br>Only certain attributes for federated users can be modified unless you have the manageAllUserGroups entitlement.  The user's groups cannot be modified and are ignored in the payload. Group membership is managed by using the PUT /v2.0/Groups/{id} and PATCH /v2.0/Groups/{id} API.<br><br>By default, an email is sent to regular users that includes the changed attributes. Federated users do not get an email notification. The email template for branding is at \"notifications/user_management/profile/{locale}/user_profile_modified_email.xml\". Pass in the themeId query parameter to brand the email template for notifications. <br><br>The following is an example of a patch request that adds a title, replaces the formatted name, and removes any custom attributes which name contains \"customA\" from the user. Notice also that the example shows how you can specify the notifyType if you want to.<br>NotifyType is an optional attribute that denotes the notification type.  If not present, the EMAIL notification is used.Specify NONE if no notification is required.<br><br> `{ \"schemas\":[\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\"Operations\":  [    {      \"op\":\"add\",      \"path\":\"title\",      \"value\":\"Vice President\"    },    {      \"op\":\"replace\",      \"path\":\"name.formatted\",      \"value\":\"James Smith-Miller\"    },    {      \"op\":\"remove\",      \"path\":\"urn:ietf:params:scim:schemas:extension:ibm:2.0:User:customAttributes[name co \\\"customA\\\"]\"    },    {      \"op\": \"add\",      \"path\": \"urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification:notifyType\",      \"value\": \"EMAIL\"    }  ]}` <br><br>If custom password intelligence warning is enabled and a password is provided that is listed in it, the 204 response includes the header 'isv-dictionary-policy' with the value: 'WARNLOCAL'.<br>If X-Force password intelligence warning is enabled and a password is provided that is listed in it, the 204 response includes the header 'isv-dictionary-policy' with the value: 'WARNGLOBAL'.<br>If custom password intelligence prevention is enabled and a password is provided that is listed in it, the 400 response can include the header 'isv-dictionary-policy' with the value: 'ENFORCELOCAL'. The corresponding error status is 'PWD_IN_DICTIONARY'.<br>If X-Force password intelligence prevention is enabled and a password is provided that is listed in it, the 400 response can include the header 'isv-dictionary-policy' with the value: 'ENFORCEGLOBAL'. The corresponding error status is 'PWD_IN_GLOBAL_DICTIONARY'.",
                "operationId": "patchUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the user to be patched.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "themeId",
                        "in": "query",
                        "description": "The identifier of the theme that you want to apply.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "usershouldnotneedtoresetpassword",
                        "in": "header",
                        "description": "If set to true for a password change, the user is not required to change the password after login.",
                        "schema": {
                            "type": "string",
                            "default": "false",
                            "enum": [
                                "true",
                                "false"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "description": "The body for the user's patch operation.",
                    "content": {
                        "application/scim+json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No Content.",
                        "content": {}
                    },
                    "400": {
                        "description": "The request was incorrect.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "A conflict exists.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An internal server error occurred.",
                        "content": {
                            "application/scim+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalErrorMessage1"
                                }
                            }
                        }
                    }
                },
                "x-publicAPI": "true",
                "x-codegen-request-body-name": "body"
            }
        }
    },
    "components": {
        "schemas": {
            "ErrorResponseMessage": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "errorCode": {
                        "type": "string"
                    }
                }
            },
            "DetailProfile": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "source": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    },
                    "createdOn": {
                        "type": "string"
                    },
                    "draftExists": {
                        "type": "boolean"
                    },
                    "targetEndpoint": {
                        "type": "string"
                    },
                    "templateId": {
                        "type": "string"
                    },
                    "attributeList": {
                        "type": "object",
                        "properties": {
                            "attributes": {
                                "type": "array",
                                "description": "Attribute object.",
                                "items": {
                                    "$ref": "#/components/schemas/Attribute"
                                }
                            },
                            "targetEndpoint": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "Attribute": {
                "required": [
                    "schema"
                ],
                "type": "object",
                "properties": {
                    "schema": {
                        "type": "string"
                    },
                    "dataType": {
                        "type": "string"
                    },
                    "mutability": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "multivalued": {
                        "type": "boolean"
                    },
                    "attributeName": {
                        "type": "string"
                    },
                    "customAttribute": {
                        "type": "boolean"
                    },
                    "attributeMapping": {
                        "type": "string"
                    }
                }
            },
            "AttributeForProfile": {
                "type": "object",
                "properties": {
                    "attributeName": {
                        "type": "string"
                    },
                    "defaultValue": {
                        "type": "string"
                    },
                    "description": {
                        "type": "object",
                        "properties": {
                            "textKey": {
                                "type": "string"
                            }
                        }
                    },
                    "displayName": {
                        "type": "object",
                        "properties": {
                            "textKey": {
                                "type": "string"
                            }
                        }
                    },
                    "elementType": {
                        "type": "string"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "readonly": {
                        "type": "boolean"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "scope": {
                        "type": "string"
                    },
                    "valueType": {
                        "type": "string"
                    }
                }
            },
            "CreateProfileResponseData": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Profile ID"
                    },
                    "attr_list": {
                        "type": "object",
                        "properties": {
                            "targetEndpoint": {
                                "type": "string"
                            },
                            "attributes": {
                                "type": "array",
                                "description": "Attribute object.",
                                "items": {
                                    "$ref": "#/components/schemas/CreateDiscoverProfileAttributeResponseData"
                                }
                            }
                        }
                    }
                }
            },
            "CreateProfileBodyData": {
                "required": [
                    "description",
                    "name",
                    "targetEndpoint"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Unique Name for the draft"
                    },
                    "draftExists": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "source": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    },
                    "targetEndpoint": {
                        "type": "string",
                        "description": "Name of the target like box,salesforce."
                    },
                    "attributeList": {
                        "type": "array",
                        "description": "Attribute object.",
                        "items": {
                            "$ref": "#/components/schemas/CreateProfileAttributeData"
                        }
                    }
                }
            },
            "CreateProfileBodyDataForPost": {
                "required": [
                    "name",
                    "targetEndpoint"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Unique Name for the draft"
                    },
                    "targetEndpoint": {
                        "type": "string",
                        "description": "Name of the target like box,salesforce."
                    },
                    "description": {
                        "type": "string"
                    },
                    "attributeList": {
                        "type": "array",
                        "description": "Attribute object.",
                        "items": {
                            "$ref": "#/components/schemas/CreateProfileAttributeDataForPost"
                        }
                    }
                }
            },
            "CreateDiscoverProfileAttributeResponseData": {
                "type": "object",
                "properties": {
                    "schema": {
                        "type": "string"
                    },
                    "attributeName": {
                        "type": "string"
                    },
                    "attributeMapping": {
                        "type": "string"
                    },
                    "dataType": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "mutability": {
                        "type": "string"
                    },
                    "multivalued": {
                        "type": "boolean"
                    },
                    "customAttribute": {
                        "type": "boolean"
                    }
                }
            },
            "CreateProfileAttributeData": {
                "type": "object",
                "properties": {
                    "attributeId": {
                        "type": "string"
                    },
                    "attributeMapping": {
                        "type": "string"
                    },
                    "attributeName": {
                        "type": "string"
                    },
                    "mutability": {
                        "type": "string"
                    },
                    "customAttribute": {
                        "type": "boolean"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "uniqueness": {
                        "type": "string"
                    },
                    "dataType": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "multivalued": {
                        "type": "boolean"
                    },
                    "targetAttributeName": {
                        "type": "string"
                    }
                }
            },
            "CreateProfileAttributeDataForPost": {
                "type": "object",
                "properties": {
                    "attributeId": {
                        "type": "string"
                    },
                    "attributeMapping": {
                        "type": "string"
                    },
                    "mutability": {
                        "type": "string"
                    }
                }
            },
            "GetProfileListResponse": {
                "required": [
                    "totalCount"
                ],
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer",
                        "description": "Number of pages to fetch.",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Total number of profiles to return in each page.",
                        "format": "int32"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Number of total profiles.",
                        "format": "int32"
                    },
                    "profiles": {
                        "type": "array",
                        "description": "Profile object.",
                        "items": {
                            "$ref": "#/components/schemas/Profile"
                        }
                    }
                }
            },
            "Profile": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "draftExists": {
                        "type": "boolean"
                    },
                    "templateId": {
                        "type": "string"
                    },
                    "createdOn": {
                        "type": "string"
                    },
                    "lastModified": {
                        "type": "string"
                    },
                    "targetEndpoint": {
                        "type": "string"
                    },
                    "source": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    }
                }
            },
            "GetProfileListForTemplateResponse": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/GetProfileListForTemplateResponseObj"
                }
            },
            "GetProfileListForTemplateResponseObj": {
                "required": [
                    "custom",
                    "displayName",
                    "profileId",
                    "source"
                ],
                "type": "object",
                "properties": {
                    "profileId": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "custom": {
                        "type": "boolean"
                    },
                    "source": {
                        "type": "string"
                    }
                }
            },
            "GetWebUiTemplateResponse": {
                "required": [
                    "accountLifeCycle",
                    "adapterInfo"
                ],
                "type": "object",
                "properties": {
                    "adapterInfo": {
                        "$ref": "#/components/schemas/AdapterInfoWebUiTemplate"
                    },
                    "accountLifeCycle": {
                        "$ref": "#/components/schemas/AccountLifeCycleWebUiTemplate"
                    }
                }
            },
            "ProfileAttributeUsageResponse": {
                "type": "object",
                "properties": {
                    "attributeid": {
                        "type": "string"
                    },
                    "tenant_id": {
                        "type": "string"
                    },
                    "profile_id": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    },
                    "targetEndpoint": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "GetProfileAttributeUsageResponse": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ProfileAttributeUsageResponse"
                }
            },
            "AdapterInfoWebUiTemplate": {
                "required": [
                    "description",
                    "endpointName",
                    "profileName",
                    "providerType",
                    "templateId"
                ],
                "type": "object",
                "properties": {
                    "templateId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "profileName": {
                        "type": "string"
                    },
                    "endpointName": {
                        "type": "string"
                    },
                    "providerType": {
                        "type": "string"
                    }
                }
            },
            "AccountLifeCycleWebUiTemplate": {
                "required": [
                    "ResourceAPIAttributes",
                    "attributeSourcesInfo",
                    "targetDetailSections"
                ],
                "type": "object",
                "properties": {
                    "attributeSourcesInfo": {
                        "$ref": "#/components/schemas/AttrSourceInfoWebUiTemplate"
                    },
                    "targetDetailSections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TargetDetailWebUiTemplate"
                        }
                    },
                    "ResourceAPIAttributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttributeInfoWebUiTemplate"
                        }
                    }
                }
            },
            "AttrSourceInfoWebUiTemplate": {
                "required": [
                    "sourceIdField",
                    "url"
                ],
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string"
                    },
                    "sourceIdField": {
                        "type": "string"
                    }
                }
            },
            "TargetDetailWebUiTemplate": {
                "required": [
                    "attributes",
                    "displayName"
                ],
                "type": "object",
                "properties": {
                    "attributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttributeForProfile"
                        }
                    },
                    "displayName": {
                        "type": "object",
                        "properties": {
                            "textKey": {
                                "type": "string"
                            }
                        }
                    },
                    "description": {
                        "type": "object",
                        "properties": {
                            "textKey": {
                                "type": "string"
                            }
                        }
                    },
                    "sectionSequenceNumber": {
                        "type": "integer"
                    }
                }
            },
            "AttributeInfoWebUiTemplate": {
                "required": [
                    "attributeName",
                    "defaultSource",
                    "displayName",
                    "order",
                    "outboundTracking",
                    "readOnly",
                    "required",
                    "valueType"
                ],
                "type": "object",
                "properties": {
                    "order": {
                        "type": "string"
                    },
                    "readOnly": {
                        "type": "boolean"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "valueType": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "attributeName": {
                        "type": "string"
                    },
                    "defaultSource": {
                        "type": "integer"
                    },
                    "outboundTracking": {
                        "type": "boolean"
                    }
                }
            },
            "GetProfileUpdateResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                }
            },
            "CreateOnpremAgentConfiguration": {
                "required": [
                    "description",
                    "heartbeat",
                    "modules",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the agent configuration",
                        "example": "Authentication Agent"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the agent configuration",
                        "example": "For authenticating against the on premise LDAP server"
                    },
                    "heartbeat": {
                        "minimum": 120,
                        "type": "integer",
                        "description": "How often the agent should emit a heartbeat",
                        "format": "int32",
                        "example": 120
                    },
                    "authnCacheTimeout": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Time in minutes to cache authentications. Default is no caching",
                        "format": "int32",
                        "example": 0
                    },
                    "certLabel": {
                        "type": "string",
                        "description": "The certificate label used to encrypt modules data, default certificate used if not supplied",
                        "example": "personalcert"
                    },
                    "references": {
                        "type": "array",
                        "description": "The entities referenced by this configuration.",
                        "items": {
                            "$ref": "#/components/schemas/OnpremAgentConfigReference"
                        }
                    },
                    "purpose": {
                        "type": "string",
                        "description": "The purpose of the agent configuration",
                        "example": "LDAPAUTH",
                        "enum": [
                            "LDAPAUTH",
                            "PROV",
                            "CERTIFICATION",
                            "EXTERNAL",
                            "AUTHN",
                            "EXTAUTHN"
                        ]
                    },
                    "modules": {
                        "type": "array",
                        "description": "The associated modules with the agent configuration",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {}
                            }
                        }
                    }
                },
                "description": "The creation data of an agent configuration."
            },
            "OnpremAgentConfiguration": {
                "required": [
                    "apiClients",
                    "description",
                    "heartbeat",
                    "modules",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the agent configuration",
                        "readOnly": true,
                        "example": "bd45bba8-a1d4-4de2-bc80-be2855589363"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the agent configuration",
                        "example": "Authentication Agent"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the agent configuration",
                        "example": "For authenticating against the on premise LDAP server"
                    },
                    "apiClients": {
                        "type": "array",
                        "description": "The list of api clients which are permitted to access this configuration",
                        "items": {
                            "type": "string"
                        }
                    },
                    "heartbeat": {
                        "minimum": 120,
                        "type": "integer",
                        "description": "How often the agent should emit a heartbeat",
                        "format": "int32",
                        "example": 120
                    },
                    "authnCacheTimeout": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Time in minutes to cache authentications. Default is no caching",
                        "format": "int32",
                        "example": 0
                    },
                    "certLabel": {
                        "type": "string",
                        "description": "The certificate label used to encrypt modules data, default certificate used if not supplied",
                        "example": "personalcert"
                    },
                    "references": {
                        "type": "array",
                        "description": "The entities referenced by this configuration.",
                        "items": {
                            "$ref": "#/components/schemas/OnpremAgentConfigReference"
                        }
                    },
                    "purpose": {
                        "type": "string",
                        "description": "The purpose of the agent configuration",
                        "example": "LDAPAUTH",
                        "enum": [
                            "LDAPAUTH",
                            "PROV",
                            "CERTIFICATION",
                            "EXTERNAL",
                            "AUTHN",
                            "EXTAUTHN"
                        ]
                    },
                    "modules": {
                        "type": "array",
                        "description": "The associated modules with the agent configuration",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {}
                            }
                        }
                    }
                },
                "description": "The agent configuration."
            },
            "OnpremAgentCorruptConfiguration": {
                "required": [
                    "apiClients",
                    "description",
                    "heartbeat",
                    "modules",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the agent configuration",
                        "readOnly": true,
                        "example": "bd45bba8-a1d4-4de2-bc80-be2855589363"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the agent configuration",
                        "example": "Authentication Agent"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the agent configuration",
                        "example": "For authenticating against the on premise LDAP server"
                    },
                    "apiClients": {
                        "type": "array",
                        "description": "The list of api clients which are permitted to access this configuration",
                        "items": {
                            "type": "string"
                        }
                    },
                    "heartbeat": {
                        "minimum": 120,
                        "type": "integer",
                        "description": "How often the agent should emit a heartbeat",
                        "format": "int32",
                        "example": 120
                    },
                    "authnCacheTimeout": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Time in minutes to cache authentications. Default is no caching",
                        "format": "int32",
                        "example": 0
                    },
                    "certLabel": {
                        "type": "string",
                        "description": "The certificate label used to encrypt modules data, default certificate used if not supplied",
                        "example": "personalcert"
                    },
                    "references": {
                        "type": "array",
                        "description": "The entities referenced by this configuration.",
                        "items": {
                            "$ref": "#/components/schemas/OnpremAgentConfigReference"
                        }
                    },
                    "purpose": {
                        "type": "string",
                        "description": "The purpose of the agent configuration",
                        "example": "LDAPAUTH",
                        "enum": [
                            "LDAPAUTH",
                            "PROV",
                            "CERTIFICATION",
                            "EXTERNAL",
                            "AUTHN",
                            "EXTAUTHN"
                        ]
                    },
                    "modules": {
                        "$ref": "#/components/schemas/OnpremAgentEncryptedModules"
                    }
                },
                "description": "The corrupt agent configuration."
            },
            "HealthStatus": {
                "required": [
                    "components",
                    "status",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The overall health status of the evaluated components",
                        "example": "good"
                    },
                    "components": {
                        "type": "array",
                        "description": "A list of evaluated components",
                        "items": {
                            "$ref": "#/components/schemas/Component_1"
                        }
                    },
                    "time": {
                        "type": "string",
                        "description": "The overall time that was taken to evaluate the health status of the components",
                        "example": "10ms"
                    }
                },
                "description": "The overall health status of the evaluated components."
            },
            "Forbidden": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "readOnly": true,
                        "example": "CSIXX1234X"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message",
                        "readOnly": true,
                        "example": "The access token included in the request is not valid"
                    }
                },
                "description": "The message response to the request."
            },
            "BadRequest": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "readOnly": true,
                        "example": "CSIXX1234X"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message",
                        "readOnly": true,
                        "example": "The request cannot be processed because the request body contains improperly structured JSON"
                    }
                },
                "description": "The message response to the request."
            },
            "OnpremAgentEncryptedModules": {
                "required": [
                    "cb64u",
                    "ivb64u",
                    "kwa",
                    "pea",
                    "wkb64u"
                ],
                "type": "object",
                "properties": {
                    "pea": {
                        "type": "string",
                        "description": "The case-insensitive payload symmetric encryption algorithm",
                        "readOnly": true,
                        "example": "AES/CBC/PKCS5PADDING"
                    },
                    "kwa": {
                        "type": "string",
                        "description": "The case-insensitive asymmetric encryption algorithm",
                        "readOnly": true,
                        "example": "RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING"
                    },
                    "cb64u": {
                        "type": "string",
                        "description": "The Base 64 URL encoded JCA/JCE 'combined' crypttext/ciphertext",
                        "readOnly": true,
                        "example": "J3WNkT2OvIyGO9IYQ-FAulLVef5h6X9RIT7qn3KHOhCIXl8g7kK8nB3nc0ATMO2nK3Gfy3ZCrGZTkz8RaiYvGKa3..."
                    },
                    "wkb64u": {
                        "type": "string",
                        "description": "The Base 64 URL encoded 'wrapped' payload encryption secret key",
                        "readOnly": true,
                        "example": "IcvO5Zf7e-jelWpPrJJ-kGKMS49KomhMKFr19QCw1YB49Z2eUKtndhm5pSHnvHIpjiEM2XBTIPYzch8le8-11ZG4..."
                    },
                    "ivb64u": {
                        "type": "string",
                        "description": "The Base 64 URL encoded payload symmetric encryption IV data",
                        "readOnly": true,
                        "example": "mLPpSBOzetiQHbIA3HJd8w"
                    }
                },
                "description": "The encrypted modules."
            },
            "OnpremAgentConfigReference": {
                "required": [
                    "id",
                    "ref",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the resource that the agent configuration is referencing",
                        "readOnly": true,
                        "example": "bd45bba8-a1d4-4de2-bc80-be2855589363"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of resource that the agent configuration is referencing",
                        "readOnly": true,
                        "example": "/v1.0/identitySources/bd45bba8-a1d4-4de2-bc80-be2855589363"
                    },
                    "ref": {
                        "type": "string",
                        "description": "The type of reference that the agent configuration is referencing",
                        "readOnly": true,
                        "example": "identitysources"
                    }
                },
                "description": "The entity reference details."
            },
            "Unauthorized": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "readOnly": true,
                        "example": "CSIXX1234X"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message",
                        "readOnly": true,
                        "example": "The unauthenticated user does not have the permissions to perform the requested operation"
                    }
                },
                "description": "The message response to the request."
            },
            "OnpremAgentApiCred": {
                "required": [
                    "clientId",
                    "clientSecret"
                ],
                "type": "object",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "The unique identifier of the client",
                        "readOnly": true,
                        "example": "bd45bba8-a1d4-4de2-bc80-be2855589363"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "The client secret.",
                        "readOnly": true,
                        "example": "FDzG0Rmrta"
                    }
                },
                "description": "The API credential."
            },
            "NotAcceptable": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "readOnly": true,
                        "example": "CSIXX1234X"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message.",
                        "readOnly": true,
                        "example": "The server cannot produce a response matching the list of acceptable values"
                    }
                },
                "description": "The message response to the request."
            },
            "Component": {
                "required": [
                    "details",
                    "name",
                    "status",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the evaluated component",
                        "example": "ZooKeeper"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the evaluated component",
                        "example": "good"
                    },
                    "details": {
                        "type": "string",
                        "description": "A descriptive message about the health status",
                        "example": "Successfully connected to ZooKeeper"
                    },
                    "time": {
                        "type": "string",
                        "description": "The time that was taken to evaluate the health status of the component",
                        "example": "4ms"
                    }
                },
                "description": "The health status of a component."
            },
            "NotFound": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "readOnly": true,
                        "example": "CSIXX1234X"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message",
                        "readOnly": true,
                        "example": "The resource cannot be found"
                    }
                },
                "description": "The message response to the request."
            },
            "Exception": {
                "type": "object",
                "properties": {
                    "cause": {
                        "$ref": "#/components/schemas/Throwable"
                    },
                    "stackTrace": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StackTraceElement"
                        }
                    },
                    "message": {
                        "type": "string"
                    },
                    "localizedMessage": {
                        "type": "string"
                    },
                    "suppressed": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Throwable"
                        }
                    }
                }
            },
            "LatencySample": {
                "required": [
                    "latency",
                    "operation",
                    "timestamp"
                ],
                "type": "object",
                "properties": {
                    "timestamp": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "latency": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "operation": {
                        "type": "string"
                    },
                    "error": {
                        "$ref": "#/components/schemas/Exception"
                    }
                },
                "xml": {
                    "name": "sample"
                }
            },
            "ServiceStatistics": {
                "required": [
                    "averageLatency",
                    "serviceStarted"
                ],
                "type": "object",
                "properties": {
                    "averageLatency": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "serviceStarted": {
                        "type": "string"
                    }
                }
            },
            "ServiceStatus": {
                "required": [
                    "details",
                    "name",
                    "started",
                    "statistics",
                    "status",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "details": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "time": {
                        "type": "string"
                    },
                    "certExpiration": {
                        "type": "string"
                    },
                    "statistics": {
                        "$ref": "#/components/schemas/ServiceStatistics"
                    },
                    "name": {
                        "type": "string"
                    },
                    "started": {
                        "type": "string"
                    },
                    "samples": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LatencySample"
                        }
                    }
                },
                "xml": {
                    "name": "component"
                }
            },
            "StackTraceElement": {
                "type": "object",
                "properties": {
                    "methodName": {
                        "type": "string"
                    },
                    "fileName": {
                        "type": "string"
                    },
                    "lineNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "className": {
                        "type": "string"
                    },
                    "nativeMethod": {
                        "type": "boolean"
                    }
                }
            },
            "Throwable": {
                "type": "object",
                "properties": {
                    "cause": {
                        "$ref": "#/components/schemas/Throwable"
                    },
                    "stackTrace": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StackTraceElement"
                        }
                    },
                    "message": {
                        "type": "string"
                    },
                    "localizedMessage": {
                        "type": "string"
                    },
                    "suppressed": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Throwable"
                        }
                    }
                }
            },
            "HealthCheckStatus": {
                "required": [
                    "components",
                    "status",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "components": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceStatus"
                        }
                    },
                    "time": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "healthcheckstatus"
                }
            },
            "BulkResponse": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIAB3702E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "Requester locale specific descriptive message.",
                        "example": "The retrieval of the resource failed."
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BulkResult"
                        }
                    }
                },
                "xml": {
                    "name": "error"
                }
            },
            "BulkResult": {
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "enum": [
                            "remove"
                        ]
                    },
                    "path": {
                        "type": "string",
                        "example": "/00000000-1111-2222-3333-44444444"
                    },
                    "result": {
                        "type": "string",
                        "enum": [
                            "success",
                            "failure"
                        ]
                    },
                    "error": {
                        "type": "string",
                        "description": "this field will not be included if the operation was successful"
                    }
                }
            },
            "ErrorResponse": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIAB3702E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "Requester locale specific descriptive message.",
                        "example": "The retrieval of the resource failed."
                    }
                },
                "xml": {
                    "name": "error"
                }
            },
            "BulkOperation": {
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "example": "remove"
                    },
                    "path": {
                        "type": "string",
                        "example": "/00000000-1111-2222-3333-44444444"
                    }
                }
            },
            "APIClientAdditionalConfig": {
                "type": "object",
                "properties": {
                    "clientAuthMethod": {
                        "type": "string",
                        "description": "the authentication method type",
                        "example": "default"
                    },
                    "validateClientAssertionJti": {
                        "type": "boolean",
                        "description": "a Boolean value that indicates whether or not to validate the client assertion JTI",
                        "example": true
                    },
                    "allowedClientAssertionVerificationKeys": {
                        "type": "array",
                        "description": "a list of the allowed client assertion verification keys",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "APIClientConfig": {
                "required": [
                    "clientName",
                    "entitlements"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "the unique id for the client",
                        "readOnly": true,
                        "example": "00000000-1111-2222-3333-44444444"
                    },
                    "clientName": {
                        "type": "string",
                        "description": "the friendly name of the client",
                        "example": "Demo Client"
                    },
                    "entitlements": {
                        "type": "array",
                        "description": "the list of entitlements assigned to the client",
                        "items": {
                            "type": "string"
                        }
                    },
                    "clientId": {
                        "type": "string",
                        "description": "the generated client id for authorization",
                        "example": "demoClient"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "the generated client secret for authorization",
                        "example": "demoSecret"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "whether or not the client can be used to generate tokens",
                        "example": true
                    },
                    "overrideSettings": {
                        "$ref": "#/components/schemas/APIClientOverrideSettings"
                    },
                    "description": {
                        "type": "string",
                        "description": "a description of the client",
                        "example": "Client used for demonstrations"
                    },
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "additional properties for the client"
                    },
                    "ipFilterOp": {
                        "type": "string",
                        "description": "the operation of the ip filter. The default setting is null, which means that the ip filter is disabled",
                        "example": "allow",
                        "enum": [
                            "allow",
                            "deny"
                        ]
                    },
                    "ipFilters": {
                        "type": "array",
                        "description": "the list of ips",
                        "items": {
                            "type": "string"
                        }
                    },
                    "jwkUri": {
                        "type": "string",
                        "description": "the JSON web key URI endpoint",
                        "example": "https://tenant-name/oidc/endpoint/default/jwks"
                    },
                    "additionalConfig": {
                        "$ref": "#/components/schemas/APIClientAdditionalConfig"
                    }
                }
            },
            "APIClientConfigPaginatedResponseContainer": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "total": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "apiClients": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIClientConfig"
                        }
                    }
                }
            },
            "APIClientOverrideSettings": {
                "type": "object",
                "properties": {
                    "restrictScopes": {
                        "type": "boolean",
                        "description": "boolean value that determines whether or not to restrict scopes",
                        "example": true
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIClientScopes"
                        }
                    }
                }
            },
            "APIClientScopes": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "the name of the scope",
                        "example": "scope"
                    },
                    "description": {
                        "type": "string",
                        "description": "a description of the scope",
                        "example": "scope description"
                    }
                }
            },
            "APIClientConfigRequest": {
                "required": [
                    "clientName",
                    "enabled",
                    "entitlements"
                ],
                "type": "object",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "the unique identifier of the client",
                        "example": "ffa71178-a945-4727-bef0-e10f7ebc9554"
                    },
                    "clientName": {
                        "type": "string",
                        "description": "the friendly name of the client",
                        "example": "Demo Client"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "the generated client secret for authorization. If unspecified, a random client secret is generated",
                        "example": "demoSecret"
                    },
                    "entitlements": {
                        "type": "array",
                        "description": "the list of entitlements assigned to the client",
                        "items": {
                            "type": "string"
                        }
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "whether or not the client can be used to generate tokens",
                        "example": true
                    },
                    "overrideSettings": {
                        "$ref": "#/components/schemas/APIClientOverrideSettings"
                    },
                    "description": {
                        "type": "string",
                        "description": "a description of the client",
                        "example": "Client used for demonstrations"
                    },
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "additional properties for the client"
                    },
                    "ipFilterOp": {
                        "type": "string",
                        "description": "the operation of the ip filter. The default setting is null, which means that the ip filter is disabled",
                        "example": "allow",
                        "enum": [
                            "allow",
                            "deny"
                        ]
                    },
                    "ipFilters": {
                        "type": "array",
                        "description": "the list of ips",
                        "items": {
                            "type": "string"
                        }
                    },
                    "jwkUri": {
                        "type": "string",
                        "description": "the JSON web key URI endpoint",
                        "example": "https://tenant-name/oidc/endpoint/default/jwks"
                    },
                    "additionalConfig": {
                        "$ref": "#/components/schemas/APIClientAdditionalConfig"
                    }
                }
            },
            "Entitlements": {
                "required": [
                    "entitlements"
                ],
                "type": "object",
                "properties": {
                    "entitlements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Entitlment"
                        }
                    }
                },
                "xml": {
                    "name": "entitlements"
                }
            },
            "Entitlment": {
                "required": [
                    "entitlements",
                    "groupUids",
                    "identifier",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "identifier": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "[userid",
                            "apikey",
                            "serviceid",
                            "clientid",
                            "group]"
                        ]
                    },
                    "entitlements": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "groupUids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Object representing a single entitlement",
                "xml": {
                    "name": "entitlement"
                }
            },
            "IntrospectResponse": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean"
                    },
                    "clientId": {
                        "type": "string"
                    },
                    "grantId": {
                        "type": "string"
                    },
                    "grantType": {
                        "type": "string"
                    },
                    "realmName": {
                        "type": "string"
                    },
                    "scope": {
                        "type": "string"
                    },
                    "sub": {
                        "type": "string"
                    },
                    "tokenType": {
                        "type": "string"
                    },
                    "uniqueSecurityName": {
                        "type": "string"
                    },
                    "entitlementsJwt": {
                        "type": "string"
                    }
                }
            },
            "Certificate": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "encoded": {
                        "type": "array",
                        "items": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                        }
                    },
                    "publicKey": {
                        "$ref": "#/components/schemas/PublicKey"
                    }
                }
            },
            "PublicKey": {
                "type": "object",
                "properties": {
                    "algorithm": {
                        "type": "string"
                    },
                    "format": {
                        "type": "string"
                    },
                    "encoded": {
                        "type": "array",
                        "items": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                        }
                    }
                }
            },
            "Role": {
                "required": [
                    "allowIndividualEntitlements",
                    "entitlements",
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "entitlements": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RoleEntitlement"
                        }
                    },
                    "allowIndividualEntitlements": {
                        "type": "boolean"
                    }
                },
                "description": "Object representing a single role",
                "xml": {
                    "name": "role"
                }
            },
            "RoleEntitlement": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    }
                }
            },
            "RuntimeEntitlements": {
                "type": "object",
                "properties": {
                    "entitlements": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "SubscriptionResponse": {
                "required": [
                    "feedType",
                    "feedURL"
                ],
                "type": "object",
                "properties": {
                    "feedType": {
                        "type": "string",
                        "description": "Type of the subscription feed"
                    },
                    "feedURL": {
                        "type": "string",
                        "description": "URL of the subscription feed"
                    }
                }
            },
            "GeneratedDoc": {
                "type": "string",
                "format": "byte"
            },
            "Plans": {
                "required": [
                    "default"
                ],
                "type": "object",
                "properties": {
                    "default": {
                        "$ref": "#/components/schemas/DefaultPlan"
                    }
                }
            },
            "DefaultPlan": {
                "required": [
                    "title"
                ],
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "The title of the plan",
                        "default": "Default Plan"
                    },
                    "rate-limit": {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "string",
                                "default": "100/hour"
                            },
                            "hard-limit": {
                                "type": "boolean",
                                "default": false
                            }
                        }
                    },
                    "approval": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "DeploymentVisibility": {
                "required": [
                    "subscribe",
                    "view"
                ],
                "type": "object",
                "properties": {
                    "view": {
                        "$ref": "#/components/schemas/View"
                    },
                    "subscribe": {
                        "$ref": "#/components/schemas/Subscribe"
                    }
                }
            },
            "View": {
                "required": [
                    "enabled",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Is the plan visible."
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "public",
                            "custom",
                            "authenticated"
                        ]
                    },
                    "tags": {
                        "type": "array",
                        "description": "When view is custom: The Communities allowed to view this plan.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "orgs": {
                        "type": "array",
                        "description": "When view is custom: The Organizations allowed to view this plan.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "Info": {
                "required": [
                    "name",
                    "title",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the product",
                        "default": "pushed-product"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the product",
                        "default": "A Product that encapsulates Liberty APIs"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the product",
                        "default": "1.0.0"
                    }
                }
            },
            "Product": {
                "type": "object",
                "properties": {
                    "product": {
                        "type": "string",
                        "description": "Product document version",
                        "default": "1.0.0"
                    },
                    "info": {
                        "$ref": "#/components/schemas/Info"
                    },
                    "visibility": {
                        "$ref": "#/components/schemas/DeploymentVisibility"
                    },
                    "apis": {
                        "type": "object",
                        "properties": {
                            "liberty": {
                                "$ref": "#/components/schemas/ProductApi"
                            }
                        },
                        "description": "Apis included in the product"
                    },
                    "plans": {
                        "$ref": "#/components/schemas/Plans"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdBy": {
                        "type": "string"
                    }
                }
            },
            "Subscribe": {
                "required": [
                    "enabled",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Is the plan visible."
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "authenticated",
                            "custom"
                        ]
                    },
                    "tags": {
                        "type": "array",
                        "description": "When subscribe is custom: The Communities allowed to subscribe.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "orgs": {
                        "type": "array",
                        "description": "When subscribe is custom: The Organizations allowed to subscribe.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ProductApi": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "A name:version pair of the Liberty API",
                        "default": "liberty-api:1.0.0"
                    }
                },
                "description": "Product API"
            },
            "PlanPackage": {
                "type": "object",
                "properties": {
                    "productName": {
                        "type": "string"
                    },
                    "productVersion": {
                        "type": "string"
                    },
                    "document": {
                        "$ref": "#/components/schemas/ConfigDataObject"
                    },
                    "productVisibilityMetadata": {
                        "$ref": "#/components/schemas/ProductPackageUpdateJsonBody"
                    },
                    "task": {
                        "$ref": "#/components/schemas/TaskListGetResponse"
                    },
                    "planId": {
                        "type": "string"
                    },
                    "planVersion": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "planName": {
                        "type": "string"
                    },
                    "planDescription": {
                        "type": "string"
                    },
                    "planDisplayName": {
                        "type": "string"
                    },
                    "planRequiresApproval": {
                        "type": "boolean"
                    },
                    "planRegistrations": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "apiId": {
                        "type": "string"
                    },
                    "apiName": {
                        "type": "string"
                    },
                    "apiVersion": {
                        "type": "string"
                    },
                    "apiDescription": {
                        "type": "string"
                    },
                    "apiEndpoint": {
                        "type": "string"
                    },
                    "vendorExtensions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        }
                    },
                    "url": {
                        "type": "string"
                    },
                    "dependents": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/PlanPackage"
                            }
                        }
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedBy": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "envId": {
                        "type": "string"
                    },
                    "deploymentState": {
                        "type": "string",
                        "enum": [
                            "TRANSIENT_REMOVED",
                            "STOPPED",
                            "RUNNING",
                            "SUSPENDED",
                            "ARCHIVED",
                            "RETIRED",
                            "DEPRECATED",
                            "PUBLISHED",
                            "DEPLOYED",
                            "PENDING"
                        ]
                    },
                    "deploymentVisibility": {
                        "$ref": "#/components/schemas/DeploymentVisibility"
                    },
                    "documentType": {
                        "type": "string",
                        "enum": [
                            "POLICYTYPE",
                            "PRODUCTVERSION",
                            "PLANVERSION",
                            "APIRESOURCE",
                            "APIVERSION"
                        ]
                    },
                    "documentVersion": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "documentId": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "taskId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "deploymentPackageId": {
                        "type": "string"
                    },
                    "pendingDeploymentState": {
                        "type": "string",
                        "enum": [
                            "REMOVE",
                            "ARCHIVE",
                            "RETIRE",
                            "DEPRECATE",
                            "SUPERSEDE",
                            "REPLACE",
                            "UPDATE",
                            "PUBLISH",
                            "RESTAGE",
                            "STAGE_FROM_DRAFT"
                        ]
                    },
                    "supersedes": {
                        "$ref": "#/components/schemas/PlanIdentifierTuple"
                    },
                    "supersededBy": {
                        "$ref": "#/components/schemas/PlanIdentifierTuple"
                    },
                    "affectedPlans": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/PlanIdentifierTuple"
                            }
                        }
                    },
                    "operationStatusSummary": {
                        "$ref": "#/components/schemas/OperationStatusSummary"
                    }
                }
            },
            "ConfigDataObject": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedBy": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "envId": {
                        "type": "string"
                    }
                }
            },
            "ProductPackageUpdateJsonBody": {
                "type": "object",
                "properties": {
                    "visibility": {
                        "$ref": "#/components/schemas/DeploymentVisibility"
                    }
                }
            },
            "TaskListGetResponse": {
                "required": [
                    "activities",
                    "availableActions",
                    "envId",
                    "id",
                    "orgId",
                    "status",
                    "taskType",
                    "url"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "envId": {
                        "type": "string"
                    },
                    "taskType": {
                        "type": "string",
                        "enum": [
                            "planSubscriptionApproval",
                            "productDeploymentApproval",
                            "planDeploymentApproval"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "cancelled",
                            "rejected",
                            "approved",
                            "pending"
                        ]
                    },
                    "taskProperties": {
                        "type": "string"
                    },
                    "activities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaskActivityResponse"
                        }
                    },
                    "availableActions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "url": {
                        "type": "string"
                    }
                }
            },
            "TaskActivityResponse": {
                "type": "object",
                "properties": {
                    "action": {
                        "type": "object",
                        "properties": {},
                        "description": "The action executed by this activity"
                    },
                    "date": {
                        "type": "string",
                        "description": "The date this action was executed",
                        "format": "date-time"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The id of the user who initiated this action"
                    },
                    "comment": {
                        "type": "string",
                        "description": "The user's comment for this action"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the user who initiated this action"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the user who initiated this action"
                    }
                }
            },
            "PlanIdentifierTuple": {
                "type": "object",
                "properties": {
                    "planId": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "set": {
                        "type": "boolean"
                    }
                }
            },
            "OperationStatusSummary": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "messages": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "Callable": {
                "type": "object"
            },
            "CallableObject": {
                "type": "object"
            },
            "ErrorResponseBean": {
                "required": [
                    "messageDescription"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "Unique identifier associated with the message."
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "Text describing the error message."
                    }
                }
            },
            "RetryOperationsBean": {
                "required": [
                    "operationids"
                ],
                "type": "object",
                "properties": {
                    "operationids": {
                        "type": "array",
                        "description": "List of operation ids (identifiers) eligible for retry",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "AccountOwnerBean": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for account owner"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of account owner"
                    }
                }
            },
            "MessageBean": {
                "required": [
                    "description",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Detailed message about the current state of operation."
                    },
                    "status": {
                        "type": "integer",
                        "description": "HTTP status code of the operation",
                        "format": "int32"
                    },
                    "details": {
                        "$ref": "#/components/schemas/MessageDetailsBean"
                    }
                }
            },
            "MessageDetailsBean": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "integer",
                        "description": "HTTP status sent by the underlying target",
                        "format": "int32"
                    },
                    "error": {
                        "type": "string",
                        "description": "Error details sent by the target"
                    },
                    "message": {
                        "type": "string",
                        "description": "Details about the error message"
                    }
                }
            },
            "OperationBean": {
                "required": [
                    "accountName",
                    "accountOwner",
                    "applicationName",
                    "gracePeriod",
                    "icon",
                    "id",
                    "lastUpdatedTime",
                    "message",
                    "origin",
                    "requestor",
                    "status",
                    "submissionTime",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "A unique identifier for the operation."
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the operation",
                        "enum": [
                            "AP (Account Provisioning)",
                            "AD (Account Deprovisioning)"
                        ]
                    },
                    "origin": {
                        "type": "string",
                        "description": "Information on from where the operation originated",
                        "enum": [
                            "AM (Automatic)",
                            "MN (Manual)"
                        ]
                    },
                    "applicationName": {
                        "type": "string",
                        "description": "Name of the application whose account is operated"
                    },
                    "icon": {
                        "type": "string",
                        "description": "URL to fetch the icon for the application"
                    },
                    "accountName": {
                        "type": "string",
                        "description": "Name of the account on which operation is performed"
                    },
                    "lastUpdatedTime": {
                        "type": "integer",
                        "description": "When was the operation last updated",
                        "format": "int64"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of operation"
                    },
                    "accountOwner": {
                        "$ref": "#/components/schemas/AccountOwnerBean"
                    },
                    "requestor": {
                        "$ref": "#/components/schemas/RequestorBean"
                    },
                    "message": {
                        "$ref": "#/components/schemas/MessageBean"
                    },
                    "submissionTime": {
                        "type": "integer",
                        "description": "When was the operation was submitted",
                        "format": "int64"
                    },
                    "gracePeriod": {
                        "type": "integer",
                        "description": "Graceperiod",
                        "format": "int64"
                    },
                    "permissionType": {
                        "type": "string",
                        "description": "Type of permission associated with the operation, if any"
                    },
                    "permissionId": {
                        "type": "string",
                        "description": "ID of permission associated with the operation, if any"
                    },
                    "permissionName": {
                        "type": "string",
                        "description": "Name of permission associated with the operation, if any"
                    },
                    "modifiedAttributes": {
                        "type": "string",
                        "description": "List of modified attributes"
                    }
                }
            },
            "RequestorBean": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the user who requested the operation"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of user"
                    }
                }
            },
            "SearchOperationBean": {
                "required": [
                    "operations",
                    "totalCount"
                ],
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of records found.",
                        "format": "int32"
                    },
                    "operations": {
                        "type": "array",
                        "description": "List of all the operations performed.",
                        "items": {
                            "$ref": "#/components/schemas/OperationBean"
                        }
                    },
                    "supportedOpTypesForRetry": {
                        "type": "array",
                        "description": "List of all operation codes that can be retried like 'AP', 'AD', 'AGA', 'RGA', 'AM', 'AS', 'AR'.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "AdminApplicationWithoutProv": {
                "required": [
                    "applicationState",
                    "approvalRequired",
                    "customIcon",
                    "defaultIcon",
                    "description",
                    "icon",
                    "name",
                    "providers",
                    "provisioning",
                    "provisioningMode",
                    "templateId",
                    "type",
                    "visibleOnLaunchpad"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the application"
                    },
                    "icon": {
                        "type": "string",
                        "description": "URI of the icon API for the application"
                    },
                    "defaultIcon": {
                        "type": "string",
                        "description": "URI of the default icon which was associated with the application"
                    },
                    "customIcon": {
                        "type": "string",
                        "description": "URI of the icon associated by Administrator with the application"
                    },
                    "templateId": {
                        "type": "string",
                        "description": "Unique identifier representing the type of SaaS application"
                    },
                    "applicationState": {
                        "type": "string",
                        "description": "Boolean flag to indicate whether end user can use SSO with the application"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the application"
                    },
                    "provisioningMode": {
                        "type": "string",
                        "description": "Boolean flag to indicate where JIT is supported or not."
                    },
                    "type": {
                        "type": "string",
                        "description": "Name of the SaaS application"
                    },
                    "visibleOnLaunchpad": {
                        "type": "string",
                        "description": "Boolean flag representing  whether application is visible for end user to request access"
                    },
                    "approvalRequired": {
                        "type": "string",
                        "description": "Boolean flag representing  whether approval request will be sent when end user request access "
                    },
                    "applicationRefId": {
                        "type": "string",
                        "description": "ID of the the paret of referencing application"
                    },
                    "adaptiveAuthentication": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Adaptive authentication data for devportal applications"
                    },
                    "signonState": {
                        "type": "boolean",
                        "description": "True if Sign On is Enabled and False if it is in Disabled."
                    },
                    "providers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Provider Bean containing relevant attributes"
                    },
                    "provisioning": {
                        "$ref": "#/components/schemas/ProvisioningBeanWithBlankFields"
                    },
                    "_links": {
                        "$ref": "#/components/schemas/HALLink"
                    }
                }
            },
            "AdoptionPolicyBeanWithBlankSections": {
                "type": "object",
                "properties": {
                    "matchingAttributes": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {}
                        }
                    },
                    "remediationPolicy": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        }
                    }
                }
            },
            "EmbeddedApplicationsWithoutProv": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "applications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AdminApplicationWithoutProv"
                        }
                    }
                }
            },
            "HALLink": {
                "type": "object",
                "properties": {
                    "self": {
                        "$ref": "#/components/schemas/Self"
                    }
                }
            },
            "ProvisioningBeanWithBlankFields": {
                "type": "object",
                "properties": {
                    "authentication": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        }
                    },
                    "attributeMappings": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {}
                        }
                    },
                    "reverseAttributeMappings": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {}
                        }
                    },
                    "policies": {
                        "$ref": "#/components/schemas/ProvisioningPoliciesBeanWithBlankSections"
                    },
                    "extension": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        }
                    },
                    "provisioningState": {
                        "type": "string"
                    }
                }
            },
            "ProvisioningPoliciesBeanWithBlankSections": {
                "type": "object",
                "properties": {
                    "provPolicy": {
                        "type": "string"
                    },
                    "deProvPolicy": {
                        "type": "string"
                    },
                    "deProvAction": {
                        "type": "string"
                    },
                    "passwordSync": {
                        "type": "string"
                    },
                    "adoptionPolicy": {
                        "$ref": "#/components/schemas/AdoptionPolicyBeanWithBlankSections"
                    },
                    "gracePeriod": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "SearchAdminApplicationWithoutProvResponseBean": {
                "type": "object",
                "properties": {
                    "_embedded": {
                        "$ref": "#/components/schemas/EmbeddedApplicationsWithoutProv"
                    },
                    "_links": {
                        "$ref": "#/components/schemas/HALLink"
                    },
                    "totalCount": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "Self": {
                "required": [
                    "href"
                ],
                "type": "object",
                "properties": {
                    "href": {
                        "type": "string",
                        "description": "URI of an application to get more details."
                    }
                }
            },
            "PostCustomRuleResponseBean": {
                "type": "object",
                "properties": {
                    "ruleId": {
                        "type": "string",
                        "description": "Unique identifier of the rule that is created."
                    }
                }
            },
            "CustomRuleBean": {
                "type": "object",
                "properties": {
                    "ruleType": {
                        "type": "string",
                        "description": "Type of rule"
                    },
                    "ruleScript": {
                        "type": "string",
                        "description": "Script for the rule"
                    },
                    "templateId": {
                        "type": "string",
                        "description": "Template id associated with the rule"
                    }
                }
            },
            "MigrateTenantBean": {
                "type": "object",
                "properties": {
                    "migrateAll": {
                        "type": "boolean",
                        "description": "Migrate all the tenants. default value is false.  When migrateAll is sent as true, the tenantHostNames data is ignored"
                    },
                    "tenantHostNames": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Name of the tenant whose data needs to be migrated. The tenantHostName = all, will migrate all tenants data.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "GetLastReconStatusResponseBean": {
                "type": "object",
                "properties": {
                    "reconciliationId": {
                        "type": "string",
                        "description": "Unique Identifier for the Account sync."
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "Unique identified for the application."
                    },
                    "reconStatus": {
                        "type": "string",
                        "description": "Status of account sync sub-process of retrieving data from target endpoint."
                    },
                    "reconStartTime": {
                        "type": "string",
                        "description": "Start time of the account sync operation.",
                        "format": "date-time"
                    },
                    "reconEndTime": {
                        "type": "string",
                        "description": "End time of the account sync operation.",
                        "format": "date-time"
                    },
                    "reconOpType": {
                        "type": "string",
                        "description": "Type of account sync operation that is executed."
                    },
                    "adoptionStatus": {
                        "type": "string",
                        "description": "Account Sync overall status."
                    }
                }
            },
            "AccountDetails": {
                "type": "object",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account id of an application"
                    },
                    "complianceStatus": {
                        "type": "string",
                        "description": "Account Compliance Status of account eg: COMPLIANT, NON_COMPLIANT, UNMATCHED"
                    },
                    "userName": {
                        "type": "string",
                        "description": "User name of an account"
                    }
                }
            },
            "GetReconAccountDetailsResponseBean": {
                "type": "object",
                "properties": {
                    "reconciliationId": {
                        "type": "string",
                        "description": "Unique identifier for reconciliation Operation."
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "Unique identifier for application."
                    },
                    "totalCount": {
                        "type": "string",
                        "description": "total account count."
                    },
                    "accountDetails": {
                        "type": "array",
                        "description": "Account details for each account.",
                        "items": {
                            "$ref": "#/components/schemas/AccountDetails"
                        }
                    }
                }
            },
            "AccountClass": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Status of account."
                    },
                    "accountId": {
                        "type": "string",
                        "description": "Unique Account id."
                    },
                    "userName": {
                        "type": "string",
                        "description": "Username."
                    },
                    "creationTime": {
                        "type": "integer",
                        "description": "Account creation time.",
                        "format": "int32"
                    },
                    "deletionTime": {
                        "type": "integer",
                        "description": "Account deletion time.",
                        "format": "int32"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/OwnerClass"
                    },
                    "finerStatus": {
                        "type": "string",
                        "description": "Finer status of account."
                    },
                    "reconciliationId": {
                        "type": "string",
                        "description": "Reconciliation id of an account."
                    }
                }
            },
            "GetAccountListResponseBean": {
                "required": [
                    "templateId",
                    "totalCount"
                ],
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "description": "Number of total accounts.",
                        "format": "int32"
                    },
                    "accounts": {
                        "type": "array",
                        "description": "Account object.",
                        "items": {
                            "$ref": "#/components/schemas/AccountClass"
                        }
                    },
                    "templateId": {
                        "type": "string",
                        "description": "Value of template id."
                    },
                    "complianceStats": {
                        "$ref": "#/components/schemas/UserAccountStats"
                    }
                }
            },
            "OwnerClass": {
                "type": "object",
                "properties": {
                    "userName": {
                        "type": "string",
                        "description": "Username."
                    },
                    "givenName": {
                        "type": "string",
                        "description": "Given name."
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Last name."
                    },
                    "email": {
                        "type": "string",
                        "description": "Email."
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the owner."
                    },
                    "realm": {
                        "type": "string",
                        "description": "Realm."
                    }
                }
            },
            "UserAccountStats": {
                "type": "object",
                "properties": {
                    "applicationId": {
                        "type": "string"
                    },
                    "totalAccounts": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalCompliantCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalNonCompliantCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalUnmatchedCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalOrphanCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalUnmanagedCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalFailedCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalNoneCount": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "PostReconciliationResponseBean": {
                "type": "object",
                "properties": {
                    "reconciliationId": {
                        "type": "string",
                        "description": "Unique identifier when reconciliation operation is started."
                    }
                }
            },
            "ReconciliationBean": {
                "required": [
                    "action"
                ],
                "type": "object",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Action can be specified as - start to start a new account sync operation or - stop to cancel a currently running account sync operation."
                    },
                    "reconType": {
                        "type": "string",
                        "description": "Optional attribute to specify type as supportingdata to retrieve only supporting data for the application from target to Verify irrespective of remediation policy. If not specified, regular account sync is run for the application."
                    }
                }
            },
            "PostStopReconciliationResponseBean": {
                "type": "object",
                "properties": {
                    "reconciliationId": {
                        "type": "string",
                        "description": "Unique reconciliation identifier when operation stopped is requested."
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of reconciliation eg: SUCCESS or FAILED"
                    }
                }
            },
            "ReconciliationStopBean": {
                "required": [
                    "action"
                ],
                "type": "object",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Action to stop reconciliation",
                        "enum": [
                            "stop"
                        ]
                    }
                }
            },
            "AccountBean": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "RemediationAccountStatusDetails": {
                "type": "object",
                "properties": {
                    "applicationId": {
                        "type": "string"
                    },
                    "remediationStatus": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RemediationStatus"
                        }
                    }
                }
            },
            "RemediationStatus": {
                "type": "object",
                "properties": {
                    "accountId": {
                        "type": "string"
                    },
                    "messageId": {
                        "type": "string"
                    },
                    "messageDescription": {
                        "type": "string"
                    },
                    "accountName": {
                        "type": "string"
                    }
                }
            },
            "Account": {
                "required": [
                    "accountId",
                    "reconciliationId"
                ],
                "type": "object",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account to be remediated."
                    },
                    "reconciliationId": {
                        "type": "string",
                        "description": "The reconciliationId is the Account Sync ID. This is available in the Applications, Account Sync, Click on Account Sync entry in which the accounts were synced. The reconciliationId is displayed on the right hand side panel."
                    }
                }
            },
            "RemediateAccountRequestBean": {
                "required": [
                    "accounts",
                    "remediationPolicy"
                ],
                "type": "object",
                "properties": {
                    "remediationPolicy": {
                        "type": "string",
                        "description": "Remediation Policy can take either of the following values. All accounts mentioned will be updated as per this policy \n1. ON_CI corresponding to Update IBM Security Verify with the target applications values. This will update attributes defined in Reverse Attribute mapping and permissions\n2. ON_TARGET corresponding to Update target application with IBM Security Verify values. This will update attributes defined Attribute mapping and permissions",
                        "example": "ON_CI"
                    },
                    "accounts": {
                        "type": "array",
                        "description": "Remediation account list",
                        "items": {
                            "$ref": "#/components/schemas/Account"
                        }
                    }
                }
            },
            "AdoptionAccountBean": {
                "type": "object",
                "properties": {
                    "accountId": {
                        "type": "string"
                    }
                }
            },
            "APIAccessClientBean": {
                "required": [
                    "clientName",
                    "enabled"
                ],
                "type": "object",
                "properties": {
                    "clientName": {
                        "type": "string",
                        "description": "Display client name. "
                    },
                    "clientId": {
                        "type": "string",
                        "description": "Unique identifier for a client. Auto generated on save."
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "Client Secret. Will be auto-generated on save. "
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "If true, client is enabled."
                    },
                    "defaultEntitlements": {
                        "type": "array",
                        "description": "List of entitlement strings.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "accessTokenType": {
                        "type": "string",
                        "description": "Type of token",
                        "enum": [
                            "default",
                            "jwt"
                        ]
                    },
                    "jwtSigningAlg": {
                        "type": "string",
                        "description": "JWT signing algorithm."
                    },
                    "signKeyLabel": {
                        "type": "string",
                        "description": "Signature key label."
                    },
                    "accessTokenLifetime": {
                        "type": "integer",
                        "description": "Access token lifetime seconds.",
                        "format": "int32"
                    },
                    "restrictScopes": {
                        "type": "boolean",
                        "description": "Restrict the scopes for application api access."
                    },
                    "ipFilterOp": {
                        "type": "string",
                        "description": "Operator to filter ip (allow/deny)."
                    },
                    "ipFilters": {
                        "type": "array",
                        "description": "List and/or range of IPs to filter ip based on ipFilterOp.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "scopes": {
                        "type": "array",
                        "description": "List of scopes.",
                        "items": {
                            "$ref": "#/components/schemas/OIDCScopesBean"
                        }
                    },
                    "jwkUri": {
                        "type": "string",
                        "description": "The URI where the relying party publishes its public keys in JSON Web Keys (JWKs) format."
                    },
                    "additionalConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Additional OIDC configurations"
                    }
                }
            },
            "AdaptiveAuthenticationBean": {
                "type": "object",
                "properties": {
                    "platform": {
                        "type": "string",
                        "description": "platform name"
                    },
                    "licenseData": {
                        "type": "string",
                        "description": "License Data"
                    },
                    "storageLink": {
                        "type": "string",
                        "description": "Storage link"
                    }
                }
            },
            "AdditionalPropertiesBean": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "When onboarding or updating a custom application of type SAML, possible values can be metadaFileUrl or metadaFilePayload."
                    },
                    "value": {
                        "type": "string",
                        "description": "For name set as metadaFileUrl : Specify the metadaFileUrl that will take in the URL value and create the SAML application based on the URL. \n\n For name set as metadaFilePayload : Specify the metaDataFilePayload that will take a XML value and create SAML application based on the XML specified against the value."
                    }
                }
            },
            "AdoptionPolicyAttrMappingsBean": {
                "type": "object",
                "properties": {
                    "targetName": {
                        "type": "string",
                        "description": "Name of the attribute"
                    },
                    "sourceId": {
                        "type": "string",
                        "description": "Unique identifier of the attribute"
                    }
                }
            },
            "AdoptionPolicyBean": {
                "type": "object",
                "properties": {
                    "matchingAttributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AdoptionPolicyAttrMappingsBean"
                        }
                    },
                    "remediationPolicy": {
                        "$ref": "#/components/schemas/RemediationPolicyBean"
                    }
                }
            },
            "AppDetLink": {
                "type": "object",
                "properties": {
                    "self": {
                        "$ref": "#/components/schemas/Self"
                    }
                }
            },
            "ApplicationDetailsResponseBean": {
                "required": [
                    "name",
                    "providers",
                    "provisioning",
                    "templateId"
                ],
                "type": "object",
                "properties": {
                    "_links": {
                        "$ref": "#/components/schemas/AppDetLink"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Entity."
                    },
                    "owners": {
                        "type": "array",
                        "description": "List[OwnerBean] , a colloction of owners of this application",
                        "items": {
                            "$ref": "#/components/schemas/OwnerBean"
                        }
                    },
                    "target": {
                        "type": "array",
                        "description": "List[Map[String, String]] , a colloction of targets of this application",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "icon": {
                        "type": "string",
                        "description": "represents icon for this application"
                    },
                    "defaultIcon": {
                        "type": "string",
                        "description": "represents defaulticon for this application"
                    },
                    "customIcon": {
                        "type": "string",
                        "description": "represents custom icon for this application"
                    },
                    "xforce": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Map[String, Map] holds XForce application details"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of application"
                    },
                    "templateId": {
                        "type": "string",
                        "description": "ID of the template for this application"
                    },
                    "providers": {
                        "$ref": "#/components/schemas/ProviderBean"
                    },
                    "attributeMappings": {
                        "type": "array",
                        "description": "List[AttributeMapBean], collection of attributeMapping.",
                        "items": {
                            "$ref": "#/components/schemas/AttributeMapBean"
                        }
                    },
                    "applicationState": {
                        "type": "boolean",
                        "description": "True if application is saved and False if it is in Draft State."
                    },
                    "description": {
                        "type": "string",
                        "description": "description about application"
                    },
                    "authPolicy": {
                        "$ref": "#/components/schemas/AuthenticationPolicyBean"
                    },
                    "provisioningMode": {
                        "type": "string",
                        "description": "Mode of provisioning for example SAMLJIT etc"
                    },
                    "identitySources": {
                        "type": "array",
                        "description": "List[String], a collection of application IdentitySources.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "visibleOnLaunchpad": {
                        "type": "boolean",
                        "description": "Visibility flag for the application on launchpad."
                    },
                    "provisioning": {
                        "$ref": "#/components/schemas/ProvisioningBean"
                    },
                    "customization": {
                        "$ref": "#/components/schemas/CustomizationBean"
                    },
                    "devportalSettings": {
                        "$ref": "#/components/schemas/DevportalSettingsBean"
                    },
                    "apiAccessClients": {
                        "type": "array",
                        "description": "List of API access clients for application",
                        "items": {
                            "$ref": "#/components/schemas/APIAccessClientBean"
                        }
                    },
                    "adaptiveAuthentication": {
                        "$ref": "#/components/schemas/AdaptiveAuthenticationBean"
                    }
                }
            },
            "AssertionConsumerServiceBean": {
                "required": [
                    "index",
                    "url"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "Index value of the assertion consumer service url",
                        "format": "int32"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL value."
                    },
                    "default": {
                        "type": "boolean"
                    }
                }
            },
            "AttributeMapBean": {
                "required": [
                    "name",
                    "targetName"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Entity."
                    },
                    "targetName": {
                        "type": "string",
                        "description": "Name of target"
                    },
                    "targetAttrFormat": {
                        "type": "string",
                        "description": "Attribute Format for target"
                    },
                    "sourceId": {
                        "type": "string",
                        "description": "identifier of the source associated with this Target, only applicable for mapping to Attribute Source Id."
                    }
                }
            },
            "AuthenticationPolicyBean": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "represents identifier for Authentication Policy"
                    },
                    "name": {
                        "type": "string",
                        "description": "represents name of the Authentication Policy",
                        "enum": [
                            "Applicable only for GET endpoint calls."
                        ]
                    },
                    "grantTypes": {
                        "type": "array",
                        "description": "List of API grantTypes and the corresponding Boolean flag to indicate if the Auth Policy  will be applied on it by oidc. Supported API grant types are: ropc, jwtBearer, policyAuth  and refresh_token. See the 'Example Value' section for payload details.",
                        "example": "[ {String: Boolean} ]",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "errorCode": {
                        "type": "string"
                    },
                    "errorDescription": {
                        "type": "string"
                    }
                }
            },
            "BookmarkBean": {
                "required": [
                    "bookmarkUrl"
                ],
                "type": "object",
                "properties": {
                    "bookmarkUrl": {
                        "type": "string",
                        "description": "string containing URL of Bookmark"
                    }
                }
            },
            "CustomizationBean": {
                "required": [
                    "themeId"
                ],
                "type": "object",
                "properties": {
                    "themeId": {
                        "type": "string",
                        "description": "Theme identifier for the application"
                    }
                }
            },
            "DevportalSettingsBean": {
                "type": "object",
                "properties": {
                    "grantTypes": {
                        "$ref": "#/components/schemas/GrantTypesBean"
                    },
                    "identitySources": {
                        "type": "array",
                        "description": "List[String], a collection of application IdentitySources settings for the developer portal application.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "authPolicy": {
                        "$ref": "#/components/schemas/AuthenticationPolicyBean"
                    },
                    "sendAllKnownUserAttributes": {
                        "type": "string",
                        "description": "Boolean flag setting to indicate to return all supported claims for the developer portal application. "
                    },
                    "attributeMappings": {
                        "type": "array",
                        "description": "List[AttributeMapBean], collection of attributeMapping settings for the developer portal application .",
                        "items": {
                            "$ref": "#/components/schemas/AttributeMapBean"
                        }
                    },
                    "extendedProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map<String,String> a map containing Devportal extended properties."
                    }
                }
            },
            "GrantTypesBean": {
                "type": "object",
                "properties": {
                    "authorizationCode": {
                        "type": "string",
                        "description": "Authorization Code.",
                        "enum": [
                            "true",
                            "false"
                        ]
                    },
                    "implicit": {
                        "type": "string",
                        "description": "Implicit",
                        "enum": [
                            "true",
                            "false"
                        ]
                    },
                    "deviceFlow": {
                        "type": "string",
                        "description": "Device Flow.",
                        "enum": [
                            "true",
                            "false"
                        ]
                    },
                    "ropc": {
                        "type": "string",
                        "description": "Resource owner password credentials.",
                        "enum": [
                            "true",
                            "false"
                        ]
                    },
                    "jwtBearer": {
                        "type": "string",
                        "description": "JWT bearer token.",
                        "enum": [
                            "true",
                            "false"
                        ]
                    },
                    "policyAuth": {
                        "type": "string",
                        "description": "Policy driven authentication token.",
                        "enum": [
                            "true",
                            "false"
                        ]
                    },
                    "clientCredentials": {
                        "type": "string",
                        "description": "Allow client credentials grant type to be configured ",
                        "enum": [
                            "true",
                            "false"
                        ]
                    },
                    "tokenExchange": {
                        "type": "string",
                        "description": "Token Exchange ",
                        "enum": [
                            "true",
                            "false"
                        ]
                    }
                }
            },
            "JWTAttributeMapBean": {
                "required": [
                    "sourceId",
                    "targetName"
                ],
                "type": "object",
                "properties": {
                    "targetName": {
                        "type": "string",
                        "description": "Name of target"
                    },
                    "sourceId": {
                        "type": "string",
                        "description": "identifier of the source associated with this Target"
                    }
                }
            },
            "ManageNameIDService": {
                "required": [
                    "url"
                ],
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "description": "URL value."
                    }
                }
            },
            "OIDCBean": {
                "type": "object",
                "properties": {
                    "applicationUrl": {
                        "type": "string",
                        "description": "URL which will be use to trigger Single-Sign-On flow."
                    },
                    "properties": {
                        "$ref": "#/components/schemas/OIDCPropertiesBean"
                    },
                    "restrictScopes": {
                        "type": "string"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OIDCScopesBean"
                        }
                    },
                    "entitlements": {
                        "type": "array",
                        "description": "OIDC application entitlements",
                        "items": {
                            "type": "string"
                        }
                    },
                    "restrictEntitlements": {
                        "type": "boolean",
                        "description": "Flag to restrict oidc entitlements"
                    },
                    "grantProperties": {
                        "$ref": "#/components/schemas/OIDCGrantPropertiesBean"
                    },
                    "token": {
                        "$ref": "#/components/schemas/OIDCTokenBean"
                    },
                    "consentAction": {
                        "type": "string",
                        "description": "Consent action",
                        "enum": [
                            "never_prompt",
                            "always_prompt"
                        ]
                    },
                    "requirePkceVerification": {
                        "type": "string",
                        "description": "PKCE verification",
                        "enum": [
                            "false",
                            "true"
                        ]
                    },
                    "jwtBearerProperties": {
                        "$ref": "#/components/schemas/OIDCJwtBearerPropertiesBean"
                    }
                }
            },
            "OIDCGrantPropertiesBean": {
                "type": "object",
                "properties": {
                    "generateDeviceFlowQRCode": {
                        "type": "string"
                    }
                }
            },
            "OIDCJwtBearerPropertiesBean": {
                "type": "object",
                "properties": {
                    "userIdentifier": {
                        "type": "string",
                        "description": "User Identifier for JWT Bearer grant type."
                    },
                    "identitySource": {
                        "type": "string",
                        "description": "Identity source of user for JWT Bearer properties."
                    }
                }
            },
            "OIDCPropertiesBean": {
                "type": "object",
                "properties": {
                    "grantTypes": {
                        "$ref": "#/components/schemas/GrantTypesBean"
                    },
                    "redirectUris": {
                        "type": "array",
                        "description": "List of redirect URIs. ",
                        "items": {
                            "type": "string"
                        }
                    },
                    "idTokenSigningAlg": {
                        "type": "string",
                        "description": "ID token signing algorithm. "
                    },
                    "accessTokenExpiry": {
                        "type": "integer",
                        "description": "Access token lifetime, in seconds ",
                        "format": "int64"
                    },
                    "refreshTokenExpiry": {
                        "type": "integer",
                        "description": "Lifetime of authorization grant. Required only when generateRefreshToken is set ",
                        "format": "int64"
                    },
                    "doNotGenerateClientSecret": {
                        "type": "string",
                        "description": "Boolean flag to disable auto generation of OIDC client secret."
                    },
                    "generateRefreshToken": {
                        "type": "string",
                        "description": "Boolean flag to indicate that lifetime of authorization grant must be set. "
                    },
                    "renewRefreshTokenExpiry": {
                        "type": "integer",
                        "description": "Renew refresh token expiry value.",
                        "format": "int64"
                    },
                    "signIdToken": {
                        "type": "string",
                        "description": "Boolean flag to indicate that a key label must be specified to perform signing. "
                    },
                    "signingCertificate": {
                        "type": "string",
                        "description": "Key label used to perform the signing. Required only when signIdToken is set."
                    },
                    "clientId": {
                        "type": "string",
                        "description": "Unique identifier for a client. "
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "Client Secret. Will be auto-generated if this parameter is not specified. "
                    },
                    "sendAllKnownUserAttributes": {
                        "type": "string",
                        "description": "Boolean flag to indicate to return all supported claims. "
                    },
                    "jwksUri": {
                        "type": "string",
                        "description": "Relying party URL. If not specified public key used for signature verification."
                    },
                    "consentType": {
                        "type": "string",
                        "description": "The type of consent to be generated for this application. New applications will automatically use 'dpcm' advanced privacy consent.This is a read only attribute, if specified in the POST and PUT calls, it will be ignored."
                    },
                    "renewRefreshToken": {
                        "type": "string",
                        "description": "Should renew refresh token, true or false"
                    },
                    "additionalConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Additional OIDC configurations"
                    },
                    "idTokenEncryptAlg": {
                        "type": "string",
                        "description": "ID token key management encryption algorithm. List of algorithms (id_token_encryption_alg_values_supported) available at  /oidc/endpoint/{definition_id}/.well-known/openid-configuration\""
                    },
                    "idTokenEncryptEnc": {
                        "type": "string",
                        "description": "\"ID token content encryption algorithm. List of algorithms (id_token_encryption_enc_values_supported) available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration\""
                    },
                    "idTokenEncryptKey": {
                        "type": "string",
                        "description": "ID token encryption public key label."
                    }
                }
            },
            "OIDCScopesBean": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "OIDCTokenBean": {
                "required": [
                    "accessTokenType"
                ],
                "type": "object",
                "properties": {
                    "accessTokenType": {
                        "type": "string",
                        "description": "Type of token",
                        "enum": [
                            "default",
                            "jwt"
                        ]
                    },
                    "audiences": {
                        "type": "array",
                        "description": "List of audiences",
                        "items": {
                            "type": "string"
                        }
                    },
                    "attributeMappings": {
                        "type": "array",
                        "description": "List of attribute maps",
                        "items": {
                            "$ref": "#/components/schemas/JWTAttributeMapBean"
                        }
                    }
                }
            },
            "OwnerBean": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "identifier of application Owner"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of application Owner"
                    },
                    "email": {
                        "type": "string",
                        "description": "email of application Owner"
                    },
                    "userName": {
                        "type": "string",
                        "description": "user name of application Owner"
                    },
                    "realm": {
                        "type": "string",
                        "description": "realm name of application Owner"
                    },
                    "userType": {
                        "type": "string",
                        "description": "identifies whether the application owner is federated or regular"
                    },
                    "familyName": {
                        "type": "string",
                        "description": "family name of the application Owner"
                    },
                    "givenName": {
                        "type": "string",
                        "description": "given name of the application Owner"
                    }
                }
            },
            "ProviderBean": {
                "required": [
                    "sso"
                ],
                "type": "object",
                "properties": {
                    "saml": {
                        "$ref": "#/components/schemas/SAMLBean"
                    },
                    "sso": {
                        "$ref": "#/components/schemas/SSOBean"
                    },
                    "bookmark": {
                        "$ref": "#/components/schemas/BookmarkBean"
                    },
                    "oidc": {
                        "$ref": "#/components/schemas/OIDCBean"
                    },
                    "wsfed": {
                        "$ref": "#/components/schemas/WsFedBean"
                    }
                }
            },
            "ProvisioningAttrMappingsBean": {
                "type": "object",
                "properties": {
                    "targetName": {
                        "type": "string",
                        "description": "Name of the attribute"
                    },
                    "sourceId": {
                        "type": "string",
                        "description": "Unique identifier of the attribute"
                    },
                    "outboundTracking": {
                        "type": "boolean",
                        "description": "boolean flag representing whether any change in the attribute's value should be percolated to the target"
                    },
                    "inboundTracking": {
                        "type": "boolean",
                        "description": "boolean flag indicating if any change in the attribute's value on the target should be propagated to cloud directory."
                    },
                    "applyTransformation": {
                        "type": "string",
                        "description": "Specify the ruleId to indicate the transformation that needs to be carried out. To be used when advanced scripting is to be used."
                    },
                    "ruleType": {
                        "type": "string",
                        "description": "Rule type to indicate custom or built in rules. Indicates if this is a built in predefined rule or a custom rule."
                    }
                }
            },
            "ProvisioningAuthnBean": {
                "type": "object",
                "properties": {
                    "properties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "ProvisioningBean": {
                "type": "object",
                "properties": {
                    "authentication": {
                        "$ref": "#/components/schemas/ProvisioningAuthnBean"
                    },
                    "attributeMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProvisioningAttrMappingsBean"
                        }
                    },
                    "reverseAttributeMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProvisioningAttrMappingsBean"
                        }
                    },
                    "policies": {
                        "$ref": "#/components/schemas/ProvisioningPoliciesBean"
                    },
                    "extension": {
                        "$ref": "#/components/schemas/ProvisioningExtensionBean"
                    },
                    "provisioningState": {
                        "type": "string"
                    }
                }
            },
            "ProvisioningExtensionBean": {
                "type": "object",
                "properties": {
                    "properties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        }
                    }
                }
            },
            "ProvisioningPoliciesBean": {
                "type": "object",
                "properties": {
                    "provPolicy": {
                        "type": "string"
                    },
                    "deProvPolicy": {
                        "type": "string"
                    },
                    "deProvAction": {
                        "type": "string"
                    },
                    "passwordSync": {
                        "type": "string"
                    },
                    "adoptionPolicy": {
                        "$ref": "#/components/schemas/AdoptionPolicyBean"
                    },
                    "gracePeriod": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "RemediationPolicyBean": {
                "type": "object",
                "properties": {
                    "policy": {
                        "type": "string",
                        "description": "Remediation policy. Has to be one of the following values ON_CI, NONE, ON_TARGET"
                    },
                    "autoRemediateOnUpdate": {
                        "type": "boolean",
                        "description": "This flag indicates if automatic remediation be set to true when remediation policy is changed. Auto remediation will be triggered if this flag is set to true and when policy is changed from existing policy to either ON_CI or ON_TARGET"
                    }
                }
            },
            "SAMLBean": {
                "required": [
                    "assertionConsumerService",
                    "properties"
                ],
                "type": "object",
                "properties": {
                    "justInTimeProvisioning": {
                        "type": "string",
                        "description": "Boolean indicating if SAML JIT is enabled."
                    },
                    "properties": {
                        "$ref": "#/components/schemas/SAMLPropertiesBean"
                    },
                    "assertionConsumerService": {
                        "type": "array",
                        "description": "List, a collection of assertion consumer service url details.",
                        "items": {
                            "$ref": "#/components/schemas/AssertionConsumerServiceBean"
                        }
                    },
                    "manageNameIDService": {
                        "$ref": "#/components/schemas/ManageNameIDService"
                    },
                    "singleLogoutService": {
                        "type": "array",
                        "description": "List, a collection of single logout service url details.",
                        "items": {
                            "$ref": "#/components/schemas/SingleLogoutServiceBean"
                        }
                    },
                    "additionalProperties": {
                        "type": "array",
                        "description": "List, a collection of additional config for saml configuration.",
                        "items": {
                            "$ref": "#/components/schemas/AdditionalPropertiesBean"
                        }
                    }
                }
            },
            "SAMLPropertiesBean": {
                "required": [
                    "assertionConsumerServiceUrl",
                    "providerId"
                ],
                "type": "object",
                "properties": {
                    "generateUniqueID": {
                        "type": "string",
                        "description": "Boolean flag to indicate whether the \"UniqueID\" is used in combination with providerId for checking uniqueness at the federation level."
                    },
                    "signAuthnResponse": {
                        "type": "string",
                        "description": "Boolean flag to indicate whether IDP will sign the SAML authentication response sent to the service provider."
                    },
                    "signatureAlgorithm": {
                        "type": "string",
                        "description": "Signature algorithm to be used for signing the SAML response / assertion. Supported values are RSA-SHA1, RSA-SHA256, RSA-SHA512, ECDSA-SHA256, ECDSA-SHA384, ECDSA-SHA512"
                    },
                    "validateAuthnRequest": {
                        "type": "string",
                        "description": "Boolean flag to indicate whether the IDP should validate the SAML request signature."
                    },
                    "encryptAssertion": {
                        "type": "string",
                        "description": "Boolean flag to indicate whether the SAML assertion will be encrypted."
                    },
                    "ici_reserved_subjectNameID": {
                        "type": "string",
                        "description": "Attribute source identifier."
                    },
                    "includeAllAttributes": {
                        "type": "string",
                        "description": "Boolean flag to indicate whether all known attributes of the user will be included in the SAML assertion."
                    },
                    "defaultNameIdFormat": {
                        "type": "string",
                        "description": "Default nameId format."
                    },
                    "companyName": {
                        "type": "string",
                        "description": "Name of the service provider company."
                    },
                    "providerId": {
                        "type": "string",
                        "description": "Unique identifier of the service provider. Also known as Entity Id or Issuer Id."
                    },
                    "assertionConsumerServiceUrl": {
                        "type": "string",
                        "description": "Service provider's assertion consumer service url."
                    },
                    "signatureValidationKeyIdentifier": {
                        "type": "string",
                        "description": "Identifier of the certificate that is used for validating the request signature."
                    },
                    "blockEncryptionAlgorithm": {
                        "type": "string",
                        "description": "Algorithm to be used for encryption."
                    },
                    "encryptionKeyIdentifier": {
                        "type": "string",
                        "description": "Identifier of the certificate that is used for encrypting the response."
                    },
                    "uniqueID": {
                        "type": "string",
                        "description": "Unique id generated. "
                    },
                    "sessionNotOnOrAfter": {
                        "type": "string",
                        "description": "SAML configuration for SessionNotOnOrAfter"
                    },
                    "signingKeyIdentifier": {
                        "type": "string",
                        "description": "Value of the Signing certificate."
                    }
                }
            },
            "SSOBean": {
                "required": [
                    "domainName"
                ],
                "type": "object",
                "properties": {
                    "domainName": {
                        "type": "string",
                        "description": "Domain Name for SSO"
                    },
                    "spssoUrl": {
                        "type": "string",
                        "description": "String containing SPSSO URL"
                    },
                    "targetUrl": {
                        "type": "string",
                        "description": "String containing Target URL"
                    },
                    "idpInitiatedSSOSupport": {
                        "type": "string",
                        "description": "string representation for IDP initiated SSO Support"
                    },
                    "userOptions": {
                        "type": "string",
                        "description": "string representation for User Options"
                    }
                }
            },
            "SingleLogoutServiceBean": {
                "required": [
                    "binding",
                    "url"
                ],
                "type": "object",
                "properties": {
                    "binding": {
                        "type": "string",
                        "description": "Single logout service binding"
                    },
                    "url": {
                        "type": "string",
                        "description": "Single logout service url"
                    }
                }
            },
            "WsFedActiveProfileBean": {
                "type": "object",
                "properties": {
                    "defaultRealm": {
                        "type": "string"
                    }
                }
            },
            "WsFedAdditionalPropetties": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "object",
                        "properties": {}
                    }
                }
            },
            "WsFedBean": {
                "type": "object",
                "properties": {
                    "properties": {
                        "$ref": "#/components/schemas/WsFedPropertiesBean"
                    }
                }
            },
            "WsFedPropertiesBean": {
                "required": [
                    "additionalProperties"
                ],
                "type": "object",
                "properties": {
                    "callbackURL": {
                        "type": "string"
                    },
                    "providerId": {
                        "type": "string"
                    },
                    "multipleDomainsEnabled": {
                        "type": "string"
                    },
                    "activeProfile": {
                        "$ref": "#/components/schemas/WsFedActiveProfileBean"
                    },
                    "signingSettings": {
                        "$ref": "#/components/schemas/WsFedSigningSettingsBean"
                    },
                    "ici_reserved_subjectNameID": {
                        "type": "string"
                    },
                    "additionalProperties": {
                        "type": "array",
                        "description": "List of additional WSFed properties.",
                        "items": {
                            "$ref": "#/components/schemas/WsFedAdditionalPropetties"
                        }
                    }
                }
            },
            "WsFedSigningSettingsBean": {
                "type": "object",
                "properties": {
                    "signSamlAssertion": {
                        "type": "string"
                    },
                    "keyLabel": {
                        "type": "string"
                    },
                    "signatureAlgorithm": {
                        "type": "string"
                    }
                }
            },
            "AttributeForSwagger": {
                "type": "object",
                "properties": {
                    "attributeName": {
                        "type": "string"
                    },
                    "oldValue": {
                        "type": "string"
                    },
                    "newValue": {
                        "type": "string"
                    }
                }
            },
            "Details": {
                "type": "object",
                "properties": {
                    "accountId": {
                        "type": "string"
                    },
                    "targetAccountStatus": {
                        "type": "string"
                    },
                    "userStatus": {
                        "type": "string"
                    },
                    "complianceStatus": {
                        "type": "string"
                    },
                    "complianceStatusDetails": {
                        "type": "string"
                    },
                    "attributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttributeForSwagger"
                        }
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PermissionForSwagger"
                        }
                    }
                }
            },
            "GetReconciliationDeltaResponseBean": {
                "type": "object",
                "properties": {
                    "reconciliationId": {
                        "type": "string",
                        "description": "Unique identifier for reconciliation Operation."
                    },
                    "remediationPolicy": {
                        "type": "string",
                        "description": "Remediation policy for an application."
                    },
                    "timeStamp": {
                        "type": "integer",
                        "description": "Time stamp.",
                        "format": "int64"
                    },
                    "details": {
                        "$ref": "#/components/schemas/Details"
                    }
                }
            },
            "PermissionForSwagger": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    }
                }
            },
            "AdoptionStat": {
                "type": "object",
                "properties": {
                    "compliant": {
                        "type": "string",
                        "description": "Number of the compliant account"
                    },
                    "nonCompliant": {
                        "type": "string",
                        "description": "Number of the nonCompliant account"
                    },
                    "unmatched": {
                        "type": "string",
                        "description": "Number of the unmatched account"
                    },
                    "failed": {
                        "type": "string",
                        "description": "Number of the failed account"
                    }
                }
            },
            "GetAdoptionStatsResponseBean": {
                "type": "object",
                "properties": {
                    "reconciliationId": {
                        "type": "string",
                        "description": "Unique identifier for reconciliation Operation."
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "Unique identifier for application."
                    },
                    "reconStartTime": {
                        "type": "string",
                        "description": "Reconciliation start time.",
                        "format": "date-time"
                    },
                    "reconEndTime": {
                        "type": "string",
                        "description": "Reconciliation end time.",
                        "format": "date-time"
                    },
                    "adoptionStatus": {
                        "type": "string",
                        "description": "Adoption Status for reconciliationId."
                    },
                    "reconStatus": {
                        "type": "string",
                        "description": "Reconciliation Status for reconciliationId."
                    },
                    "reconDetails": {
                        "type": "array",
                        "description": "Reconciliation details for reconciliationId.",
                        "items": {
                            "$ref": "#/components/schemas/Operations"
                        }
                    },
                    "reconStats": {
                        "$ref": "#/components/schemas/Stats"
                    },
                    "aadoptionStats": {
                        "$ref": "#/components/schemas/AdoptionStat"
                    }
                }
            },
            "Operations": {
                "type": "object",
                "properties": {
                    "resourceType": {
                        "type": "string",
                        "description": "Resource Type eg: Users, Groups and SupportingData"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of resource type eg: SUCCESS, FAILED, WARNING"
                    },
                    "detail": {
                        "type": "string",
                        "description": "Detail of error message if any"
                    }
                }
            },
            "Stats": {
                "type": "object",
                "properties": {
                    "totalAccounts": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "totalGroups": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "totalSupportingData": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "accounts": {
                        "$ref": "#/components/schemas/SubStats"
                    },
                    "groups": {
                        "$ref": "#/components/schemas/SubStats"
                    }
                }
            },
            "SubStats": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "newer": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "modified": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "unchanged": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "markedAsDeleted": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "ApplicationCategories": {
                "type": "object",
                "properties": {
                    "accountLifecycle": {
                        "type": "integer",
                        "description": "Total Account lifecycle enabled application count for given tenant.",
                        "format": "int64"
                    },
                    "saml": {
                        "type": "integer",
                        "description": "Total SAML provider application count for given tenant.",
                        "format": "int64"
                    },
                    "oidc": {
                        "type": "integer",
                        "description": "Total OIDC provider application count for given tenant.",
                        "format": "int64"
                    },
                    "bookmark": {
                        "type": "integer",
                        "description": "Total Bookmark provider application count for given tenant.",
                        "format": "int64"
                    }
                }
            },
            "GetAppsSummaryStatsResponseBean": {
                "type": "object",
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "description": "Unique identifier of tenant."
                    },
                    "totalApplications": {
                        "type": "integer",
                        "description": "Total application count for given tenant.",
                        "format": "int64"
                    },
                    "totalAppEnabled": {
                        "type": "integer",
                        "description": "Total enabled application count for given tenant.",
                        "format": "int64"
                    },
                    "applicationCategories": {
                        "$ref": "#/components/schemas/ApplicationCategories"
                    }
                }
            },
            "EmbeddedApplications": {
                "type": "object",
                "properties": {
                    "applications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AdminApplicationWithoutProv"
                        }
                    }
                }
            },
            "SearchAppsByIdentitySrcResponseBean": {
                "type": "object",
                "properties": {
                    "_embedded": {
                        "$ref": "#/components/schemas/EmbeddedApplications"
                    },
                    "_links": {
                        "$ref": "#/components/schemas/HALLink"
                    }
                }
            },
            "ApplicationRequestBean": {
                "required": [
                    "name",
                    "providers",
                    "provisioning",
                    "templateId"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Entity."
                    },
                    "properties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "List[String], a list of application properties."
                    },
                    "templateId": {
                        "type": "string",
                        "description": "ID of the template for this application"
                    },
                    "providers": {
                        "$ref": "#/components/schemas/ProviderBean"
                    },
                    "attributeMappings": {
                        "type": "array",
                        "description": "List[AttributeMapBean], collection of attributeMapping.",
                        "items": {
                            "$ref": "#/components/schemas/AttributeMapBean"
                        }
                    },
                    "applicationState": {
                        "type": "boolean",
                        "description": "True if application is saved and False if it is in Draft State."
                    },
                    "description": {
                        "type": "string",
                        "description": "description about application"
                    },
                    "authPolicy": {
                        "$ref": "#/components/schemas/AuthenticationPolicyBean"
                    },
                    "provisioningMode": {
                        "type": "string",
                        "description": "Mode of provisioning for example SAMLJIT etc"
                    },
                    "identitySources": {
                        "type": "array",
                        "description": "List[String], a collection of application IdentitySources.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "visibleOnLaunchpad": {
                        "type": "boolean",
                        "description": "Visibility flag for the application on launchpad."
                    },
                    "provisioning": {
                        "$ref": "#/components/schemas/ProvisioningBean"
                    },
                    "customization": {
                        "$ref": "#/components/schemas/CustomizationBean"
                    },
                    "devportalSettings": {
                        "$ref": "#/components/schemas/DevportalSettingsBean"
                    },
                    "apiAccessClients": {
                        "type": "array",
                        "description": "List of API access clients for application",
                        "items": {
                            "$ref": "#/components/schemas/APIAccessClientBean"
                        }
                    },
                    "adaptiveAuthentication": {
                        "$ref": "#/components/schemas/AdaptiveAuthenticationBean"
                    },
                    "owners": {
                        "type": "array",
                        "description": "List[String] , a collection of owners of this application",
                        "items": {
                            "type": "string"
                        }
                    },
                    "target": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "boolean"
                        },
                        "description": "Map[String, Boolean] , a collection of target of this application. "
                    },
                    "customIcon": {
                        "type": "string",
                        "description": "Custom Icon file name if any"
                    },
                    "defaultIcon": {
                        "type": "string",
                        "description": "Default Icon file name if any"
                    }
                }
            },
            "HALink": {
                "type": "object",
                "properties": {
                    "self": {
                        "$ref": "#/components/schemas/SelfLink"
                    }
                }
            },
            "PostApplicationResponseBean": {
                "type": "object",
                "properties": {
                    "_links": {
                        "$ref": "#/components/schemas/HALink"
                    }
                }
            },
            "SelfLink": {
                "required": [
                    "href",
                    "reconciliationId",
                    "title"
                ],
                "type": "object",
                "properties": {
                    "href": {
                        "type": "string",
                        "description": "URI of an application to get more details. This URI contains the unique identifier of the newly created application."
                    },
                    "title": {
                        "type": "string",
                        "description": "Name of the newly created application."
                    },
                    "reconciliationId": {
                        "type": "string",
                        "description": "Reconciliation id of the on-boarding recon operation."
                    }
                }
            },
            "FilterApplicationResponseBean": {
                "type": "object",
                "properties": {
                    "totalResults": {
                        "type": "integer",
                        "description": "Number of application in response",
                        "format": "int32",
                        "example": 1
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {}
                            }
                        }
                    }
                }
            },
            "IBSupportingData": {
                "type": "object",
                "properties": {
                    "resources": {
                        "type": "array",
                        "description": "Resources array returned.",
                        "items": {
                            "$ref": "#/components/schemas/Resource"
                        }
                    }
                }
            },
            "Meta": {
                "type": "object",
                "properties": {
                    "resourceType": {
                        "type": "string"
                    }
                }
            },
            "Resource": {
                "type": "object",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "Display name."
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique Identfier of the resource."
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the resource."
                    },
                    "meta": {
                        "$ref": "#/components/schemas/Meta"
                    },
                    "schemas": {
                        "type": "array",
                        "description": "Schema of the supporting data resource",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "PolicyApplicationsListBean": {
                "type": "object",
                "properties": {
                    "applications": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "List of application IDs using a given auth. policy ID",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "HealthComponentBean": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "details": {
                        "type": "string"
                    },
                    "time": {
                        "type": "string"
                    }
                }
            },
            "AdoptionPolicyBeanForOwner": {
                "type": "object",
                "properties": {
                    "remediationPolicy": {
                        "$ref": "#/components/schemas/RemediationPolicyBeanForOwner"
                    }
                }
            },
            "GetApplicationForOwnerResponseBean": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "provisioning": {
                        "$ref": "#/components/schemas/ProvisioningBeanForOwner"
                    },
                    "templateId": {
                        "type": "string"
                    }
                }
            },
            "ProvisioningBeanForOwner": {
                "type": "object",
                "properties": {
                    "policies": {
                        "$ref": "#/components/schemas/ProvisioningPoliciesBeanForOwner"
                    },
                    "provisioningState": {
                        "type": "string"
                    }
                }
            },
            "ProvisioningPoliciesBeanForOwner": {
                "required": [
                    "deProvAction",
                    "deProvPolicy",
                    "gracePeriod",
                    "provPolicy"
                ],
                "type": "object",
                "properties": {
                    "provPolicy": {
                        "type": "string",
                        "description": "Provisioning policy",
                        "enum": [
                            "automatic",
                            "manual",
                            "disabled"
                        ]
                    },
                    "deProvPolicy": {
                        "type": "string",
                        "description": "Deprovisioning policy",
                        "enum": [
                            "automatic",
                            "manual",
                            "disabled"
                        ]
                    },
                    "deProvAction": {
                        "type": "string",
                        "description": "Deprovisioning action",
                        "enum": [
                            "Delete account"
                        ]
                    },
                    "gracePeriod": {
                        "type": "integer",
                        "description": "Deprovisioning grace period in days, applicable only if Deprovisioning action is set to automatic",
                        "format": "int64"
                    },
                    "passwordSync": {
                        "type": "string"
                    },
                    "adoptionPolicy": {
                        "$ref": "#/components/schemas/AdoptionPolicyBeanForOwner"
                    }
                }
            },
            "RemediationPolicyBeanForOwner": {
                "type": "object",
                "properties": {
                    "policy": {
                        "type": "string",
                        "description": "Remediation policy set for the application.",
                        "enum": [
                            "ON_TARGET",
                            "ON_CI",
                            "NONE"
                        ]
                    }
                }
            },
            "AssigneeResponseBean": {
                "required": [
                    "displayName",
                    "subjectId",
                    "subjectType"
                ],
                "type": "object",
                "properties": {
                    "subjectId": {
                        "type": "string",
                        "description": "Unique identifier of the assignee"
                    },
                    "subjectType": {
                        "type": "string",
                        "description": "Tells whether the assignee is user/group"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the assignee"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email id of the assignee"
                    },
                    "userName": {
                        "type": "string",
                        "description": "User name of the assignee"
                    },
                    "realm": {
                        "type": "string",
                        "description": "Realm name of the assignee"
                    },
                    "userType": {
                        "type": "string",
                        "description": "Tells whether the assignee is a regular user or federated"
                    }
                }
            },
            "AssignerResponseBean": {
                "required": [
                    "displayName",
                    "email",
                    "realm",
                    "userName",
                    "userType"
                ],
                "type": "object",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the assignee"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email id of the assignee"
                    },
                    "userName": {
                        "type": "string",
                        "description": "User name of the assignee"
                    },
                    "realm": {
                        "type": "string",
                        "description": "Realm name of the assignee"
                    },
                    "userType": {
                        "type": "string",
                        "description": "Tells whether the assignee is a regular user or federated"
                    }
                }
            },
            "EntitlementResponseBean": {
                "required": [
                    "assignee",
                    "assigner",
                    "created",
                    "grantType",
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique Identifier of entitlement"
                    },
                    "created": {
                        "type": "integer",
                        "description": "Timestamp when the entitlement was assigned ",
                        "format": "int64"
                    },
                    "assignee": {
                        "$ref": "#/components/schemas/AssigneeResponseBean"
                    },
                    "assigner": {
                        "$ref": "#/components/schemas/AssignerResponseBean"
                    },
                    "grantType": {
                        "type": "string",
                        "description": "Indicates grant type example BRT."
                    }
                }
            },
            "GetEntitlementsForOwnerResponseBean": {
                "required": [
                    "birthRightAccess",
                    "requestAccess"
                ],
                "type": "object",
                "properties": {
                    "birthRightAccess": {
                        "type": "boolean",
                        "description": "A boolean flag indicating whether all users in the organization are entitled by default or not."
                    },
                    "entitlements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EntitlementResponseBean"
                        }
                    },
                    "requestAccess": {
                        "type": "boolean",
                        "description": "A boolean flag indicating whether reqeust access is true or false."
                    }
                }
            },
            "Application": {
                "required": [
                    "icon",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the application"
                    },
                    "icon": {
                        "type": "string",
                        "description": "URI of the icon API for the application"
                    },
                    "_links": {
                        "$ref": "#/components/schemas/HALLink"
                    },
                    "type": {
                        "type": "string",
                        "description": "Application type"
                    },
                    "provisioning": {
                        "$ref": "#/components/schemas/Provisioning"
                    },
                    "applicationState": {
                        "type": "boolean"
                    }
                }
            },
            "Authentication": {
                "type": "object"
            },
            "Embedded": {
                "type": "object",
                "properties": {
                    "applications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Application"
                        }
                    }
                }
            },
            "Policies": {
                "type": "object",
                "properties": {
                    "passwordSync": {
                        "type": "string"
                    },
                    "provPolicy": {
                        "type": "string"
                    },
                    "deProvPolicy": {
                        "type": "string"
                    },
                    "deProvAction": {
                        "type": "string"
                    },
                    "gracePeriod": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "Provisioning": {
                "type": "object",
                "properties": {
                    "authentication": {
                        "$ref": "#/components/schemas/Authentication"
                    },
                    "attributeMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SwgProvisioningAttrMappingsBean"
                        }
                    },
                    "policies": {
                        "$ref": "#/components/schemas/Policies"
                    },
                    "provisioningState": {
                        "type": "string"
                    }
                }
            },
            "SearchOwnerApplicationResponseBean": {
                "type": "object",
                "properties": {
                    "_embedded": {
                        "$ref": "#/components/schemas/Embedded"
                    },
                    "_links": {
                        "$ref": "#/components/schemas/HALLink"
                    },
                    "totalCount": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "SwgProvisioningAttrMappingsBean": {
                "type": "object"
            },
            "Assignee": {
                "required": [
                    "subjectId",
                    "subjectType"
                ],
                "type": "object",
                "properties": {
                    "subjectId": {
                        "type": "string",
                        "description": "Unique identifier of the assignee"
                    },
                    "subjectType": {
                        "type": "string",
                        "description": "Tells whether the assignee is user/group/dynamicRole"
                    }
                }
            },
            "Entitlement": {
                "required": [
                    "assignee"
                ],
                "type": "object",
                "properties": {
                    "assignee": {
                        "$ref": "#/components/schemas/Assignee"
                    },
                    "grantType": {
                        "type": "string",
                        "description": "Used to determine whether the user is directly entitled to an application or he needs to request access to get the entitlement.Valid values are DISC and BRT."
                    }
                }
            },
            "EntitlementBean": {
                "type": "object",
                "properties": {
                    "birthRightAccess": {
                        "type": "boolean",
                        "description": "A boolean flag indicating whether all users in the organization are entitled by default or not"
                    },
                    "requestAccess": {
                        "type": "boolean",
                        "description": "A boolean flag indicating whether a user needs to raise a request to get the entitlement"
                    },
                    "additions": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "List containing information about user/group who will be granted entitlements",
                        "items": {
                            "$ref": "#/components/schemas/Entitlement"
                        }
                    },
                    "deletions": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "List of identifier associated with an entitlement which needs to be deleted",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "OwnerProvisioningApplicationUpdateBean": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Entity."
                    },
                    "provisioning": {
                        "$ref": "#/components/schemas/OwnerProvisioningUpdateBean"
                    }
                }
            },
            "OwnerProvisioningPoliciesBean": {
                "type": "object",
                "properties": {
                    "provPolicy": {
                        "type": "string"
                    },
                    "deProvPolicy": {
                        "type": "string"
                    },
                    "deProvAction": {
                        "type": "string"
                    },
                    "gracePeriod": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "passwordSync": {
                        "type": "string"
                    },
                    "adoptionPolicy": {
                        "$ref": "#/components/schemas/AdoptionPolicyBean"
                    }
                }
            },
            "OwnerProvisioningUpdateBean": {
                "type": "object",
                "properties": {
                    "policies": {
                        "$ref": "#/components/schemas/OwnerProvisioningPoliciesBean"
                    },
                    "provisioningState": {
                        "type": "string"
                    }
                }
            },
            "PasswordSyncAppBean": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "PasswordSyncAppsResponseBean": {
                "type": "object",
                "properties": {
                    "totalResults": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PasswordSyncAppBean"
                        }
                    }
                }
            },
            "OperationRecordBean": {
                "required": [
                    "accountId",
                    "accountName",
                    "applicationId",
                    "applicationName",
                    "name",
                    "operationStatus",
                    "operationType",
                    "reconId",
                    "remediationPolicy"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Entity."
                    },
                    "reconId": {
                        "type": "string",
                        "description": "A unique identifier for the reconciliation operation."
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "Id of the application for which the reconciliation is being done"
                    },
                    "applicationName": {
                        "type": "string",
                        "description": "Name of the application for which the reconciliation is being done"
                    },
                    "accountId": {
                        "type": "string",
                        "description": "Id of the account for which the reconciliation is being done"
                    },
                    "accountName": {
                        "type": "string",
                        "description": "Name of the user account for which the reconciliation is being done"
                    },
                    "operationType": {
                        "type": "string",
                        "description": "Type of the reconciliation operation.",
                        "enum": [
                            "REC (Reconciliation start or stop)",
                            "GP (Group permissions)",
                            "UAP (User attributes permissions)",
                            "UMOD (User modification)"
                        ]
                    },
                    "remediationPolicy": {
                        "type": "string",
                        "description": "Remediation policy used during the reconciliation",
                        "enum": [
                            "ON_TARGET",
                            "ON_CI"
                        ]
                    },
                    "operationStatus": {
                        "type": "string",
                        "description": "Progress status of the operation"
                    },
                    "reason": {
                        "$ref": "#/components/schemas/ReasonBean"
                    },
                    "groupInfo": {
                        "$ref": "#/components/schemas/ReconOpGroupInfoBean"
                    },
                    "timestamp": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "OperationRecordResultsBean": {
                "required": [
                    "operations",
                    "totalCount"
                ],
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of records found.",
                        "format": "int64"
                    },
                    "operations": {
                        "type": "array",
                        "description": "List of all the operations performed during a reconciliation.",
                        "items": {
                            "$ref": "#/components/schemas/OperationRecordBean"
                        }
                    }
                }
            },
            "ReasonBean": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "ReconOpGroupInfoBean": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    }
                }
            },
            "ReconStatusBean": {
                "type": "object",
                "properties": {
                    "reconciliation": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReconciliationStatsBean"
                        }
                    },
                    "totalCount": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "ReconciliationStatsBean": {
                "required": [
                    "applicationId",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Entity."
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "Stats of reconciliation of all applications of given tenant"
                    },
                    "applicationName": {
                        "type": "string"
                    },
                    "applicationDesc": {
                        "type": "string"
                    },
                    "applicationType": {
                        "type": "string"
                    },
                    "templateId": {
                        "type": "string"
                    },
                    "reconciliationId": {
                        "type": "string"
                    },
                    "iconBean": {
                        "type": "string"
                    },
                    "defaultIcon": {
                        "type": "string"
                    },
                    "customIcon": {
                        "type": "string"
                    },
                    "reconStats": {
                        "$ref": "#/components/schemas/reconStats"
                    }
                }
            },
            "reconStats": {
                "type": "object",
                "properties": {
                    "adoptionStatus": {
                        "type": "string"
                    },
                    "reconOpType": {
                        "type": "string"
                    },
                    "reconStartTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "reconEndTime": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "Link": {
                "required": [
                    "icon",
                    "id",
                    "linkName",
                    "url"
                ],
                "type": "object",
                "properties": {
                    "icon": {
                        "type": "string",
                        "description": "URI of the icon API for the application"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for an application"
                    },
                    "linkName": {
                        "type": "string",
                        "description": "Name of the application or sub-application"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL associated with the application which will be used to trigger Single-Sign-On"
                    },
                    "pendingRequest": {
                        "type": "boolean",
                        "description": "Indicates if access request is pending for the app, seen only with 'type=discretionary' query parameter"
                    }
                }
            },
            "SearchUserApplicationResponseBean": {
                "required": [
                    "applications"
                ],
                "type": "object",
                "properties": {
                    "applications": {
                        "type": "array",
                        "description": "List of applications that a user is entitled to",
                        "items": {
                            "$ref": "#/components/schemas/UserApplicationBean"
                        }
                    }
                }
            },
            "UserApplicationBean": {
                "required": [
                    "links",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the application"
                    },
                    "links": {
                        "type": "array",
                        "description": "More information about the application",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "Description for the application"
                    },
                    "status": {
                        "type": "array",
                        "description": "Status of the application",
                        "items": {
                            "type": "string"
                        }
                    },
                    "category": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {}
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "Application identifier"
                    }
                }
            },
            "UserAuthorizationResponseBean": {
                "type": "object",
                "properties": {
                    "authPolicyId": {
                        "type": "string",
                        "description": "Unique identifier of the Access Policy"
                    },
                    "entitled": {
                        "type": "boolean",
                        "description": "True if the user is entitled to access the application, else false"
                    }
                }
            },
            "Group": {
                "required": [
                    "uuid"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Group."
                    },
                    "uuid": {
                        "type": "string",
                        "description": "A string containing UUID of the Group."
                    }
                }
            },
            "TokenBean": {
                "required": [
                    "userId"
                ],
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "Unique Identifier of the user"
                    },
                    "groups": {
                        "type": "array",
                        "description": "List of unique identifiers of the groups which the above user is a member",
                        "items": {
                            "$ref": "#/components/schemas/Group"
                        }
                    }
                }
            },
            "Chain": {
                "type": "object",
                "properties": {
                    "commands": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Command"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "logger": {
                        "$ref": "#/components/schemas/FIMLogger"
                    },
                    "participatingInTelemetryFlag": {
                        "type": "boolean"
                    }
                }
            },
            "Command": {
                "type": "object"
            },
            "FIMLogger": {
                "type": "object",
                "properties": {
                    "tracing": {
                        "type": "boolean"
                    }
                }
            },
            "ContextParameter": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "object",
                        "properties": {}
                    }
                }
            },
            "AttributeFunction": {
                "required": [
                    "description",
                    "displayName",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The function name",
                        "example": "uppercase"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Human-readable name for the function",
                        "example": "Uppercase"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description for the function",
                        "example": "Converts a string to uppercase."
                    }
                }
            },
            "ErrorBean": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "readOnly": true
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "The Locale specific descriptive message",
                        "readOnly": true
                    }
                }
            },
            "Constraints": {
                "type": "object",
                "properties": {
                    "readAccessForEndUser": {
                        "type": "boolean"
                    },
                    "writeAccessForEndUser": {
                        "type": "boolean"
                    },
                    "mandatory": {
                        "type": "boolean"
                    },
                    "unique": {
                        "type": "boolean"
                    },
                    "valueConstraint": {
                        "$ref": "#/components/schemas/ValueConstraint"
                    },
                    "valueConstraintFormat": {
                        "type": "string"
                    },
                    "valueConstraintType": {
                        "type": "string"
                    }
                }
            },
            "Function": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The function name",
                        "example": "uppercase"
                    },
                    "custom": {
                        "type": "string",
                        "description": "The custom function",
                        "example": "args.user.name.givenName"
                    }
                }
            },
            "ProfileAttribute": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the attribute in the application profile.",
                        "example": "username"
                    }
                }
            },
            "SchemaAttribute": {
                "required": [
                    "attributeName",
                    "customAttribute",
                    "name",
                    "scimName"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The unique name for the attribute in the Cloud Directory schema. For custom schema attributes, the names are predefined and named customAttribute1 through customAttribute150",
                        "example": "customAttribute5"
                    },
                    "attributeName": {
                        "type": "string",
                        "description": "The attribute name in the schema that is associated with the attribute source",
                        "example": "car"
                    },
                    "scimName": {
                        "type": "string",
                        "description": "The SCIM name that is associated with the schema attribute",
                        "example": "car"
                    },
                    "customAttribute": {
                        "type": "boolean",
                        "description": "The flag that indicates whether this is a custom attribute",
                        "example": true
                    }
                }
            },
            "ValueConstraint": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "value": {
                        "type": "object",
                        "properties": {}
                    },
                    "format": {
                        "type": "string"
                    }
                }
            },
            "PatchSingleAttributeReqModel": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The human-readable name of the attribute. Maximum length is 2048 characters",
                        "example": "Hobbies"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the attribute. Maximum length is 2048 characters",
                        "example": "The hobbies of the user"
                    },
                    "sourceType": {
                        "type": "string",
                        "description": "The type of the attribute source from which the attribute value is derived",
                        "example": "static",
                        "enum": [
                            "static",
                            "credential",
                            "schema"
                        ]
                    },
                    "datatype": {
                        "type": "string",
                        "description": "The type of derived data that is expected for the attribute. Defaults to string",
                        "example": "string[]",
                        "enum": [
                            "string",
                            "boolean",
                            "integer",
                            "string[]",
                            "integer[]"
                        ]
                    },
                    "tags": {
                        "type": "array",
                        "description": "The tags used to categorize attributes. Maximum number of tags is 25",
                        "example": "sso",
                        "items": {
                            "type": "string"
                        }
                    },
                    "value": {
                        "type": "string",
                        "description": "The default value of the attribute. This value also refers to the fixed value for sourceType=\"static\". Maximum length is 2048 characters",
                        "example": "Reading"
                    },
                    "credName": {
                        "type": "string",
                        "description": "The name of the attribute in the login session credentials. Maximum length is 2048 characters",
                        "example": "user_hobbies"
                    },
                    "credNameOverrides": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Realm specific name of the attribute in the login session credentials. This property is specified in the form of key-value pairs where the key is the name of the realm  and the value is the name of the attribute used to override the 'credName' property. Maximum length is 2048 characters"
                    },
                    "function": {
                        "$ref": "#/components/schemas/Function"
                    },
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Identifies the attribute custom properties that is attached to this attribute. These custom properties can be any user-defined key-value pairs that help identify or categorize the attribute. The maximum number of custom properties that can be defined is 25"
                    }
                }
            },
            "PatchOperationResponse": {
                "required": [
                    "messageDescription",
                    "messageId",
                    "results"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The error ID describing the overall status of the patch operation"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "The error message describing the overall status of the patch operation"
                    },
                    "results": {
                        "type": "array",
                        "description": "The list of execution results for the patch operations requested",
                        "items": {
                            "$ref": "#/components/schemas/PatchOperationResult"
                        }
                    }
                }
            },
            "PatchOperationResult": {
                "required": [
                    "op",
                    "path",
                    "result"
                ],
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "description": "The patch operation to be executed",
                        "enum": [
                            "remove",
                            "update"
                        ]
                    },
                    "path": {
                        "type": "string",
                        "description": "The attribute id for the patch operation",
                        "example": "57d7581c-9e0a-4a9e-bfff-0ceab52d23aa"
                    },
                    "value": {
                        "type": "string",
                        "description": "The values to update for the resource"
                    },
                    "result": {
                        "type": "string",
                        "description": "The result of the operation",
                        "enum": [
                            "success",
                            "failure"
                        ]
                    },
                    "errorID": {
                        "type": "string",
                        "description": "The error ID describing any failures or errors that occurred"
                    },
                    "error": {
                        "type": "string",
                        "description": "The error message describing any failures or errors that occurred"
                    }
                }
            },
            "PatchOperation": {
                "required": [
                    "op",
                    "path"
                ],
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "description": "The patch operation to be executed",
                        "enum": [
                            "remove",
                            "update"
                        ]
                    },
                    "path": {
                        "type": "string",
                        "description": "The attribute id for the patch operation",
                        "example": "57d7581c-9e0a-4a9e-bfff-0ceab52d23aa"
                    },
                    "value": {
                        "type": "object",
                        "properties": {},
                        "description": "The values to update for the resource.<br><br>For global attributes, the following values can be updated using the PATCH API: tags, value, credNameOverrides, function. <br><br>For custom attributes, the following values can be updated using the PATCH API: name, description, sourceType, datatype, tags, value, credName, credNameOverrides, function"
                    }
                }
            },
            "Chain1": {
                "type": "object",
                "properties": {
                    "commands": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Command1"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "logger": {
                        "$ref": "#/components/schemas/FIMLogger1"
                    },
                    "participatingInTelemetryFlag": {
                        "type": "boolean"
                    }
                }
            },
            "FIMLogger1": {
                "type": "object",
                "properties": {
                    "tracing": {
                        "type": "boolean"
                    }
                }
            },
            "Command1": {
                "type": "object"
            },
            "ContextParameter1": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "object",
                        "properties": {}
                    }
                }
            },
            "QueryResultBean": {
                "type": "object",
                "properties": {
                    "errorCode": {
                        "type": "string",
                        "description": "The error code"
                    },
                    "error": {
                        "type": "string",
                        "description": "Any error that occured during query"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the attribute"
                    },
                    "credName": {
                        "type": "string",
                        "description": "The cred names of the attribute"
                    },
                    "value": {
                        "type": "object",
                        "properties": {},
                        "description": "Value of the attribute obtained from the sources"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of data of the value returned"
                    },
                    "schemaAttribute": {
                        "$ref": "#/components/schemas/SchemaAttribute1"
                    }
                }
            },
            "PreviewInputBean": {
                "required": [
                    "attribute"
                ],
                "type": "object",
                "properties": {
                    "uid": {
                        "type": "string",
                        "description": "Cloud Directory user identifier",
                        "example": "50UCTG33KX"
                    },
                    "user": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Cloud Directory user account in SCIM format. Refer to the response model specified in User Management Version 2.0 - /v2.0/Users/{id}. Use this to modify user information without modifying the user account."
                    },
                    "idsuser": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Identity source user token in a normalized Map of String -> String[] format."
                    },
                    "attribute": {
                        "$ref": "#/components/schemas/Attribute1"
                    }
                }
            },
            "JsonArray": {
                "type": "object",
                "properties": {
                    "empty": {
                        "type": "boolean"
                    },
                    "asNumber": {
                        "$ref": "#/components/schemas/Number"
                    },
                    "asString": {
                        "type": "string"
                    },
                    "asDouble": {
                        "type": "number",
                        "format": "double"
                    },
                    "asBigDecimal": {
                        "type": "number"
                    },
                    "asBigInteger": {
                        "type": "integer"
                    },
                    "asFloat": {
                        "type": "number",
                        "format": "float"
                    },
                    "asLong": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "asInt": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "asByte": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                    },
                    "asCharacter": {
                        "type": "string"
                    },
                    "asShort": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "asBoolean": {
                        "type": "boolean"
                    },
                    "jsonArray": {
                        "type": "boolean"
                    },
                    "jsonObject": {
                        "type": "boolean"
                    },
                    "jsonPrimitive": {
                        "type": "boolean"
                    },
                    "jsonNull": {
                        "type": "boolean"
                    },
                    "asJsonObject": {
                        "$ref": "#/components/schemas/JsonObject"
                    },
                    "asJsonArray": {
                        "$ref": "#/components/schemas/JsonArray"
                    },
                    "asJsonPrimitive": {
                        "$ref": "#/components/schemas/JsonPrimitive"
                    },
                    "asJsonNull": {
                        "$ref": "#/components/schemas/JsonNull"
                    }
                }
            },
            "JsonNull": {
                "type": "object",
                "properties": {
                    "jsonArray": {
                        "type": "boolean"
                    },
                    "jsonObject": {
                        "type": "boolean"
                    },
                    "jsonPrimitive": {
                        "type": "boolean"
                    },
                    "jsonNull": {
                        "type": "boolean"
                    },
                    "asJsonObject": {
                        "$ref": "#/components/schemas/JsonObject"
                    },
                    "asJsonArray": {
                        "$ref": "#/components/schemas/JsonArray"
                    },
                    "asJsonPrimitive": {
                        "$ref": "#/components/schemas/JsonPrimitive"
                    },
                    "asJsonNull": {
                        "$ref": "#/components/schemas/JsonNull"
                    },
                    "asBoolean": {
                        "type": "boolean"
                    },
                    "asNumber": {
                        "$ref": "#/components/schemas/Number"
                    },
                    "asString": {
                        "type": "string"
                    },
                    "asDouble": {
                        "type": "number",
                        "format": "double"
                    },
                    "asFloat": {
                        "type": "number",
                        "format": "float"
                    },
                    "asLong": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "asInt": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "asByte": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                    },
                    "asCharacter": {
                        "type": "string"
                    },
                    "asBigDecimal": {
                        "type": "number"
                    },
                    "asBigInteger": {
                        "type": "integer"
                    },
                    "asShort": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "JsonObject": {
                "type": "object",
                "properties": {
                    "jsonArray": {
                        "type": "boolean"
                    },
                    "jsonObject": {
                        "type": "boolean"
                    },
                    "jsonPrimitive": {
                        "type": "boolean"
                    },
                    "jsonNull": {
                        "type": "boolean"
                    },
                    "asJsonObject": {
                        "$ref": "#/components/schemas/JsonObject"
                    },
                    "asJsonArray": {
                        "$ref": "#/components/schemas/JsonArray"
                    },
                    "asJsonPrimitive": {
                        "$ref": "#/components/schemas/JsonPrimitive"
                    },
                    "asJsonNull": {
                        "$ref": "#/components/schemas/JsonNull"
                    },
                    "asBoolean": {
                        "type": "boolean"
                    },
                    "asNumber": {
                        "$ref": "#/components/schemas/Number"
                    },
                    "asString": {
                        "type": "string"
                    },
                    "asDouble": {
                        "type": "number",
                        "format": "double"
                    },
                    "asFloat": {
                        "type": "number",
                        "format": "float"
                    },
                    "asLong": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "asInt": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "asByte": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                    },
                    "asCharacter": {
                        "type": "string"
                    },
                    "asBigDecimal": {
                        "type": "number"
                    },
                    "asBigInteger": {
                        "type": "integer"
                    },
                    "asShort": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "JsonPrimitive": {
                "type": "object",
                "properties": {
                    "boolean": {
                        "type": "boolean"
                    },
                    "asBoolean": {
                        "type": "boolean"
                    },
                    "number": {
                        "type": "boolean"
                    },
                    "asNumber": {
                        "$ref": "#/components/schemas/Number"
                    },
                    "string": {
                        "type": "boolean"
                    },
                    "asString": {
                        "type": "string"
                    },
                    "asDouble": {
                        "type": "number",
                        "format": "double"
                    },
                    "asBigDecimal": {
                        "type": "number"
                    },
                    "asBigInteger": {
                        "type": "integer"
                    },
                    "asFloat": {
                        "type": "number",
                        "format": "float"
                    },
                    "asLong": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "asShort": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "asInt": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "asByte": {
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                        "format": "byte"
                    },
                    "asCharacter": {
                        "type": "string"
                    },
                    "jsonArray": {
                        "type": "boolean"
                    },
                    "jsonObject": {
                        "type": "boolean"
                    },
                    "jsonPrimitive": {
                        "type": "boolean"
                    },
                    "jsonNull": {
                        "type": "boolean"
                    },
                    "asJsonObject": {
                        "$ref": "#/components/schemas/JsonObject"
                    },
                    "asJsonArray": {
                        "$ref": "#/components/schemas/JsonArray"
                    },
                    "asJsonPrimitive": {
                        "$ref": "#/components/schemas/JsonPrimitive"
                    },
                    "asJsonNull": {
                        "$ref": "#/components/schemas/JsonNull"
                    }
                }
            },
            "Number": {
                "type": "object"
            },
            "QueryInputBean": {
                "required": [
                    "uid"
                ],
                "type": "object",
                "properties": {
                    "uid": {
                        "type": "string",
                        "description": "UID of the user.<br>UID is required for /attributequery API and not needed for /attributequery/preview API",
                        "example": "cd_uid"
                    },
                    "user": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "CD user object in SCIM format.",
                        "example": "{\"userName\": \"userName\", \"externalId\": \"externalId\", \"emails\": [ { \"type\": \"work\", \"value\": \"userobject@userobject.com\" } ] }"
                    },
                    "ids": {
                        "type": "array",
                        "description": "List of attribute Ids.<br>Ids is optional for /attributequery API and not needed for /attributequery/preview API",
                        "example": "[\"[email_id]\"]",
                        "items": {
                            "type": "string"
                        }
                    },
                    "names": {
                        "type": "array",
                        "description": "List of attribute names.<br>Names is optional for /attributequery API and not needed for /attributequery/preview API",
                        "example": "[\"preferred_username\"]",
                        "items": {
                            "type": "string"
                        }
                    },
                    "idsuser": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The identity source user in the format of String key to a String array value.",
                        "example": "{ \"preferred_username\": [\"idsuser-preferred_username\"] }"
                    },
                    "idsmappings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The identity source profile mappings in the format of attribute ID to identity source attribute name.",
                        "example": "{ \"11\": \"phoneNumber\" }"
                    },
                    "postEval": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Post function which applied to the existing value.<br>Posteval is optional for /attributequery API and not needed for /attributequery/preview API",
                        "example": "{}"
                    },
                    "idsrealm": {
                        "type": "string",
                        "description": "The identity source realm name that should be used to derive values from the idsuser.<br>Idsrealm is optional for /attributequery API and not needed for /attributequery/preview API",
                        "example": "random_realm"
                    },
                    "account": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The target user account details used for provisioning/recon scenarios.<br>Account is optional for /attributequery/preview API and not needed for /attributequery API",
                        "example": "{ \"name\": \"John\" }"
                    },
                    "app": {
                        "$ref": "#/components/schemas/JsonObject"
                    },
                    "requestContext": {
                        "$ref": "#/components/schemas/JsonObject"
                    }
                }
            },
            "MappingBean": {
                "required": [
                    "attrid",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name provided to be used as the key in the response"
                    },
                    "attrid": {
                        "type": "string",
                        "description": "ID of the attribute to map to"
                    }
                }
            },
            "TransientLookupBean": {
                "required": [
                    "mappings",
                    "uid"
                ],
                "type": "object",
                "properties": {
                    "uid": {
                        "type": "string",
                        "description": "UID of the user"
                    },
                    "mappings": {
                        "type": "array",
                        "description": "List of mappings, i.e. name and attribute ID",
                        "items": {
                            "$ref": "#/components/schemas/MappingBean"
                        }
                    }
                }
            },
            "UserQueryResultBean": {
                "type": "object",
                "properties": {
                    "uid": {
                        "type": "array",
                        "description": "The list of matching user(s) for the attributes searched",
                        "example": "['60UN001']",
                        "items": {
                            "type": "string"
                        }
                    },
                    "mappings": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/QueryResultBean"
                        },
                        "description": "The attribute values queried for the user, only returned in the case of a single matching user"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "Message describing any status or errors from the user query"
                    },
                    "messageId": {
                        "type": "string",
                        "description": "The message identifier"
                    }
                }
            },
            "UserQueryArgsBean": {
                "required": [
                    "account",
                    "attrIds",
                    "principalAttributes"
                ],
                "type": "object",
                "properties": {
                    "account": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The attributes of the account",
                        "example": "{'emailAdd': 'example@test.com', 'userid': 'user01'}"
                    },
                    "principalAttributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The mapping of principal attributes to their corresponding attribute IDs",
                        "example": "{'emailAdd': '3', 'userid': '5'}"
                    },
                    "attrIds": {
                        "type": "array",
                        "description": "The list of the attribute IDs to be queried",
                        "example": "['1','5','7','11']",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "UserQueryBean": {
                "required": [
                    "args"
                ],
                "type": "object",
                "properties": {
                    "args": {
                        "$ref": "#/components/schemas/UserQueryArgsBean"
                    }
                }
            },
            "Chain2": {
                "type": "object",
                "properties": {
                    "commands": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Command2"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "logger": {
                        "$ref": "#/components/schemas/FIMLogger2"
                    },
                    "participatingInTelemetryFlag": {
                        "type": "boolean"
                    }
                }
            },
            "Function1": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The function name",
                        "example": "uppercase"
                    },
                    "custom": {
                        "type": "string",
                        "description": "The custom function",
                        "example": "args.user.name.givenName"
                    }
                }
            },
            "FIMLogger2": {
                "type": "object",
                "properties": {
                    "tracing": {
                        "type": "boolean"
                    }
                }
            },
            "Constraints1": {
                "type": "object",
                "properties": {
                    "readAccessForEndUser": {
                        "type": "boolean"
                    },
                    "writeAccessForEndUser": {
                        "type": "boolean"
                    },
                    "mandatory": {
                        "type": "boolean"
                    },
                    "unique": {
                        "type": "boolean"
                    },
                    "valueConstraint": {
                        "$ref": "#/components/schemas/ValueConstraint1"
                    },
                    "valueConstraintFormat": {
                        "type": "string"
                    },
                    "valueConstraintType": {
                        "type": "string"
                    }
                }
            },
            "Command2": {
                "type": "object"
            },
            "Attribute1": {
                "required": [
                    "datatype",
                    "name",
                    "sourceType"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the attribute"
                    },
                    "name": {
                        "type": "string",
                        "description": "The human-readable name of the attribute. Maximum length is 2048 characters",
                        "example": "externalId"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the attribute. Maximum length is 2048 characters",
                        "example": "The user's id."
                    },
                    "scope": {
                        "type": "string",
                        "description": "Identifies whether the attribute is defined globally by the system or specific to the tenant",
                        "example": "tenant"
                    },
                    "sourceType": {
                        "type": "string",
                        "description": "The type of the attribute source from which the attribute value is derived",
                        "example": "schema",
                        "enum": [
                            "static",
                            "credential",
                            "schema",
                            "profile"
                        ]
                    },
                    "datatype": {
                        "type": "string",
                        "description": "The type of derived data that is expected for the attribute. Defaults to string. The integer datatype is used for any numerical value.",
                        "example": "string",
                        "enum": [
                            "string",
                            "boolean",
                            "integer",
                            "string[]",
                            "integer[]"
                        ]
                    },
                    "tags": {
                        "type": "array",
                        "description": "The tags used to categorize attributes. Maximum number of tags is 25",
                        "items": {
                            "type": "string"
                        }
                    },
                    "value": {
                        "type": "string",
                        "description": "The default value of the attribute. This value also refers to the fixed value for sourceType=\"static\". Maximum length is 2048 characters"
                    },
                    "credName": {
                        "type": "string",
                        "description": "The name of the attribute in the login session credentials. Maximum length is 2048 characters",
                        "example": "ibmid.uid"
                    },
                    "credNameOverrides": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Realm specific name of the attribute in the login session credentials. This property is specified in the form of key-value pairs where the key is the name of the realm  and the value is the name of the attribute used to override the 'credName' property. Maximum length is 2048 characters",
                        "example": "{ \"auth0\": \"uid\" }"
                    },
                    "schemaAttribute": {
                        "$ref": "#/components/schemas/SchemaAttribute1"
                    },
                    "profileAttribute": {
                        "$ref": "#/components/schemas/ProfileAttribute1"
                    },
                    "constraints": {
                        "$ref": "#/components/schemas/Constraints1"
                    },
                    "function": {
                        "$ref": "#/components/schemas/Function1"
                    },
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Identifies the attribute custom properties that are attached to this attribute",
                        "example": "{ \"customKey1\": \"customValue\" }"
                    }
                }
            },
            "ErrorBean1": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "readOnly": true
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "The Locale specific descriptive message",
                        "readOnly": true
                    }
                }
            },
            "ProfileAttribute1": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the attribute in the application profile.",
                        "example": "username"
                    }
                }
            },
            "ContextParameter2": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "object",
                        "properties": {}
                    }
                }
            },
            "ValueConstraint1": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "value": {
                        "type": "object",
                        "properties": {}
                    },
                    "format": {
                        "type": "string"
                    }
                }
            },
            "SchemaAttribute1": {
                "required": [
                    "attributeName",
                    "customAttribute",
                    "name",
                    "scimName"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The unique name for the attribute in the Cloud Directory schema. For custom schema attributes, the names are predefined and named customAttribute1 through customAttribute150",
                        "example": "customAttribute5"
                    },
                    "attributeName": {
                        "type": "string",
                        "description": "The attribute name in the schema that is associated with the attribute source",
                        "example": "car"
                    },
                    "scimName": {
                        "type": "string",
                        "description": "The SCIM name that is associated with the schema attribute",
                        "example": "car"
                    },
                    "customAttribute": {
                        "type": "boolean",
                        "description": "The flag that indicates whether this is a custom attribute",
                        "example": true
                    }
                }
            },
            "Attribute_0": {
                "required": [
                    "datatype",
                    "name",
                    "sourceType"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the attribute"
                    },
                    "name": {
                        "type": "string",
                        "description": "The human-readable name of the attribute. Maximum length is 2048 characters",
                        "example": "externalId"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the attribute. Maximum length is 2048 characters",
                        "example": "The user's id."
                    },
                    "scope": {
                        "type": "string",
                        "description": "Identifies whether the attribute is defined globally by the system or specific to the tenant",
                        "example": "tenant"
                    },
                    "sourceType": {
                        "type": "string",
                        "description": "The type of the attribute source from which the attribute value is derived",
                        "example": "schema",
                        "enum": [
                            "static",
                            "credential",
                            "schema",
                            "profile"
                        ]
                    },
                    "datatype": {
                        "type": "string",
                        "description": "The type of derived data that is expected for the attribute. Defaults to string. The integer datatype is used for any numerical value.",
                        "example": "string",
                        "enum": [
                            "string",
                            "boolean",
                            "integer",
                            "string[]",
                            "integer[]"
                        ]
                    },
                    "tags": {
                        "type": "array",
                        "description": "The tags used to categorize attributes. Maximum number of tags is 25",
                        "items": {
                            "type": "string"
                        }
                    },
                    "value": {
                        "type": "string",
                        "description": "The default value of the attribute. This value also refers to the fixed value for sourceType=\"static\". Maximum length is 2048 characters"
                    },
                    "credName": {
                        "type": "string",
                        "description": "The name of the attribute in the login session credentials. Maximum length is 2048 characters",
                        "example": "ibmid.uid"
                    },
                    "credNameOverrides": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Realm specific name of the attribute in the login session credentials. This property is specified in the form of key-value pairs where the key is the name of the realm  and the value is the name of the attribute used to override the 'credName' property. Maximum length is 2048 characters",
                        "example": "{ \"auth0\": \"uid\" }"
                    },
                    "schemaAttribute": {
                        "$ref": "#/components/schemas/SchemaAttribute"
                    },
                    "profileAttribute": {
                        "$ref": "#/components/schemas/ProfileAttribute"
                    },
                    "constraints": {
                        "$ref": "#/components/schemas/Constraints"
                    },
                    "function": {
                        "$ref": "#/components/schemas/Function"
                    },
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Identifies the attribute custom properties that are attached to this attribute",
                        "example": "{ \"customKey1\": \"customValue\" }"
                    }
                }
            },
            "PaginatedAttribute_0": {
                "required": [
                    "limit",
                    "page",
                    "total",
                    "count",
                    "attributes"
                ],
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "integer"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "total": {
                        "type": "integer"
                    },
                    "count": {
                        "type": "integer"
                    },
                    "attributes": {
                        "type": "array",
                        "description": "list of attributes",
                        "items": {
                            "$ref": "#/components/schemas/Attribute_0"
                        }
                    }
                }
            },
            "ProvisionTenant": {
                "type": "object",
                "properties": {
                    "tenantId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "tenant"
                }
            },
            "Locale": {
                "type": "object",
                "properties": {
                    "language": {
                        "type": "string"
                    },
                    "script": {
                        "type": "string"
                    },
                    "country": {
                        "type": "string"
                    },
                    "variant": {
                        "type": "string"
                    },
                    "extensionKeys": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "unicodeLocaleAttributes": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "unicodeLocaleKeys": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "iso3Language": {
                        "type": "string"
                    },
                    "iso3Country": {
                        "type": "string"
                    },
                    "displayLanguage": {
                        "type": "string"
                    },
                    "displayScript": {
                        "type": "string"
                    },
                    "displayCountry": {
                        "type": "string"
                    },
                    "displayVariant": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    }
                }
            },
            "InternalServiceError": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIAG5401E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message.",
                        "example": "CSIAH0601E An internal error occurred in the AuthBroker Service."
                    }
                }
            },
            "AccountExpirationConfig": {
                "required": [
                    "policies"
                ],
                "type": "object",
                "properties": {
                    "policies": {
                        "type": "array",
                        "description": "The list of account expiration policies. Currently only one policy supported.",
                        "items": {
                            "$ref": "#/components/schemas/Policy"
                        }
                    }
                }
            },
            "Criteria": {
                "required": [
                    "loginInactivityInDays"
                ],
                "type": "object",
                "properties": {
                    "loginInactivityInDays": {
                        "type": "integer",
                        "description": "The duration of days between 7 and 1095 days.",
                        "format": "int32"
                    }
                }
            },
            "Policy": {
                "required": [
                    "criteria",
                    "scimFilter"
                ],
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "If this policy is enabled or disabled. Defaults to false."
                    },
                    "scimFilter": {
                        "type": "string",
                        "description": "The value is a valid SCIM filter or empty string. If not specified or empty the policy will apply to the entire population of resource type (currently type is only 'user'."
                    },
                    "criteria": {
                        "$ref": "#/components/schemas/Criteria"
                    }
                }
            },
            "MessageResponse": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIAG5401E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message.",
                        "example": "CSIAG5401E The access token included in the request is not valid."
                    }
                }
            },
            "FirstFactorPolicyConfig": {
                "required": [
                    "policies"
                ],
                "type": "object",
                "properties": {
                    "policies": {
                        "type": "array",
                        "description": "The list of policies. Currently only one policy supported.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "Global": {
                "required": [
                    "allowedRealms",
                    "uniqueUserIdentifiers"
                ],
                "type": "object",
                "properties": {
                    "uniqueUserIdentifiers": {
                        "type": "array",
                        "description": "'uniqueUserIdentifiers' is the list of attributes used for principal user identity linking.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "allowedRealms": {
                        "type": "array",
                        "description": "'allowedRealms' is the list of identity source realms for tenant. Existing identity source realm for the tenant will be present, excluding IBMid (www.ibm.com) and LDAP Passthrough.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "IdentityLink": {
                "type": "object",
                "properties": {
                    "primaryRealms": {
                        "type": "string",
                        "description": "The primay realms available to be configured as default. Existing realms for the tenant will be present, excluding IBMid (www.ibm.com) and LDAP Passthrough. The first value in the sequence will be considered as default realm.",
                        "example": "['cloudIdentityRealm', 'samlRealm1', 'www.facebook.com']",
                        "enum": [
                            "['cloudIdentityRealm'",
                            "'samlRealm1'",
                            "'www.facebook.com'",
                            "'www.google.com'",
                            "'www.linkedin.com'",
                            "'www.twitter.com'",
                            "'www.yahoo.com']"
                        ]
                    }
                }
            },
            "AttributeMapping": {
                "required": [
                    "attrId",
                    "idsAttrName",
                    "jitpOption"
                ],
                "type": "object",
                "properties": {
                    "attrId": {
                        "type": "string",
                        "description": "The IBM Security Verify Cloud Directory attribute identifier.",
                        "example": "12"
                    },
                    "jitpOption": {
                        "type": "string",
                        "description": "The IBM Security Verify Cloud Directory attribute identifier.",
                        "example": "ALWAYS",
                        "enum": [
                            "ALWAYS",
                            "CREATE",
                            "DISABLED",
                            "NONE"
                        ]
                    },
                    "idsAttrName": {
                        "type": "string",
                        "description": "The external identity source attribute name. Only required if identity source is not Cloud Directory.",
                        "example": "dept"
                    },
                    "postEval": {
                        "$ref": "#/components/schemas/PostEval"
                    }
                }
            },
            "GroupSource": {
                "type": "object",
                "properties": {
                    "option": {
                        "type": "string",
                        "description": "Is the authoritative source of all group memberships. This can be Cloud Directory (CD) or an identity source (IDS) or a combination of both (CDIDS). This may also be a custom rule (custom).",
                        "example": "CDIDS"
                    },
                    "custom": {
                        "type": "string",
                        "description": "The custom rule that will be referenced if the 'option' field is set to 'custom'. This is a script that can be authored to filter, say, certain groups like admin but more or less works like CDIDS."
                    }
                }
            },
            "IdentitySourceAttributeMappings": {
                "required": [
                    "attributeMappings"
                ],
                "type": "object",
                "properties": {
                    "attributeMappings": {
                        "type": "array",
                        "description": "The list of attribute mapping objects.",
                        "items": {
                            "$ref": "#/components/schemas/AttributeMapping"
                        }
                    },
                    "groupSource": {
                        "$ref": "#/components/schemas/GroupSource"
                    }
                }
            },
            "PostEval": {
                "required": [
                    "custom",
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "A valid attribute function. This will tranform the attribute mapping. Only one of 'id' or 'custom' can be set on an attribute mapping.",
                        "example": "uppercase"
                    },
                    "custom": {
                        "type": "string",
                        "description": "A custom rule for transforming. This will tranform the attribute mapping. Only one of 'id' or 'custom' can be set on an attribute mapping."
                    }
                }
            },
            "Connection": {
                "type": "object",
                "properties": {
                    "autoCommit": {
                        "type": "boolean"
                    },
                    "closed": {
                        "type": "boolean"
                    },
                    "metaData": {
                        "$ref": "#/components/schemas/DatabaseMetaData"
                    },
                    "readOnly": {
                        "type": "boolean"
                    },
                    "catalog": {
                        "type": "string"
                    },
                    "transactionIsolation": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "warnings": {
                        "$ref": "#/components/schemas/SQLWarning"
                    },
                    "typeMap": {
                        "type": "object",
                        "properties": {}
                    },
                    "holdability": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "clientInfo": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "schema": {
                        "type": "string"
                    },
                    "networkTimeout": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "DatabaseMetaData": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string"
                    },
                    "userName": {
                        "type": "string"
                    },
                    "readOnly": {
                        "type": "boolean"
                    },
                    "databaseProductName": {
                        "type": "string"
                    },
                    "databaseProductVersion": {
                        "type": "string"
                    },
                    "driverName": {
                        "type": "string"
                    },
                    "driverVersion": {
                        "type": "string"
                    },
                    "driverMajorVersion": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "driverMinorVersion": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "identifierQuoteString": {
                        "type": "string"
                    },
                    "sqlkeywords": {
                        "type": "string"
                    },
                    "numericFunctions": {
                        "type": "string"
                    },
                    "stringFunctions": {
                        "type": "string"
                    },
                    "systemFunctions": {
                        "type": "string"
                    },
                    "timeDateFunctions": {
                        "type": "string"
                    },
                    "searchStringEscape": {
                        "type": "string"
                    },
                    "extraNameCharacters": {
                        "type": "string"
                    },
                    "schemaTerm": {
                        "type": "string"
                    },
                    "procedureTerm": {
                        "type": "string"
                    },
                    "catalogTerm": {
                        "type": "string"
                    },
                    "catalogAtStart": {
                        "type": "boolean"
                    },
                    "catalogSeparator": {
                        "type": "string"
                    },
                    "maxBinaryLiteralLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxCharLiteralLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxColumnNameLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxColumnsInGroupBy": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxColumnsInIndex": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxColumnsInOrderBy": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxColumnsInSelect": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxColumnsInTable": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxConnections": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxCursorNameLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxIndexLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxSchemaNameLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxProcedureNameLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxCatalogNameLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxRowSize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxStatementLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxStatements": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxTableNameLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxTablesInSelect": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxUserNameLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "defaultTransactionIsolation": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "schemas": {
                        "$ref": "#/components/schemas/ResultSet"
                    },
                    "catalogs": {
                        "$ref": "#/components/schemas/ResultSet"
                    },
                    "tableTypes": {
                        "$ref": "#/components/schemas/ResultSet"
                    },
                    "typeInfo": {
                        "$ref": "#/components/schemas/ResultSet"
                    },
                    "connection": {
                        "$ref": "#/components/schemas/Connection"
                    },
                    "resultSetHoldability": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "databaseMajorVersion": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "databaseMinorVersion": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "jdbcmajorVersion": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "jdbcminorVersion": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "sqlstateType": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "rowIdLifetime": {
                        "type": "string",
                        "enum": [
                            "ROWID_UNSUPPORTED",
                            "ROWID_VALID_OTHER",
                            "ROWID_VALID_SESSION",
                            "ROWID_VALID_TRANSACTION",
                            "ROWID_VALID_FOREVER"
                        ]
                    },
                    "clientInfoProperties": {
                        "$ref": "#/components/schemas/ResultSet"
                    },
                    "maxLogicalLobSize": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "JsonDatabaseMapping": {
                "type": "object",
                "properties": {
                    "jsonField": {
                        "type": "string"
                    },
                    "databaseColumn": {
                        "type": "string"
                    },
                    "databaseType": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "ResultSet": {
                "type": "object",
                "properties": {
                    "warnings": {
                        "$ref": "#/components/schemas/SQLWarning"
                    },
                    "cursorName": {
                        "type": "string"
                    },
                    "metaData": {
                        "$ref": "#/components/schemas/ResultSetMetaData"
                    },
                    "beforeFirst": {
                        "type": "boolean"
                    },
                    "afterLast": {
                        "type": "boolean"
                    },
                    "first": {
                        "type": "boolean"
                    },
                    "last": {
                        "type": "boolean"
                    },
                    "row": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "fetchDirection": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "fetchSize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "type": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "concurrency": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "statement": {
                        "$ref": "#/components/schemas/Statement"
                    },
                    "holdability": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "closed": {
                        "type": "boolean"
                    }
                }
            },
            "ResultSetMetaData": {
                "type": "object",
                "properties": {
                    "columnCount": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "SAML20IdentitySourceHelper": {
                "type": "object",
                "properties": {
                    "jsonToDatabaseMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonDatabaseMapping"
                        }
                    },
                    "jsonToDatabaseSortMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JsonDatabaseMapping"
                        }
                    },
                    "connection": {
                        "$ref": "#/components/schemas/Connection"
                    },
                    "realm": {
                        "type": "string"
                    },
                    "idsId": {
                        "type": "string"
                    },
                    "fedId": {
                        "type": "string"
                    },
                    "partnerId": {
                        "type": "string"
                    },
                    "acsURL": {
                        "type": "string"
                    },
                    "entityID": {
                        "type": "string"
                    }
                }
            },
            "SQLException": {
                "type": "object",
                "properties": {
                    "cause": {
                        "$ref": "#/components/schemas/Throwable"
                    },
                    "stackTrace": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StackTraceElement"
                        }
                    },
                    "sqlstate": {
                        "type": "string"
                    },
                    "errorCode": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "nextException": {
                        "$ref": "#/components/schemas/SQLException"
                    },
                    "message": {
                        "type": "string"
                    },
                    "localizedMessage": {
                        "type": "string"
                    },
                    "suppressed": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Throwable"
                        }
                    }
                }
            },
            "SQLWarning": {
                "type": "object",
                "properties": {
                    "cause": {
                        "$ref": "#/components/schemas/Throwable"
                    },
                    "stackTrace": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StackTraceElement"
                        }
                    },
                    "nextWarning": {
                        "$ref": "#/components/schemas/SQLWarning"
                    },
                    "sqlstate": {
                        "type": "string"
                    },
                    "errorCode": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "nextException": {
                        "$ref": "#/components/schemas/SQLException"
                    },
                    "message": {
                        "type": "string"
                    },
                    "localizedMessage": {
                        "type": "string"
                    },
                    "suppressed": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Throwable"
                        }
                    }
                }
            },
            "Statement": {
                "type": "object",
                "properties": {
                    "maxFieldSize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "maxRows": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "queryTimeout": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "warnings": {
                        "$ref": "#/components/schemas/SQLWarning"
                    },
                    "resultSet": {
                        "$ref": "#/components/schemas/ResultSet"
                    },
                    "updateCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "moreResults": {
                        "type": "boolean"
                    },
                    "fetchDirection": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "fetchSize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "resultSetConcurrency": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "resultSetType": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "connection": {
                        "$ref": "#/components/schemas/Connection"
                    },
                    "generatedKeys": {
                        "$ref": "#/components/schemas/ResultSet"
                    },
                    "resultSetHoldability": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "closed": {
                        "type": "boolean"
                    },
                    "poolable": {
                        "type": "boolean"
                    },
                    "closeOnCompletion": {
                        "type": "boolean"
                    },
                    "largeUpdateCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "largeMaxRows": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "IdentitySourceInstancesPropertiesData": {
                "required": [
                    "key",
                    "sensitive",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "sensitive": {
                        "type": "boolean",
                        "description": "Indicates whether this property holds any secrets that should not be disclosed.<br> If the property is sensitive, then the property value will be masked out with asterisk characters.",
                        "example": false
                    },
                    "key": {
                        "type": "string",
                        "description": "Property key.",
                        "example": "realm"
                    },
                    "value": {
                        "type": "string",
                        "description": "Property value. Secret values will be masked out with asterisk characters.",
                        "example": "cloudIdentityRealm"
                    }
                }
            },
            "IdentitySourceInstancesData": {
                "required": [
                    "enabled",
                    "instanceName",
                    "properties",
                    "sourceTypeId"
                ],
                "type": "object",
                "properties": {
                    "sourceTypeId": {
                        "maximum": 17,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The numeric identifier of identity provider type.",
                        "format": "int32",
                        "example": 5
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "The instance name to be displayed on login selection page.",
                        "example": "Cloud Directory"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A Boolean flag that indicates whether this instance is enabled or disabled. Only enabled identity source instances are displayed on the login selection page. ",
                        "example": true
                    },
                    "status": {
                        "type": "string",
                        "description": "A string label that indicates whether this instance is configured. If specified, this property is ignored during creation. ",
                        "example": "configured ",
                        "enum": [
                            "configured",
                            "unconfigured"
                        ]
                    },
                    "predefined": {
                        "type": "boolean",
                        "description": "This property is currently not in use. We do not support plugging-in any other custom types of identity providers.\n However, the purpose was to indicate that this instance is special; it neither be created and nor deleted.",
                        "example": false
                    },
                    "properties": {
                        "type": "array",
                        "description": "A set of properties that are associated with the identity source instance.\n  It is an array of properties of identity source instance that are required to perform the runtime login flow.\n  The properties and the number of properties differ with the provider type.",
                        "items": {
                            "$ref": "#/components/schemas/IdentitySourceInstancesPropertiesData"
                        }
                    },
                    "attributeMappings": {
                        "type": "array",
                        "description": "A set of attribute mappings that are associated with the identity source instance.\n It is an array of attribute mappings that are not required but an optional input for certain runtime login flows.\n The properties and the number of properties differe with the provider type.",
                        "items": {
                            "$ref": "#/components/schemas/AttributeMapping"
                        }
                    }
                }
            },
            "IdentitySourceIntancesDataList": {
                "required": [
                    "identitySources",
                    "total"
                ],
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "description": "Total number of identity source intances configured for the tenant.",
                        "format": "int32",
                        "example": 1
                    },
                    "identitySources": {
                        "type": "array",
                        "description": "A list of identity source intances configured for the tenant.",
                        "items": {
                            "$ref": "#/components/schemas/IdentitySourceInstancesData"
                        }
                    }
                }
            },
            "CreateConflict": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIAG5401E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message.",
                        "example": "CSIAG0607E The creation of the identity source resource failed."
                    }
                }
            },
            "DeleteConflict": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIAG5401E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message.",
                        "example": "CSIAG0659E The updation of the identity source resource failed."
                    }
                }
            },
            "IdentitySourceTypesData": {
                "required": [
                    "description",
                    "displayName",
                    "enabled",
                    "id",
                    "multiInstance",
                    "predefined",
                    "properties",
                    "providerType",
                    "realmName",
                    "sourceCategory"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "maximum": 12,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The numeric identifier of identity provider type.",
                        "format": "int32",
                        "example": 1
                    },
                    "sourceCategory": {
                        "type": "string",
                        "description": "A broad category of identity provider depending on the underlying protocol.",
                        "example": "localregistry",
                        "enum": [
                            "localregistry",
                            "saml",
                            "social"
                        ]
                    },
                    "providerType": {
                        "type": "string",
                        "description": "Short string identifier of identity provider type.",
                        "example": "ibmldap",
                        "enum": [
                            "facebook",
                            "linkedin",
                            "google",
                            "saml20",
                            "ibmldap",
                            "github",
                            "zenkey",
                            "ibmid",
                            "maasconnect",
                            "yh",
                            "twitter",
                            "baidu",
                            "renren",
                            "weibo",
                            "wechat",
                            "qq"
                        ]
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The string label of the provider type that is used for display purposes.",
                        "example": "Cloud Directory"
                    },
                    "description": {
                        "type": "string",
                        "description": "A textual description of identity provider type.",
                        "example": "Login with Cloud Directory"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A Boolean flag indicating whether it is enabled or disabled.",
                        "example": true
                    },
                    "predefined": {
                        "type": "boolean",
                        "description": "Always true.  All the supported identity source types are predefined only. You cannot add a new type or update the existing type.",
                        "example": true
                    },
                    "realmName": {
                        "type": "string",
                        "description": "The realm name that is associated with this provider type.  Usually it is a pre-determined fixed string, except for <i><b>saml</b></i> and <i><b>maasconnect</b></i> types of identity providers.",
                        "example": "cloudIdentityRealm"
                    },
                    "multiInstance": {
                        "type": "boolean",
                        "description": "A flag that indicates whether multiple instances can be created of this provider type.",
                        "example": false
                    },
                    "properties": {
                        "type": "array",
                        "description": "A set of properties that are associated with the identity provider type.  It is an array of properties of identity providers that are required to perform the runtime login flow.  The properties and the number of properties differ with the provider type.",
                        "items": {
                            "$ref": "#/components/schemas/IdentitySourceTypesPropertiesData"
                        }
                    }
                }
            },
            "IdentitySourceTypesDataList": {
                "required": [
                    "identitySourceTypes",
                    "totalCount"
                ],
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of identity source types supported by IBM Security Verify.",
                        "format": "int32",
                        "example": 1
                    },
                    "identitySourceTypes": {
                        "type": "array",
                        "description": "A list of identity source types supported by IBM Security Verify.",
                        "items": {
                            "$ref": "#/components/schemas/IdentitySourceTypesData"
                        }
                    }
                }
            },
            "IdentitySourceTypesPropertiesData": {
                "required": [
                    "key",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "A property key.",
                        "example": "policy_id"
                    },
                    "value": {
                        "type": "string",
                        "description": "A property value.",
                        "example": "urn:ibm:security:authentication:asf:basicldapuser"
                    },
                    "configMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "MetaData": {
                "required": [
                    "metadata"
                ],
                "type": "object",
                "properties": {
                    "metadata": {
                        "type": "string",
                        "description": "The metadata XML of SAML Enterprise.",
                        "example": "tenant_metadata.xml with the XML content similar to as below: <br><br>&lt?xml version=&quot1.0&quot encoding=&quotUTF-8&quot?&gt\n&ltmd:EntityDescriptor xmlns:md=&quoturn:oasis:names:tc:SAML:2.0:metadata&quot \n\tentityID=&quothttps://idp.iam.com/SAML/bridge/saml20&quot&gt\n\t\n\t&ltmd:IDPSSODescriptor protocolSupportEnumeration=&quoturn:oasis:names:tc:SAML:2.0:protocol&quot&gt\n\t\t&ltmd:KeyDescriptor use=&quotsigning&quot&gt\n\t\t\t&ltKeyInfo xmlns=&quothttp://www.w3.org/2000/09/xmldsig#&quot&gt\n\t\t\t\t&ltX509Data&gt\n\t\t\t\t\t&ltX509Certificate&gtMIIDGDCC ... YkA==&lt/X509Certificate&gt\n\t\t\t\t&lt/X509Data&gt\n\t\t\t&lt/KeyInfo&gt\n\t\t&lt/md:KeyDescriptor&gt\n\t\t&ltmd:KeyDescriptor use=&quotencryption&quot&gt\n\t\t\t&ltKeyInfo xmlns=&quothttp://www.w3.org/2000/09/xmldsig#&quot&gt\n\t\t\t\t&ltX509Data&gt\n\t\t\t\t\t&ltX509Certificate&gtMIIDGDCC ... YkA==&lt/X509Certificate&gt\n\t\t\t\t&lt/X509Data&gt\n\t\t\t&lt/KeyInfo&gt\n\t\t\t&ltmd:EncryptionMethod Algorithm=&quothttp://www.w3.org/2001/04/xmlenc#rsa-1_5&quot/&gt\n\t\t&lt/md:KeyDescriptor&gt\n\t\t&ltmd:NameIDFormat&gturn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress&lt/md:NameIDFormat&gt\n\t\t&ltmd:SingleSignOnService Binding=&quoturn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST&quot \n\t\t\t\tLocation=&quothttps://idp.iam.com/SAML/bridge/saml20/login&quot/&gt\n\t\t&ltmd:SingleSignOnService Binding=&quoturn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect&quot \n\t\t\t\tLocation=&quothttps://idp.iam.com/SAML/bridge/saml20/login&quot/&gt\n\t&lt/md:IDPSSODescriptor&gt\n\t&ltmd:Organization&gt\n\t\t&ltmd:OrganizationName xml:lang=&quoten&quot&gtiam-saml-ip&lt/md:OrganizationName&gt\n\t\t&ltmd:OrganizationDisplayName xml:lang=&quoten&quot&gtIAM SAML IP&lt/md:OrganizationDisplayName&gt\n\t\t&ltmd:OrganizationURL xml:lang=&quoten&quot/&gt\n\t&lt/md:Organization&gt\n&lt/md:EntityDescriptor&gt"
                    }
                }
            },
            "MaaSConfiguration": {
                "required": [
                    "defaultidentitysource",
                    "jitpEnabled",
                    "realmname",
                    "uniqueuseridentifier",
                    "userProfileMapping"
                ],
                "type": "object",
                "properties": {
                    "uniqueuseridentifier": {
                        "type": "string",
                        "description": "Assign the unique user identifier to help identify IBM MaaS360 users who access IBM Security Verify. The identifier is used as a reference together with the realm value to check for users in the IBM Security Verify Cloud Directory with this data. If no match is found, the identities of the IBM MaaS360 users are federated in the IBM Security Verify Cloud Directory. A user profile is created in the cloud directory when these users signs in for the first time to IBM Security Verify.",
                        "example": "email"
                    },
                    "realmname": {
                        "type": "string",
                        "description": "The identity source that contains the shadow accounts for the linked identity sources.",
                        "example": "cloudIdentityRealm"
                    },
                    "defaultidentitysource": {
                        "type": "string",
                        "description": "Assign the IBM MaaS360 identity source in IBM Security Verify to map the realm value of the IBM MaaS360 identity source with its corresponding identity source in IBM Security Verify. The realm value indicates the user registry where the users information is derived.",
                        "example": "d6ccfaf0-5584-4fc5-8553-b4dd555204c8"
                    },
                    "jitpEnabled": {
                        "type": "boolean",
                        "description": "If your default identity source is not Cloud Directory, you can enable just-in-time provisioning.",
                        "example": true
                    },
                    "userProfileMapping": {
                        "type": "object",
                        "properties": {},
                        "description": "The listing of just-in-time provisioning attribute mappings of IBM Security Verify Cloud Directory attributes to IBM MaaS360 identity source attributes",
                        "example": "\"attributeMappings\": [ {\"attrId\":\"12\",\"jitpOption\":\"DISABLE\",\"idsAttrName\":\"dept\"},{\"attrId\":\"7\",\"jitpOption\":\"DISABLED\",\"idsAttrName\":\"userLastName\"},{\"attrId\":\"8\",\"jitpOption\":\"CREATE\",\"idsAttrName\":\"userFullName\"},{\"attrId\":\"11\",\"jitpOption\":\"ALWAYS\",\"idsAttrName\":\"mobileNumber\"} ]"
                    }
                }
            },
            "IdentityProvider": {
                "required": [
                    "displayName",
                    "id",
                    "providerType"
                ],
                "type": "object",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the identity source provider. This is most for the UI."
                    },
                    "id": {
                        "type": "string",
                        "description": "This is the unique ID for this identity source provider type. These are usually static values."
                    },
                    "providerType": {
                        "type": "string",
                        "description": "This is the type of provider. The providerType is a static value that directly relates to the 'id' property."
                    }
                }
            },
            "SubTenantIdentityProvidersConfig": {
                "required": [
                    "identitySourceTypes"
                ],
                "type": "object",
                "properties": {
                    "identitySourceTypes": {
                        "type": "array",
                        "description": "The list of identity source providers for this sub-tenant.",
                        "items": {
                            "$ref": "#/components/schemas/IdentityProvider"
                        }
                    }
                }
            },
            "MethodNotAllowed": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIAG5401E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "Requester locale specific descriptive message.",
                        "example": "CSIAG0650E The server knows the request method, but the target resource doesn't support this method."
                    }
                }
            },
            "UpdateConflict": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIAG5401E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message.",
                        "example": "CSIAG0640E The identity source with ID [XYZ123] was not updated."
                    }
                }
            },
            "SessionExchangeConfigModel": {
                "required": [
                    "redirectUrls"
                ],
                "type": "object",
                "properties": {
                    "redirectUrls": {
                        "type": "array",
                        "description": "'redirectUrls' the list of redirect URLs allowed to be passed to the Token Exchange API.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "BadRequest_0": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIAG5401E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message.",
                        "example": "The request failed because the request body contains improperly structured JSON."
                    }
                }
            },
            "Forbidden_0": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIAK4300E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message.",
                        "example": "You are not authorized to access this resource."
                    }
                }
            },
            "NotFound_0": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIAG0605E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message.",
                        "example": "The retrieval failed because the resource wasn't found"
                    }
                }
            },
            "IdentitySource": {
                "required": [
                    "displayName",
                    "id",
                    "loginUrl",
                    "passwordless"
                ],
                "type": "object",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "The name of the identity source",
                        "example": "Identity Source Name"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the identity source",
                        "example": "00000000-1111-2222-3333-444444444444"
                    },
                    "realm": {
                        "type": "string",
                        "description": "The realm name of the identity source",
                        "example": "www.example.com"
                    },
                    "loginUrl": {
                        "type": "string",
                        "description": "The URL that is used to log in with the identity source",
                        "example": "/idaas/mtfim/sps/idaas/login/ibmldap"
                    },
                    "passwordless": {
                        "type": "object",
                        "properties": {
                            "qr": {
                                "type": "boolean",
                                "description": "Is QR authentication allowed?"
                            },
                            "fido": {
                                "type": "boolean",
                                "description": "Is FIDO2 authentication allowed?"
                            }
                        },
                        "description": "Are various passwordless methods allowed for the identity source?"
                    }
                }
            },
            "Error": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The ID of the error message",
                        "example": "CSIAG0148E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "The error message content",
                        "example": "Unable to process the login request. The login provider specified by parameter [realm_hint] is not allowed."
                    }
                }
            },
            "OIDCTokenResponse": {
                "type": "object",
                "properties": {
                    "access_token": {
                        "type": "string",
                        "description": "The access token",
                        "example": "4ed14dd2-d4f3-4089-8f06-02ae42a08420"
                    },
                    "token_type": {
                        "type": "string",
                        "description": "The type of the access token",
                        "example": "bearer"
                    },
                    "refresh_token": {
                        "type": "string",
                        "description": "The refresh token",
                        "example": "c11fbcad-fb04-4444-abce-1fd3923bc611"
                    },
                    "expires_in": {
                        "type": "integer",
                        "description": "The number of seconds until the token expires",
                        "format": "int32",
                        "example": 7200
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope that the access token is valid for",
                        "example": "read"
                    }
                }
            },
            "JwtErrorResponse": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "example": "CSIAXXXXXX"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "Requester locale specific descriptive message",
                        "example": "This message informs the user that something has gone wrong."
                    },
                    "missingAttrName": {
                        "type": "string",
                        "description": "This message is returned if there is a missing attribute expected in the request JWT. The missing attribute name.",
                        "example": "phone_number"
                    },
                    "state_id": {
                        "type": "string",
                        "description": "This message is returned if there is a missing attribute expected in the request JWT. The state ID that must be returned to the JwtExchange API with the missing attribute.",
                        "example": "123458670"
                    }
                }
            },
            "ServerError": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "example": "CSIAH0601E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message",
                        "example": "An internal error occurred in the Authentication Service"
                    }
                }
            },
            "BadRequestTokenNotFoundInFormBody": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "example": "CSIAH0645E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message",
                        "example": "An internal error occurred in the Authentication Service."
                    }
                }
            },
            "FailedSessionPatch": {
                "required": [
                    "operation",
                    "result",
                    "sessionId"
                ],
                "type": "object",
                "properties": {
                    "result": {
                        "type": "string",
                        "description": "The result of the operation requested.",
                        "example": "failed"
                    },
                    "sessionId": {
                        "type": "string",
                        "description": "The IBM Security Verify user session identifier to take action on.",
                        "example": "isva-session-uAbCUW1JzErhRo7xfYBZ2YWQVL6kJSSxNbj0SLtiukU="
                    },
                    "operation": {
                        "type": "string",
                        "description": "The operation to perform on the IBM Security Verify user session specified in this object. Only operation currently supported if 'DELETE'",
                        "example": "DELETE",
                        "enum": [
                            "DELETE"
                        ]
                    }
                }
            },
            "FailedSessionsPatchObject": {
                "required": [
                    "sessions"
                ],
                "type": "object",
                "properties": {
                    "sessions": {
                        "type": "array",
                        "description": "The list of IBM Security Verify user sessions the operation failed.",
                        "example": "{\"operation\":\"DELETE\",\"sessionId\":\"isva-session-ruT6DKhJRdcIEb6v+flpuKuKz84z7WqCmC6n5YNcckM=\",\"result\":\"failed\"},{\"operation\":\"DELETE\",\"sessionId\":\"isva-session-YIP6nOJpcnEqqpkrvQNHVEvEce3RKjU6/gtdIAmJBN8=\",\"result\":\"failed\"}",
                        "items": {
                            "$ref": "#/components/schemas/FailedSessionPatch"
                        }
                    }
                }
            },
            "SessionPatch": {
                "required": [
                    "operation",
                    "revokeGrantsAndTokens",
                    "sessionId"
                ],
                "type": "object",
                "properties": {
                    "sessionId": {
                        "type": "string",
                        "description": "The IBM Security Verify user session identifier to take action on.",
                        "example": "isva-session-uAbCUW1JzErhRo7xfYBZ2YWQVL6kJSSxNbj0SLtiukU="
                    },
                    "operation": {
                        "type": "string",
                        "description": "The operation to perform on the IBM Security Verify user session specified in this object. Only operation currently supported if 'DELETE'",
                        "example": "DELETE",
                        "enum": [
                            "DELETE"
                        ]
                    },
                    "revokeGrantsAndTokens": {
                        "type": "boolean",
                        "description": "If all tokens and grants associated with this session ID should be revoked as well. For most use cases this should be set to true unless the session is tied to some application or authenticator registration that is not wnated to be revoked.",
                        "example": true
                    }
                }
            },
            "SessionsPatchObject": {
                "required": [
                    "sessions"
                ],
                "type": "object",
                "properties": {
                    "sessions": {
                        "type": "array",
                        "description": "The list of IBM Security Verify user sessions to take action on.",
                        "items": {
                            "$ref": "#/components/schemas/SessionPatch"
                        }
                    }
                }
            },
            "SuccessSession": {
                "required": [
                    "expiryTime",
                    "lastAccessTime",
                    "sessionId"
                ],
                "type": "object",
                "properties": {
                    "sessionId": {
                        "type": "string",
                        "description": "The IBM Security Verify user session identifier to take action on.",
                        "example": "isva-session-uAbCUW1JzErhRo7xfYBZ2YWQVL6kJSSxNbj0SLtiukU="
                    },
                    "lastAccessTime": {
                        "type": "string",
                        "description": "The UTC time that the session was last accessed.",
                        "example": "16/02/2024 03:56:57.000 UTC"
                    },
                    "expiryTime": {
                        "type": "string",
                        "description": "The UTC time that the session will expire.",
                        "example": "17/02/2024 09:50:16.000 UTC"
                    }
                }
            },
            "SuccessSessionInfo": {
                "required": [
                    "sessions"
                ],
                "type": "object",
                "properties": {
                    "sessions": {
                        "type": "array",
                        "description": "The list of IBM Security Verify user sessions.",
                        "items": {
                            "$ref": "#/components/schemas/SuccessSession"
                        }
                    }
                }
            },
            "ErrorResponse_0": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "example": "CSIAXXXXXX"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "Requester locale specific descriptive message",
                        "example": "This message informs the user that something has gone wrong."
                    }
                }
            },
            "BadRequest_1": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "example": "CSIAH0643E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message",
                        "example": "The system cannot process the request because no access token was found in the request. An access token must be present in either the 'Authorization' HTTP header or in the query parameter 'access_token'."
                    }
                }
            },
            "Unauthorized_0": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "example": "CSIAH0611E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message",
                        "example": "The access token included in the request is not valid."
                    }
                }
            },
            "Forbidden_1": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "example": "CSIAK4300E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message",
                        "example": "The authenticated user is not permitted to perform the requested operation."
                    }
                }
            },
            "PVDeleteNotFound": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIAH5397E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message.",
                        "example": "The action: [DELETE] failed because the resource [1234] was not found."
                    }
                }
            },
            "PVDeleteInUse": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIAH5412E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message.",
                        "example": "The system cannot delete [1234] because it is used as a sign-in option for one or more applications."
                    }
                }
            },
            "PVUpdateNotFound": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIAH5397E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message.",
                        "example": "The action: [UPDATE] failed because the resource [1234] was not found."
                    }
                }
            },
            "AccessPolicyResult": {
                "required": [
                    "authnMethods",
                    "extendedAction"
                ],
                "type": "object",
                "properties": {
                    "extendedAction": {
                        "$ref": "#/components/schemas/AccessPolicyResultExtendedAction"
                    },
                    "authnMethods": {
                        "type": "array",
                        "description": "List of AuthnMethods Ex. sms, email, verify, urn:ibm:security:authentication:asf:macotp, etc",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "AccessPolicyResultExtendedAction": {
                "required": [
                    "action"
                ],
                "type": "object",
                "properties": {
                    "action": {
                        "type": "string",
                        "example": "ACTION_MFA_ALWAYS",
                        "enum": [
                            "ACTION_DENY",
                            "ACTION_ALLOW",
                            "ACTION_MFA_ALWAYS",
                            "ACTION_MFA_PER_SESSION",
                            "ACTION_DENY_OVERRIDE",
                            "ACTION_MFA_OVERRIDE",
                            "ACTION_ALLOW_OVERRIDE",
                            "ACTION_DENY_AND_REDIRECT",
                            "ACTION_CONTINUE"
                        ]
                    }
                }
            },
            "AccessPolicyRule": {
                "required": [
                    "conditions",
                    "id",
                    "name",
                    "result"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the rule.",
                        "example": "Test rule"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the rule.",
                        "example": "12345"
                    },
                    "conditions": {
                        "$ref": "#/components/schemas/AccessPolicyRuleCondition"
                    },
                    "result": {
                        "$ref": "#/components/schemas/AccessPolicyResult"
                    },
                    "alwaysRun": {
                        "type": "boolean",
                        "description": "Always evaluate this rule",
                        "example": true
                    },
                    "firstFactor": {
                        "type": "boolean"
                    },
                    "valid": {
                        "type": "boolean"
                    }
                }
            },
            "AccessPolicyRuleCondition": {
                "type": "object",
                "properties": {
                    "subjectAttributes": {
                        "$ref": "#/components/schemas/SubjectAttributesCondition"
                    },
                    "ipAddress": {
                        "$ref": "#/components/schemas/IpAddressCondition"
                    },
                    "geoLocation": {
                        "$ref": "#/components/schemas/GeoLocationCondition"
                    }
                }
            },
            "GeoLocationCondition": {
                "required": [
                    "enabled"
                ],
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Test the access geo location condition.",
                        "example": true
                    },
                    "opCode": {
                        "type": "string",
                        "description": "Operator to match against this condition. Must be one of ",
                        "example": "IS or IS_NOT",
                        "enum": [
                            "EQ",
                            "NEQ",
                            "IN",
                            "NOTIN",
                            "MATCH",
                            "NOMATCH",
                            "STARTS_WITH",
                            "ENDS_WITH",
                            "EXISTS",
                            "CONTAINS",
                            "IS",
                            "IS_NOT"
                        ]
                    }
                }
            },
            "IpAddressCondition": {
                "required": [
                    "opCode",
                    "values"
                ],
                "type": "object",
                "properties": {
                    "opCode": {
                        "type": "string",
                        "description": "Operator to match ip address against this condition. Must be one of ",
                        "example": "MATCH",
                        "enum": [
                            "MATCH",
                            "NOMATCH"
                        ]
                    },
                    "values": {
                        "type": "array",
                        "description": "List of IP addresses to match.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "PolicyObjectModel": {
                "required": [
                    "name",
                    "rules"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The string label of the policy that is used for display purposes.",
                        "example": "Auth Policy"
                    },
                    "description": {
                        "type": "string",
                        "description": "A textual description of the policy.",
                        "example": "Policy for authentication."
                    },
                    "schemaVersion": {
                        "type": "string",
                        "description": "The schema version of the policy.",
                        "example": "urn:access:policy:4.0:schema"
                    },
                    "rules": {
                        "type": "array",
                        "description": "The list of rules for the policy.",
                        "items": {
                            "$ref": "#/components/schemas/AccessPolicyRule"
                        }
                    },
                    "containsFirstFactor": {
                        "type": "boolean",
                        "description": "Does this policy contain first factor rules."
                    },
                    "enforcementType": {
                        "type": "string",
                        "description": "Policy enforcement type, one of 'fedSSO', 'nativeApp', 'nativeAppMobile', 'nativeAppWeb', 'adaptiveNativeAppWeb', 'adaptiveNativeAppMobile'",
                        "example": "fedSSO",
                        "enum": [
                            "fedSSO",
                            "nativeApp",
                            "nativeAppMobile",
                            "nativeAppWeb",
                            "adaptiveNativeAppWeb",
                            "adaptiveNativeAppMobile"
                        ]
                    }
                }
            },
            "SubjectAttributesCondition": {
                "required": [
                    "attributes"
                ],
                "type": "object",
                "properties": {
                    "attributes": {
                        "type": "array",
                        "description": "List of subject attributes to match",
                        "items": {
                            "$ref": "#/components/schemas/Attribute_1"
                        }
                    }
                }
            },
            "InvalidPolicyObject": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The list of policies.",
                        "format": "int32",
                        "example": 1234
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the policies.",
                        "example": "custom policy"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the policy.",
                        "example": "custom policy to access all application"
                    },
                    "predefined": {
                        "type": "boolean",
                        "description": "Indicates whether the policy is a predefined policy.",
                        "example": false
                    },
                    "rules": {
                        "type": "array",
                        "description": "The list of rules for the policy.",
                        "example": "[{'name' : 'Platform Policy','conditions':{'devicePlatform': ['MACOS', 'WINDOWS', 'OTHER_DESKTOP']},'actions': {'allowAccess': true} }]",
                        "items": {
                            "type": "object",
                            "properties": {}
                        }
                    }
                }
            },
            "PolicyVaultList": {
                "required": [
                    "policies"
                ],
                "type": "object",
                "properties": {
                    "policies": {
                        "type": "array",
                        "description": "The list of policies.",
                        "items": {
                            "$ref": "#/components/schemas/PolicyVaultResponse"
                        }
                    },
                    "nonMigratedPolicies": {
                        "type": "array",
                        "description": "List of invalid / non migrated polices.",
                        "items": {
                            "$ref": "#/components/schemas/InvalidPolicyObject"
                        }
                    },
                    "total": {
                        "type": "integer",
                        "description": "Total number of policies in response.",
                        "format": "int32",
                        "example": 2
                    }
                }
            },
            "PolicyVaultResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The uniqiue identifier of the policy.",
                        "format": "int64",
                        "example": 123456
                    },
                    "name": {
                        "type": "string",
                        "description": "The string label of the policy that is used for display purposes.",
                        "example": "Common Authentication policy"
                    },
                    "description": {
                        "type": "string",
                        "description": "A textual description of the policy.",
                        "example": "Policy for all applications"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "Date on which policy got created.",
                        "example": "2017-11-22-16.41.16"
                    },
                    "author": {
                        "type": "string",
                        "description": "User IUI who created the policy.",
                        "example": "IUI-XXX123"
                    },
                    "lastModifiedOn": {
                        "type": "string",
                        "description": "Latest date on which policy got updated.",
                        "example": "2017-11-22-16.41.16"
                    },
                    "lastModifiedBy": {
                        "type": "string",
                        "description": "User who updated the policy.",
                        "example": "IUI-XXX123"
                    },
                    "predefined": {
                        "type": "boolean",
                        "description": "Indicates whether the policy is a predefined policy.",
                        "example": false
                    },
                    "schemaVersion": {
                        "type": "string",
                        "description": "The schema version of the policy.",
                        "example": "urn:access:policy:3.0:schema"
                    },
                    "validations": {
                        "$ref": "#/components/schemas/Validations"
                    },
                    "containsFirstFactor": {
                        "type": "boolean",
                        "description": "Indicates whether the policy contains any first factor rules.",
                        "example": true
                    },
                    "enforcementType": {
                        "type": "string",
                        "description": "The policy enforcement type.",
                        "example": "fedSSO"
                    },
                    "rules": {
                        "type": "array",
                        "description": "Rules of the policy.",
                        "items": {
                            "$ref": "#/components/schemas/AccessPolicyRule"
                        }
                    }
                }
            },
            "Validations": {
                "type": "object",
                "properties": {
                    "subscriptionsNeeded": {
                        "type": "array",
                        "description": "A list of tenant subscriptions.",
                        "example": "['conditional.access', 'mfa.authn']",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "The tenant subscription validation."
            },
            "Forbidden_2": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIAK4300E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message.",
                        "example": "You are not authorized to access this resource."
                    }
                }
            },
            "BadRequest_2": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIAH5401E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message.",
                        "example": "The request failed because the request body contains improperly structured JSON."
                    }
                }
            },
            "Attribute_1": {
                "required": [
                    "name",
                    "opCode",
                    "values"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Attribute type for a condition. Must be one of ",
                        "example": "groupIds"
                    },
                    "opCode": {
                        "type": "string",
                        "description": "Operator to match attribute. Must be one of ",
                        "example": "EQ",
                        "enum": [
                            "EQ",
                            "NEQ",
                            "IN",
                            "NOTIN",
                            "MATCH",
                            "NOMATCH",
                            "STARTS_WITH",
                            "ENDS_WITH",
                            "EXISTS",
                            "CONTAINS",
                            "IS",
                            "IS_NOT"
                        ]
                    },
                    "values": {
                        "type": "array",
                        "description": "Attribute list to match.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "NotFound_1": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIAH5397E"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message.",
                        "example": "The action: [GET] failed because the resource [1234] was not found."
                    }
                }
            },
            "BulkOperationCampaign": {
                "required": [
                    "op",
                    "path"
                ],
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "enum": [
                            "replace",
                            "remove",
                            "delete"
                        ]
                    },
                    "path": {
                        "type": "string"
                    },
                    "value": {
                        "$ref": "#/components/schemas/CampaignConfiguration"
                    }
                },
                "description": "Representation of a bulk operation on campaign configurations."
            },
            "BulkOperationResultObject": {
                "type": "object",
                "properties": {
                    "result": {
                        "type": "string",
                        "enum": [
                            "success",
                            "failure"
                        ]
                    },
                    "error": {
                        "type": "string"
                    },
                    "value": {
                        "type": "object"
                    }
                },
                "description": "Representation of a response for bulk operation results in REST API calls."
            },
            "ListResponse": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of objects."
                    },
                    "count": {
                        "type": "integer",
                        "description": "Number of filtered objects."
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned."
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The maximum number of elements to be returned."
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects.",
                        "items": {
                            "type": "object"
                        }
                    }
                },
                "description": "Object used to return a list of objects"
            },
            "CampaignFrequency": {
                "type": "object",
                "properties": {
                    "cronString": {
                        "type": "string"
                    }
                },
                "description": "A UNIX or Linux Cron compatible string that defines the start of subsequent instances"
            },
            "CampaignInstanceReplaceInput": {
                "required": [
                    "eventType"
                ],
                "type": "object",
                "properties": {
                    "eventType": {
                        "type": "string",
                        "description": "The action to be applied to the campaign.",
                        "enum": [
                            "cancel",
                            "pause",
                            "restart",
                            "runnow"
                        ]
                    }
                },
                "description": "Object used to create a new campaign instance."
            },
            "UserGroupV1": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "email": {
                        "type": "string",
                        "readOnly": true
                    },
                    "formatted": {
                        "type": "string",
                        "readOnly": true
                    },
                    "givenName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "familyName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "realm": {
                        "type": "string",
                        "readOnly": true
                    },
                    "userType": {
                        "type": "string",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "description": "Represents a user group"
            },
            "TenantLimitsOutput": {
                "type": "object",
                "properties": {
                    "max_active_campaign_instances": {
                        "type": "integer",
                        "description": "Maximum number of active campaign instances"
                    },
                    "current_active_campaign_instances": {
                        "type": "integer",
                        "description": "Number of current active campaign instances"
                    },
                    "max_active_campaign_assignments": {
                        "type": "integer",
                        "description": "Maximum number of active campaign assignments",
                        "format": "int64"
                    },
                    "current_active_campaign_assignments": {
                        "type": "integer",
                        "description": "Number of current active campaign assignments",
                        "format": "int64"
                    },
                    "max_total_campaign_assignments_in_db": {
                        "type": "integer",
                        "description": "Total campaign assignments in db",
                        "format": "int64"
                    },
                    "current_total_campaign_assignments_in_db": {
                        "type": "integer",
                        "description": "Current total campaign assignments in db",
                        "format": "int64"
                    }
                },
                "description": "Representation of a limit in creating a new campaign for a tenant"
            },
            "JsonNode": {
                "type": "object",
                "properties": {
                    "empty": {
                        "type": "boolean"
                    },
                    "valueNode": {
                        "type": "boolean"
                    },
                    "containerNode": {
                        "type": "boolean"
                    },
                    "missingNode": {
                        "type": "boolean"
                    },
                    "array": {
                        "type": "boolean"
                    },
                    "object": {
                        "type": "boolean"
                    },
                    "nodeType": {
                        "type": "string",
                        "enum": [
                            "ARRAY",
                            "BINARY",
                            "BOOLEAN",
                            "MISSING",
                            "NULL",
                            "NUMBER",
                            "OBJECT",
                            "POJO",
                            "STRING"
                        ]
                    },
                    "pojo": {
                        "type": "boolean"
                    },
                    "number": {
                        "type": "boolean"
                    },
                    "integralNumber": {
                        "type": "boolean"
                    },
                    "floatingPointNumber": {
                        "type": "boolean"
                    },
                    "short": {
                        "type": "boolean"
                    },
                    "int": {
                        "type": "boolean"
                    },
                    "long": {
                        "type": "boolean"
                    },
                    "float": {
                        "type": "boolean"
                    },
                    "double": {
                        "type": "boolean"
                    },
                    "bigDecimal": {
                        "type": "boolean"
                    },
                    "bigInteger": {
                        "type": "boolean"
                    },
                    "textual": {
                        "type": "boolean"
                    },
                    "boolean": {
                        "type": "boolean"
                    },
                    "null": {
                        "type": "boolean"
                    },
                    "binary": {
                        "type": "boolean"
                    }
                }
            },
            "BulkErrorMessage": {
                "type": "object",
                "properties": {
                    "result": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BulkErrorResponseObject"
                        }
                    }
                }
            },
            "AssignmentUpdateAction": {
                "required": [
                    "id",
                    "operation"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Assignment Id"
                    },
                    "reviewer": {
                        "$ref": "#/components/schemas/UserGroup"
                    },
                    "operation": {
                        "type": "string",
                        "description": "The operation executed by the reviewer.",
                        "enum": [
                            "none",
                            "approved",
                            "rejected",
                            "redirected",
                            "escalated"
                        ]
                    },
                    "justification": {
                        "type": "string",
                        "description": "Justification of the operation in case of rejections and redirections."
                    },
                    "doImmediateFulfillment": {
                        "type": "boolean",
                        "description": "If the campaign sign-off policy is manual and doImmediateFulfillment is set, the operation is run immediately."
                    }
                },
                "description": "Object used to replace an assignment."
            },
            "UserGroup": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "email": {
                        "type": "string",
                        "readOnly": true
                    },
                    "formatted": {
                        "type": "string",
                        "readOnly": true
                    },
                    "givenName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "familyName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "realm": {
                        "type": "string",
                        "readOnly": true
                    },
                    "userType": {
                        "type": "string",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "description": "Represents a user group"
            },
            "RundeckRequestUpdateInput": {
                "required": [
                    "password",
                    "userName"
                ],
                "type": "object",
                "properties": {
                    "userName": {
                        "type": "string",
                        "description": "User Name"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password"
                    }
                },
                "description": "Object used to run rundeck jobs for updating requests."
            },
            "ListResponseDatasetRecord": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of objects."
                    },
                    "count": {
                        "type": "integer",
                        "description": "Number of filtered objects."
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned."
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The maximum number of elements to be returned."
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects.",
                        "items": {
                            "$ref": "#/components/schemas/DatasetRecord"
                        }
                    }
                }
            },
            "ErrorMessageForBulkOp": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string"
                    },
                    "messageDescription": {
                        "type": "string"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BulkOperationResultObject"
                        }
                    }
                }
            },
            "ErrorMessageForBulk": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string"
                    },
                    "messageDescription": {
                        "type": "string"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BulkResultObject"
                        }
                    }
                }
            },
            "CampaignConfigurationInput": {
                "required": [
                    "applications",
                    "duration",
                    "launchDate",
                    "name",
                    "priority",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "owner": {
                        "$ref": "#/components/schemas/UserGroupV1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Campaign type",
                        "enum": [
                            "userassignment",
                            "groupassignment",
                            "account",
                            "all",
                            "userassignment",
                            "groupassignment",
                            "account"
                        ]
                    },
                    "priority": {
                        "type": "string",
                        "description": "Campaign priority",
                        "enum": [
                            "high",
                            "medium",
                            "low",
                            "all",
                            "high",
                            "medium",
                            "low"
                        ]
                    },
                    "name": {
                        "type": "string",
                        "description": "Campaign name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Campaign description"
                    },
                    "reviewer": {
                        "$ref": "#/components/schemas/UserGroupV1"
                    },
                    "applications": {
                        "type": "array",
                        "description": "List of applications the campaign the campaign certifies",
                        "items": {
                            "$ref": "#/components/schemas/ApplicationV1"
                        }
                    },
                    "allowlist": {
                        "type": "array",
                        "description": "List of users or groups that are allowed for the certification",
                        "items": {
                            "$ref": "#/components/schemas/AllowBlockListInputOutput"
                        }
                    },
                    "blocklist": {
                        "type": "array",
                        "description": "List of users or groups denied for the certification",
                        "items": {
                            "$ref": "#/components/schemas/AllowBlockListInputOutput"
                        }
                    },
                    "entitlementFilter": {
                        "type": "object",
                        "properties": {
                            "entitlementInclusionList": {
                                "type": "array",
                                "description": "List of Entitlements to be included",
                                "items": {
                                    "$ref": "#/components/schemas/Entitlement_0"
                                }
                            },
                            "entitlementExclusionList": {
                                "type": "array",
                                "description": "List of Entitlements to be excluded",
                                "items": {
                                    "$ref": "#/components/schemas/Entitlement_0"
                                }
                            }
                        },
                        "description": "List of entitlements for inclusion/exclusion or filter for entitlements allowed for the certification"
                    },
                    "launchDate": {
                        "type": "string",
                        "description": "Date when the first instance of the campaign starts",
                        "enum": [
                            "yyyy-MM-dd'T'HH:mm:ss",
                            "epoch"
                        ]
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "The creation date of the campaign configuration.",
                        "enum": [
                            "yyyy-MM-dd'T'HH:mm:ss",
                            "null"
                        ]
                    },
                    "duration": {
                        "type": "integer",
                        "description": "The The duration (in milliseconds) for which each campaign instance remains open",
                        "format": "int64"
                    },
                    "frequency": {
                        "type": "string",
                        "description": "A UNIX or Linux Cron-compatible string that defines the start of subsequent instances"
                    },
                    "runEvery": {
                        "type": "object",
                        "properties": {
                            "rate": {
                                "type": "integer"
                            },
                            "unit": {
                                "type": "string",
                                "enum": [
                                    "MINUTES",
                                    "DAYS",
                                    "MONTHS"
                                ]
                            },
                            "cronString": {
                                "type": "string"
                            }
                        },
                        "description": "Frequency unit days or months"
                    },
                    "runNow": {
                        "type": "boolean",
                        "description": "A flag to start that the campaign immediately"
                    },
                    "nextRunDate": {
                        "type": "string",
                        "description": "Forecasted Run date for the next campaign instance.",
                        "enum": [
                            "yyyy-MM-dd'T'HH:mm:ss"
                        ]
                    },
                    "overdueAction": {
                        "type": "string",
                        "description": "The action to be taken for open records when a campaign closes.",
                        "enum": [
                            "rejectAll",
                            "approveAll",
                            "doNothing",
                            "rejectAll",
                            "approveAll",
                            "doNothing"
                        ]
                    },
                    "mitigationAction": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "none",
                                    "reminder",
                                    "none",
                                    "reminder"
                                ]
                            },
                            "reminderInterval": {
                                "type": "integer",
                                "format": "int64"
                            }
                        },
                        "description": "The action to be taken after a while to avoid open records when a campaign closes."
                    },
                    "defaultReviewer": {
                        "$ref": "#/components/schemas/UserGroupV1"
                    },
                    "preview": {
                        "type": "boolean",
                        "description": "A flag for a preview campaign, not opened to reviewers"
                    },
                    "continuous": {
                        "type": "boolean",
                        "description": "A flag indicating that the campaign is continuous."
                    },
                    "automaticRefreshContinuousCampaign": {
                        "type": "boolean",
                        "description": "A flag, valid for continuous campaigns only, saying that campaign should refresh the existing filter for building dataset"
                    },
                    "signOff": {
                        "type": "string",
                        "description": "The campaign sign-off policy.",
                        "enum": [
                            "auto",
                            "manual",
                            "eoc",
                            "no_signoff"
                        ]
                    },
                    "supervisors": {
                        "type": "array",
                        "description": "The list of supervisors identified for the campaign.",
                        "items": {
                            "$ref": "#/components/schemas/UserGroupV1"
                        }
                    },
                    "allowSupervisorEscalation": {
                        "type": "boolean",
                        "description": "Allow escalation to the supervisors."
                    },
                    "id": {
                        "type": "string",
                        "description": "Campaign configuration id"
                    },
                    "rev": {
                        "type": "string",
                        "description": "Campaign configuration rev"
                    },
                    "reviewerOverwritten": {
                        "type": "boolean"
                    },
                    "whitelist": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AllowBlockListInputOutput"
                        }
                    },
                    "blacklist": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AllowBlockListInputOutput"
                        }
                    }
                },
                "description": "Object used to create a new campaign configuration"
            },
            "CampaignInstanceInput": {
                "required": [
                    "eventType"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Campaign instance Id"
                    },
                    "eventType": {
                        "type": "string",
                        "description": "The action to be applied to the campaign.",
                        "enum": [
                            "delete",
                            "pause",
                            "restart",
                            "runnow",
                            "end",
                            "harddelete"
                        ]
                    }
                },
                "description": "Object used to create a new campaign instance."
            },
            "ApplicationV1": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string",
                        "readOnly": true
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "CampaignConfigurationLaunchInput": {
                "type": "object",
                "properties": {
                    "campaignId": {
                        "type": "string",
                        "description": "Campaign id"
                    }
                },
                "description": "The Campaign Configuration in a draft that is used to launch."
            },
            "ListResponseCampaignConfigurationOutput": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of objects."
                    },
                    "count": {
                        "type": "integer",
                        "description": "Number of filtered objects."
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned."
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The maximum number of elements to be returned."
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects.",
                        "items": {
                            "$ref": "#/components/schemas/CampaignConfigurationOutput"
                        }
                    }
                },
                "description": "Object used to return a list of objects"
            },
            "CampaignInstanceOutput": {
                "type": "object",
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "description": "Tenant Id"
                    },
                    "tenantUUID": {
                        "type": "string",
                        "description": "Tenant UUID"
                    },
                    "campaignConfigurationId": {
                        "type": "string",
                        "description": "The ID of the parent configuration."
                    },
                    "priority": {
                        "type": "string",
                        "description": "The priority from the parent configuration."
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique campaign instance name."
                    },
                    "assignmentSources": {
                        "type": "array",
                        "description": "The campaign instance assignment sources.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "timeLastStart": {
                        "type": "string",
                        "description": "The date representing the start of the instance.",
                        "format": "date-time"
                    },
                    "timeLastPause": {
                        "type": "string",
                        "description": "The date representing when the instance was paused, if any.",
                        "format": "date-time"
                    },
                    "timeClosed": {
                        "type": "string",
                        "description": "The date representing when the instance was closed, if any.",
                        "format": "date-time"
                    },
                    "timeRemaining": {
                        "type": "integer",
                        "description": "The date representing when the instance gets completed, if any.",
                        "format": "int64"
                    },
                    "state": {
                        "type": "string",
                        "description": "A string representing the state of the campaign instance."
                    },
                    "progress": {
                        "type": "integer",
                        "description": "The percentage of overall progress made in the campaign instance."
                    },
                    "assignmentsTotalCount": {
                        "type": "integer",
                        "description": "The overall number of assignments to be reviewed in the campaign instance."
                    },
                    "assignmentsProcessedCount": {
                        "type": "integer",
                        "description": "The overall number of assignments processed for the campaign instance."
                    },
                    "reviewersTotalCount": {
                        "type": "integer",
                        "description": "The total number of reviewers."
                    },
                    "reviewersCompletedCount": {
                        "type": "integer",
                        "description": "The total number of reviewers that have completed the review."
                    },
                    "continuous": {
                        "type": "boolean",
                        "description": "A flag indicating that the campaign is continuous."
                    },
                    "supervisors": {
                        "type": "array",
                        "description": "The list of supervisors identified for the campaign. If a group is selected as supervisor, this list contains the group members.",
                        "items": {
                            "$ref": "#/components/schemas/UserGroupV1"
                        }
                    },
                    "delegators": {
                        "type": "array",
                        "description": "List of delegators who were delegated the duties for a given campaign instance.",
                        "items": {
                            "$ref": "#/components/schemas/UserGroupV1"
                        }
                    },
                    "delegatees": {
                        "type": "array",
                        "description": "List of delegatees to whom duties for a given campaign instance were delegated.",
                        "items": {
                            "$ref": "#/components/schemas/UserGroupV1"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "Campaign instance id"
                    },
                    "rev": {
                        "type": "string",
                        "description": "Campaign instance review"
                    },
                    "campaignConfiguration": {
                        "required": [
                            "duration",
                            "launchDate",
                            "name",
                            "priority",
                            "type"
                        ],
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "Campaign configuration ID"
                            },
                            "rev": {
                                "type": "string",
                                "description": "Campaign configuration review"
                            },
                            "tenantId": {
                                "type": "string"
                            },
                            "tenantUUID": {
                                "type": "string"
                            },
                            "owner": {
                                "$ref": "#/components/schemas/UserGroupV1"
                            },
                            "type": {
                                "type": "string",
                                "description": "Campaign type",
                                "enum": [
                                    "userassignment",
                                    "groupassignment",
                                    "account",
                                    "all",
                                    "userassignment",
                                    "groupassignment",
                                    "account"
                                ]
                            },
                            "priority": {
                                "type": "string",
                                "description": "Campaign priority",
                                "enum": [
                                    "high",
                                    "medium",
                                    "low",
                                    "all",
                                    "high",
                                    "medium",
                                    "low"
                                ]
                            },
                            "name": {
                                "type": "string",
                                "description": "Campaign name"
                            },
                            "description": {
                                "type": "string",
                                "description": "Campaign description"
                            },
                            "reviewer": {
                                "$ref": "#/components/schemas/UserGroupV1"
                            },
                            "applications": {
                                "$ref": "#/components/schemas/ApplicationV1"
                            },
                            "allowlist": {
                                "type": "array",
                                "description": "List of users or groups that are allowed for the certification",
                                "items": {
                                    "$ref": "#/components/schemas/AllowBlockListInputOutput"
                                }
                            },
                            "blocklist": {
                                "type": "array",
                                "description": "List of users or groups denied for the certification",
                                "items": {
                                    "$ref": "#/components/schemas/AllowBlockListInputOutput"
                                }
                            },
                            "entitlementFilter": {
                                "$ref": "#/components/schemas/EntitlementWithConditionSet"
                            },
                            "launchDate": {
                                "type": "string",
                                "description": "Date when the first instance of the campaign starts",
                                "enum": [
                                    "yyyy-MM-dd'T'HH:mm:ss",
                                    "epoch"
                                ]
                            },
                            "creationDate": {
                                "type": "string",
                                "description": "Creation date of the campaign configuration"
                            },
                            "nextRunDate": {
                                "type": "string",
                                "description": "Estimated next run date for this configuration, if any"
                            },
                            "duration": {
                                "type": "integer",
                                "description": "The duration (in milliseconds) for which each campaign instance remains open",
                                "format": "int64"
                            },
                            "frequency": {
                                "type": "string",
                                "description": "A UNIX or Linux Cron-compatible string that defines the start of subsequent instances"
                            },
                            "runEvery": {
                                "type": "object",
                                "properties": {
                                    "cronString": {
                                        "type": "string"
                                    }
                                },
                                "description": "Frequency unit days or months"
                            },
                            "runNow": {
                                "type": "boolean",
                                "description": "A flag to start the campaign immediately"
                            },
                            "overdueAction": {
                                "type": "string",
                                "description": "The action to be taken for open records when a campaign closes.",
                                "enum": [
                                    "rejectAll",
                                    "approveAll",
                                    "doNothing",
                                    "rejectAll",
                                    "approveAll",
                                    "doNothing"
                                ]
                            },
                            "mitigationAction": {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "none",
                                            "reminder",
                                            "none",
                                            "reminder"
                                        ]
                                    },
                                    "reminderInterval": {
                                        "type": "integer",
                                        "format": "int64"
                                    }
                                },
                                "description": "The action to be taken after a while to avoid open records when a campaign closes."
                            },
                            "defaultReviewer": {
                                "$ref": "#/components/schemas/UserGroupV1"
                            },
                            "preview": {
                                "type": "boolean",
                                "description": "A flag for a preview campaign, not opened to reviewers"
                            },
                            "associatedPreviewCampaign": {
                                "$ref": "#/components/schemas/CampaignConfigurationOutput"
                            },
                            "continuous": {
                                "type": "boolean",
                                "description": "A flag for a continuous campaign"
                            },
                            "automaticRefreshContinuousCampaign": {
                                "type": "boolean",
                                "description": "A flag for a campaign to refresh the existing filter for building dataset. It is valid for continuous campaigns only."
                            },
                            "isDeleted": {
                                "type": "boolean",
                                "description": "The campaign configuration was deleted"
                            },
                            "signOff": {
                                "type": "string",
                                "description": "The campaign sign-off policy",
                                "enum": [
                                    "auto",
                                    "manual",
                                    "eoc",
                                    "no_signoff"
                                ]
                            },
                            "tenantCreationLimits": {
                                "type": "object",
                                "properties": {
                                    "max_active_campaign_instances": {
                                        "type": "integer",
                                        "description": "Maximum number of active campaign instances"
                                    },
                                    "current_active_campaign_instances": {
                                        "type": "integer",
                                        "description": "Number of current active campaign instances"
                                    },
                                    "max_active_campaign_assignments": {
                                        "type": "integer",
                                        "description": "Maximum number of active campaign assignments",
                                        "format": "int64"
                                    },
                                    "current_active_campaign_assignments": {
                                        "type": "integer",
                                        "description": "Number of current active campaign assignments",
                                        "format": "int64"
                                    },
                                    "max_total_campaign_assignments_in_db": {
                                        "type": "integer",
                                        "description": "Total campaign assignments in db",
                                        "format": "int64"
                                    },
                                    "current_total_campaign_assignments_in_db": {
                                        "type": "integer",
                                        "description": "Current total campaign assignments in db",
                                        "format": "int64"
                                    }
                                },
                                "description": "A JSON object that indicates the limits for this tenant"
                            },
                            "supervisors": {
                                "type": "array",
                                "description": "The list of supervisors identified for the campaign.",
                                "items": {
                                    "$ref": "#/components/schemas/UserGroupV1"
                                }
                            },
                            "allowSupervisorEscalation": {
                                "type": "boolean",
                                "description": "Allow escalation to the supervisors."
                            },
                            "draft": {
                                "type": "boolean",
                                "description": "A flag for a draft campaign"
                            },
                            "whitelist": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AllowBlockListInputOutput"
                                }
                            },
                            "blacklist": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AllowBlockListInputOutput"
                                }
                            }
                        },
                        "description": "The parent configuration."
                    }
                },
                "description": "Representation of a campaign instance for REST APIs."
            },
            "AssignmentActionReplaceInput": {
                "required": [
                    "operation"
                ],
                "type": "object",
                "properties": {
                    "reviewer": {
                        "$ref": "#/components/schemas/UserGroup"
                    },
                    "operation": {
                        "type": "string",
                        "description": "The operation executed by the reviewer.",
                        "enum": [
                            "none",
                            "approved",
                            "rejected",
                            "redirected",
                            "escalated"
                        ]
                    },
                    "justification": {
                        "type": "string",
                        "description": "Justification of the operation in case of rejections and redirections."
                    },
                    "doImmediateFulfillment": {
                        "type": "boolean",
                        "description": "If campaign sign-off policy is manual and doImmediateFulfillment is set, then the operation is executed immediately."
                    }
                },
                "description": "Object used to create or replace an assignment."
            },
            "ListResponseCampaignStatsOutput": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of objects."
                    },
                    "count": {
                        "type": "integer",
                        "description": "Number of filtered objects."
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned."
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The maximum number of elements to be returned."
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects.",
                        "items": {
                            "$ref": "#/components/schemas/CampaignStatsOutput"
                        }
                    }
                },
                "description": "Object used to return a list of objects"
            },
            "SubjectAdditionalData": {
                "type": "object",
                "properties": {
                    "extId": {
                        "type": "string",
                        "description": "The subject identifier."
                    },
                    "name": {
                        "type": "string",
                        "description": "The entitlement name when the subject is an entitlement or the account name when subject is an account."
                    },
                    "type": {
                        "type": "string",
                        "description": "The subject type: possible values are ENTITLEMENT or ACCOUNT."
                    },
                    "subType": {
                        "type": "string",
                        "description": "The entitlement type (ROLE or PERMISSION) when the subject is an entitlement or the account status (MATCHED, UNMATCHED, NON-COMPLIANT, COMPLIANT) when the subject is an account."
                    },
                    "assigner": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "name": {
                                "type": "string",
                                "readOnly": true
                            },
                            "email": {
                                "type": "string",
                                "readOnly": true
                            },
                            "formatted": {
                                "type": "string",
                                "readOnly": true
                            },
                            "givenName": {
                                "type": "string",
                                "readOnly": true
                            },
                            "familyName": {
                                "type": "string",
                                "readOnly": true
                            },
                            "realm": {
                                "type": "string",
                                "readOnly": true
                            },
                            "userType": {
                                "type": "string",
                                "readOnly": true
                            },
                            "description": {
                                "type": "string",
                                "readOnly": true
                            }
                        },
                        "description": "User who assigned the entitlement."
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Date when assignment has been created",
                        "format": "date-time"
                    },
                    "extRef": {
                        "type": "string",
                        "description": "Entitlement external ref. Valid only if type is ENTITLEMENT"
                    },
                    "rightsRef": {
                        "type": "string",
                        "description": "Entitlement rights ref. Valid only if type is ENTITLEMENT"
                    },
                    "accountName": {
                        "type": "string",
                        "description": "Account name on the respective entitlement."
                    },
                    "accountOwnershipType": {
                        "type": "string",
                        "description": "Account ownership type of the respective account."
                    }
                }
            },
            "OperationAndValue": {
                "required": [
                    "op",
                    "v1"
                ],
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "description": "Operation",
                        "example": "eq"
                    },
                    "v1": {
                        "type": "string",
                        "description": "Value",
                        "example": "Security"
                    }
                },
                "description": "Rest representation for Operation and Value."
            },
            "UpdateByApplication": {
                "required": [
                    "Operations"
                ],
                "type": "object",
                "properties": {
                    "Operations": {
                        "type": "array",
                        "description": "An array of operation objects to be performed.  Operation objects must have exactly one \"op\" member, whose value indicates the operation to perform. Its value must be one of \"remove\", or \"replace\". Values are errors.",
                        "items": {
                            "$ref": "#/components/schemas/UpdateApplicationOperation"
                        }
                    }
                },
                "description": "JSON object used to update all the assignment resources filtered by the application"
            },
            "CampaignConfigurationCloneInput": {
                "type": "object",
                "properties": {
                    "sourceCampaignId": {
                        "type": "string",
                        "description": "Source campaign id."
                    }
                },
                "description": "The object can be used to clone an existing campaign configuration."
            },
            "CreateAssignment": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Assignment Id"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "Application identifier"
                    }
                },
                "description": "Object used to create an assignment"
            },
            "BulkErrorResponse": {
                "type": "object",
                "properties": {
                    "Unique identifier of the error message.": {
                        "type": "string",
                        "readOnly": true
                    },
                    "Description of the error message.": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "description": "Representation of a generic error response in bulk."
            },
            "AllowBlockListInputOutput": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The user identifier of the user to be filtered."
                    },
                    "name": {
                        "type": "string",
                        "description": "The userName or groupName of the user or group.",
                        "readOnly": true
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address of the user.",
                        "readOnly": true
                    },
                    "formatted": {
                        "type": "string",
                        "description": "The full name of the user that includes  user name, middle name, and suffix, that are formatted for display.",
                        "readOnly": true
                    },
                    "givenName": {
                        "type": "string",
                        "description": "The given name of the user, or first name in most Western languages. For example, Barbara is the given name from the full name Ms. Barbara J Jensen, PhD.",
                        "readOnly": true
                    },
                    "familyName": {
                        "type": "string",
                        "description": "The family name of the user, or the last name in most Western languages. For example, Jensen is the family name from the full name Ms. Barbara J Jensen, PhD.",
                        "readOnly": true
                    },
                    "realm": {
                        "type": "string",
                        "description": "The realm to which the user belongs. It is always \"cloudIdentityRealm\" for regular users. Maximum length is 240 characters.",
                        "readOnly": true
                    },
                    "userType": {
                        "type": "string",
                        "description": "The type of the user. For example, regular, federated.",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of group",
                        "readOnly": true
                    },
                    "aGroup": {
                        "type": "boolean",
                        "description": "Specifies if the filter refers to a group. The values are true or false."
                    },
                    "accountStatus": {
                        "type": "string",
                        "description": "To filter the account status.",
                        "enum": [
                            "compliant",
                            "unmatched",
                            "non_compliant"
                        ]
                    },
                    "accountOwnershipType": {
                        "type": "string",
                        "description": "Account ownership type."
                    }
                },
                "description": "Object used to represent an allowlist and blocklist."
            },
            "UserOrAccountAllowBlockList": {
                "type": "object",
                "properties": {
                    "userInclusionList": {
                        "type": "array",
                        "description": "List of users",
                        "items": {
                            "$ref": "#/components/schemas/AllowBlockListInputOutput"
                        }
                    },
                    "userExclusionList": {
                        "type": "array",
                        "description": "List of users",
                        "items": {
                            "$ref": "#/components/schemas/AllowBlockListInputOutput"
                        }
                    },
                    "userConditionSet": {
                        "type": "array",
                        "description": "The conditionSet set to build the user filter. Example for userConditionSet : [{\"work_locality\":[{\"op\":\"sw\",\"vl\":\"J\"},{\"op\":\"ew\",\"vl\":\"a\"}],\"department\":[{\"op\":\"eq\",\"vl\":\"Security\"}]}]",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/OperationAndValue"
                                }
                            }
                        }
                    }
                },
                "description": "Rest representation for an userList or user condition set filter."
            },
            "AssignmentFilter": {
                "type": "object",
                "properties": {
                    "lastActions": {
                        "type": "array",
                        "description": "Last actions executed by each reviewer.",
                        "items": {
                            "type": "string"
                        },
                        "enum": [
                            "all",
                            "none",
                            "approved",
                            "rejected",
                            "redirected",
                            "escalated",
                            "noMoreOnTarget"
                        ]
                    },
                    "assigneesId": {
                        "type": "array",
                        "description": "IDs of the users",
                        "items": {
                            "type": "string"
                        }
                    },
                    "reviewersId": {
                        "type": "array",
                        "description": "IDs of the users having the assignments",
                        "items": {
                            "type": "string"
                        }
                    },
                    "appsId": {
                        "type": "array",
                        "description": "IDs of the applications to which the assignments are related.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "assignmentTypes": {
                        "type": "array",
                        "description": "Assignment types",
                        "items": {
                            "type": "string"
                        },
                        "enum": [
                            "all",
                            "permission",
                            "role",
                            "account"
                        ]
                    },
                    "assignmentNames": {
                        "type": "array",
                        "description": "Assignment names",
                        "items": {
                            "type": "string"
                        }
                    },
                    "assignmentStatus": {
                        "type": "array",
                        "description": "Assignment compliance status (Account campaign case).",
                        "items": {
                            "type": "string"
                        },
                        "enum": [
                            "compliant",
                            "non_compliant",
                            "unmanaged",
                            "unmatched"
                        ]
                    },
                    "groupsId": {
                        "type": "array",
                        "description": "IDs of the groups having the assignments.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "filter": {
                        "type": "string",
                        "description": "Smart filter matched to assignee and application properties of each assignment."
                    }
                },
                "description": "Assignment-like object that uses filters to search assignments."
            },
            "ListResponseAssignmentOutput": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of objects."
                    },
                    "count": {
                        "type": "integer",
                        "description": "Number of filtered objects."
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned."
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The maximum number of elements to be returned."
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects.",
                        "items": {
                            "$ref": "#/components/schemas/AssignmentOutput"
                        }
                    }
                },
                "description": "Object used to return a list of objects"
            },
            "BulkErrorResponseObject": {
                "type": "object",
                "properties": {
                    "Unique identifier of the error message.": {
                        "type": "string",
                        "readOnly": true
                    },
                    "Description of the error message.": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "description": "Representation of a generic error response in bulk."
            },
            "CampaignStatsOutput": {
                "type": "object",
                "properties": {
                    "filterType": {
                        "type": "string",
                        "description": "The filterType"
                    },
                    "count": {
                        "type": "integer",
                        "description": "The total number of associated object occurrences returned."
                    },
                    "entity": {
                        "type": "string",
                        "description": "A string representing the aggregated object. Not null if filterType is type, state, priority."
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserGroupV1"
                    },
                    "group": {
                        "$ref": "#/components/schemas/UserGroupV1"
                    },
                    "application": {
                        "$ref": "#/components/schemas/ApplicationV1"
                    },
                    "numApprovedItems": {
                        "type": "integer",
                        "description": "The number of approved records associated to the user represented in the object."
                    },
                    "numRejectedItems": {
                        "type": "integer",
                        "description": "The number of rejected records associated to the user represented in the object."
                    },
                    "numUnprocesedItems": {
                        "type": "integer",
                        "description": "The number of unprocessed records associated to the user represented in the object."
                    },
                    "numNoMoreOnTargetItems": {
                        "type": "integer",
                        "description": "The number of unprocessed records associated to the user represented in the object."
                    },
                    "completion": {
                        "type": "number",
                        "description": "The percentage of completion for the user represented in the object.",
                        "format": "float"
                    },
                    "delegators": {
                        "type": "array",
                        "description": "List of delegators who were delegated the duties for a given campaign instance.",
                        "items": {
                            "$ref": "#/components/schemas/UserGroupV1"
                        }
                    }
                },
                "description": "Representation of aggregated information for campaign objects - REST APIs."
            },
            "ListResponseCampaignConfig": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of objects."
                    },
                    "count": {
                        "type": "integer",
                        "description": "Number of filtered objects."
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned."
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The maximum number of elements to be returned."
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects.",
                        "items": {
                            "$ref": "#/components/schemas/CampaignConfiguration"
                        }
                    }
                }
            },
            "ListResponseAssignmentStats": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of objects."
                    },
                    "count": {
                        "type": "integer",
                        "description": "Number of filtered objects."
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned."
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The maximum number of elements to be returned."
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects.",
                        "items": {
                            "$ref": "#/components/schemas/AssignmentStats"
                        }
                    }
                }
            },
            "AssignmentOutput": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id"
                    },
                    "configId": {
                        "type": "string",
                        "description": "ID of the parent campaign configuration."
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the parent campaign instance."
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "Owning tenant ID"
                    },
                    "tenantUUID": {
                        "type": "string",
                        "description": "Owning tenant UUID"
                    },
                    "reminderCount": {
                        "type": "integer",
                        "description": "Number of email reminders sent to the reviewer for a specific assignment"
                    },
                    "lastReminderDate": {
                        "type": "string",
                        "description": "Date when last email reminder was sent to the reviewer",
                        "format": "date-time"
                    },
                    "application": {
                        "$ref": "#/components/schemas/ApplicationV1"
                    },
                    "additionalData": {
                        "type": "object",
                        "properties": {
                            "extId": {
                                "type": "string",
                                "description": "The subject identifier."
                            },
                            "name": {
                                "type": "string",
                                "description": "The entitlement name when the subject is an entitlement or the account name when subject is an account."
                            },
                            "type": {
                                "type": "string",
                                "description": "The subject type: possible values are ENTITLEMENT or ACCOUNT."
                            },
                            "subType": {
                                "type": "string",
                                "description": "The entitlement type (ROLE or PERMISSION) when the subject is an entitlement or the account status (MATCHED, UNMATCHED, NON-COMPLIANT, COMPLIANT) when the subject is an account."
                            },
                            "assigner": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "type": "string",
                                        "readOnly": true
                                    },
                                    "email": {
                                        "type": "string",
                                        "readOnly": true
                                    },
                                    "formatted": {
                                        "type": "string",
                                        "readOnly": true
                                    },
                                    "givenName": {
                                        "type": "string",
                                        "readOnly": true
                                    },
                                    "familyName": {
                                        "type": "string",
                                        "readOnly": true
                                    },
                                    "realm": {
                                        "type": "string",
                                        "readOnly": true
                                    },
                                    "userType": {
                                        "type": "string",
                                        "readOnly": true
                                    },
                                    "description": {
                                        "type": "string",
                                        "readOnly": true
                                    }
                                },
                                "description": "User who assigned the entitlement."
                            },
                            "creationDate": {
                                "type": "string",
                                "description": "Date when assignment has been created",
                                "format": "date-time"
                            },
                            "extRef": {
                                "type": "string",
                                "description": "Entitlement external ref. Valid only if type is ENTITLEMENT"
                            },
                            "rightsRef": {
                                "type": "string",
                                "description": "Entitlement rights ref. Valid only if type is ENTITLEMENT"
                            },
                            "accountName": {
                                "type": "string",
                                "description": "Account name on the respective entitlement."
                            },
                            "accountOwnershipType": {
                                "type": "string",
                                "description": "Account ownership type of the respective account."
                            }
                        },
                        "description": "The campaign subject additional data."
                    },
                    "rights": {
                        "type": "array",
                        "description": "The rights associated to the assignment.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "assignmentId": {
                        "type": "string",
                        "description": "The id of the assignment from the external system to certification (i.e. AuthZ)."
                    },
                    "reviewer": {
                        "$ref": "#/components/schemas/UserGroupV1"
                    },
                    "assignee": {
                        "$ref": "#/components/schemas/UserGroupV1"
                    },
                    "discretionaryGroup": {
                        "$ref": "#/components/schemas/UserGroupV1"
                    },
                    "lastOperation": {
                        "type": "string",
                        "description": "Last operation, if any, executed by the reviewer during the campaign.",
                        "enum": [
                            "all",
                            "none",
                            "approved",
                            "rejected",
                            "redirected",
                            "escalated",
                            "noMoreOnTarget",
                            "unmanage"
                        ]
                    },
                    "justification": {
                        "type": "string",
                        "description": "Justification text for the last operation in case of rejections and redirections."
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Date when the assignment was first imported inside certification manager",
                        "format": "date-time"
                    },
                    "lastActionDate": {
                        "type": "string",
                        "description": "Date when last operation was performed",
                        "format": "date-time"
                    },
                    "error": {
                        "type": "string",
                        "description": "A string that contains the back-end error that occurred during a bulk assignment update"
                    },
                    "noMoreOnTargetSystem": {
                        "type": "boolean",
                        "description": "If true, the assignment was greyed-out"
                    },
                    "delegators": {
                        "$ref": "#/components/schemas/UserGroupV1"
                    },
                    "isFulfilled": {
                        "type": "boolean",
                        "description": "If true the assignment operation has been fulfilled"
                    },
                    "isLastOperationAutomatic": {
                        "type": "boolean",
                        "description": "If the value associated to the last operation was set internally and automatically by the microservice"
                    }
                },
                "description": "Representation of a campaign assignment for REST APIs."
            },
            "CampaignStats": {
                "type": "object",
                "properties": {
                    "filterType": {
                        "type": "string",
                        "description": "The filterType"
                    },
                    "count": {
                        "type": "integer",
                        "description": "The total number of associated object occurrences returned."
                    },
                    "entity": {
                        "type": "string",
                        "description": "A string representing the aggregated object. Not null if filterType is type, state, priority."
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserGroup"
                    },
                    "group": {
                        "$ref": "#/components/schemas/UserGroup"
                    },
                    "application": {
                        "$ref": "#/components/schemas/Application_0"
                    },
                    "numApprovedItems": {
                        "type": "integer",
                        "description": "The number of approved records associated to the user represented in the object."
                    },
                    "numRejectedItems": {
                        "type": "integer",
                        "description": "The number of rejected records associated to the user represented in the object."
                    },
                    "numUnprocesedItems": {
                        "type": "integer",
                        "description": "The number of unprocessed records associated to the user represented in the object."
                    },
                    "numRemovedFromTargetItems": {
                        "type": "integer",
                        "description": "The number of absent records in the target associated to the user represented in the object."
                    },
                    "completion": {
                        "type": "number",
                        "description": "The percentage of completion for the user represented in the object.",
                        "format": "float"
                    },
                    "delegators": {
                        "type": "array",
                        "description": "The list of delegators assigned the duties for a given campaign instance.",
                        "items": {
                            "$ref": "#/components/schemas/UserGroup"
                        }
                    }
                },
                "description": "Representation of aggregated information for campaign objects - REST APIs."
            },
            "MitigationAction": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "none",
                            "reminder",
                            "none",
                            "reminder"
                        ]
                    },
                    "reminderInterval": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "description": "The action to be taken after a while to avoid open records when a campaign closes"
            },
            "ListResponseCampaignInstanceOutput": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of objects."
                    },
                    "count": {
                        "type": "integer",
                        "description": "Number of filtered objects."
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned."
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The maximum number of elements to be returned."
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects.",
                        "items": {
                            "$ref": "#/components/schemas/CampaignInstanceOutput"
                        }
                    }
                },
                "description": "Object used to return a list of objects"
            },
            "BulkResultObject": {
                "required": [
                    "op",
                    "path"
                ],
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "enum": [
                            "replace",
                            "remove",
                            "delete"
                        ]
                    },
                    "path": {
                        "type": "string"
                    },
                    "value": {
                        "type": "object"
                    },
                    "result": {
                        "type": "string",
                        "enum": [
                            "success",
                            "failure"
                        ]
                    },
                    "error": {
                        "type": "string"
                    }
                },
                "description": "Representation of a generic response of a Bulk REST API"
            },
            "BulkOperationJsonNode": {
                "required": [
                    "op",
                    "path"
                ],
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "enum": [
                            "replace",
                            "remove",
                            "delete"
                        ]
                    },
                    "path": {
                        "type": "string"
                    },
                    "value": {
                        "$ref": "#/components/schemas/JsonNode"
                    }
                },
                "description": "Representation of a generic payload of a Bulk REST API."
            },
            "BulkOperationResult": {
                "type": "object",
                "properties": {
                    "result": {
                        "type": "string",
                        "enum": [
                            "success",
                            "failure"
                        ]
                    },
                    "error": {
                        "type": "string"
                    },
                    "value": {
                        "type": "object"
                    }
                },
                "description": "Representation of a response for bulk operation results in REST API calls."
            },
            "ListResponseCampaignInstance": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of objects."
                    },
                    "count": {
                        "type": "integer",
                        "description": "Number of filtered objects."
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned."
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The maximum number of elements to be returned."
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects.",
                        "items": {
                            "$ref": "#/components/schemas/CampaignInstance"
                        }
                    }
                }
            },
            "V1CampaignFrequency": {
                "type": "object",
                "properties": {
                    "rate": {
                        "type": "integer"
                    },
                    "unit": {
                        "type": "string",
                        "enum": [
                            "MINUTES",
                            "DAYS",
                            "MONTHS"
                        ]
                    },
                    "cronString": {
                        "type": "string"
                    }
                },
                "description": "A UNIX or Linux Cron compatible string that defines the start of subsequent instances"
            },
            "RestResponse": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer"
                    },
                    "count": {
                        "type": "integer"
                    },
                    "limit": {
                        "type": "integer"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "success": {
                        "type": "boolean"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "OK",
                            "Created",
                            "Accepted",
                            "No Content",
                            "Reset Content",
                            "Partial Content",
                            "Moved Permanently",
                            "Found",
                            "See Other",
                            "Not Modified",
                            "Use Proxy",
                            "Temporary Redirect",
                            "Bad Request",
                            "Unauthorized",
                            "Payment Required",
                            "Forbidden",
                            "Not Found",
                            "Method Not Allowed",
                            "Not Acceptable",
                            "Proxy Authentication Required",
                            "Request Timeout",
                            "Conflict",
                            "Gone",
                            "Length Required",
                            "Precondition Failed",
                            "Request Entity Too Large",
                            "Request-URI Too Long",
                            "Unsupported Media Type",
                            "Requested Range Not Satisfiable",
                            "Expectation Failed",
                            "Internal Server Error",
                            "Not Implemented",
                            "Bad Gateway",
                            "Service Unavailable",
                            "Gateway Timeout",
                            "HTTP Version Not Supported"
                        ]
                    },
                    "messageId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "ListResponseCampaignStats": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of objects."
                    },
                    "count": {
                        "type": "integer",
                        "description": "Number of filtered objects."
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned."
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The maximum number of elements to be returned."
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects.",
                        "items": {
                            "$ref": "#/components/schemas/CampaignStats"
                        }
                    }
                }
            },
            "AssignmentInput": {
                "required": [
                    "id",
                    "operation"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Assignment Id"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "Application identifier"
                    },
                    "reviewer": {
                        "$ref": "#/components/schemas/UserGroupV1"
                    },
                    "operation": {
                        "type": "string",
                        "description": "The operation executed by the reviewer.",
                        "enum": [
                            "none",
                            "approved",
                            "rejected",
                            "redirected",
                            "escalated"
                        ]
                    },
                    "justification": {
                        "type": "string",
                        "description": "Justification of the operation in case of rejections and redirections."
                    },
                    "doImmediateFulfillment": {
                        "type": "boolean",
                        "description": "If the campaign sign-off policy is manual and doImmediateFulfillment is set, the operation is run immediately."
                    }
                },
                "description": "Object used to create or replace an assignment."
            },
            "DatasetRecord": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id"
                    },
                    "configId": {
                        "type": "string",
                        "description": "Id of the parent campaign configuration."
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Id of the parent campaign instance."
                    },
                    "application": {
                        "$ref": "#/components/schemas/Application_0"
                    },
                    "additionalData": {
                        "$ref": "#/components/schemas/SubjectAdditionalData"
                    },
                    "rights": {
                        "type": "array",
                        "description": "The rights associated to the assignment.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "assignmentId": {
                        "type": "string",
                        "description": "The assignment id coming from the external system to certify (that is AuthZ). "
                    },
                    "reviewer": {
                        "$ref": "#/components/schemas/UserGroup"
                    },
                    "assignee": {
                        "$ref": "#/components/schemas/UserGroup"
                    },
                    "delegators": {
                        "type": "array",
                        "description": "The list of delegators assigned the duties for a given campaign instance.",
                        "items": {
                            "$ref": "#/components/schemas/UserGroup"
                        }
                    },
                    "discretionaryGroup": {
                        "$ref": "#/components/schemas/UserGroup"
                    },
                    "lastOperation": {
                        "type": "string",
                        "description": "Last operation, if any, executed by the reviewer during the campaign.",
                        "enum": [
                            "all",
                            "none",
                            "approved",
                            "rejected",
                            "redirected",
                            "escalated",
                            "noMoreOnTarget",
                            "unmanage"
                        ]
                    },
                    "justification": {
                        "type": "string",
                        "description": "Justification text for the last operation in case of rejections and redirections."
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "The date representing when the assignment was first imported inside certification manager.",
                        "format": "date-time"
                    },
                    "lastActionDate": {
                        "type": "string",
                        "description": "The date representing when the last operation was performed.",
                        "format": "date-time"
                    },
                    "error": {
                        "type": "string",
                        "description": "A string containing the error raised by the backend in case of a bulk assignment update."
                    },
                    "noMoreOnTargetSystem": {
                        "type": "boolean",
                        "description": "If true, the assignment is removed from target and hence disabled."
                    },
                    "reminderCount": {
                        "type": "integer"
                    },
                    "lastReminderDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastActionAutomatic": {
                        "type": "boolean"
                    },
                    "fulfilled": {
                        "type": "boolean"
                    }
                },
                "description": "Representation of a campaign instance for REST APIs."
            },
            "CampaignInstance": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "campaignConfigurationId": {
                        "type": "string",
                        "description": "The id of the parent configuration."
                    },
                    "campaignConfiguration": {
                        "$ref": "#/components/schemas/CampaignConfiguration"
                    },
                    "priority": {
                        "type": "string",
                        "description": "The priority from the parent configuration."
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique campaign instance name."
                    },
                    "assignmentSources": {
                        "type": "array",
                        "description": "The campaign instance assignment sources.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "timeLastStart": {
                        "type": "string",
                        "description": "The date representing the start of the instance.",
                        "format": "date-time"
                    },
                    "timeLastPause": {
                        "type": "string",
                        "description": "The date representing when the instance was paused, if any.",
                        "format": "date-time"
                    },
                    "timeLastModified": {
                        "type": "string",
                        "description": "The date representing when the instance was last modified, if any.",
                        "format": "date-time"
                    },
                    "timeClosed": {
                        "type": "string",
                        "description": "The date representing when the instance was closed, if any.",
                        "format": "date-time"
                    },
                    "timeRemaining": {
                        "type": "integer",
                        "description": "The date representing when the instance gets completed, if any.",
                        "format": "int64"
                    },
                    "state": {
                        "type": "string",
                        "description": "A string representing the state of the campaign instance.",
                        "enum": [
                            "noinstance",
                            "created",
                            "scheduled",
                            "deleted",
                            "removed",
                            "starting",
                            "failed",
                            "running",
                            "paused",
                            "aborted",
                            "overlapped",
                            "completed",
                            "success",
                            "closed",
                            "cancelled",
                            "all"
                        ]
                    },
                    "progress": {
                        "type": "integer",
                        "description": "The percentage of overall progress made in the campaign instance."
                    },
                    "assignmentsTotalCount": {
                        "type": "integer",
                        "description": "The overall number of assignments to be reviewed in the campaign instance."
                    },
                    "assignmentsProcessedCount": {
                        "type": "integer",
                        "description": "The overall number of assignments processed for the campaign instance."
                    },
                    "reviewersTotalCount": {
                        "type": "integer",
                        "description": "The total number of reviewers."
                    },
                    "reviewersCompletedCount": {
                        "type": "integer",
                        "description": "The total number of reviewers that have completed the review."
                    },
                    "supervisors": {
                        "type": "array",
                        "description": "The list of supervisors identified for the campaign. If a group is selected as supervisor, the list contains the group members.",
                        "items": {
                            "$ref": "#/components/schemas/UserGroup"
                        }
                    },
                    "delegators": {
                        "type": "array",
                        "description": "The list of delegators assigned the duties for a given campaign instance.",
                        "items": {
                            "$ref": "#/components/schemas/UserGroup"
                        }
                    },
                    "delegatees": {
                        "type": "array",
                        "description": "The list of delegatees who are delegated to perform duties for a given campaign instance.",
                        "items": {
                            "$ref": "#/components/schemas/UserGroup"
                        }
                    },
                    "reviewerAssignmentCountMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "integer"
                        }
                    }
                },
                "description": "Representation of a campaign instance for REST APIs."
            },
            "EntitlementWithConditionSet": {
                "type": "object",
                "properties": {
                    "entitlementInclusionList": {
                        "type": "array",
                        "description": "List of Entitlements to be included",
                        "items": {
                            "$ref": "#/components/schemas/Entitlement_0"
                        }
                    },
                    "entitlementExclusionList": {
                        "type": "array",
                        "description": "List of Entitlements to be excluded",
                        "items": {
                            "$ref": "#/components/schemas/Entitlement_0"
                        }
                    }
                },
                "description": "Rest representation for an entitlement or entitlement condition set filter."
            },
            "AssignmentStats": {
                "type": "object",
                "properties": {
                    "filterType": {
                        "type": "string",
                        "description": "The filterType"
                    },
                    "entity": {
                        "type": "string",
                        "description": " A string representing the aggregated object. Not null if filterType is type, state, priority"
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserGroup"
                    },
                    "group": {
                        "$ref": "#/components/schemas/UserGroup"
                    },
                    "application": {
                        "$ref": "#/components/schemas/Application_0"
                    },
                    "count": {
                        "type": "integer",
                        "description": "The total number of associated object occurrences returned"
                    },
                    "numApprovedItems": {
                        "type": "integer",
                        "description": "The number of approved records associated to the user represented in the object"
                    },
                    "numRejectedItems": {
                        "type": "integer",
                        "description": "The number of rejected records associated to the user represented in the object"
                    },
                    "numUnprocesedItems": {
                        "type": "integer",
                        "description": "The number of unprocessed records associated to the user represented in the object"
                    },
                    "completion": {
                        "type": "number",
                        "description": "The percentage of completion for the user represented in the object",
                        "format": "float"
                    }
                }
            },
            "CampaignConfiguration": {
                "required": [
                    "applications",
                    "name",
                    "priority",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "owner": {
                        "$ref": "#/components/schemas/UserGroup"
                    },
                    "type": {
                        "type": "string",
                        "description": "Campaign Type",
                        "enum": [
                            "userassignment",
                            "groupassignment",
                            "account",
                            "all"
                        ]
                    },
                    "priority": {
                        "type": "string",
                        "description": "Campaign Priority",
                        "enum": [
                            "high",
                            "medium",
                            "low",
                            "all"
                        ]
                    },
                    "name": {
                        "type": "string",
                        "description": "Campaign Name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Campaign Description"
                    },
                    "reviewer": {
                        "$ref": "#/components/schemas/UserGroup"
                    },
                    "applications": {
                        "type": "array",
                        "description": "The list of Applications certified by the campaign.",
                        "items": {
                            "$ref": "#/components/schemas/Application_0"
                        }
                    },
                    "userFilter": {
                        "type": "object",
                        "properties": {
                            "userInclusionList": {
                                "type": "array",
                                "description": "List of users",
                                "items": {
                                    "$ref": "#/components/schemas/AllowBlockListInputOutput"
                                }
                            },
                            "userExclusionList": {
                                "type": "array",
                                "description": "List of users",
                                "items": {
                                    "$ref": "#/components/schemas/AllowBlockListInputOutput"
                                }
                            },
                            "userConditionSet": {
                                "type": "array",
                                "description": "The conditionSet set to build the user filter. Example for userConditionSet : [{\"work_locality\":[{\"op\":\"sw\",\"vl\":\"J\"},{\"op\":\"ew\",\"vl\":\"a\"}],\"department\":[{\"op\":\"eq\",\"vl\":\"Security\"}]}]",
                                "items": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/OperationAndValue"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "List of Users or Groups to be included or exluded or filter for users allowed for the certification"
                    },
                    "entitlementFilter": {
                        "$ref": "#/components/schemas/EntitlementWithConditionSet"
                    },
                    "launchDate": {
                        "type": "string",
                        "description": "The start date of the first instance of campaign.",
                        "format": "date-time",
                        "enum": [
                            "yyyy-MM-dd'T'HH:mm:ss"
                        ]
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "The creation date of the campaign configuration.",
                        "format": "date-time",
                        "readOnly": true,
                        "enum": [
                            "yyyy-MM-dd'T'HH:mm:ss",
                            "null"
                        ]
                    },
                    "duration": {
                        "type": "integer",
                        "description": "The duration (in milliseconds) for which each campaign instance remains open.",
                        "format": "int64"
                    },
                    "frequency": {
                        "$ref": "#/components/schemas/CampaignFrequency"
                    },
                    "runNow": {
                        "type": "boolean",
                        "description": "The flag indicating the campaign occurs one-time and needs to be started immediately."
                    },
                    "nextRunDate": {
                        "type": "string",
                        "description": "Forecasted Run date for the next campaign instance.",
                        "format": "date-time",
                        "enum": [
                            "yyyy-MM-dd'T'HH:mm:ss",
                            "null"
                        ]
                    },
                    "overdueAction": {
                        "type": "string",
                        "description": "The action to be taken for open records when a campaign closes.",
                        "enum": [
                            "rejectAll",
                            "approveAll",
                            "doNothing"
                        ]
                    },
                    "mitigationAction": {
                        "$ref": "#/components/schemas/MitigationAction"
                    },
                    "defaultReviewer": {
                        "$ref": "#/components/schemas/UserGroup"
                    },
                    "preview": {
                        "type": "boolean",
                        "description": "A flag indicating that the campaign is in preview mode and not open to reviewers."
                    },
                    "signOff": {
                        "type": "string",
                        "description": "The campaign sign-off policy.",
                        "enum": [
                            "auto",
                            "manual",
                            "eoc",
                            "no_signoff"
                        ]
                    },
                    "supervisors": {
                        "type": "array",
                        "description": "The list of supervisors identified for the campaign.",
                        "items": {
                            "$ref": "#/components/schemas/UserGroup"
                        }
                    },
                    "allowSupervisorEscalation": {
                        "type": "boolean",
                        "description": "Allow escalation to the supervisors."
                    },
                    "reviewerType": {
                        "type": "string",
                        "description": "The Reviewer identifer for the campaign."
                    },
                    "reviewerOverwritten": {
                        "type": "boolean"
                    }
                },
                "description": "Object to represent a Campaign Configuration."
            },
            "UpdateApplicationOperation": {
                "required": [
                    "op",
                    "path"
                ],
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "description": "Operation to be performed",
                        "example": "replace",
                        "enum": [
                            "remove",
                            "replace"
                        ]
                    },
                    "path": {
                        "type": "string",
                        "description": "The string that contains an attribute path that describes the target of the operation. The \"path\" attribute is required for all operations. Examples of valid \"path\" specification formats include: <br> <br>     \"path\":\"application.owner\" <br>",
                        "example": "application.owner",
                        "enum": [
                            "application.owner"
                        ]
                    },
                    "value": {
                        "type": "string",
                        "description": "The attribute content used for the operation. The \"value\" attribute is required for the \"replace\" operations. The \"value\" attribute is allowed with \"remove\" operations only when the \"path\" identifies  a single object (specified by a selection filter). <br> <br> The following example shows a put operation replacing a multiple values from \"application.owner\" : <br>  <table> <tr><td> {  \"Operations\":  [    {      \"op\":\"replace\",      \"path\":\"application.owner\",      \"value\":[\"323000PBCU\",\"32600092KB\"],    }  ]}</td></tr></table>",
                        "example": "Service Now"
                    }
                }
            },
            "ErrorMessage": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string"
                    },
                    "messageDescription": {
                        "type": "string"
                    }
                }
            },
            "CampaignConfigurationOutput": {
                "required": [
                    "duration",
                    "launchDate",
                    "name",
                    "priority",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Campaign configuration ID"
                    },
                    "rev": {
                        "type": "string",
                        "description": "Campaign configuration review"
                    },
                    "tenantId": {
                        "type": "string"
                    },
                    "tenantUUID": {
                        "type": "string"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/UserGroupV1"
                    },
                    "type": {
                        "type": "string",
                        "description": "Campaign type",
                        "enum": [
                            "userassignment",
                            "groupassignment",
                            "account",
                            "all",
                            "userassignment",
                            "groupassignment",
                            "account"
                        ]
                    },
                    "priority": {
                        "type": "string",
                        "description": "Campaign priority",
                        "enum": [
                            "high",
                            "medium",
                            "low",
                            "all",
                            "high",
                            "medium",
                            "low"
                        ]
                    },
                    "name": {
                        "type": "string",
                        "description": "Campaign name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Campaign description"
                    },
                    "reviewer": {
                        "$ref": "#/components/schemas/UserGroupV1"
                    },
                    "applications": {
                        "$ref": "#/components/schemas/ApplicationV1"
                    },
                    "allowlist": {
                        "type": "array",
                        "description": "List of users or groups that are allowed for the certification",
                        "items": {
                            "$ref": "#/components/schemas/AllowBlockListInputOutput"
                        }
                    },
                    "blocklist": {
                        "type": "array",
                        "description": "List of users or groups denied for the certification",
                        "items": {
                            "$ref": "#/components/schemas/AllowBlockListInputOutput"
                        }
                    },
                    "entitlementFilter": {
                        "$ref": "#/components/schemas/EntitlementWithConditionSet"
                    },
                    "launchDate": {
                        "type": "string",
                        "description": "Date when the first instance of the campaign starts",
                        "enum": [
                            "yyyy-MM-dd'T'HH:mm:ss",
                            "epoch"
                        ]
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Creation date of the campaign configuration"
                    },
                    "nextRunDate": {
                        "type": "string",
                        "description": "Estimated next run date for this configuration, if any"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "The duration (in milliseconds) for which each campaign instance remains open",
                        "format": "int64"
                    },
                    "frequency": {
                        "type": "string",
                        "description": "A UNIX or Linux Cron-compatible string that defines the start of subsequent instances"
                    },
                    "runEvery": {
                        "type": "object",
                        "properties": {
                            "cronString": {
                                "type": "string"
                            }
                        },
                        "description": "Frequency unit days or months"
                    },
                    "runNow": {
                        "type": "boolean",
                        "description": "A flag to start the campaign immediately"
                    },
                    "overdueAction": {
                        "type": "string",
                        "description": "The action to be taken for open records when a campaign closes.",
                        "enum": [
                            "rejectAll",
                            "approveAll",
                            "doNothing",
                            "rejectAll",
                            "approveAll",
                            "doNothing"
                        ]
                    },
                    "mitigationAction": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "none",
                                    "reminder",
                                    "none",
                                    "reminder"
                                ]
                            },
                            "reminderInterval": {
                                "type": "integer",
                                "format": "int64"
                            }
                        },
                        "description": "The action to be taken after a while to avoid open records when a campaign closes."
                    },
                    "defaultReviewer": {
                        "$ref": "#/components/schemas/UserGroupV1"
                    },
                    "preview": {
                        "type": "boolean",
                        "description": "A flag for a preview campaign, not opened to reviewers"
                    },
                    "associatedPreviewCampaign": {
                        "$ref": "#/components/schemas/CampaignConfigurationOutput"
                    },
                    "continuous": {
                        "type": "boolean",
                        "description": "A flag for a continuous campaign"
                    },
                    "automaticRefreshContinuousCampaign": {
                        "type": "boolean",
                        "description": "A flag for a campaign to refresh the existing filter for building dataset. It is valid for continuous campaigns only."
                    },
                    "isDeleted": {
                        "type": "boolean",
                        "description": "The campaign configuration was deleted"
                    },
                    "signOff": {
                        "type": "string",
                        "description": "The campaign sign-off policy",
                        "enum": [
                            "auto",
                            "manual",
                            "eoc",
                            "no_signoff"
                        ]
                    },
                    "tenantCreationLimits": {
                        "type": "object",
                        "properties": {
                            "max_active_campaign_instances": {
                                "type": "integer",
                                "description": "Maximum number of active campaign instances"
                            },
                            "current_active_campaign_instances": {
                                "type": "integer",
                                "description": "Number of current active campaign instances"
                            },
                            "max_active_campaign_assignments": {
                                "type": "integer",
                                "description": "Maximum number of active campaign assignments",
                                "format": "int64"
                            },
                            "current_active_campaign_assignments": {
                                "type": "integer",
                                "description": "Number of current active campaign assignments",
                                "format": "int64"
                            },
                            "max_total_campaign_assignments_in_db": {
                                "type": "integer",
                                "description": "Total campaign assignments in db",
                                "format": "int64"
                            },
                            "current_total_campaign_assignments_in_db": {
                                "type": "integer",
                                "description": "Current total campaign assignments in db",
                                "format": "int64"
                            }
                        },
                        "description": "A JSON object that indicates the limits for this tenant"
                    },
                    "supervisors": {
                        "type": "array",
                        "description": "The list of supervisors identified for the campaign.",
                        "items": {
                            "$ref": "#/components/schemas/UserGroupV1"
                        }
                    },
                    "allowSupervisorEscalation": {
                        "type": "boolean",
                        "description": "Allow escalation to the supervisors."
                    },
                    "draft": {
                        "type": "boolean",
                        "description": "A flag for a draft campaign"
                    },
                    "whitelist": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AllowBlockListInputOutput"
                        }
                    },
                    "blacklist": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AllowBlockListInputOutput"
                        }
                    }
                },
                "description": "Representation of a campaign configuration for REST APIs"
            },
            "CampaignInstanceAction": {
                "required": [
                    "eventType",
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Specifies the campaign instance id."
                    },
                    "eventType": {
                        "type": "string",
                        "description": "The action to apply to the campaign instance.",
                        "enum": [
                            "cancel",
                            "pause",
                            "restart",
                            "runnow"
                        ]
                    }
                },
                "description": "Object used to specify action on a campaign instance."
            },
            "RundeckOperationResponse": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer"
                    },
                    "success": {
                        "type": "boolean"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "OK",
                            "Created",
                            "Accepted",
                            "No Content",
                            "Reset Content",
                            "Partial Content",
                            "Moved Permanently",
                            "Found",
                            "See Other",
                            "Not Modified",
                            "Use Proxy",
                            "Temporary Redirect",
                            "Bad Request",
                            "Unauthorized",
                            "Payment Required",
                            "Forbidden",
                            "Not Found",
                            "Method Not Allowed",
                            "Not Acceptable",
                            "Proxy Authentication Required",
                            "Request Timeout",
                            "Conflict",
                            "Gone",
                            "Length Required",
                            "Precondition Failed",
                            "Request Entity Too Large",
                            "Request-URI Too Long",
                            "Unsupported Media Type",
                            "Requested Range Not Satisfiable",
                            "Expectation Failed",
                            "Internal Server Error",
                            "Not Implemented",
                            "Bad Gateway",
                            "Service Unavailable",
                            "Gateway Timeout",
                            "HTTP Version Not Supported"
                        ]
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "Application_0": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "icon": {
                        "type": "string",
                        "description": "application icon",
                        "readOnly": true
                    },
                    "url": {
                        "type": "string",
                        "description": "application url",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "application description",
                        "readOnly": true
                    }
                },
                "description": "The list of Applications certified by the campaign."
            },
            "BulkResult_0": {
                "required": [
                    "op",
                    "path"
                ],
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "enum": [
                            "replace",
                            "remove",
                            "delete"
                        ]
                    },
                    "path": {
                        "type": "string"
                    },
                    "value": {
                        "type": "object"
                    },
                    "result": {
                        "type": "string",
                        "enum": [
                            "success",
                            "failure"
                        ]
                    },
                    "error": {
                        "type": "string"
                    }
                },
                "description": "Representation of a generic response of a Bulk REST API"
            },
            "BulkOperation_0": {
                "required": [
                    "op",
                    "path"
                ],
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "enum": [
                            "replace",
                            "remove",
                            "delete"
                        ]
                    },
                    "path": {
                        "type": "string"
                    },
                    "value": {
                        "type": "object"
                    }
                },
                "description": "Representation of a generic payload of a Bulk REST API."
            },
            "Entitlement_0": {
                "required": [
                    "entitlementId"
                ],
                "type": "object",
                "properties": {
                    "entitlementId": {
                        "type": "string",
                        "description": "Unique id of an entitlement"
                    }
                },
                "description": "Rest representation for an entitlement."
            },
            "ExternalErrorMessage": {
                "required": [
                    "schemas",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.  The schema \"urn:ietf:params:scim:api:messages:2.0:Error\" is the URI as required by the SCIM specification.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "The HTTP status code expressed as a JSON string."
                    },
                    "detail": {
                        "type": "string",
                        "description": "A detailed human-readable message."
                    }
                }
            },
            "PasswordPolicyResponse": {
                "required": [
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.  The schema \"urn:ietf:params:scim:schemas:ibm:core:2.0:policy:Password\"is returned.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "passwordMinAlphaChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of alphabetic characters that the password string must have. If the server is unable to check the number of alphabetic characters, then the server continues processing depending on the value of the pwdCheckSyntax attribute.",
                        "format": "int32"
                    },
                    "passwordMinOtherChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of numeric and special characters that the password string must have. If the server is unable to check the number of other characters, then the server continues processing depending on the value of the pwdCheckSyntax attribute.",
                        "format": "int32"
                    },
                    "pwdMinAge": {
                        "type": "integer",
                        "description": "Specifies the number of days before a password can be modified again.",
                        "format": "int32"
                    },
                    "pwdExpireWarning": {
                        "type": "integer",
                        "description": "Specifies the maximum number of days before a password expires that an expiration warning message is returned to an authenticating user.",
                        "format": "int32"
                    },
                    "pwdInHistory": {
                        "type": "integer",
                        "description": "Specifies the number of passwords that are stored in the pwdHistory attribute.",
                        "format": "int32"
                    },
                    "pwdLockout": {
                        "type": "boolean",
                        "description": "Indicates whether a password can be used to authenticate after a specified number of consecutive failed bind attempts. If the attribute is not provided, the behavior defaults to false."
                    },
                    "pwdLockoutDuration": {
                        "type": "integer",
                        "description": "Specifies the number of minutes that the password cannot be used to authenticate due to the specified 'pwdMaxFailure' failed bind attempts.",
                        "format": "int32"
                    },
                    "pwdMaxAge": {
                        "type": "integer",
                        "description": "Specifies the number of days after which a password expires. (A value of 0 means that the password does not expire.)",
                        "format": "int32"
                    },
                    "pwdMaxFailure": {
                        "type": "integer",
                        "description": "Specifies the maximum number of consecutive failed bind attempts after which the password will not be used for authentication. If a value of 0 is set for the pwdMaxFailure attribute, the value of pwdLockout is ignored.",
                        "format": "int32"
                    },
                    "pwdMinLength": {
                        "type": "integer",
                        "description": "Specifies the minimum length for the password string. The server checks the minimum length depending upon the value of the pwdCheckSyntax attribute.",
                        "format": "int32"
                    },
                    "pwdGraceLoginLimit": {
                        "type": "integer",
                        "description": "Specifies the number of times an expired password can be used to authenticate user. This value is read-only and is ignored on the PUT operation.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "pwdMustChange": {
                        "type": "boolean",
                        "description": "Specifies whether the users must change their passwords when they first bind to the directory after the administrator has reset their passwords. This value is read-only and is ignored on the PUT operation.",
                        "readOnly": true
                    },
                    "pwdAllowUserChange": {
                        "type": "boolean",
                        "description": "Specifies whether the users are allowed to change their own passwords. This value is read-only and is ignored on the PUT operation.",
                        "readOnly": true
                    },
                    "pwdFailureCountInterval": {
                        "type": "integer",
                        "description": "Specifies the number of seconds after which the password failures are removed from the failure counter even if no successful authentication has occurred. This value is read-only and is ignored on the PUT operation.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "passwordMaxRepeatedChars": {
                        "type": "integer",
                        "description": "Specifies the maximum number of times a character can be used in a password. If the server is unable to check the actual password characters, then the server continues processing depending on the value of the pwdCheckSyntax attribute. This value is read-only and is ignored on the PUT operation.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "pwdSafeModify": {
                        "type": "boolean",
                        "description": "Specifies whether the existing password must be sent when changing a password. This value is read-only and is ignored on the PUT operation.",
                        "readOnly": true
                    },
                    "passwordMaxConsecutiveRepeatedChars": {
                        "type": "integer",
                        "description": "Used to restrict the maximum successive repetitions of a character in the password. This value is read-only and is ignored on the PUT operation.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "passwordMinDiffChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of characters in the new password that must be different from the characters in the old password, and any passwords stored in the pwdHistory. If the password was one-way encrypted, the server cannot check actual password characters. The server continues processing depending on the value of the pwdCheckSyntax attribute. This value is read-only and is ignored on the PUT operation.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "pwdCheckSyntax": {
                        "type": "integer",
                        "description": "Indicates whether the password is checked for syntax. The values of the pwdCheckSynatx attribute are: '0' means that syntax checking is not enforced. '1' means that the server checks the syntax. If the server cannot check the syntax (for example, because of a hashed password), the password is accepted. '2' means that the server checks the syntax. If the server cannot check the syntax (for example, because of a hashed password), it returns an error and the password is rejected. This value is read-only and is ignored on the PUT operation.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "ibm_pwdPolicy": {
                        "type": "boolean",
                        "description": "Specifies whether to turn the password policy on or off. This value is read-only and is ignored on the PUT operation.",
                        "readOnly": true
                    }
                }
            },
            "PasswordPolicy": {
                "required": [
                    "passwordMinAlphaChars",
                    "passwordMinOtherChars",
                    "pwdExpireWarning",
                    "pwdInHistory",
                    "pwdLockout",
                    "pwdLockoutDuration",
                    "pwdMaxAge",
                    "pwdMaxFailure",
                    "pwdMinAge",
                    "pwdMinLength",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.  The schema \"urn:ietf:params:scim:schemas:ibm:core:2.0:policy:Password\" is returned.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "passwordMinAlphaChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of alphabetic characters that the password string must have. If the server is unable to check the number of alphabetic characters, then the server continues processing depending on the value of the pwdCheckSyntax attribute.",
                        "format": "int32"
                    },
                    "passwordMinOtherChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of numeric and special characters that the password string must have. If the server is unable to check the number of other characters, then the server continues processing depending on the value of the pwdCheckSyntax attribute.",
                        "format": "int32"
                    },
                    "pwdMinAge": {
                        "type": "integer",
                        "description": "Specifies the number of days before a password can be modified again.",
                        "format": "int32"
                    },
                    "pwdExpireWarning": {
                        "type": "integer",
                        "description": "Specifies the maximum number of days before a password expires that an expiration warning message is returned to an authenticating user.",
                        "format": "int32"
                    },
                    "pwdInHistory": {
                        "type": "integer",
                        "description": "Specifies the number of passwords that are stored in the pwdHistory attribute.",
                        "format": "int32"
                    },
                    "pwdLockout": {
                        "type": "boolean",
                        "description": "Indicates whether a password can be used to authenticate after a specified number of consecutive failed bind attempts. If the attribute is not provided, the behavior defaults to false."
                    },
                    "pwdLockoutDuration": {
                        "type": "integer",
                        "description": "Specifies the number of minutes that the password cannot be used to authenticate due to the specified 'pwdMaxFailure' failed bind attempts.",
                        "format": "int32"
                    },
                    "pwdMaxAge": {
                        "type": "integer",
                        "description": "Specifies the number of days after which a password will expire (0 means password does not expire)",
                        "format": "int32"
                    },
                    "pwdMaxFailure": {
                        "type": "integer",
                        "description": "Specifies the maximum number of consecutive failed bind attempts after which the password cannot be used for authentication. If a value of 0 is set for the pwdMaxFailure attribute, the value of pwdLockout is ignored.",
                        "format": "int32"
                    },
                    "pwdMinLength": {
                        "type": "integer",
                        "description": "Specifies the minimum length for the password string. The server checks the minimum length depending upon the value of the pwdCheckSyntax attribute.",
                        "format": "int32"
                    }
                }
            },
            "PasswordPolicyLabel": {
                "required": [
                    "key",
                    "ordinal",
                    "policyText"
                ],
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The internal key that is associated with this label."
                    },
                    "ordinal": {
                        "type": "integer",
                        "description": "The order in which labels are displayed when more than one is returned.",
                        "format": "int32"
                    },
                    "policyText": {
                        "type": "string",
                        "description": "The text for this policy label."
                    }
                }
            },
            "PasswordPolicyLabelsResponse": {
                "required": [
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure. The schemas \"urn:ietf:params:scim:schemas:ibm:core:2.0:policy:PasswordLabels\" is returned.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PasswordPolicyLabel"
                        }
                    }
                }
            },
            "DictPolicyResponseV31": {
                "required": [
                    "Sources",
                    "description",
                    "id",
                    "name",
                    "predefined"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique id of this password dictionary policy."
                    },
                    "name": {
                        "type": "string",
                        "description": "The user defined name of this password dictionary policy.  Maximum 240 characters."
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of this password dictionary policy.  Maximum 1024 characters."
                    },
                    "predefined": {
                        "type": "boolean",
                        "description": "Whether or not this password dictionary policy is predefined."
                    },
                    "Sources": {
                        "type": "array",
                        "description": "Defines the list of bad password dictionary sources.",
                        "items": {
                            "$ref": "#/components/schemas/Source"
                        }
                    }
                }
            },
            "Source": {
                "required": [
                    "source"
                ],
                "type": "object",
                "properties": {
                    "source": {
                        "type": "string",
                        "description": "The name of the bad password source",
                        "enum": [
                            "tenantDictionary",
                            "globalDictionary"
                        ]
                    },
                    "pwdChangeDict": {
                        "type": "string",
                        "description": "Specifies how the password dictionaries should affect password changes",
                        "enum": [
                            "off",
                            "audit",
                            "warn",
                            "enforce"
                        ]
                    },
                    "pwdAuthDict": {
                        "type": "string",
                        "description": "Specifies how the password dictionaries should affect password authentications",
                        "enum": [
                            "off",
                            "audit",
                            "warn",
                            "enforce",
                            "timed"
                        ]
                    },
                    "pwdAuthDictEnforceEndTime": {
                        "type": "string",
                        "description": "Specifies the end time of the timed pwdAuthDict enforcement (yyyy-mm-ddThh:mm:ssZ) UTC"
                    }
                }
            },
            "DictPolicyResponseV3": {
                "required": [
                    "Sources",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure. The schema URI must be \"urn:ietf:params:scim:schemas:ibm:core:3.0:policy:Dictionary\" as required by the SCIM specification.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "Sources": {
                        "type": "array",
                        "description": "Defines the list of bad password sources.",
                        "items": {
                            "$ref": "#/components/schemas/Source"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/MetaV1"
                    }
                }
            },
            "MetaV1": {
                "type": "object",
                "properties": {
                    "resourceType": {
                        "type": "string",
                        "description": "The field that indicates the type of resource."
                    },
                    "lastModified": {
                        "type": "string",
                        "description": "A DateTime string that indicates when the resource was last modified."
                    },
                    "location": {
                        "type": "string",
                        "description": "The URI of the resource that is being returned."
                    }
                }
            },
            "DictPoliciesResponseV31": {
                "required": [
                    "totalMembers"
                ],
                "type": "object",
                "properties": {
                    "totalMembers": {
                        "type": "integer",
                        "description": "The total number of password dictionary policies returned in the Resources array.",
                        "format": "int32"
                    },
                    "Resources": {
                        "type": "array",
                        "description": "A list of password dictionary policies",
                        "items": {
                            "$ref": "#/components/schemas/DictPolicyResponseV31"
                        }
                    }
                }
            },
            "DictPolicyPatchRequestV31": {
                "required": [
                    "Sources",
                    "description",
                    "name",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.  The schema \"urn:ietf:params:scim:schemas:ibm:core:3.0:policy:Password\" is required",
                        "items": {
                            "type": "string"
                        }
                    },
                    "Sources": {
                        "type": "array",
                        "description": "Defines the list of bad password dictionary sources.",
                        "items": {
                            "$ref": "#/components/schemas/Source"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The user defined name of this password dictionary policy.  Maximum 240 characters."
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of this password dictionary policy.  Maximum 1024 characters."
                    }
                }
            },
            "DictPolicyCreateRequestV31": {
                "required": [
                    "Sources",
                    "description",
                    "name",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure. The schema URI must be \"urn:ietf:params:scim:schemas:ibm:core:3.0:policy:Dictionary\" as required by the SCIM specification.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "Sources": {
                        "type": "array",
                        "description": "Defines the list of bad password dictionary sources.",
                        "items": {
                            "$ref": "#/components/schemas/Source"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The user defined name of this password dictionary policy.  Maximum 240 characters."
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of this password dictionary policy.  Maximum 1024 characters."
                    }
                }
            },
            "DictPolicyPatchRequestV3": {
                "required": [
                    "Sources",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.  The schema \"urn:ietf:params:scim:schemas:ibm:core:3.0:policy:Password\" is required",
                        "items": {
                            "type": "string"
                        }
                    },
                    "Sources": {
                        "type": "array",
                        "description": "Defines the list of bad password sources.",
                        "items": {
                            "$ref": "#/components/schemas/Source"
                        }
                    }
                }
            },
            "PasswordDictionaryPatchRequestV3": {
                "required": [
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.  The schema \"urn:ietf:params:scim:schemas:ibm:core:3.0:policy:Password:Dictionary\"is used",
                        "items": {
                            "type": "string"
                        }
                    },
                    "passwords": {
                        "type": "array",
                        "description": "The password strings to add to, or remove from, the dictionary",
                        "items": {
                            "type": "string"
                        }
                    },
                    "operation": {
                        "type": "string",
                        "description": "Whether to add or remove the passwords",
                        "enum": [
                            "add",
                            "remove"
                        ]
                    }
                }
            },
            "CSVImportError": {
                "required": [
                    "failureReason",
                    "id",
                    "statusCode"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The error that occurred while importing from a CSV file"
                    },
                    "statusCode": {
                        "type": "string",
                        "description": "The status code for the error"
                    },
                    "failureReason": {
                        "type": "string",
                        "description": "The detailed failure reason for the error"
                    }
                }
            },
            "CSVImportRecord": {
                "required": [
                    "state",
                    "tenant",
                    "tenantUUID"
                ],
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "description": "Unique identifier for the import request"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the import request"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "The tenant for the import request"
                    },
                    "tenantUUID": {
                        "type": "string",
                        "description": "The tenant UUID for the import request"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the import request",
                        "enum": [
                            "CANCELLED",
                            "COMPLETED",
                            "RUNNING",
                            "ABANDONED"
                        ]
                    },
                    "stats": {
                        "$ref": "#/components/schemas/CSVImportStats"
                    }
                }
            },
            "CSVImportStats": {
                "required": [
                    "errorsCount",
                    "processedCount",
                    "startTime",
                    "totalCount",
                    "unprocessedCount"
                ],
                "type": "object",
                "properties": {
                    "startTime": {
                        "type": "string",
                        "description": "The time that the import request started"
                    },
                    "endTime": {
                        "type": "string",
                        "description": "The time that the import request was completed or cancelled"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total number of CSV entries in the CSV file",
                        "format": "int32"
                    },
                    "processedCount": {
                        "type": "integer",
                        "description": "The total number of CSV entries that were processed",
                        "format": "int32"
                    },
                    "errorsCount": {
                        "type": "integer",
                        "description": "The total number of errors that occurred during the import request",
                        "format": "int32"
                    },
                    "unprocessedCount": {
                        "type": "integer",
                        "description": "The total number of CSV entries that were not processed",
                        "format": "int32"
                    },
                    "errors": {
                        "type": "array",
                        "description": "The list of errors that occurred during the CSV import request",
                        "items": {
                            "$ref": "#/components/schemas/CSVImportError"
                        }
                    },
                    "unprocessed": {
                        "type": "array",
                        "description": "The list of unprocessed names that occurred during the CSV import request",
                        "items": {
                            "type": "string"
                        }
                    },
                    "lastUpdateTime": {
                        "type": "integer",
                        "description": "The last time we updated statistics for a job",
                        "format": "int64"
                    },
                    "minutesToWait": {
                        "type": "integer",
                        "description": "The number of minutes before we write out stats",
                        "format": "int32"
                    }
                }
            },
            "CSVImportRecords": {
                "type": "object",
                "properties": {
                    "jobs": {
                        "type": "array",
                        "description": "A list of CSV import requests.",
                        "items": {
                            "$ref": "#/components/schemas/CSVImportRecord"
                        }
                    }
                }
            },
            "CSVImportJob": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "description": "The unique identifier for the user import request."
                    }
                }
            },
            "CSVImportHeader": {
                "required": [
                    "dataType",
                    "name",
                    "required"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the header."
                    },
                    "dataType": {
                        "type": "string",
                        "description": "The data type of the header value."
                    },
                    "required": {
                        "type": "boolean",
                        "description": "The header is required."
                    }
                }
            },
            "CSVImportSCIMNames": {
                "type": "object",
                "properties": {
                    "headerNames": {
                        "type": "array",
                        "description": "List of header names allowed as CSV file headers",
                        "items": {
                            "$ref": "#/components/schemas/CSVImportHeader"
                        }
                    }
                }
            },
            "PasswordPolicyResponseV3": {
                "required": [
                    "id",
                    "passwordSecurity",
                    "passwordStrength"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique id of this password policy."
                    },
                    "passwordStrength": {
                        "$ref": "#/components/schemas/PasswordStrengthV3"
                    },
                    "passwordSecurity": {
                        "$ref": "#/components/schemas/PasswordSecurityV3"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "predefined": {
                        "type": "boolean"
                    }
                }
            },
            "PasswordSecurityV3": {
                "type": "object",
                "properties": {
                    "pwdMinAge": {
                        "type": "integer",
                        "description": "Specifies the number of seconds before a password can be modified again.  Can't be larger than pwdMaxAge.",
                        "format": "int32"
                    },
                    "pwdExpireWarning": {
                        "type": "integer",
                        "description": "Specifies the maximum number of seconds before a password expires that an expiration warning message is returned to an authenticating user.",
                        "format": "int32"
                    },
                    "pwdInHistory": {
                        "type": "integer",
                        "description": "Specifies the number of passwords that are stored in the pwdHistory attribute.",
                        "format": "int32"
                    },
                    "pwdLockout": {
                        "type": "boolean",
                        "description": "Indicates whether a password can be used to authenticate after a specified number of consecutive failed bind attempts. If the attribute is not provided, the behavior defaults to false."
                    },
                    "pwdLockoutDuration": {
                        "type": "integer",
                        "description": "Specifies the number of seconds that the password cannot be used to authenticate due to the specified 'pwdMaxFailure' failed bind attempts.",
                        "format": "int32"
                    },
                    "pwdMaxAge": {
                        "type": "integer",
                        "description": "Specifies the number of seconds after which a password will expire (0 means password does not expire)Must be greater than or equal to pwdMinAge.",
                        "format": "int32"
                    },
                    "pwdMaxFailure": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "PasswordStrengthV3": {
                "type": "object",
                "properties": {
                    "pwdMinLength": {
                        "type": "integer",
                        "description": "Specifies the minimum length for the password string. The server checks the minimum length depending upon the value of the pwdCheckSyntax attribute.Must be greater than or equal to the sum of 'passwordMinAlphaChars' and 'passwordMinOtherChars'",
                        "format": "int32"
                    },
                    "passwordMaxConsecutiveRepeatedChars": {
                        "type": "integer",
                        "description": "Specifies the maximum successive repetitions of a given character in the password.",
                        "format": "int32"
                    },
                    "passwordMaxRepeatedChars": {
                        "type": "integer",
                        "description": "Specifies the maximum number of times a given character can be used in a password. If the server is unable to check the actual password characters, then the server will continue processing depending on the value of the pwdCheckSyntax attribute.",
                        "format": "int32"
                    },
                    "passwordMinAlphaChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of alphabetic characters that the password string must have. If the server is unable to check the number of alphabetic characters, then the server continues processing depending on the value of the pwdCheckSyntax attribute.",
                        "format": "int32"
                    },
                    "passwordMinDiffChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of characters in the new password that must be different from the characters in the old password, and any passwords stored in the pwdHistory. If the password has been one-way encrypted the server is unable to check actual password characters, then the server will continue processing depending on the value of the pwdCheckSyntax attribute.",
                        "format": "int32"
                    },
                    "passwordMinOtherChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of numeric and special characters that the password string must have. If the server is unable to check the number of other characters, then the server continues processing depending on the value of the pwdCheckSyntax attribute.",
                        "format": "int32"
                    },
                    "passwordMinLowerCaseChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of lower case alphabetic characters that the password string must have.",
                        "format": "int32"
                    },
                    "passwordMinUpperCaseChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of upper case alphabetic characters that the password string must have.",
                        "format": "int32"
                    },
                    "passwordMinNumberChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of numeric characters that the password string must have.",
                        "format": "int32"
                    },
                    "passwordMinSpecialChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of special characters that the password string must have.",
                        "format": "int32"
                    }
                }
            },
            "PasswordPoliciesResponseV3": {
                "required": [
                    "totalMembers"
                ],
                "type": "object",
                "properties": {
                    "totalMembers": {
                        "type": "integer",
                        "description": "The total number of password policies returned in the Resources array.",
                        "format": "int32"
                    },
                    "Resources": {
                        "type": "array",
                        "description": "A list of password policies",
                        "items": {
                            "$ref": "#/components/schemas/PasswordPolicyResponseV3"
                        }
                    }
                }
            },
            "PasswordPolicyLabelsResponse3": {
                "required": [
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure. The schemas \"urn:ietf:params:scim:schemas:ibm:core:3.0:policy:PasswordLabels\" is returned.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PasswordPolicyLabel"
                        }
                    }
                }
            },
            "PasswordPolicyValidatePasswordRequest": {
                "required": [
                    "password",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.  The schema \"urn:ietf:params:scim:schemas:ibm:core:3.0:policy:Password\"is returned.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "password": {
                        "type": "string",
                        "description": "The password to validate"
                    }
                }
            },
            "PasswordPolicyCreateRequestV3": {
                "required": [
                    "passwordSecurity",
                    "passwordStrength",
                    "policyDescription",
                    "policyName",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.  The schema \"urn:ietf:params:scim:schemas:ibm:core:3.0:policy:Password\"is returned.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "policyName": {
                        "type": "string",
                        "description": "User defined name of the password policy"
                    },
                    "policyDescription": {
                        "type": "string",
                        "description": "A description of the password policy"
                    },
                    "passwordStrength": {
                        "$ref": "#/components/schemas/PasswordStrengthV3"
                    },
                    "passwordSecurity": {
                        "$ref": "#/components/schemas/PasswordSecurityV3"
                    }
                }
            },
            "GeneratePasswordPolicyPasswordResponse": {
                "required": [
                    "password",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.  The schema \"urn:ietf:params:scim:schemas:ibm:core:3.0:policy:Password\"is returned.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "password": {
                        "type": "string",
                        "description": "The generated password that satisfies the password policy constraints"
                    }
                }
            },
            "PasswordPolicyPatchRequestV3": {
                "required": [
                    "policyName",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.  The schema \"urn:ietf:params:scim:schemas:ibm:core:3.0:policy:Password\"is returned.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "policyName": {
                        "type": "string",
                        "description": "The user defined name of the password policy."
                    },
                    "passwordStrength": {
                        "$ref": "#/components/schemas/PasswordStrengthV3"
                    },
                    "passwordSecurity": {
                        "$ref": "#/components/schemas/PasswordSecurityV3"
                    }
                }
            },
            "ModifyLastloginResponse": {
                "required": [
                    "lastProcessedUserID",
                    "totalChanged"
                ],
                "type": "object",
                "properties": {
                    "totalChanged": {
                        "type": "integer",
                        "description": "The total number of users whose last login attribute was modified.",
                        "format": "int32"
                    },
                    "lastProcessedUserID": {
                        "type": "string",
                        "description": "The last processed user id."
                    }
                }
            },
            "LastLoginModel": {
                "required": [
                    "lastLogin"
                ],
                "type": "object",
                "properties": {
                    "lastLogin": {
                        "type": "string",
                        "description": "Indicates the time of the last login for the current user entry.  Value is a date and time of the form yyyy-mm-ddThh:mm:ssZ."
                    }
                }
            },
            "AccountExpiryTenantStatus": {
                "required": [
                    "completed",
                    "tenantName",
                    "timeCompleted",
                    "timeStarted",
                    "totalExpired"
                ],
                "type": "object",
                "properties": {
                    "totalExpired": {
                        "type": "integer",
                        "description": "The total number of accounts that were expired.",
                        "format": "int32"
                    },
                    "timeStarted": {
                        "type": "integer",
                        "description": "The time when account expiration processing started.",
                        "format": "int64"
                    },
                    "timeCompleted": {
                        "type": "integer",
                        "description": "The time when account expiration processing completed.",
                        "format": "int64"
                    },
                    "completed": {
                        "type": "boolean",
                        "description": "A flag indicating whether the overall status is completed."
                    },
                    "tenantName": {
                        "type": "string",
                        "description": "The tenant name"
                    }
                }
            },
            "DeactivatedResponse": {
                "required": [
                    "lastProcessedUserID",
                    "totalChanged"
                ],
                "type": "object",
                "properties": {
                    "totalChanged": {
                        "type": "integer",
                        "description": "The total number of users whose last login attribute was modified.",
                        "format": "int32"
                    },
                    "lastProcessedUserID": {
                        "type": "string",
                        "description": "The last processed user id."
                    }
                }
            },
            "AccountExpiryDateResponse": {
                "required": [
                    "lastProcessedUsername",
                    "totalChanged"
                ],
                "type": "object",
                "properties": {
                    "totalChanged": {
                        "type": "integer",
                        "description": "The total number of users whose accountExpires attribute was modified.",
                        "format": "int32"
                    },
                    "lastProcessedUsername": {
                        "type": "string",
                        "description": "The last processed username."
                    }
                }
            },
            "ExpirationTimeModel": {
                "type": "object",
                "properties": {
                    "accountExpires": {
                        "type": "string",
                        "description": "The date format must be in yyyy-mm-ddTHH:00:00Z.",
                        "example": "2021-04-01T16:00:00Z"
                    }
                }
            },
            "OperationResponse": {
                "required": [
                    "location",
                    "method",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "location": {
                        "type": "string",
                        "description": "The resource endpoint URL."
                    },
                    "method": {
                        "type": "string",
                        "description": "The HTTP method of the current operation."
                    },
                    "status": {
                        "type": "string",
                        "description": "The HTTP status code for the requested operation. A status that indicates an error will includes a response with the details."
                    },
                    "response": {
                        "$ref": "#/components/schemas/ExternalErrorMessage1"
                    },
                    "bulkId": {
                        "type": "string",
                        "description": "The transient identifier of a newly created resource. It is created by the client and unique within a bulk request.  The bulkId serves as a surrogate resource ID that enables clients to uniquely identify newly created resources in the response and to cross-reference new resources in and across operations within a bulk request.  This attribute is required when the method is POST."
                    }
                }
            },
            "Bulk": {
                "required": [
                    "Operations",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure. The schema URI must be \"urn:ietf:params:scim:api:messages:2.0:BulkRequest\" as required by the SCIM specification.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "failOnErrors": {
                        "type": "integer",
                        "description": "An integer that specifies the number of errors that the service  provider accepts before the operation is terminated and an error response is returned.",
                        "format": "int32"
                    },
                    "Operations": {
                        "type": "array",
                        "description": "Defines the operations within a bulk job. Each operation corresponds to a single HTTP request against a resource endpoint.",
                        "items": {
                            "$ref": "#/components/schemas/Operation"
                        }
                    }
                }
            },
            "Operation": {
                "required": [
                    "method",
                    "path"
                ],
                "type": "object",
                "properties": {
                    "method": {
                        "type": "string",
                        "description": "The method to perform.",
                        "enum": [
                            "POST",
                            "PUT",
                            "PATCH",
                            "DELETE"
                        ]
                    },
                    "path": {
                        "type": "string",
                        "description": "The resource path. Example, /Users/5XP33222 for a PUT, PATCH, or DELETE method or /Users for a POST method."
                    },
                    "bulkId": {
                        "type": "string",
                        "description": "The transient identifier of a newly created resource. It is created by the client and unique within a bulk request. The  bulkId serves as a surrogate resource ID that enables clients to  uniquely identify newly created resources in the response and  to cross-reference new resources in and across operations within a  bulk request.  This attribute is required when the method is POST."
                    },
                    "data": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "The resource data as it appears for a single SCIM POST.This attribute is required in a request when the method is POST, PUT, or PATCH."
                    }
                }
            },
            "PatchBody": {
                "required": [
                    "Operations",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "The body of each SCIM PATCH request must contain the \"schemas\" attribute with the URI value: \"urn:ietf:params:scim:api:messages:2.0:PatchOp\".",
                        "items": {
                            "type": "string"
                        }
                    },
                    "Operations": {
                        "type": "array",
                        "description": "An array of operation objects to be performed.  Operation objects must have exactly one \"op\" member, whose value indicates the operation to perform. Its value must be one of \"add\", \"remove\", or \"replace\". Values are errors.",
                        "items": {
                            "$ref": "#/components/schemas/PatchOperation_0"
                        }
                    }
                }
            },
            "Address": {
                "type": "object",
                "properties": {
                    "locality": {
                        "type": "string",
                        "description": "The city or locality component. Maximum length is 128 characters."
                    },
                    "country": {
                        "type": "string",
                        "description": "The country name component. Maximum length is 128 characters."
                    },
                    "type": {
                        "type": "string",
                        "description": "A label that indicates the attribute's function; for example, \"work\" or \"home\".",
                        "enum": [
                            "work"
                        ]
                    },
                    "streetAddress": {
                        "type": "string",
                        "description": "The street address. Maximum length is 128 characters."
                    },
                    "postalCode": {
                        "type": "string",
                        "description": "The postal code. Maximum length is 40 characters."
                    },
                    "formatted": {
                        "type": "string",
                        "description": "The formatted value of the address. Maximum length is 500 characters."
                    },
                    "primary": {
                        "type": "boolean",
                        "description": "Indicates whether this is address is the primary address for correspondence."
                    },
                    "region": {
                        "type": "string",
                        "description": "The region. Maximum length is 128 characters."
                    }
                }
            },
            "CICCustomGroupResponse": {
                "required": [
                    "totalMembers"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description for the group."
                    },
                    "groupType": {
                        "type": "string",
                        "description": "The group type. This value is read-only.",
                        "enum": [
                            "standard",
                            "reserved"
                        ]
                    },
                    "membersPerPage": {
                        "type": "integer",
                        "description": "Members per page.  For large group support, this property is the count of members returned in the members array.",
                        "format": "int32"
                    },
                    "totalMembers": {
                        "type": "integer",
                        "description": "The total number of members that are in the group.",
                        "format": "int32"
                    },
                    "memberStartIndex": {
                        "type": "integer",
                        "description": "The start index of members that are returned on the page.",
                        "format": "int32"
                    },
                    "owners": {
                        "type": "array",
                        "description": "A list of owners for the group.  For large group support, the group ownership is automatically set and enforced when the request has restricted groups that are associated with the access token's user subject identifier.",
                        "items": {
                            "$ref": "#/components/schemas/GroupOwner"
                        }
                    }
                }
            },
            "CICCustomUserResponse": {
                "type": "object",
                "properties": {
                    "userCategory": {
                        "type": "string",
                        "description": "The user category.",
                        "enum": [
                            "regular",
                            "federated"
                        ]
                    },
                    "emailVerified": {
                        "type": "string",
                        "description": "A timestamp that indicates when the user's email was verified."
                    },
                    "realm": {
                        "type": "string",
                        "description": "The realm to which the user belongs. It is always \"cloudIdentityRealm\" for non-federated users."
                    },
                    "unqualifiedUserName": {
                        "type": "string",
                        "description": "An unqualified, federated user name. This field is read-only."
                    },
                    "twoFactorAuthentication": {
                        "type": "boolean",
                        "description": "Indicates whether two factory authentication is required. It defaults to \"false\" if not provided."
                    },
                    "pwdReset": {
                        "type": "boolean",
                        "description": "Indicates whether the password is reset for the current user entry. This value is read-only."
                    },
                    "pwdChangedTime": {
                        "type": "string",
                        "description": "Indicates the time when the password was changed for the current user entry. This value is read-only."
                    },
                    "pwdAccountLockedTime": {
                        "type": "string",
                        "description": "A field that indicates the timestamp at which the user's password was locked. The value of this field is in milliseconds and is read-only."
                    },
                    "pwdExpirationWarned": {
                        "type": "string",
                        "description": "A field that indicates the timestamp at which the user's password expiration is set. The value of this field is in milliseconds and is read-only."
                    },
                    "pwdFailureTime": {
                        "type": "array",
                        "description": "A field that indicates a list of timestamps at which the user attempted to log in with the wrong password The value of this field is in milliseconds and is read-only.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "pwdGraceUseTime": {
                        "type": "array",
                        "description": "A field that indicates a list of timestamps at which the user attempted to see extended or grace time. The value of this field is in milliseconds and is read-only.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "delegate": {
                        "type": "string",
                        "description": "The \"id\" of the entry to which approval and re-certification records assigned to this identity will be delegated."
                    },
                    "customAttributes": {
                        "type": "array",
                        "description": "The custom attributes for the user. For the GET /Users API, custom attributes can be referenced by using the fully qualified name. The schema URI is urn:ietf:params:scim:schemas:extension:ibm:2.0:User:customAttributes.scimName, where scimName is the SCIM name of the custom schema attribute that was created with the POST /Schema/attributes API.",
                        "items": {
                            "$ref": "#/components/schemas/CustomAttribute"
                        }
                    },
                    "linkedAccounts": {
                        "type": "array",
                        "description": "The linked accounts for the user.",
                        "items": {
                            "$ref": "#/components/schemas/LinkedAccount"
                        }
                    },
                    "lastLogin": {
                        "type": "string",
                        "description": "Indicates the time of the last login for the current user entry.  Value is a date and time of the form yyyy-mm-ddThh:mm:ssZ."
                    },
                    "lastLoginType": {
                        "type": "string",
                        "description": "Indicates the login type used for the last login for the current user entry."
                    },
                    "lastLoginRealm": {
                        "type": "string",
                        "description": "Indicates the realm used for the last login for the current user entry."
                    },
                    "lastMFA": {
                        "type": "array",
                        "description": "The last MFAs for the user.",
                        "items": {
                            "$ref": "#/components/schemas/LastMFA"
                        }
                    },
                    "accountExpires": {
                        "type": "string",
                        "description": "The expiration date of the account.  The value is a date and time of the form  yyyy-mm-ddThh:mm:ssZ.  For example, an account expiration of 2021-04-01T16:00:00Z, expires on year 2021, April 1 at 16 hundred hours GMT.  When an account is expired, the account's active flag is set to false to prevent login.The process that checks for expired accounts runs every 15 minutes at the top of the hour in GMT+0 time. "
                    }
                }
            },
            "CustomAttribute": {
                "required": [
                    "name",
                    "values"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The SCIM name of the custom attribute.  The SCIM name for a custom schema attribute is defined for the tenant by using the POST /Schema/attributes API.\n"
                    },
                    "values": {
                        "type": "array",
                        "description": "The values of the custom attribute. Maximum length is 1000 characters.\n",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "EmailAddress": {
                "required": [
                    "type",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "description": "The e-mail addresses for the user. The value is canonicalized by the service provider. For example, bjensen@example.com instead of bjensen@EXAMPLE.COM. Must be RFC 2822 compliant. Maximum length is 128 characters."
                    },
                    "type": {
                        "type": "string",
                        "description": "A label that indicates the attribute function; for example, \"work\".  Only a single email is allowed.",
                        "enum": [
                            "work"
                        ]
                    }
                }
            },
            "EnterpriseUser": {
                "type": "object",
                "properties": {
                    "department": {
                        "type": "string",
                        "description": "Identifies the name of the department. Maximum length is 128 characters.\n"
                    },
                    "employeeNumber": {
                        "type": "string",
                        "description": "A string identifier, typically numeric or alphanumeric, that is assigned to a person. Typically the number is based on the order of hire. Maximum length is 128 characters.\n"
                    },
                    "manager": {
                        "$ref": "#/components/schemas/Manager"
                    }
                }
            },
            "GroupMembersResponse": {
                "required": [
                    "$ref",
                    "addresses",
                    "emails",
                    "name",
                    "type",
                    "userName",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the resource as defined by the service. This attribute is read-only and is sent by the service. Any value that is specified for this attribute in the JSON POST or PUT request payload is ignored."
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Valid for user type members only. A unique identifier for the resource that is defined by the provisioning client. It identifies a resource between the provisioning client and the service provider. The client can use a filter to locate the resource with the identifier from the provisioning domain."
                    },
                    "userName": {
                        "type": "string",
                        "description": "Valid for user type members only. The unique identifier for the user that is typically used by the user to directly authenticate to the service provider. It is often displayed to the user as their unique identifier within the system (as opposed to the id or externalId attributes, which are generally opaque and not user-friendly identifiers). Each user must include a non-empty userName value. This identifier must be unique across the service consumer's entire set of users. It must be a stable ID that does not change when the same user is returned in subsequent requests."
                    },
                    "title": {
                        "type": "string",
                        "description": "Valid for user type members only. The user's title, such as \"Vice President\"."
                    },
                    "name": {
                        "$ref": "#/components/schemas/Name"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the user or group that is displayed to users. Each member returned may include a non-empty displayName value. For a user type member, typically it is the full name of the user that is being described, for example, Babs Jensen or Ms. Barbara J Jensen. However, if that information is unavailable, a username or handle can be used, for example, bjensen. The value is the primary textual label by which this user is normally displayed by the service provider when presenting information to users."
                    },
                    "preferredLanguage": {
                        "type": "string",
                        "description": "Valid for user type members only. The language code identifying the preferred language of this identity, for example, en-us or fr-ca."
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Valid for user type members only. A Boolean value that indicates the user's administrative status. The definitive meaning of this attribute is determined by the service provider. For example, a value of true indicates that the user is, for example, able to log in, while a value of false indicates that the user's account has been suspended. If not specified, the value defaults to true."
                    },
                    "emails": {
                        "type": "array",
                        "description": "Valid for user type members only. A list of email addresses that are associated with the user.",
                        "items": {
                            "$ref": "#/components/schemas/EmailAddress"
                        }
                    },
                    "addresses": {
                        "type": "array",
                        "description": "Valid for user type members only. A list of addresses that are associated with the user.",
                        "items": {
                            "$ref": "#/components/schemas/Address"
                        }
                    },
                    "phoneNumbers": {
                        "type": "array",
                        "description": "Valid for user type members only. A list of phone numbers that are associated with the user.",
                        "items": {
                            "$ref": "#/components/schemas/PhoneNumber"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of group member.",
                        "enum": [
                            "user",
                            "group"
                        ]
                    },
                    "urn:ietf:params:scim:schemas:extension:ibm:2.0:User": {
                        "$ref": "#/components/schemas/CICCustomUserResponse"
                    },
                    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
                        "$ref": "#/components/schemas/EnterpriseUser"
                    },
                    "value": {
                        "type": "string",
                        "description": "A sub-attr required by the SCIM specification that contains the \"id\" of the SCIM resource."
                    },
                    "$ref": {
                        "type": "string",
                        "description": "A sub-attr required by the SCIM specification the contains the URI of the SCIM resource."
                    }
                }
            },
            "GroupOwner": {
                "required": [
                    "value"
                ],
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "description": "The id of the group owner"
                    },
                    "$ref": {
                        "type": "string",
                        "description": "The URI of the SCIM resource representing the user.  This value is readonly. \n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the user. This value is readonly. \n"
                    }
                }
            },
            "GroupResponseV2": {
                "required": [
                    "displayName",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure. The schemas \"urn:ietf:params:scim:schemas:core:2.0:Group\"   and \"urn:ietf:params:scim:schemas:extension:ibm:2.0:Group\" are returned in the response.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the resource as defined by the service. This attribute is read-only and will be sent by the service. Any value that is specified for this attribute in the JSON POST or PUT request payload is ignored."
                    },
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the group."
                    },
                    "bookmark": {
                        "type": "string",
                        "description": "An opaque string that is used by the system to get the next 2500 members of this group.  The existence of this element in the GET /v2.0/Groups/{id} response payload indicates that more members exist that were not returned in the call.  To get the next set of members, the caller makes an additional call to the same endpoint, and passes the bookmark value as a query parameter named \"nextPage\". For example ?nextPage=XASDGAJDGKAWHGI=.  The caller can continue to make calls to the endpoint until no bookmark element are returned in the response payload, which indicates that all group members were returned.  A bookmark is generated from a membershipType query.  The bookmark feature is available for tenants that have large group support enabled."
                    },
                    "urn:ietf:params:scim:schemas:extension:ibm:2.0:Group": {
                        "$ref": "#/components/schemas/CICCustomGroupResponse"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/MetaV2"
                    },
                    "members": {
                        "type": "array",
                        "description": "A list of members that belong to this group.  If the group has more than 10,000 members, then this array is empty, unless large group support is enabled for the tenant.  With large group support enabled, each call to the GET /v2.0/Groups/{id} endpoint returns at most 2,500 members of the group.  If more members of the group exist that were not returned, a bookmark is returned in the response.  The bookmark is used to get the next set of group members.  See the \"bookmark\" property for more details. ",
                        "items": {
                            "$ref": "#/components/schemas/GroupMembersResponse"
                        }
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Identifier of the Group resource as defined by the provisioning client."
                    }
                }
            },
            "LastMFA": {
                "required": [
                    "type",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The type of MFA"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value for this type of MFA"
                    }
                }
            },
            "LinkedAccount": {
                "required": [
                    "externalId",
                    "realm"
                ],
                "type": "object",
                "properties": {
                    "externalId": {
                        "type": "string",
                        "description": "The ID of a user's external account The maximum length, in combination with realm, is 239 characters."
                    },
                    "realm": {
                        "type": "string",
                        "description": "The realm name of the user's external account The maximum length, in combination with externalId, is 239 characters."
                    }
                }
            },
            "Manager": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "description": "The \"id\" of the SCIM resource representing the user's manager.  \n"
                    },
                    "$ref": {
                        "type": "string",
                        "description": "The URI of the SCIM resource representing the user's manager.  This value is readonly. \n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the user's manager. This value is readonly. \n"
                    }
                }
            },
            "MetaV2": {
                "type": "object",
                "properties": {
                    "resourceType": {
                        "type": "string",
                        "description": "The field that indicates the type of resource."
                    },
                    "created": {
                        "type": "string",
                        "description": "A DateTime string that indicates when the resource was created."
                    },
                    "lastModified": {
                        "type": "string",
                        "description": "A DateTime string that indicates when the resource was last modified."
                    },
                    "location": {
                        "type": "string",
                        "description": "The URI of the resource that is being returned."
                    },
                    "deactivated": {
                        "type": "string",
                        "description": "A readonly string that indicates why the account is deactivated.  Valid values are \"api\", \"timestamp\", and \"cleanup\".  The value \"api\" means that the user was deactivated by using an API.  The value \"timestamp\" means that the user was deactivated by the system because the account expired.  The value \"cleanup\" means that the user was deactivated by the system during account cleanup processing.",
                        "enum": [
                            "api",
                            "timestamp",
                            "cleanup"
                        ]
                    }
                }
            },
            "Name": {
                "type": "object",
                "properties": {
                    "formatted": {
                        "type": "string",
                        "description": "The full name of the user that includes all  user names, middle names, and suffixes, that are formatted for display. This value is returned by the service provider if it is not part of the POST or PUT payloads. If the POST or PUT JSON payload contains the value for this attribute, the value in the payload takes precedence. Maximum length is 240 characters."
                    },
                    "familyName": {
                        "type": "string",
                        "description": "The family name of the user, or the last name in most Western languages. For example, Jensen is the family name from the full name Ms. Barbara J Jensen, PhD. Maximum length is 80 characters."
                    },
                    "givenName": {
                        "type": "string",
                        "description": "The given name of the user, or first name in most Western languages. For example, Barbara is the given name from the full name Ms. Barbara J Jensen, PhD. Maximum length is 80 characters."
                    },
                    "middleName": {
                        "type": "string",
                        "description": "The middle name(s) of the user. Maximum length is 80 characters."
                    }
                }
            },
            "PhoneNumber": {
                "required": [
                    "type",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "description": "A list of phone numbers that are associated with the user. The value is be canonicalized by the service provider according to format in RFC3966, for example, \"tel:+1-201-555-0123\". Canonical type values are work, home, mobile, fax, and pager. Maximum length is 32 characters."
                    },
                    "type": {
                        "type": "string",
                        "description": "A label that indicates the attribute's function; for example, \"work\" or \"home\".",
                        "enum": [
                            "work",
                            "home",
                            "mobile",
                            "pager",
                            "fax"
                        ]
                    }
                }
            },
            "CICCustomGroup": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description for the group that is being created."
                    },
                    "owners": {
                        "type": "array",
                        "description": "A list of owners for the group.  When the scope of an admin role restricts groups, the members of that role can access only those restricted groups and any other groups that they own.  Members of a scoped role are also automatically assigned as the group owner when creating the group by calling the POST /v2.0/Groups API.",
                        "items": {
                            "$ref": "#/components/schemas/GroupOwner"
                        }
                    }
                }
            },
            "GroupMembers": {
                "required": [
                    "type",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The type of group member that is being added.",
                        "enum": [
                            "user"
                        ]
                    },
                    "value": {
                        "type": "string",
                        "description": "The unique identifier of the member that is being added to the group."
                    }
                }
            },
            "GroupV2": {
                "required": [
                    "displayName",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.   The schemas \"urn:ietf:params:scim:schemas:core:2.0:Group\", urn:ietf:params:scim:schemas:extension:ibm:2.0:Group\",  and \"urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification\" are valid.  The core group schema is required.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the group. Maximum length is 255 characters."
                    },
                    "members": {
                        "type": "array",
                        "description": "A list of members that are being added.  When creating a group, the number of elements must be less than or equal to 10,000.",
                        "items": {
                            "$ref": "#/components/schemas/GroupMembers"
                        }
                    },
                    "urn:ietf:params:scim:schemas:extension:ibm:2.0:Group": {
                        "$ref": "#/components/schemas/CICCustomGroup"
                    },
                    "urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification": {
                        "$ref": "#/components/schemas/Notifications"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Identifier of the Group resource as defined by the provisioning client. Maximum length is 240 characters."
                    },
                    "visible": {
                        "type": "boolean"
                    }
                }
            },
            "Notifications": {
                "type": "object",
                "properties": {
                    "notifyType": {
                        "type": "string",
                        "description": "The value that indicates the type of notification that is sent to the user. If not provided, the default value is EMAIL.",
                        "enum": [
                            "EMAIL",
                            "NONE"
                        ]
                    },
                    "notifyPassword": {
                        "type": "boolean",
                        "description": "Indicates whether the user's password is included in the notification that is sent  to the user. If the attribute is not provided, the behavior defaults to true. This attribute does not apply if the notifyType attribute is set to NONE."
                    },
                    "notifyManager": {
                        "type": "boolean",
                        "description": "Indicates whether the notification should be sent to the user's manager (if one is set) when a user's password is set or modified. If the attribute is not provided, the behavior defaults to false. This attribute does not apply if the notifyType attribute is set to NONE."
                    }
                }
            },
            "GroupsCardinalityResponse": {
                "required": [
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate thenamespaces of the SCIM schemas that define the attributes in thecurrent JSON structure.  The schema \"urn:ietf:params:scim:schemas:ibm:core:2.0:group:Cardinality\"is returned.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "totalGroups": {
                        "type": "integer",
                        "description": "Specifies the total number of groups for the tenant.",
                        "format": "int32"
                    }
                }
            },
            "CICCustomLargeGroupResponse": {
                "required": [
                    "totalMembers"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description for the group."
                    },
                    "groupType": {
                        "type": "string",
                        "description": "The group type. This value is read-only.",
                        "enum": [
                            "standard",
                            "reserved"
                        ]
                    },
                    "totalMembers": {
                        "type": "integer",
                        "description": "The total number of members that are in the group.",
                        "format": "int32"
                    }
                }
            },
            "LargeGroupResponse": {
                "required": [
                    "displayName",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure. The schemas \"urn:ietf:params:scim:schemas:core:2.0:Group\"   and \"urn:ietf:params:scim:schemas:extension:ibm:2.0:Group\" are returned in the response.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the resource as defined by the service. This attribute is read-only and will be sent by the service. Any value that is specified for this attribute in the JSON POST or PUT request payload is ignored."
                    },
                    "displayName": {
                        "type": "string",
                        "description": "A human-readable name for the group."
                    },
                    "urn:ietf:params:scim:schemas:extension:ibm:2.0:Group": {
                        "$ref": "#/components/schemas/CICCustomLargeGroupResponse"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/MetaV2"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Identifier of the Group resource as defined by the provisioning client."
                    }
                }
            },
            "GetGroupsResponseV2": {
                "required": [
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure. The schema \"urn:ietf:params:scim:api:messages:2.0:ListResponse\" is returned in the response.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "Resources": {
                        "type": "array",
                        "description": "A list of groups.",
                        "items": {
                            "$ref": "#/components/schemas/GroupResponseV2"
                        }
                    }
                }
            },
            "ValidGroup": {
                "required": [
                    "displayName"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the resource as defined by the service. This attribute is read-only and is sent by the service. Any value that is specified for this attribute in the JSON POST or PUT request payload is ignored."
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the group."
                    }
                }
            },
            "ValidateGroupsResponse": {
                "required": [
                    "invalidGroups",
                    "schemas",
                    "validGroups"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.  The schema \"urn:ietf:params:scim:schemas:ibm:core:2.0:GroupsValidatorResponse\" is returned.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "validGroups": {
                        "type": "array",
                        "description": "An array of valid groups.",
                        "items": {
                            "$ref": "#/components/schemas/ValidGroup"
                        }
                    },
                    "invalidGroups": {
                        "type": "array",
                        "description": "An array of strings that contain the IDs of the invalid groups.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ValidateGroups": {
                "required": [
                    "displayNames",
                    "ids",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.  The schema URI must be \"urn:ietf:params:scim:schemas:ibm:core:2.0:GroupsValidator\" as required by the SCIM specification.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ids": {
                        "type": "array",
                        "description": "An array of strings that contain the group IDs that are validated.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "displayNames": {
                        "type": "array",
                        "description": "An array of strings that contain the group display names that are validated.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "HealthCheckResponseV2": {
                "required": [
                    "components",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "components": {
                        "type": "array",
                        "description": "The health check status for all of the Cloud Directory components.",
                        "items": {
                            "$ref": "#/components/schemas/Component_0"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "The over all status result of the health check.",
                        "example": "good",
                        "enum": [
                            "good",
                            "bad",
                            "marginal"
                        ]
                    }
                }
            },
            "ChangePwdFailureErrorMessage": {
                "required": [
                    "schemas",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.  The schema \"urn:ietf:params:scim:api:messages:2.0:Error\" is the URI as required by the SCIM specification.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "The HTTP status code expressed as a JSON string."
                    },
                    "detail": {
                        "type": "string",
                        "description": "A detailed human-readable message."
                    },
                    "scimType": {
                        "type": "string",
                        "description": "A SCIM detail error keyword. For a change password error, the possible return values are: PWD_TOO_SHORT: Password is too short. PWD_MIN_OTHERS_FAILED: Password does not meet minimum number of special characters. PWD_MAX_REPEATED_FAILED: Password does not meet maximum repeated characters.  PWD_MIN_ALPHA_FAILED: Password does not meet the minimum number of alphabetical characters. PWD_MAX_CONSECUTIVE_REPEATED_CHARS_FAILED: Password does not meet maximum consecutive repeated characters. PWD_IN_HISTORY: The password that you specified was used previously, and it cannot be reused. PWD_TOO_YOUNG: The minimum time has not elapsed between password changes. ACCOUNT_LOCKED: The user's account is locked. PWD_EXPIRED: The user's password is expired. INVALID_CREDS: The user name and/or password is not valid. ACCOUNT_NOT_ACTIVE: The user's account is not active. PWD_IN_DICTIONARY: The password that you specified was marked as not appropriate. PWD_IN_GLOBAL_DICTIONARY: The password that you specified was marked as compromised by the xForce Red team. FAILURE_UNKNOWN: The system cannot determine the change password failure."
                    }
                }
            },
            "ChangePasswordV2": {
                "required": [
                    "currentPassword",
                    "newPassword",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that are used to indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure. The schema URIs must be \"urn:ietf:params:scim:schemas:ibm:core:2.0:ChangePassword\" and \"urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification\" as required by the SCIM specification.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "currentPassword": {
                        "type": "string",
                        "description": "Specifies the user's existing password.If the password contains extended ASCII characters then you must add charset=utf-8 in the Content-Type header when making a REST API call."
                    },
                    "newPassword": {
                        "type": "string",
                        "description": "Specifies the new password that was set by the user.If the password contains extended ASCII characters then you must add charset=utf-8 in the Content-Type header when making a REST API call.Cannot begin with the > character and end with the < character."
                    },
                    "urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification": {
                        "$ref": "#/components/schemas/Notifications"
                    }
                }
            },
            "Groups": {
                "required": [
                    "$ref",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the group that the user belongs to."
                    },
                    "id": {
                        "type": "string",
                        "description": "The identifier of the group that the user belongs to."
                    },
                    "value": {
                        "type": "string",
                        "description": "A sub-attr required by the SCIM specification that contains the \"id\" of the SCIM resource the user belongs to."
                    },
                    "$ref": {
                        "type": "string",
                        "description": "A sub-attr required by the SCIM specification the contains the URI of the SCIM resource the user belongs to."
                    }
                }
            },
            "UserResponseV2": {
                "required": [
                    "addresses",
                    "emails",
                    "id",
                    "name",
                    "schemas",
                    "userName"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure. The schemas \"urn:ietf:params:scim:schemas:core:2.0:User\", \"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\" and \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\" are returned in the response.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the resource as defined by the service. This attribute is read-only and ise sent by the service. Any value that is specified for this attribute in the JSON POST or PUT request payload is ignored."
                    },
                    "externalId": {
                        "type": "string",
                        "description": "A unique identifier for the resource that is defined by the provisioning client. It identifies a resource between the provisioning client and the service provider. The client can use a filter to locate the resource with an identifier from the provisioning domain."
                    },
                    "meta": {
                        "$ref": "#/components/schemas/MetaV2"
                    },
                    "userName": {
                        "type": "string",
                        "description": "The unique identifier for the user that is typically used by the user to directly authenticate to the service provider. It is often displayed to the user as their unique identifier within the system (as opposed to the id or externalId attributes, which are generally opaque and not user-friendly identifiers). Each user must include a non-empty userName value. This identifier must be unique across the service consumer's entire set of users. It must be a stable ID that does not change when the same user is returned in subsequent requests."
                    },
                    "title": {
                        "type": "string",
                        "description": "The user's title, such as \"Vice President.\""
                    },
                    "name": {
                        "$ref": "#/components/schemas/Name"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the user that is displayed to users. Each user returned may include a non-empty displayName value. Typically it is the full name of the user being described, for example, Babs Jensen or Ms. Barbara J Jensen. However, if that information is unavailable, a username or handle can be used, for example, bjensen. The value is the primary textual label by which this user is normally displayed by the service provider when presenting information to users."
                    },
                    "preferredLanguage": {
                        "type": "string",
                        "description": "The language code identifying the preferred language of this identity, for example, en-us or fr-ca."
                    },
                    "active": {
                        "type": "boolean",
                        "description": "A Boolean value that indicates the user's administrative status. The definitive meaning of this attribute is determined by the service provider. For example, a value of true indicates that the user can, log in, while a value of false indicates that the user's account has been suspended. If not specified, the value defaults to true."
                    },
                    "emails": {
                        "type": "array",
                        "description": "A list of email addresses that are associated with the user. Only one is supported.",
                        "items": {
                            "$ref": "#/components/schemas/EmailAddress"
                        }
                    },
                    "addresses": {
                        "type": "array",
                        "description": "A list of addresses that are associated with the user.",
                        "items": {
                            "$ref": "#/components/schemas/Address"
                        }
                    },
                    "phoneNumbers": {
                        "type": "array",
                        "description": "A list of phone numbers that are associated with the user.",
                        "items": {
                            "$ref": "#/components/schemas/PhoneNumber"
                        }
                    },
                    "groups": {
                        "type": "array",
                        "description": "The list of groups that the user belongs to. Any value that is specified for this attribute in the JSON POST or PUT request payload is ignored. Group membership is managed by using the /Groups API.",
                        "items": {
                            "$ref": "#/components/schemas/Groups"
                        }
                    },
                    "urn:ietf:params:scim:schemas:extension:ibm:2.0:User": {
                        "$ref": "#/components/schemas/CICCustomUserResponse"
                    },
                    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
                        "$ref": "#/components/schemas/EnterpriseUser"
                    }
                }
            },
            "CICCustomUser": {
                "type": "object",
                "properties": {
                    "userCategory": {
                        "type": "string",
                        "description": "The user category. If not provided, it defaults to \"regular\".",
                        "enum": [
                            "regular",
                            "federated"
                        ]
                    },
                    "emailVerified": {
                        "type": "integer",
                        "description": "The field that indicates the timestamp at which the user's email was verified.",
                        "format": "int64"
                    },
                    "realm": {
                        "type": "string",
                        "description": "The realm to which the user belongs. It is always \"cloudIdentityRealm\" for regular users. Maximum length is 240 characters."
                    },
                    "unqualifiedUserName": {
                        "type": "string",
                        "description": "An unqualified federated user name. This field is read-only."
                    },
                    "twoFactorAuthentication": {
                        "type": "boolean",
                        "description": "Indicates whether two factor authentication is required. It defaults to \"false\" if not provided."
                    },
                    "delegate": {
                        "type": "string",
                        "description": "The \"ID\" of the target entry to which the approval and re-certification records that are assigned to this identity are to be delegated."
                    },
                    "customAttributes": {
                        "type": "array",
                        "description": "The custom attributes for the user. For the GET /Users API, custom attributes can be referenced by using the fully qualified name. The schema URI is urn:ietf:params:scim:schemas:extension:ibm:2.0:User:customAttributes.scimName, where scimName is the SCIM name of the custom schema attribute that was created with the POST /Schema/attributes API.",
                        "items": {
                            "$ref": "#/components/schemas/CustomAttribute"
                        }
                    },
                    "linkedAccounts": {
                        "type": "array",
                        "description": "The linked accounts for the user.",
                        "items": {
                            "$ref": "#/components/schemas/LinkedAccount"
                        }
                    },
                    "accountExpires": {
                        "type": "string",
                        "description": "The expiration date of the account.  The value is a date and time of the form  yyyy-mm-ddThh:mm:ssZ.  For example, an account expiration of 2021-04-01T16:00:00Z, expires on year 2021, April 1 at 16 hundred hours GMT.  When an account is expired, the account's active flag is set to false to prevent login.The process that checks for expired accounts runs every 15 minutes at the top of the hour in GMT+0 time. "
                    }
                }
            },
            "UserV2": {
                "required": [
                    "schemas",
                    "userName"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.\n  The schemas \"\"urn:ietf:params:scim:schemas:core:2.0:User\", \"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\", \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\" and \"urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification\" are valid.  The core user schema is required.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "userName": {
                        "type": "string",
                        "description": "The unique identifier for the user that is typically used by the user to directly authenticate to the service provider. It is often displayed to the user as their unique identifier within the system (as opposed to the id or externalId attributes, which are generally opaque and not user-friendly identifiers). Each user must include a non-empty userName value. This identifier must be unique across the service consumer's entire set of Users. It must be a stable ID that does not change when the same user is returned in subsequent requests.  Maximum length is 256 characters."
                    },
                    "externalId": {
                        "type": "string",
                        "description": "The unique identifier for the resource that is defined by the provisioning client. It identifies a resource between the provisioning client and the service provider. The client can use a filter to locate the resource with that identifier from the provisioning domain. Maximum length is 240 characters."
                    },
                    "title": {
                        "type": "string",
                        "description": "The user's title, such as \"Vice President.\" Maximum length is 128 characters."
                    },
                    "password": {
                        "type": "string",
                        "description": "The user's clear text password. This attribute is used to specify an initial password when a new user is created or to reset an existing user's password. Maximum length is 4096 characters. If the password contains extended ASCII characters then you must add charset=utf-8 in the Content-Type header when making a REST API call. Cannot begin with the > character and end with the < character."
                    },
                    "name": {
                        "$ref": "#/components/schemas/Name"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the user that is displayed to users. Each user returned may include a non-empty displayName value. Typically it is the full name of the user that is being described, for example, Babs Jensen or Ms. Barbara J Jensen. However, if that information is unavailable, a username or handle can be used, for example, bjensen. The value is the primary textual label by which this User is normally displayed by the service provider when presenting information to users. Maximum length is 128 characters."
                    },
                    "preferredLanguage": {
                        "type": "string",
                        "description": "The language code identifying the preferred language of this identity, for example, en-us or fr-ca. Maximum length is 5 characters."
                    },
                    "active": {
                        "type": "boolean",
                        "description": "A Boolean value that indicates the user's administrative status. The definitive meaning of this attribute is determined by the service provider. For example, a value of true indicates that the user can log in, while a value of false indicates that the user's account has been suspended. If not specified, the value defaults to true."
                    },
                    "emails": {
                        "type": "array",
                        "description": "A list of email addresses that can be used to create a user.",
                        "items": {
                            "$ref": "#/components/schemas/EmailAddress"
                        }
                    },
                    "addresses": {
                        "type": "array",
                        "description": "A list of addresses that can be used to create a user.",
                        "items": {
                            "$ref": "#/components/schemas/Address"
                        }
                    },
                    "phoneNumbers": {
                        "type": "array",
                        "description": "A list of phone numbers that can be used to create a user.",
                        "items": {
                            "$ref": "#/components/schemas/PhoneNumber"
                        }
                    },
                    "urn:ietf:params:scim:schemas:extension:ibm:2.0:User": {
                        "$ref": "#/components/schemas/CICCustomUser"
                    },
                    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
                        "$ref": "#/components/schemas/EnterpriseUser"
                    },
                    "urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification": {
                        "$ref": "#/components/schemas/Notifications"
                    }
                }
            },
            "GetUsersResponseV2": {
                "required": [
                    "schemas",
                    "totalResults"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure. The schema \"urn:ietf:params:scim:api:messages:2.0:ListResponse\" is returned in the response.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "description": "The total number of users that were found that match the specified search criteria for the specified tenant. An upper limit is imposed on this value, in that the total number of users that match the search criteria may be larger than this value.  A limit of 2500 users matching the search criteria will be returned.",
                        "format": "int32"
                    },
                    "startIndex": {
                        "type": "integer",
                        "description": "The 1-based index of the first result in the current set of list results.",
                        "format": "int32"
                    },
                    "itemsPerPage": {
                        "type": "integer",
                        "description": "The number of resources that are returned in a list response page.",
                        "format": "int32"
                    },
                    "Resources": {
                        "type": "array",
                        "description": "A list of users.",
                        "items": {
                            "$ref": "#/components/schemas/GetUsersUserResponseV2"
                        }
                    }
                }
            },
            "GetUsersUserResponseV2": {
                "required": [
                    "addresses",
                    "emails",
                    "id",
                    "name",
                    "schemas",
                    "userName"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure. The schemas \"urn:ietf:params:scim:schemas:core:2.0:User\", \"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\" and \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\" are returned in the response.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the resource as defined by the service. This attribute is read-only and ise sent by the service. Any value that is specified for this attribute in the JSON POST or PUT request payload is ignored."
                    },
                    "externalId": {
                        "type": "string",
                        "description": "A unique identifier for the resource that is defined by the provisioning client. It identifies a resource between the provisioning client and the service provider. The client can use a filter to locate the resource with an identifier from the provisioning domain."
                    },
                    "meta": {
                        "$ref": "#/components/schemas/MetaV2"
                    },
                    "userName": {
                        "type": "string",
                        "description": "The unique identifier for the user that is typically used by the user to directly authenticate to the service provider. It is often displayed to the user as their unique identifier within the system (as opposed to the id or externalId attributes, which are generally opaque and not user-friendly identifiers). Each user must include a non-empty userName value. This identifier must be unique across the service consumer's entire set of users. It must be a stable ID that does not change when the same user is returned in subsequent requests."
                    },
                    "title": {
                        "type": "string",
                        "description": "The user's title, such as \"Vice President.\""
                    },
                    "name": {
                        "$ref": "#/components/schemas/Name"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the user that is displayed to users. Each user returned may include a non-empty displayName value. Typically it is the full name of the user being described, for example, Babs Jensen or Ms. Barbara J Jensen. However, if that information is unavailable, a username or handle can be used, for example, bjensen. The value is the primary textual label by which this user is normally displayed by the service provider when presenting information to users."
                    },
                    "preferredLanguage": {
                        "type": "string",
                        "description": "The language code identifying the preferred language of this identity, for example, en-us or fr-ca."
                    },
                    "active": {
                        "type": "boolean",
                        "description": "A Boolean value that indicates the user's administrative status. The definitive meaning of this attribute is determined by the service provider. For example, a value of true indicates that the user can, log in, while a value of false indicates that the user's account has been suspended. If not specified, the value defaults to true."
                    },
                    "emails": {
                        "type": "array",
                        "description": "A list of email addresses that are associated with the user. Only one is supported.",
                        "items": {
                            "$ref": "#/components/schemas/EmailAddress"
                        }
                    },
                    "addresses": {
                        "type": "array",
                        "description": "A list of addresses that are associated with the user.",
                        "items": {
                            "$ref": "#/components/schemas/Address"
                        }
                    },
                    "phoneNumbers": {
                        "type": "array",
                        "description": "A list of phone numbers that are associated with the user.",
                        "items": {
                            "$ref": "#/components/schemas/PhoneNumber"
                        }
                    },
                    "urn:ietf:params:scim:schemas:extension:ibm:2.0:User": {
                        "$ref": "#/components/schemas/CICCustomUserResponse"
                    },
                    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
                        "$ref": "#/components/schemas/EnterpriseUser"
                    }
                }
            },
            "PasswordGeneratorResponse": {
                "required": [
                    "password",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure. The schema \"urn:ietf:params:scim:schemas:ibm:core:2.0:PasswordGeneratorResponse\" is returned in the response.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "password": {
                        "type": "string",
                        "description": "A random generated password based on password policy."
                    }
                }
            },
            "ResetPasswordUIDResult": {
                "required": [
                    "id",
                    "messageDescription",
                    "messageId",
                    "success"
                ],
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "description": "A Boolean value that indicates whether the password reset operation is successful."
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the user whose password is being reset."
                    },
                    "messageId": {
                        "type": "string",
                        "description": "The message identifier of the message."
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "The message description that indicates the success or failure reason."
                    }
                }
            },
            "ResetPasswordUIDSResponse": {
                "required": [
                    "results",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.  The schema \"urn:ietf:params:scim:schemas:ibm:core:2.0:PasswordResetterResponse\" is returned.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "results": {
                        "type": "array",
                        "description": "The result for each attempt to reset the password for a user ID.",
                        "items": {
                            "$ref": "#/components/schemas/ResetPasswordUIDResult"
                        }
                    }
                }
            },
            "ResetPasswordUIDS": {
                "required": [
                    "ids",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.  The schema URI must contain \"urn:ietf:params:scim:schemas:ibm:core:2.0:PasswordResetter\" as required by the SCIM specification.  urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification is also supported.  The values in urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification apply to all user ids.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ids": {
                        "type": "array",
                        "description": "An array of strings that contain the user IDs for resetting the password.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification": {
                        "$ref": "#/components/schemas/Notifications"
                    }
                }
            },
            "CustomSchemaResponseModel": {
                "type": "object",
                "properties": {
                    "pwdChangedTime": {
                        "type": "string",
                        "description": "Indicates the time when the password was changed for the current user entry. ",
                        "example": "2020-01-19T16:07:00Z"
                    }
                }
            },
            "GetPwdExpiryUsersResponse": {
                "required": [
                    "Resources",
                    "currentDateTime",
                    "totalResults"
                ],
                "type": "object",
                "properties": {
                    "currentDateTime": {
                        "type": "string",
                        "description": "The current UTC date time on the server.",
                        "example": "2020-02-16T16:35:00.670Z"
                    },
                    "totalResults": {
                        "type": "integer",
                        "description": "The total number of users that were found. A limit of 2500 users matching the search criteria will be returned.",
                        "format": "int32"
                    },
                    "Resources": {
                        "type": "array",
                        "description": "A list of users.",
                        "items": {
                            "$ref": "#/components/schemas/PwdExpiryUserResponse"
                        }
                    }
                }
            },
            "PwdExpiryUserResponse": {
                "required": [
                    "active",
                    "emails",
                    "id",
                    "userName"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the resource as defined by the service."
                    },
                    "userName": {
                        "type": "string",
                        "description": "The user name."
                    },
                    "preferredLanguage": {
                        "type": "string",
                        "description": "The language code identifying the preferred language of this identity, for example, en-us or fr-ca."
                    },
                    "active": {
                        "type": "boolean",
                        "description": "A Boolean value that indicates the user's administrative status. The definitive meaning of this attribute is determined by the service provider. For example, a value of true indicates that the user can, log in, while a value of false indicates that the user's account has been suspended. If not specified, the value defaults to true."
                    },
                    "emails": {
                        "type": "array",
                        "description": "A list of email addresses that are associated with the user. Only one is supported.",
                        "items": {
                            "$ref": "#/components/schemas/EmailAddress"
                        }
                    },
                    "urn:ietf:params:scim:schemas:extension:ibm:2.0:User": {
                        "$ref": "#/components/schemas/CustomSchemaResponseModel"
                    }
                }
            },
            "NotificationDays": {
                "required": [
                    "days"
                ],
                "type": "object",
                "properties": {
                    "days": {
                        "type": "integer",
                        "description": "The number of days before the password is expired.  A value of 0 means the password is expired.",
                        "format": "int32"
                    }
                }
            },
            "NotificationProgress": {
                "required": [
                    "completed",
                    "lastProcessedUID",
                    "notification",
                    "timeCompleted",
                    "timeStarted",
                    "totalProcessed"
                ],
                "type": "object",
                "properties": {
                    "timeStarted": {
                        "type": "integer",
                        "description": "The time this tenant notification process started. The time is the epoch time in millis.",
                        "format": "int64"
                    },
                    "timeCompleted": {
                        "type": "integer",
                        "description": "The time this tenant notification process completed. The time is the epoch time in millis.",
                        "format": "int64"
                    },
                    "notification": {
                        "$ref": "#/components/schemas/NotificationDays"
                    },
                    "totalProcessed": {
                        "type": "integer",
                        "description": "The total number of users processed for this notification.",
                        "format": "int32"
                    },
                    "lastProcessedUID": {
                        "type": "string",
                        "description": "The last processed user id."
                    },
                    "completed": {
                        "type": "boolean",
                        "description": "A flag indicating if the progress is completed."
                    }
                }
            },
            "PwdExpiryNotifyOverallStatus": {
                "required": [
                    "completed",
                    "tenantsProgress",
                    "timeCompleted",
                    "timeStarted"
                ],
                "type": "object",
                "properties": {
                    "timeStarted": {
                        "type": "integer",
                        "description": "The time when password expiration notification processing started for all tenants.",
                        "format": "int64"
                    },
                    "timeCompleted": {
                        "type": "integer",
                        "description": "The time when password expiration notification processing completed for all tenants.",
                        "format": "int64"
                    },
                    "completed": {
                        "type": "boolean",
                        "description": "A flag indicating if the overall status is completed."
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "The error that occurred when a throwable was caught trying to kick off password expiry notifications."
                    },
                    "corrID": {
                        "type": "string",
                        "description": "The correlation ID"
                    },
                    "tenantsProgress": {
                        "type": "array",
                        "description": "The list of tenants that were processed and the progress for each.",
                        "items": {
                            "$ref": "#/components/schemas/PwdExpiryNotifyTenantProgress"
                        }
                    }
                }
            },
            "PwdExpiryNotifyTenantProgress": {
                "required": [
                    "completed",
                    "notifyProgress",
                    "tenantName"
                ],
                "type": "object",
                "properties": {
                    "tenantName": {
                        "type": "string",
                        "description": "The tenant name."
                    },
                    "completed": {
                        "type": "boolean",
                        "description": "A flag indicating if all the notifications are complete for the tenant."
                    },
                    "notifyProgress": {
                        "type": "array",
                        "description": "The list of notifications configured for the tenant.",
                        "items": {
                            "$ref": "#/components/schemas/NotificationProgress"
                        }
                    }
                }
            },
            "PwdExpiryNotifyModel": {
                "required": [
                    "daysBeforeExpires",
                    "pwdMaxAgeDays"
                ],
                "type": "object",
                "properties": {
                    "runAsync": {
                        "type": "boolean",
                        "description": "Run asynchronously. Defaults to false if not specified.",
                        "example": false
                    },
                    "pwdMaxAgeDays": {
                        "type": "integer",
                        "description": "Specify the password maximum age in days.",
                        "format": "int32",
                        "example": 30
                    },
                    "daysBeforeExpires": {
                        "type": "integer",
                        "description": "Specify the number of days before the password expires to notify.",
                        "format": "int32",
                        "example": 14
                    }
                }
            },
            "PwdChangedTimeResponse": {
                "required": [
                    "totalChanged"
                ],
                "type": "object",
                "properties": {
                    "totalChanged": {
                        "type": "integer",
                        "description": "The total number of users whose pwdChangedTime was modified.",
                        "format": "int32"
                    },
                    "lastProcessedUsername": {
                        "type": "string"
                    }
                }
            },
            "PwdChangeTimeModel": {
                "type": "object",
                "properties": {
                    "pwdChangedTime": {
                        "type": "string",
                        "description": "The LDAP UTC time in format: yyyyMMddHHmmss.SSSZ. If specified, it will be used instead of calculating it based on pwdMaxAgeDays and daysBeforeExpire.",
                        "example": "20200214194918.483Z"
                    },
                    "pwdMaxAgeDays": {
                        "type": "integer",
                        "description": "Specify the password maximum age in days that will be used to calculate the pwdChangedTime",
                        "format": "int32",
                        "example": 30
                    },
                    "daysBeforeExpires": {
                        "type": "integer",
                        "description": "Specify the number of days before the password expires to notify that will be used to calculate the pwdChangedTime.",
                        "format": "int32",
                        "example": 14
                    }
                }
            },
            "FilterValidatorModel": {
                "required": [
                    "filter",
                    "resourceType"
                ],
                "type": "object",
                "properties": {
                    "resourceType": {
                        "type": "string",
                        "description": "The resource type the SCIM filter applies to.  Valid values are \"user\" and \"group\"."
                    },
                    "filter": {
                        "type": "string",
                        "description": "The SCIM filter to validate."
                    }
                }
            },
            "PropertiesModel": {
                "required": [
                    "properties"
                ],
                "type": "object",
                "properties": {
                    "properties": {
                        "type": "array",
                        "description": "List of properties that start with Logger.logall. in SCIM.properties, which is used to override log level setting at the class level.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "CapabilitiesResponse": {
                "required": [
                    "fullText",
                    "largeGroupSupport",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that are used to indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure. The schema URI must be \"urn:ietf:params:scim:schemas:ibm:core:2.0:Capabilities\" as required by the SCIM specification.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "largeGroupSupport": {
                        "type": "boolean",
                        "description": "A flag to indicate whether large group support is enabled."
                    },
                    "fullText": {
                        "$ref": "#/components/schemas/FullTextSearchModel"
                    }
                }
            },
            "FullTextSearchModel": {
                "required": [
                    "attrs",
                    "search"
                ],
                "type": "object",
                "properties": {
                    "search": {
                        "type": "string",
                        "description": "Indicates how the search is being performed.",
                        "enum": [
                            "startsWith",
                            "contains"
                        ]
                    },
                    "attrs": {
                        "type": "string",
                        "description": "Indicates whether the fullText search is run against a full or partial set of attributes.",
                        "enum": [
                            "full",
                            "partial"
                        ]
                    }
                }
            },
            "GenerateFilterResponseModel": {
                "required": [
                    "ldapFilter",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that are used to indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure. The schema URI must be \"urn:ietf:params:scim:schemas:ibm:core:2.0:Filter\" as required by the SCIM specification.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ldapFilter": {
                        "type": "string",
                        "description": "The LDAP filter that is the equivalent of the input SCIM filter."
                    }
                }
            },
            "GenerateFilterRequestModel": {
                "required": [
                    "filter",
                    "resourceType"
                ],
                "type": "object",
                "properties": {
                    "resourceType": {
                        "type": "string",
                        "description": "The resource type the SCIM filter applies to.  Valid values are \"user\" and \"group\"."
                    },
                    "filter": {
                        "type": "string",
                        "description": "The SCIM filter to generate an equivalent LDAP filter from."
                    }
                }
            },
            "TenantModel": {
                "required": [
                    "tenantPropertyV1",
                    "tenantUUID"
                ],
                "type": "object",
                "properties": {
                    "tenantUUID": {
                        "type": "string",
                        "description": "The existing tenant UUID of the tenant that has been exported.  Its a readonly value that is populated on export and should not be changed."
                    },
                    "newTenantUUID": {
                        "type": "string",
                        "description": "The new tenant UUID of the tenant that is being imported.  Its specified on import.  Its an optional field."
                    },
                    "tenantPropertyV1": {
                        "type": "string",
                        "description": "The tenant property data in ZK that is exported as a string. "
                    },
                    "userMapping": {
                        "type": "string",
                        "description": "The tenant custom attributes in ZK that is exported.  Its optional because a tenant may not have custom attributes. "
                    },
                    "featureFlags": {
                        "type": "array",
                        "description": "The tenant's feature flags exported. ",
                        "items": {
                            "$ref": "#/components/schemas/ZKNode"
                        }
                    }
                }
            },
            "ZKNode": {
                "required": [
                    "path",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "The  node path"
                    },
                    "value": {
                        "type": "string",
                        "description": "The node value."
                    }
                }
            },
            "AttributeConstraints": {
                "type": "object",
                "properties": {
                    "readAccessForEndUser": {
                        "type": "boolean",
                        "description": "A boolean property that indicates whether the end-user has read access to the attribute.  Defaults to true, if not specified."
                    },
                    "writeAccessForEndUser": {
                        "type": "boolean",
                        "description": "A boolean property that indicates whether the end-user has write access to the attribute.  Defaults to true, if not specified."
                    },
                    "mandatory": {
                        "type": "boolean",
                        "description": "A boolean property that indicates whether the attribute's value is mandatory.  Defaults to false, if not specified."
                    },
                    "unique": {
                        "type": "boolean",
                        "description": "A boolean property that indicates whether the attribute's value must be unique across the tenant.  Defaults to false, if not specified."
                    },
                    "valueConstraint": {
                        "$ref": "#/components/schemas/ValueConstraint_0"
                    }
                }
            },
            "SchemaProfileAttributeResponse": {
                "required": [
                    "name",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "The body of the request must contain the \"schemas\" attribute with the URI value: \"urn:ietf:params:scim:schemas:ibm:core:2.0:SchemaProfileAttribute\".",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The schema profile attribute name.  The name must be a valid schema attribute name.  To get a list of valid schema attribute names assignable to a schema profile, run the \"GET /v2.0/Schema/attributes?filter=addConstraints\" REST API"
                    },
                    "constraints": {
                        "$ref": "#/components/schemas/AttributeConstraints"
                    }
                }
            },
            "SchemaProfileAttribute": {
                "required": [
                    "name",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "The body of the request must contain the \"schemas\" attribute with the URI value: \"urn:ietf:params:scim:schemas:ibm:core:2.0:SchemaProfileAttribute\".",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The schema profile attribute name.  The name must be a valid schema attribute name.  To get a list of valid schema attribute names that are assignable to a schema profile, run the \"GET /v2.0/Schema/attributes?filter=addConstraints\" REST API"
                    },
                    "constraints": {
                        "$ref": "#/components/schemas/AttributeConstraints"
                    }
                }
            },
            "SchemaProfileResponse": {
                "required": [
                    "id",
                    "name",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "The body of the request must contain the \"schemas\" attribute with the URI value: \"urn:ietf:params:scim:schemas:ibm:core:2.0:SchemaProfile\".",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the resource as defined by the service. This attribute is read-only and is set by the service."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the schema profile."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the schema profile."
                    },
                    "meta": {
                        "$ref": "#/components/schemas/MetaV2"
                    },
                    "attributes": {
                        "type": "array",
                        "description": "The attributes contained in the schema profile.",
                        "items": {
                            "$ref": "#/components/schemas/SchemaProfileAttributeResponse"
                        }
                    }
                }
            },
            "SchemaProfile": {
                "required": [
                    "name",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "The body of the request must contain the \"schemas\" attribute with the URI value: \"urn:ietf:params:scim:schemas:ibm:core:2.0:SchemaProfile\".",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the schema profile."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the schema profile."
                    },
                    "attributes": {
                        "type": "array",
                        "description": "The attributes contained in the schema profile.",
                        "items": {
                            "$ref": "#/components/schemas/SchemaProfileAttribute"
                        }
                    }
                }
            },
            "GetSchemaAttributesResponse": {
                "required": [
                    "schemas",
                    "totalResults"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of Strings containing URIs that are used to indicate the\nnamespaces of the SCIM schemas that define the attributes present in the\ncurrent JSON structure.\n  The schema \"urn:ietf:params:scim:schemas:ibm:core:2.0:SchemaAttributeListResponse\"  is returned in the response. \n",
                        "items": {
                            "type": "string"
                        }
                    },
                    "totalResults": {
                        "type": "integer",
                        "description": "Total number of schema attributes found matching the specified search criteria for the specified tenant.",
                        "format": "int32"
                    },
                    "startIndex": {
                        "type": "integer",
                        "description": "The 1-based index of the first result in the current set of list results.",
                        "format": "int32"
                    },
                    "itemsPerPage": {
                        "type": "integer",
                        "description": "The number of resources returned in a list response page.",
                        "format": "int32"
                    },
                    "Resources": {
                        "type": "array",
                        "description": "List of schema attributes",
                        "items": {
                            "$ref": "#/components/schemas/SchemaAttributeResponse"
                        }
                    }
                }
            },
            "SchemaAttributeResponse": {
                "required": [
                    "name",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contains the URIs that indicate the namespaces of the SCIM schemas that define the attributes present in the\ncurrent JSON structure.\n  The schema URI must be \"urn:ietf:params:scim:schemas:ibm:core:2.0:SchemaAttribute\" as required by the SCIM specification. \n",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The schema attribute name. \n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description for the schema attribute. \n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name for a custom attribute.  Its used to show the attribute name in the email that is sent to the end user when the attribute value changes.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The data type for the schema attribute. \n",
                        "enum": [
                            "string",
                            "boolean",
                            "integer",
                            "DN"
                        ]
                    },
                    "scimName": {
                        "type": "string",
                        "description": "The SCIM name that is associated with the schema attribute. \n"
                    },
                    "attributeName": {
                        "type": "string",
                        "description": "The attribute name that is associated with the attribute source. \n"
                    },
                    "multiValue": {
                        "type": "boolean",
                        "description": "A flag to indicate this schema attribute supports multiple values.\n"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "A flag to indicate this schema attribute is read only.   Defaults to false.  Any value that is specified for a user in a read only attribute is ignored, except for custom attributes where it can be set on a POST.  Values specified in a PUT or PATCH request payload for read only attributes are ignored. \n"
                    },
                    "customAttribute": {
                        "type": "boolean",
                        "description": "A flag that indicates whether this is a custom attribute. \n"
                    },
                    "hashedAttribute": {
                        "type": "boolean",
                        "description": "A flag that indicates whether this is a hashed custom attribute. \n"
                    }
                }
            },
            "TenantTraceModel": {
                "required": [
                    "level",
                    "tenantName"
                ],
                "type": "object",
                "properties": {
                    "tenantName": {
                        "type": "string",
                        "description": "The tenant name."
                    },
                    "level": {
                        "type": "string",
                        "description": "The trace level to set.",
                        "enum": [
                            "INFO",
                            "FINE",
                            "FINER",
                            "FINEST"
                        ]
                    }
                }
            },
            "TraceLevelModel": {
                "required": [
                    "level"
                ],
                "type": "object",
                "properties": {
                    "microservice": {
                        "type": "string",
                        "description": "The microservice trace to set, that is the IAM_MSVC_NAME.  If not specified, the default is \"profilemgmt\"."
                    },
                    "level": {
                        "type": "string",
                        "description": "The trace level to set.",
                        "enum": [
                            "INFO",
                            "FINE",
                            "FINER",
                            "FINEST"
                        ]
                    },
                    "tenants": {
                        "type": "array",
                        "description": "The tenant trace levels to set.",
                        "items": {
                            "$ref": "#/components/schemas/TenantTraceModel"
                        }
                    }
                }
            },
            "CompareModel": {
                "required": [
                    "name",
                    "schemas",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.\n  The schema \"urn:ietf:params:scim:schemas:ibm:core:2.0:user:Compare\" is valid.  ",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The hashed custom attribute name. Use the fully qualified SCIM name as shown in the example for passcode.",
                        "example": "urn:ietf:params:scim:schemas:extension:ibm:2.0:User:customAttributes.passcode"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value to compare."
                    }
                }
            },
            "ResetPasswordOperation": {
                "required": [
                    "op",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "description": "The operation to be performed.",
                        "enum": [
                            "replace"
                        ]
                    },
                    "value": {
                        "$ref": "#/components/schemas/ResetPasswordOperationValue"
                    }
                }
            },
            "ResetPasswordOperationValue": {
                "required": [
                    "password"
                ],
                "type": "object",
                "properties": {
                    "password": {
                        "type": "string",
                        "description": "Specify the value for the password or specify auto-generate to have the system generate a random password.",
                        "example": "auto-generate"
                    },
                    "urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification": {
                        "$ref": "#/components/schemas/Notifications"
                    }
                }
            },
            "ResetPasswordPatchBody": {
                "required": [
                    "Operations",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure. The schema URI must be \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"   as required by the SCIM specification.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "Operations": {
                        "type": "array",
                        "description": "An array of operation objects to be performed.  Operation objects must have exactly one \"op\" member, whose value indicates the operation to perform. Its value must be one of \"add\",\"remove\", \"replace\", \"move\", \"copy\", or \"test\"; other values are errors. Additionally, operation objects must have exactly one \"path\" member. to the service provider. Often displayed to the user as their unique identifier within the system (as opposed to the id or externalId attributes, which are generally opaque and not user-friendly identifiers). Each user must include a non-empty userName value. This identifier must be unique across the service consumer's entire set of users. It must be a stable ID that does not change when the same user is returned in subsequent requests.",
                        "items": {
                            "$ref": "#/components/schemas/ResetPasswordOperation"
                        }
                    }
                }
            },
            "ChangeRealmV2": {
                "required": [
                    "currentRealm",
                    "newRealm",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure. The schema URI must be \"urn:ietf:params:scim:schemas:ibm:core:2.0:ChangeRealm\" as required by the SCIM specification.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "currentRealm": {
                        "type": "string",
                        "description": "The user's existing realm."
                    },
                    "newRealm": {
                        "type": "string",
                        "description": "The user's new realm."
                    }
                }
            },
            "UsersCardinalityResponse": {
                "required": [
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate thenamespaces of the SCIM schemas that define the attributes in thecurrent JSON structure.  The schema \"urn:ietf:params:scim:schemas:ibm:core:2.0:user:Cardinality\"is returned.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "totalUsers": {
                        "type": "integer",
                        "description": "Specifies the total number of users for the tenant.",
                        "format": "int32"
                    }
                }
            },
            "AuthenticationExternalErrorMessage": {
                "required": [
                    "schemas",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.  The schema \"urn:ietf:params:scim:api:messages:2.0:Error\" is the URI as required by the SCIM specification.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "The HTTP status code expressed as a JSON string."
                    },
                    "detail": {
                        "type": "string",
                        "description": "A detailed human-readable message."
                    },
                    "scimType": {
                        "type": "string",
                        "description": "A SCIM detail error keyword. For an authentication error, the possible return values are: INVALID_CREDS: The user name and/or password is not valid. PWD_EXPIRED: The user's password is expired. ACCOUNT_LOCKED: The user's account is locked. LOCKED_PWD_FAILURES: The user's account is locked because of too many password failures. USER_NOT_ACTIVE: The user is not active. PWD_IN_DICTIONARY: The password is present in the per-tenant bad password dictionary. PWD_IN_GLOBAL_DICTIONARY: The password is present in the Global bad password dicationary. AUTHFAIL_UNKNOWN: The system cannot determine authentication failure."
                    }
                }
            },
            "AuthenticateUserResponseV2": {
                "required": [
                    "id",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure. The schema \"urn:ietf:params:scim:schemas:core:2.0:User\" is returned in the response.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the resource as defined by the service. This attribute is read-only and is sent by the service. Any value that is specified for this attribute in the JSON POST or PUT request payload is ignored."
                    }
                }
            },
            "AuthenticateUserV2": {
                "required": [
                    "password",
                    "schemas",
                    "userName"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that are used to indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure. The schemas \"urn:ietf:params:scim:schemas:ibm:core:2.0:AuthenticateUser\" and \"urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification\" are valid.  The AuthenticateUser schema is required.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "userName": {
                        "type": "string",
                        "description": "The user's name."
                    },
                    "password": {
                        "type": "string",
                        "description": "The user's password.If the password contains extended ASCII characters then you must add charset=utf-8 in the Content-Type header when making a REST API call."
                    },
                    "urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification": {
                        "$ref": "#/components/schemas/Notifications"
                    }
                }
            },
            "ValidUser": {
                "required": [
                    "addresses",
                    "emails",
                    "name",
                    "userName"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the resource as defined by the service. This attribute is read-only and is sent by the service. Any value that is specified for this attribute in the JSON POST or PUT request payload is ignored."
                    },
                    "externalId": {
                        "type": "string",
                        "description": "A unique identifier for the resource that is defined by the provisioning client. It identifies a resource between the provisioning client and the service provider. The client can use a filter to locate the resource with that identifier from the provisioning domain."
                    },
                    "userName": {
                        "type": "string",
                        "description": "The unique identifier for the user that is typically used by the user to directly authenticate to the service provider."
                    },
                    "title": {
                        "type": "string",
                        "description": "The user's title, such as \"Vice President.\""
                    },
                    "name": {
                        "$ref": "#/components/schemas/Name"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the user that is displayed to users. Each user returned may include a non-empty displayName value. Typically it is the full name of the user being described, for example, Babs Jensen or Ms. Barbara J Jensen. However, if that information is unavailable, a username or handle can be used, for example, bjensen. The value is be the primary textual label by which this user is normally displayed by the service provider when presenting information to users."
                    },
                    "preferredLanguage": {
                        "type": "string",
                        "description": "The language code identifying the preferred language of this identity, for example, en-us or fr-ca."
                    },
                    "active": {
                        "type": "boolean",
                        "description": "A Boolean value that indicates the user's administrative status. The definitive meaning of this attribute is determined by the service provider. For example, a value of true indicates that the user can, log in, while a value of false indicates that the user's account has been suspended. If not specified, the value defaults to true."
                    },
                    "emails": {
                        "type": "array",
                        "description": "A list of email addresses that are associated with the user. Only one is supported.",
                        "items": {
                            "$ref": "#/components/schemas/EmailAddress"
                        }
                    },
                    "addresses": {
                        "type": "array",
                        "description": "A list of addresses that are associated with the user.",
                        "items": {
                            "$ref": "#/components/schemas/Address"
                        }
                    },
                    "phoneNumbers": {
                        "type": "array",
                        "description": "A list of phone numbers that are associated with the user.",
                        "items": {
                            "$ref": "#/components/schemas/PhoneNumber"
                        }
                    },
                    "urn:ietf:params:scim:schemas:extension:ibm:2.0:User": {
                        "$ref": "#/components/schemas/CICCustomUserResponse"
                    },
                    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
                        "$ref": "#/components/schemas/EnterpriseUser"
                    }
                }
            },
            "ValidateUIDSResponse": {
                "required": [
                    "invalidUsers",
                    "schemas",
                    "validUsers"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.  The schema \"urn:ietf:params:scim:schemas:ibm:core:2.0:UsersValidatorResponse\" is returned.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "validUsers": {
                        "type": "array",
                        "description": "An array of valid users.",
                        "items": {
                            "$ref": "#/components/schemas/ValidUser"
                        }
                    },
                    "invalidUsers": {
                        "type": "array",
                        "description": "An array of strings that contain the IDs of the invalid users.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ValidateUIDS": {
                "required": [
                    "ids",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.  The schema URI must be \"urn:ietf:params:scim:schemas:ibm:core:2.0:UsersValidator\" as required by the SCIM specification.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ids": {
                        "type": "array",
                        "description": "An array of strings that contain the user IDs that are validated.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ExternalErrorMessage1": {
                "required": [
                    "schemas",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.  The schema \"urn:ietf:params:scim:api:messages:2.0:Error\" is the URI as required by the SCIM specification.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "The HTTP status code expressed as a JSON string."
                    },
                    "detail": {
                        "type": "string",
                        "description": "A detailed human-readable message."
                    }
                }
            },
            "CSVImportError1": {
                "required": [
                    "failureReason",
                    "id",
                    "statusCode"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The error that occurred while importing from a CSV file"
                    },
                    "statusCode": {
                        "type": "string",
                        "description": "The status code for the error"
                    },
                    "failureReason": {
                        "type": "string",
                        "description": "The detailed failure reason for the error"
                    }
                }
            },
            "CSVImportJob1": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "description": "The unique identifier for the user import request."
                    }
                }
            },
            "CSVImportRecords1": {
                "type": "object",
                "properties": {
                    "jobs": {
                        "type": "array",
                        "description": "A list of CSV import requests.",
                        "items": {
                            "$ref": "#/components/schemas/CSVImportRecord1"
                        }
                    }
                }
            },
            "PasswordPolicyLabel1": {
                "required": [
                    "key",
                    "ordinal",
                    "policyText"
                ],
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The internal key that is associated with this label."
                    },
                    "ordinal": {
                        "type": "integer",
                        "description": "The order in which labels are displayed when more than one is returned.",
                        "format": "int32"
                    },
                    "policyText": {
                        "type": "string",
                        "description": "The text for this policy label."
                    }
                }
            },
            "CSVImportRecord1": {
                "required": [
                    "state",
                    "tenant",
                    "tenantUUID"
                ],
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "description": "Unique identifier for the import request"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the import request"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "The tenant for the import request"
                    },
                    "tenantUUID": {
                        "type": "string",
                        "description": "The tenant UUID for the import request"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the import request",
                        "enum": [
                            "CANCELLED",
                            "COMPLETED",
                            "RUNNING",
                            "ABANDONED"
                        ]
                    },
                    "stats": {
                        "$ref": "#/components/schemas/CSVImportStats1"
                    }
                }
            },
            "PasswordPolicyResponseV31": {
                "required": [
                    "id",
                    "passwordSecurity",
                    "passwordStrength"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique id of this password policy."
                    },
                    "passwordStrength": {
                        "$ref": "#/components/schemas/PasswordStrengthV31"
                    },
                    "passwordSecurity": {
                        "$ref": "#/components/schemas/PasswordSecurityV31"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "predefined": {
                        "type": "boolean"
                    }
                }
            },
            "PasswordSecurityV31": {
                "type": "object",
                "properties": {
                    "pwdMinAge": {
                        "type": "integer",
                        "description": "Specifies the number of seconds before a password can be modified again.  Can't be larger than pwdMaxAge.",
                        "format": "int32"
                    },
                    "pwdExpireWarning": {
                        "type": "integer",
                        "description": "Specifies the maximum number of seconds before a password expires that an expiration warning message is returned to an authenticating user.",
                        "format": "int32"
                    },
                    "pwdInHistory": {
                        "type": "integer",
                        "description": "Specifies the number of passwords that are stored in the pwdHistory attribute.",
                        "format": "int32"
                    },
                    "pwdLockout": {
                        "type": "boolean",
                        "description": "Indicates whether a password can be used to authenticate after a specified number of consecutive failed bind attempts. If the attribute is not provided, the behavior defaults to false."
                    },
                    "pwdLockoutDuration": {
                        "type": "integer",
                        "description": "Specifies the number of seconds that the password cannot be used to authenticate due to the specified 'pwdMaxFailure' failed bind attempts.",
                        "format": "int32"
                    },
                    "pwdMaxAge": {
                        "type": "integer",
                        "description": "Specifies the number of seconds after which a password will expire (0 means password does not expire)Must be greater than or equal to pwdMinAge.",
                        "format": "int32"
                    },
                    "pwdMaxFailure": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "PasswordStrengthV31": {
                "type": "object",
                "properties": {
                    "pwdMinLength": {
                        "type": "integer",
                        "description": "Specifies the minimum length for the password string. The server checks the minimum length depending upon the value of the pwdCheckSyntax attribute.Must be greater than or equal to the sum of 'passwordMinAlphaChars' and 'passwordMinOtherChars'",
                        "format": "int32"
                    },
                    "passwordMaxConsecutiveRepeatedChars": {
                        "type": "integer",
                        "description": "Specifies the maximum successive repetitions of a given character in the password.",
                        "format": "int32"
                    },
                    "passwordMaxRepeatedChars": {
                        "type": "integer",
                        "description": "Specifies the maximum number of times a given character can be used in a password. If the server is unable to check the actual password characters, then the server will continue processing depending on the value of the pwdCheckSyntax attribute.",
                        "format": "int32"
                    },
                    "passwordMinAlphaChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of alphabetic characters that the password string must have. If the server is unable to check the number of alphabetic characters, then the server continues processing depending on the value of the pwdCheckSyntax attribute.",
                        "format": "int32"
                    },
                    "passwordMinDiffChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of characters in the new password that must be different from the characters in the old password, and any passwords stored in the pwdHistory. If the password has been one-way encrypted the server is unable to check actual password characters, then the server will continue processing depending on the value of the pwdCheckSyntax attribute.",
                        "format": "int32"
                    },
                    "passwordMinOtherChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of numeric and special characters that the password string must have. If the server is unable to check the number of other characters, then the server continues processing depending on the value of the pwdCheckSyntax attribute.",
                        "format": "int32"
                    },
                    "passwordMinLowerCaseChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of lower case alphabetic characters that the password string must have.",
                        "format": "int32"
                    },
                    "passwordMinUpperCaseChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of upper case alphabetic characters that the password string must have.",
                        "format": "int32"
                    },
                    "passwordMinNumberChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of numeric characters that the password string must have.",
                        "format": "int32"
                    },
                    "passwordMinSpecialChars": {
                        "type": "integer",
                        "description": "Specifies the minimum number of special characters that the password string must have.",
                        "format": "int32"
                    }
                }
            },
            "CSVImportSCIMNames1": {
                "type": "object",
                "properties": {
                    "headerNames": {
                        "type": "array",
                        "description": "List of header names allowed as CSV file headers",
                        "items": {
                            "$ref": "#/components/schemas/CSVImportHeader1"
                        }
                    }
                }
            },
            "CSVImportStats1": {
                "required": [
                    "errorsCount",
                    "processedCount",
                    "startTime",
                    "totalCount",
                    "unprocessedCount"
                ],
                "type": "object",
                "properties": {
                    "startTime": {
                        "type": "string",
                        "description": "The time that the import request started"
                    },
                    "endTime": {
                        "type": "string",
                        "description": "The time that the import request was completed or cancelled"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total number of CSV entries in the CSV file",
                        "format": "int32"
                    },
                    "processedCount": {
                        "type": "integer",
                        "description": "The total number of CSV entries that were processed",
                        "format": "int32"
                    },
                    "errorsCount": {
                        "type": "integer",
                        "description": "The total number of errors that occurred during the import request",
                        "format": "int32"
                    },
                    "unprocessedCount": {
                        "type": "integer",
                        "description": "The total number of CSV entries that were not processed",
                        "format": "int32"
                    },
                    "errors": {
                        "type": "array",
                        "description": "The list of errors that occurred during the CSV import request",
                        "items": {
                            "$ref": "#/components/schemas/CSVImportError1"
                        }
                    },
                    "unprocessed": {
                        "type": "array",
                        "description": "The list of unprocessed names that occurred during the CSV import request",
                        "items": {
                            "type": "string"
                        }
                    },
                    "lastUpdateTime": {
                        "type": "integer",
                        "description": "The last time we updated statistics for a job",
                        "format": "int64"
                    },
                    "minutesToWait": {
                        "type": "integer",
                        "description": "The number of minutes before we write out stats",
                        "format": "int32"
                    }
                }
            },
            "PasswordPolicyLabelsResponse31": {
                "required": [
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure. The schemas \"urn:ietf:params:scim:schemas:ibm:core:3.0:policy:PasswordLabels\" is returned.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PasswordPolicyLabel1"
                        }
                    }
                }
            },
            "CSVImportHeader1": {
                "required": [
                    "dataType",
                    "name",
                    "required"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the header."
                    },
                    "dataType": {
                        "type": "string",
                        "description": "The data type of the header value."
                    },
                    "required": {
                        "type": "boolean",
                        "description": "The header is required."
                    }
                }
            },
            "PasswordPolicyValidatePasswordRequest1": {
                "required": [
                    "password",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.  The schema \"urn:ietf:params:scim:schemas:ibm:core:3.0:policy:Password\"is returned.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "password": {
                        "type": "string",
                        "description": "The password to validate"
                    }
                }
            },
            "BulkResponse_0": {
                "required": [
                    "Operations",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that are used to indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.  The schema \"urn:ietf:params:scim:api:messages:2.0:BulkResponse\" is the URI as required by the SCIM specification.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "Operations": {
                        "type": "array",
                        "description": "The response for each operation.",
                        "items": {
                            "$ref": "#/components/schemas/OperationResponse"
                        }
                    }
                }
            },
            "PatchOperation_0": {
                "required": [
                    "op",
                    "path"
                ],
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "description": "The operation to be performed.",
                        "example": "add",
                        "enum": [
                            "add",
                            "remove",
                            "replace"
                        ]
                    },
                    "path": {
                        "type": "string",
                        "description": "The string that contains an attribute path that describes the target of the operation.The \"path\" attribute is required for all operations.Examples of valid \"path\" specification formats include: <br> <br>     \"path\":\"title\" <br>     \"path\":\"name.formatted\" <br>     \"path\":\"phoneNumbers[type eq \\\"work\\\"]\" <br>     \"path\":\"emails[type eq \\\"work\\\"].value\" <br> <br>As shown, \"section filters\" (ex: [type eq \\\"work\\\"]) can be used to allow selection of specific values of multi-valued attributes. The supported filter operators include: <br> <br>     eq: The attribute and operation values must be identical for a match. <br>     ne: Matches if the attribute and operation values are not identical. <br>     co: The entire operation value must be a substring of the attribute value. <br>     sw: The entire operation value must be a substring of the attribute value, matching from the beginning. <br>     ew: The entire operation value must be a substring of the attribute value, matching from the end. <br>     pr: If the attribute value is present, there is a match. <br>     gt: If the attribute value is greater than the operation value, there is a match. <br>     ge: If the attribute value is greater than or equal to the operation value, there is a match. <br>     lt: If the attribute value is less than the operator value, there is a match. <br>     le: If the attribute value is less than or equal to the operator value, there is a match. <br>Only a single, simple filter can be specified.",
                        "example": "title"
                    },
                    "value": {
                        "type": "string",
                        "description": "The attribute content used for the operation. The \"value\" attribute is required for the \"add\" and \"replace\" operations. The \"value\" attribute is allowed with \"remove\" operations only when the \"path\" identifies  a single object (specified by a selection filter), and the attribute path identifies an array attribute.  Currently, this usage is for removing values from a custom attribute's values array only. <br> <br> The following example shows a patch operation removing a single value from \"customAttributeNameA\"  and multiple values from \"customAttributeNameB\": <br>  <table> <tr><td> {  \"schemas\":[\"urn:ietf:params:scim:api:messages:2.0:PatchOp\"], \"Operations\":  [    {      \"op\":\"remove\",      \"path\":\"urn:ietf:params:scim:schemas:extension:ibm:2.0:User:customAttributes[name eq \"customAttributeNameA\"].values\",      \"value\":\"customAttributeValueToRemoveA1\"    },    {      \"op\":\"remove\",      \"path\":\"urn:ietf:params:scim:schemas:extension:ibm:2.0:User:customAttributes[name eq \"customAttributeNameB\"].values\",      \"value\":          [             \"customAttributeValueToRemoveB1\",             \"customAttributeValueToRemoveB2\"          ]    }  ]}</td></tr></table>",
                        "example": "Vice President"
                    }
                }
            },
            "Component_0": {
                "required": [
                    "details",
                    "name",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the component that is being checked.",
                        "example": "LDAP connectivity"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status result of the health check.",
                        "example": "good"
                    },
                    "details": {
                        "type": "string",
                        "description": "A message about what was checked.",
                        "example": "The connection to LDAP is successful.",
                        "enum": [
                            "good",
                            "bad",
                            "marginal"
                        ]
                    }
                }
            },
            "ValueConstraint_0": {
                "type": "object",
                "properties": {
                    "format": {
                        "type": "string",
                        "description": "Indicates that the attribute value is an \"email\" address.  A format of \"email\" is required to use the \"allowedEmailDomains\" or the \"blockedEmailDomains\" constraint types.",
                        "enum": [
                            "email"
                        ]
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of constraint to apply to the attribute's value.",
                        "enum": [
                            "regex",
                            "allowedValues",
                            "noValue",
                            "allowedEmailDomains",
                            "blockedEmailDomains",
                            "rule"
                        ]
                    },
                    "value": {
                        "type": "string",
                        "description": "A value that depends on the type.  If the type is \"regex\", then the value must be a valid regular expression string.  If the type is \"allowedValues\", then the value is an array of strings.  If the type is \"noValue\", then the value is empty.  If the type is \"allowedEmailDomains\" or \"blockedEmailDomains\", the value must be a list of domains.  For example \"value\":{\"domains\":[\"mailinator[0-9]?.com\", \"zzz.com\"]} where each domain can be a regular expression string. If the type is \"rule\", then the value must be a valid CEL rule."
                    }
                }
            },
            "SchemaAttribute_0": {
                "required": [
                    "description",
                    "displayName",
                    "name",
                    "schemas",
                    "scimName",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contains the URIs that indicate the namespaces of the SCIM schemas that define the attributes present in the\ncurrent JSON structure.\n  The schema URI must be \"urn:ietf:params:scim:schemas:ibm:core:2.0:SchemaAttribute\" as required by the SCIM specification. \n",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The schema attribute name. \n",
                        "enum": [
                            "customAttribute1",
                            "customAttribute2",
                            "customAttribute3",
                            "customAttribute4",
                            "customAttribute5",
                            "customAttribute6",
                            "customAttribute7",
                            "customAttribute8",
                            "customAttribute9",
                            "customAttribute10",
                            "customAttribute11",
                            "customAttribute12",
                            "customAttribute13",
                            "customAttribute14",
                            "customAttribute15",
                            "customAttribute16",
                            "customAttribute17",
                            "customAttribute18",
                            "customAttribute19",
                            "customAttribute20",
                            "customAttribute21",
                            "customAttribute22",
                            "customAttribute23",
                            "customAttribute24",
                            "customAttribute25",
                            "customAttribute26",
                            "customAttribute27",
                            "customAttribute28",
                            "customAttribute29",
                            "customAttribute30",
                            "customAttribute31",
                            "customAttribute32",
                            "customAttribute33",
                            "customAttribute34",
                            "customAttribute35",
                            "customAttribute36",
                            "customAttribute37",
                            "customAttribute38",
                            "customAttribute39",
                            "customAttribute40",
                            "customAttribute41",
                            "customAttribute42",
                            "customAttribute43",
                            "customAttribute44",
                            "customAttribute45",
                            "customAttribute46",
                            "customAttribute47",
                            "customAttribute48",
                            "customAttribute49",
                            "customAttribute50",
                            "customAttribute51",
                            "customAttribute52",
                            "customAttribute53",
                            "customAttribute54",
                            "customAttribute55",
                            "customAttribute56",
                            "customAttribute57",
                            "customAttribute58",
                            "customAttribute59",
                            "customAttribute60",
                            "customAttribute61",
                            "customAttribute62",
                            "customAttribute63",
                            "customAttribute64",
                            "customAttribute65",
                            "customAttribute66",
                            "customAttribute67",
                            "customAttribute68",
                            "customAttribute69",
                            "customAttribute70",
                            "customAttribute71",
                            "customAttribute72",
                            "customAttribute73",
                            "customAttribute74",
                            "customAttribute75",
                            "customAttribute76",
                            "customAttribute77",
                            "customAttribute78",
                            "customAttribute79",
                            "customAttribute80",
                            "customAttribute81",
                            "customAttribute82",
                            "customAttribute83",
                            "customAttribute84",
                            "customAttribute85",
                            "customAttribute86",
                            "customAttribute87",
                            "customAttribute88",
                            "customAttribute89",
                            "customAttribute90",
                            "customAttribute91",
                            "customAttribute92",
                            "customAttribute93",
                            "customAttribute94",
                            "customAttribute95",
                            "customAttribute96",
                            "customAttribute97",
                            "customAttribute98",
                            "customAttribute99",
                            "customAttribute100",
                            "customAttribute101",
                            "customAttribute102",
                            "customAttribute103",
                            "customAttribute104",
                            "customAttribute105",
                            "customAttribute106",
                            "customAttribute107",
                            "customAttribute108",
                            "customAttribute109",
                            "customAttribute110",
                            "customAttribute111",
                            "customAttribute112",
                            "customAttribute113",
                            "customAttribute114",
                            "customAttribute115",
                            "customAttribute116",
                            "customAttribute117",
                            "customAttribute118",
                            "customAttribute119",
                            "customAttribute120",
                            "customAttribute121",
                            "customAttribute122",
                            "customAttribute123",
                            "customAttribute124",
                            "customAttribute125",
                            "customAttribute126",
                            "customAttribute127",
                            "customAttribute128",
                            "customAttribute129",
                            "customAttribute130",
                            "customAttribute131",
                            "customAttribute132",
                            "customAttribute133",
                            "customAttribute134",
                            "customAttribute135",
                            "customAttribute136",
                            "customAttribute137",
                            "customAttribute138",
                            "customAttribute139",
                            "customAttribute140",
                            "customAttribute141",
                            "customAttribute142",
                            "customAttribute143",
                            "customAttribute144",
                            "customAttribute145",
                            "customAttribute146",
                            "customAttribute147",
                            "customAttribute148",
                            "customAttribute149",
                            "customAttribute150",
                            "hashedCustomAttribute1",
                            "hashedCustomAttribute2",
                            "hashedCustomAttribute3",
                            "hashedCustomAttribute4",
                            "hashedCustomAttribute5",
                            "hashedCustomAttribute6",
                            "hashedCustomAttribute7",
                            "hashedCustomAttribute8",
                            "hashedCustomAttribute9",
                            "hashedCustomAttribute10"
                        ]
                    },
                    "description": {
                        "type": "string",
                        "description": "The description for the schema attribute. \n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name for a custom attribute.  Its used to show the attribute name in the email that is sent to the end user when the attribute value changes.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The data type for the schema attribute.  For a custom attribute the allowed type is \"string\". \n",
                        "enum": [
                            "string"
                        ]
                    },
                    "scimName": {
                        "type": "string",
                        "description": "The unqualified SCIM name that is associated with the schema attribute.  For a custom attribute, the SCIM name must be unique and use the alphanumeric character set.\n"
                    },
                    "attributeName": {
                        "type": "string",
                        "description": "The attribute name that is associated with the attribute source.  The attribute name must be unique and use the alphanumeric character set and underscore.  The attribute name defaults to the SCIM name if not specified. \n"
                    },
                    "multiValue": {
                        "type": "boolean",
                        "description": "A flag to indicate this schema attribute supports multiple values.  Defaults to false.  The flag is set to false for hashed custom attributes which support a single value. \n"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "A flag to indicate this schema attribute is read only.   Defaults to false.  Any value that is specified for a user in a read only attribute is ignored, except for custom attributes where it can be set on a POST.  Values specified in a PUT or PATCH request payload for read only attributes are ignored. \n"
                    }
                }
            },
            "Error400": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "example": "CSIBTXXXXE"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requestor locale specific descriptive message",
                        "example": "String message"
                    }
                }
            },
            "Error403": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "example": "CSIBTXXXXE"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requestor locale specific descriptive message",
                        "example": "String message"
                    }
                }
            },
            "Error404": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "example": "CSIBTXXXXE"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requestor locale specific descriptive message",
                        "example": "String message"
                    }
                }
            },
            "Error409": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "example": "CSIBTXXXXE"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requestor locale specific descriptive message",
                        "example": "String message"
                    }
                }
            },
            "Error422": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "example": "CSIBTXXXXE"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requestor locale specific descriptive message",
                        "example": "String message"
                    }
                }
            },
            "Error500": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "example": "CSIBTXXXXE"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requestor locale specific descriptive message",
                        "example": "String message"
                    }
                }
            },
            "innerResult": {
                "type": "object",
                "properties": {
                    "approved": {
                        "type": "boolean",
                        "description": "True or false based on rule evaluation and consent."
                    },
                    "reason": {
                        "type": "object",
                        "properties": {
                            "messageDescription": {
                                "maxLength": 256,
                                "type": "string",
                                "description": "Reason message description."
                            },
                            "messageId": {
                                "type": "string",
                                "description": "Reason message identifier."
                            }
                        }
                    },
                    "trace": {
                        "title": "Trace",
                        "type": "object",
                        "properties": {
                            "rule": {
                                "title": "Rule",
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "Id of rule that has a decision. In case of no rule matched, null will returned"
                                    },
                                    "decision": {
                                        "type": "string",
                                        "description": "Decision returned by the rule evaluation,  ALLOW / DENY / ASSENT_IMPLICIT / ASSENT_EXPLICIT, default is ASSENT_EXPLICIT"
                                    },
                                    "reason": {
                                        "type": "string",
                                        "description": "Reason associated with a rule."
                                    }
                                }
                            },
                            "consent": {
                                "title": "Consent",
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "Id of consent that has a decision. In case of no consent matched, null will returned"
                                    },
                                    "state": {
                                        "type": "integer",
                                        "description": "state of consent that has a decision : \n* 1 - Consent allow,\n* 2 - Consent deny,\n* 3 - Opt in,\n* 4 - Opt out,\n* 5 - Transparency"
                                    },
                                    "purposeVersion": {
                                        "type": "integer",
                                        "description": "Version of purpose that the record was given to"
                                    }
                                }
                            }
                        }
                    },
                    "attributeId": {
                        "type": "string",
                        "description": "Reference to the attributeId to which the result corresponds. If the purpose has attributes, but the incoming request is not specific to an attribute. The result will be provided for every attribute in the purpose."
                    }
                }
            },
            "DUAResult": {
                "title": "Data Usage Approval result",
                "type": "object",
                "properties": {
                    "purposeId": {
                        "type": "string",
                        "description": "Reference to the purposeId for which DUA was requested."
                    },
                    "accessTypeId": {
                        "type": "string",
                        "description": "Reference to the accessTypeId for which DUA was requested. If not provided the default accessTypeId is used."
                    },
                    "attributeId": {
                        "type": "string",
                        "description": "Reference to the attributeId for which DUA was requested."
                    },
                    "attributeValue": {
                        "type": "string",
                        "description": "Reference to the attributeValue for which DUA was requested."
                    },
                    "result": {
                        "type": "array",
                        "description": "Reference to the result array.",
                        "items": {
                            "$ref": "#/components/schemas/innerResult"
                        }
                    }
                }
            },
            "DUAResultArray": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/DUAResult"
                }
            },
            "InitiatePushNotification": {
                "required": [
                    "message",
                    "send"
                ],
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The context message sent in the push notification. This message should not contain any sensitve information. This message is displayed as the notification message when it arrives at the device",
                        "example": "You have a pending authentication challenge"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title message sent in the push notification. This message should not contain any sensitve information. This message is displayed as the notification title when it arrives at the device",
                        "example": "IBM Verify"
                    },
                    "send": {
                        "type": "boolean",
                        "description": "If false, a push notification will not be sent to the registered authenticator",
                        "example": true
                    },
                    "useDevCreds": {
                        "type": "boolean",
                        "description": "If true, the push notification sent will use devevelopment credentials",
                        "example": true
                    },
                    "sound": {
                        "type": "string",
                        "description": "The sound the device will make when the push notification arrives",
                        "example": "default"
                    }
                },
                "description": "The push notification parameters."
            },
            "AuthenticationMethod": {
                "required": [
                    "id",
                    "methodType",
                    "subType"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the authentication method enrollment",
                        "example": "f867dceb-a360-44f4-883f-70723272d27f"
                    },
                    "methodType": {
                        "type": "string",
                        "description": "The type of authentication method",
                        "example": "signature"
                    },
                    "subType": {
                        "type": "string",
                        "description": "The specific sub type of the authentication method. Support values",
                        "example": "fingerprint",
                        "enum": [
                            "userPresence",
                            "fingerprint",
                            "face"
                        ]
                    },
                    "additionalData": {
                        "type": "array",
                        "description": "Additional data associated with the authentication method enrollment to be included with authentication challenges",
                        "items": {
                            "$ref": "#/components/schemas/NameValuePair"
                        }
                    }
                },
                "description": "The JSON representation of authentication methods for the verification transaction."
            },
            "CreateTotpEnrollmentResponse_2.0": {
                "required": [
                    "attributes",
                    "created",
                    "enabled",
                    "id",
                    "type",
                    "updated",
                    "userId",
                    "validated"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the enrollment",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier of the associated user",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of authentication factor enrollment",
                        "readOnly": true,
                        "example": "totp"
                    },
                    "created": {
                        "type": "string",
                        "description": "The creation time of the enrollment",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The time the enrollment was last updated",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "attempted": {
                        "type": "string",
                        "description": "The time the enrollment was last used for verification",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the enrollment to be used in runtime flows",
                        "example": true
                    },
                    "validated": {
                        "type": "boolean",
                        "description": "The validation state of the enrollment",
                        "readOnly": true,
                        "example": true
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/CreateTotpEnrollmentAttributes_2.0"
                    }
                },
                "description": "A time-based one-time password enrollment."
            },
            "VoiceotpVerification_2.0": {
                "required": [
                    "attempts",
                    "correlation",
                    "created",
                    "expiry",
                    "id",
                    "phoneNumber",
                    "retries",
                    "state",
                    "type",
                    "updated",
                    "userId"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the verification",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier of the associated user",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of authentication factor enrollment",
                        "readOnly": true,
                        "example": "voiceotp"
                    },
                    "created": {
                        "type": "string",
                        "description": "The time when the verification was created",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The time when the verification was last updated",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "expiry": {
                        "type": "string",
                        "description": "The time when the verification expires",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the verification",
                        "readOnly": true,
                        "example": "PENDING",
                        "enum": [
                            "PENDING",
                            "TIMEOUT",
                            "CANCELED",
                            "FAILED",
                            "SUCCESS"
                        ]
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The identifier of the user that last updated the verification",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "correlation": {
                        "type": "string",
                        "description": "A value to be associated with the verification. It will be prefixed to the one-time password in the phone call to be sent.",
                        "readOnly": true,
                        "example": "4567"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "The phone number to be used to deliver one-time password values",
                        "readOnly": true,
                        "example": "+15345678911"
                    },
                    "attempts": {
                        "type": "integer",
                        "description": "The number of attempts that have been made against the verification",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0
                    },
                    "retries": {
                        "type": "integer",
                        "description": "The maximum number of retry attempts before the verification is marked as failed",
                        "format": "int32",
                        "readOnly": true,
                        "example": 4
                    }
                },
                "description": "A voice one-time password verification."
            },
            "CreateOtpVerification_2.0": {
                "type": "object",
                "properties": {
                    "correlation": {
                        "type": "string",
                        "description": "A value to be associated with the verification.",
                        "example": "4567"
                    },
                    "useEmailotpConfig": {
                        "type": "boolean"
                    },
                    "useSmsotpConfig": {
                        "type": "boolean"
                    }
                },
                "description": "The creation data for a one-time password verification."
            },
            "UserAction": {
                "required": [
                    "id",
                    "userAction"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the authentication method enrollment",
                        "example": "f867dceb-a360-44f4-883f-70723272d27f"
                    },
                    "userAction": {
                        "type": "string",
                        "description": "The user wishes to complete the transaction with one of the following state changes:<br> CANCELED - The transaction has been cancelled by the end user or administrator,<br> USER_DENIED - The user has denied or rejected the transaction using the authenticator,<br> USER_FRAUDULENT - The user has denied the transaction using the authenticator and marked it as fraudulent,<br> BIOMETRY_FAILED - The user attempted to verify the transaction but biometry authentication failed,<br> VERIFY_ATTEMPT - The user wishes to attempt to verify the transaction. The request MUST also include a value for 'signedData'.<br>Support values",
                        "example": "VERIFY_ATTEMPT",
                        "enum": [
                            "CANCELED",
                            "USER_DENIED",
                            "USER_FRAUDULENT",
                            "BIOMETRY_FAILED",
                            "VERIFY_ATTEMPT"
                        ]
                    },
                    "signedData": {
                        "type": "string",
                        "description": "The base64 encoded value of the data as a result of signing the 'transactionData' with the private key created for this enrollment. This is required when 'userAction' is VERIFY_ATTEMPT",
                        "example": "563r324F3214=="
                    }
                },
                "description": "The JSON representation of the user action in response to a verification transaction."
            },
            "PasswordReset": {
                "required": [
                    "username"
                ],
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username to reset password for",
                        "example": "jessica"
                    },
                    "newPassword": {
                        "type": "string",
                        "description": "The new password to update to",
                        "example": "Passw0rd1"
                    }
                }
            },
            "AttestationOptionsRequest_2.0": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "The identifier of the end user that is performing the attestation ceremony. If it is not provided, the context that was used for authorization is used",
                        "example": "00010YE"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the end user. If it is not provided, the value is retrieved from the user's profile",
                        "example": "Jessica"
                    },
                    "authenticatorSelection": {
                        "$ref": "#/components/schemas/AuthenticatorSelection_2.0"
                    },
                    "attestation": {
                        "type": "string",
                        "description": "The level of attestation that the authenticatior is expected to perform",
                        "example": "none"
                    },
                    "extensions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Additional parameters requesting additional processing by the client and authenticator"
                    }
                },
                "description": "The options that are presented when starting a FIDO 2.0 registration."
            },
            "GrantAuthenticatorResponse": {
                "required": [
                    "accessToken",
                    "expiresIn",
                    "id",
                    "refreshToken",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the registration",
                        "readOnly": true,
                        "example": "7b676daa-8725-472d-a7f2-88f05c0b798b"
                    },
                    "accessToken": {
                        "type": "string",
                        "description": "The access token value",
                        "readOnly": true,
                        "example": "2YotnFZFEjr1zCsicMWpAA"
                    },
                    "expiresIn": {
                        "type": "integer",
                        "description": "The valid lifetime of the access token",
                        "format": "int32",
                        "readOnly": true,
                        "example": 3600
                    },
                    "refreshToken": {
                        "type": "string",
                        "description": "The refresh token which may used to obtain a new access token",
                        "readOnly": true,
                        "example": "tGzv3JOkF0XG5Qx2TlKWIA"
                    },
                    "version": {
                        "$ref": "#/components/schemas/InterfaceVersion"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/AuthenticatorMetadata"
                    }
                },
                "description": "The JSON representation of the response data of a registered authenticator instance."
            },
            "Unprocessable": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "readOnly": true,
                        "example": "CSIXX1234X"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message",
                        "readOnly": true,
                        "example": "The request was well-formed but was unable to be followed due to semantic errors"
                    }
                },
                "description": "The message response to the request."
            },
            "AssertionResultRequestResponse": {
                "required": [
                    "authenticatorData",
                    "clientDataJSON",
                    "signature"
                ],
                "type": "object",
                "properties": {
                    "clientDataJSON": {
                        "type": "string",
                        "description": "The base64Url-encoded clientDataJson that was received from the WebAuthn client",
                        "example": "ey...."
                    },
                    "signature": {
                        "type": "string",
                        "description": "The base64Url-encoded bytes of the signature of the challenge data that was produced by the authenticator",
                        "example": "VGhpcyBpcyBhIHNpZ25lZCBjaGFsbGVuZ2UK"
                    },
                    "authenticatorData": {
                        "type": "string",
                        "description": "Information about the authentication that was produced by the authenticator and verified by the signature"
                    },
                    "userHandle": {
                        "type": "string",
                        "description": "The opaque identifier for the user who owns this authenticator. It must be presented when a login without a username is being performed. It identifies the user to be logged in"
                    }
                }
            },
            "TotpConfiguration_2.0": {
                "required": [
                    "algorithm",
                    "digits",
                    "enabled",
                    "keyUri",
                    "oneTimeUse",
                    "period",
                    "periodSkew"
                ],
                "type": "object",
                "properties": {
                    "algorithm": {
                        "type": "string",
                        "description": "The algorithm that is used to generate the one-time password",
                        "example": "SHA1",
                        "enum": [
                            "SHA1",
                            "SHA256",
                            "SHA512"
                        ]
                    },
                    "digits": {
                        "maximum": 12,
                        "minimum": 6,
                        "type": "integer",
                        "description": "The number of digits of the one-time password",
                        "format": "int32",
                        "example": 6
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of time-based one-time password to be used in runtime flows",
                        "example": true
                    },
                    "keyUri": {
                        "type": "string",
                        "description": "The URI format to use when providing secret keys",
                        "example": "otpauth://totp/IBM%20Security%20Verify:@USER_NAME@?secret=@SECRET_KEY@&issuer=IBM%20Security%20Verify&algorithm=@ALGORITHM@"
                    },
                    "oneTimeUse": {
                        "type": "boolean",
                        "description": "Whether one-time password values can only be used once within the given period",
                        "example": true
                    },
                    "period": {
                        "maximum": 1800,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The number of seconds until the one-time password expires",
                        "format": "int32",
                        "example": 30
                    },
                    "periodSkew": {
                        "maximum": 5,
                        "minimum": 0,
                        "type": "integer",
                        "description": "The period skew intervals to consider for synchronization delay between the server and client generating the one-time password. For example, a skew interval of 2 means a one-time password in up to two intervals in the past, or two in the future will be valid",
                        "format": "int32",
                        "example": 1
                    },
                    "enrollments": {
                        "maximum": 5,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The maximum number of enrollments a specific user may enroll",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "The time-based one-time password configuration."
            },
            "DiscoverClients": {
                "required": [
                    "clients"
                ],
                "type": "object",
                "properties": {
                    "clients": {
                        "type": "array",
                        "description": "The list of available authenticator clients",
                        "items": {
                            "$ref": "#/components/schemas/DiscoverableClient"
                        }
                    }
                },
                "description": "A list of authenticator clients which is enabled for runtime flows."
            },
            "QuestionsConfigurations_2.0": {
                "required": [
                    "questions"
                ],
                "type": "object",
                "properties": {
                    "questions": {
                        "type": "array",
                        "description": "The list of knowledge questions configurations",
                        "items": {
                            "$ref": "#/components/schemas/KnowledgeQuestionsConfiguration_2.0"
                        }
                    }
                },
                "description": "The list of knowledge questions configurations."
            },
            "QuestionsLocale_2.0": {
                "required": [
                    "en"
                ],
                "type": "object",
                "properties": {
                    "en": {
                        "type": "string",
                        "description": "The locale-specific knowledge question text",
                        "example": "What is your mother's maiden name?"
                    }
                },
                "description": "A knowledge question's locale-specific question text."
            },
            "QuestionsEnrollmentsProfile_2.0": {
                "required": [
                    "maxAnswerLength",
                    "minAnswerLength",
                    "minRequiredAnswers",
                    "regexMatch",
                    "requireUniqueAnswers"
                ],
                "type": "object",
                "properties": {
                    "minRequiredAnswers": {
                        "type": "integer",
                        "description": "The minimum number of required enrolled answers",
                        "format": "int32",
                        "example": 3
                    },
                    "requireUniqueAnswers": {
                        "type": "boolean",
                        "description": "Whether unique answers are required",
                        "example": true
                    },
                    "minAnswerLength": {
                        "type": "integer",
                        "description": "The minimum answer length",
                        "format": "int32",
                        "example": 1
                    },
                    "maxAnswerLength": {
                        "type": "integer",
                        "description": "The maximum answer length",
                        "format": "int32",
                        "example": 128
                    },
                    "regexMatch": {
                        "type": "string",
                        "description": "Regex of permitted characters in an enrolled answer",
                        "example": "^[a-zA-Z0-9_ ]+$"
                    }
                },
                "description": "The enrollment specific configuration options for knowledge questions."
            },
            "RecaptchaReference": {
                "required": [
                    "created",
                    "id",
                    "location",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The identifier of the reCAPTCHA reference",
                        "readOnly": true,
                        "example": "b2aa663c-c935-4b9c-ab5e-c19b77ae18e5"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the reference",
                        "readOnly": true,
                        "example": "User Registration"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location of the reference",
                        "readOnly": true,
                        "example": "/v2.0/flows/e0076f18-356b-43cd-8544-f9a93b8e795e"
                    },
                    "created": {
                        "type": "string",
                        "description": "The time when the reference was created",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    }
                },
                "description": "A reCAPTCHA configuration reference."
            },
            "OtpConfiguration_2.0": {
                "required": [
                    "charset",
                    "enabled",
                    "expiry",
                    "length",
                    "retries"
                ],
                "type": "object",
                "properties": {
                    "charset": {
                        "type": "string",
                        "description": "The allowed alphanumeric character set for one-time password generation",
                        "example": "0123456789"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of one-time password to be used in runtime flows",
                        "example": true
                    },
                    "expiry": {
                        "maximum": 1800,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The number of seconds until the one-time password expires",
                        "format": "int32",
                        "example": 300
                    },
                    "length": {
                        "maximum": 20,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The length of the one-time password",
                        "format": "int32",
                        "example": 6
                    },
                    "retries": {
                        "maximum": 10,
                        "minimum": 0,
                        "type": "integer",
                        "description": "The number of retry attempts before the verification is marked as failed",
                        "format": "int32",
                        "example": 2
                    }
                },
                "description": "The one-time password configuration."
            },
            "CreateRecaptchaConfiguration": {
                "required": [
                    "name",
                    "secretKey",
                    "siteKey",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the reCAPTCHA configuration",
                        "example": "reCAPTCHA"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The reCAPTCHA secret key",
                        "example": "1uAENDAQPPA7ZUF-XR7jJNpoua7aTypI0QTCf4e3"
                    },
                    "siteKey": {
                        "type": "string",
                        "description": "The reCAPTCHA site key",
                        "example": "1uAENDAQPPA7ZUF-m3GQfGvIkkK5jAhIHbYDKbT7"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of reCAPTCHA configuration",
                        "example": "v3",
                        "enum": [
                            "v3"
                        ]
                    }
                },
                "description": "The reCAPTCHA configuration."
            },
            "CreateFidoMetadata_2.0": {
                "required": [
                    "metadataStatement",
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "category": {
                        "type": "string",
                        "description": "The administrator-assigned category for the metadata statement",
                        "example": "Recommended"
                    },
                    "name": {
                        "type": "string",
                        "description": "The friendly name of the metadata entry",
                        "example": "Generic Key v5"
                    },
                    "metadataStatement": {
                        "type": "string",
                        "description": "The metadata statement. It is mutually exclusive with a certificate"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether this metadata entry is enabled. Disabled metadata is not used regardless of whether it is referenced by a relying party",
                        "example": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the metadata statement",
                        "enum": [
                            "FIDO2",
                            "YUBICO"
                        ]
                    }
                },
                "description": "A FIDO metadata creation document."
            },
            "SmsotpEnrollmentAttributes_2.0": {
                "required": [
                    "phoneNumber"
                ],
                "type": "object",
                "properties": {
                    "phoneNumber": {
                        "type": "string",
                        "description": "The phone number to be used to deliver one-time password values",
                        "example": "+15345678911"
                    }
                },
                "description": "A SMS one-time password enrollment attributes."
            },
            "AssertionResultRequest_2.0": {
                "required": [
                    "id",
                    "rawId",
                    "response",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "response": {
                        "$ref": "#/components/schemas/AssertionResultRequestResponse"
                    },
                    "id": {
                        "type": "string",
                        "description": "The credential identifier that is received from the WebAuthn client",
                        "example": "VGhpcyBpcyBhbiBJRAo="
                    },
                    "rawId": {
                        "type": "string",
                        "description": "The credential identifier that is received from the WebAuthn client",
                        "example": "VGhpcyBpcyBhbiBJRAo="
                    },
                    "type": {
                        "type": "string",
                        "description": "The credential type. It must be 'public-key' for FIDO",
                        "example": "public-key"
                    },
                    "getClientExtensionResults": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "The results of processing client extensions requested by the Relying Party"
                    },
                    "authenticatorAttachment": {
                        "type": "string",
                        "description": "The authenticator's attachment modality",
                        "example": "platform"
                    }
                }
            },
            "EmailotpTransient_2.0": {
                "required": [
                    "attempts",
                    "correlation",
                    "created",
                    "emailAddress",
                    "expiry",
                    "id",
                    "retries",
                    "state",
                    "type",
                    "updated"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the verification",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of authentication factor enrollment",
                        "readOnly": true,
                        "example": "emailotp"
                    },
                    "created": {
                        "type": "string",
                        "description": "The time when the verification was created",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The time when the verification was last updated",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "expiry": {
                        "type": "string",
                        "description": "The time when the verification expires",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the verification",
                        "readOnly": true,
                        "example": "PENDING",
                        "enum": [
                            "PENDING",
                            "TIMEOUT",
                            "CANCELED",
                            "FAILED",
                            "SUCCESS"
                        ]
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The identifier of the user that last updated the verification",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "correlation": {
                        "type": "string",
                        "description": "A value to be associated with the verification. It will be prefixed to the one-time password in the email to be sent.",
                        "readOnly": true,
                        "example": "4567"
                    },
                    "emailAddress": {
                        "type": "string",
                        "description": "The email address to be used to deliver one-time password values",
                        "readOnly": true,
                        "example": "jessica@mail.com"
                    },
                    "attempts": {
                        "type": "integer",
                        "description": "The number of attempts that have been made against the verification",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0
                    },
                    "retries": {
                        "type": "integer",
                        "description": "The maximum number of retry attempts before the verification is marked as failed",
                        "format": "int32",
                        "readOnly": true,
                        "example": 4
                    }
                },
                "description": "A transient email one-time password verification."
            },
            "FidoRelyingPartyConfig_2.0": {
                "required": [
                    "allowedAttestationFormats",
                    "allowedAttestationTypes",
                    "enabled",
                    "id",
                    "metadataConfig",
                    "name",
                    "origins",
                    "rpId",
                    "webAuthn"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the relying party",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "rpId": {
                        "type": "string",
                        "description": "The FIDO relying party identifier",
                        "readOnly": true,
                        "example": "fido.ice.ibm.com"
                    },
                    "origins": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The origins that are considered valid under the relying party identifier",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The friendly name for the relying party",
                        "example": "Cloud Relying Party"
                    },
                    "allowedAttestationFormats": {
                        "type": "array",
                        "description": "The attestation formats that are accepted by this relying party",
                        "items": {
                            "type": "string",
                            "enum": [
                                "PACKED",
                                "TPM",
                                "FIDO_U2F",
                                "ANDROID_SAFETYNET",
                                "ANDROID_KEY",
                                "NONE",
                                "APPLE"
                            ]
                        }
                    },
                    "allowedAttestationTypes": {
                        "type": "array",
                        "description": "The attestation types that are accepted by this relying party",
                        "items": {
                            "type": "string",
                            "enum": [
                                "BASIC",
                                "ATTCA",
                                "SELF",
                                "ANONCA",
                                "NONE"
                            ]
                        }
                    },
                    "metadataConfig": {
                        "$ref": "#/components/schemas/FidoRpMetadataConfig_2.0"
                    },
                    "attestationCredProtect": {
                        "type": "string",
                        "description": "The default credProtect option enforced for attestations",
                        "example": "userVerificationOptional",
                        "enum": [
                            "none",
                            "userVerificationOptional",
                            "userVerificationOptionalWithCredentialIDList",
                            "userVerificationRequired"
                        ]
                    },
                    "pubKeyCredParams": {
                        "type": "array",
                        "description": "An ordered list of valid public key formats presented at registration",
                        "items": {
                            "$ref": "#/components/schemas/PublicKeyCredParams"
                        }
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether this relying party is available for use at runtime",
                        "example": true
                    },
                    "webAuthn": {
                        "type": "boolean",
                        "description": "Is this relying party enforcing strict WebAuthn",
                        "example": true
                    }
                },
                "description": "A configured FIDO relying party."
            },
            "VerifyQrVerification_2.0": {
                "required": [
                    "lsi"
                ],
                "type": "object",
                "properties": {
                    "lsi": {
                        "type": "string",
                        "description": "The login service index",
                        "example": "vu6Jak84Uhv1MkFFjglRB00rm"
                    }
                },
                "description": "A QR code login verification creation response."
            },
            "DiscoverableTotp_2.0": {
                "required": [
                    "enabled",
                    "enrollments",
                    "path"
                ],
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "The endpoint path of the authentication factor",
                        "example": "/v2.0/factors/totp"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the authentication factor",
                        "example": true
                    },
                    "enrollments": {
                        "type": "integer",
                        "description": "The maximum number of enrollments a specific user may enroll",
                        "format": "int32",
                        "example": 1
                    }
                },
                "description": "The availability and runtime configuration of totp."
            },
            "EnrollmentsAndTransient_2.0": {
                "required": [
                    "enrollments",
                    "totalUniqueEnrollments",
                    "transient",
                    "userId"
                ],
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier of the associated user",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "enrollments": {
                        "type": "array",
                        "description": "The list of authentication factor enrollments",
                        "items": {
                            "$ref": "#/components/schemas/Enrollment_2.0"
                        }
                    },
                    "transient": {
                        "type": "array",
                        "description": "The list of transient factors",
                        "items": {
                            "$ref": "#/components/schemas/TransientFactor_2.0"
                        }
                    },
                    "totalUniqueEnrollments": {
                        "type": "integer",
                        "description": "The number of unique authentication factors",
                        "format": "int32",
                        "readOnly": true,
                        "example": 2
                    }
                },
                "description": "A users authentication factor enrollments and transient attributes."
            },
            "Metadata": {
                "required": [
                    "serviceName"
                ],
                "type": "object",
                "properties": {
                    "serviceName": {
                        "type": "string",
                        "description": "The name of the tenant service",
                        "example": "Cloud Bank"
                    },
                    "customAttributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom defined attributes. Attribute keys and values must be of string type"
                    }
                },
                "description": "The configurable metadata for an authenticator client."
            },
            "UpdateQuestionsEnrollment_2.0": {
                "required": [
                    "attributes",
                    "created",
                    "enabled",
                    "id",
                    "references",
                    "type",
                    "updated",
                    "userId",
                    "validated"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the enrollment",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier of the associated user",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of authentication factor enrollment",
                        "readOnly": true,
                        "example": "<type>"
                    },
                    "created": {
                        "type": "string",
                        "description": "The creation time of the enrollment",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The time the enrollment was last updated",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "attempted": {
                        "type": "string",
                        "description": "The time the enrollment was last used for verification",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the enrollment to be used in runtime flows",
                        "example": true
                    },
                    "validated": {
                        "type": "boolean",
                        "description": "The validation state of the enrollment",
                        "readOnly": true,
                        "example": true
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/UpdateQuestionsEnrollmentAttributes_2.0"
                    },
                    "references": {
                        "$ref": "#/components/schemas/QuestionsEnrollmentIndvReferences_2.0"
                    }
                },
                "description": "A knowledge questions enrollment."
            },
            "InitiateAuthenticatorResponse": {
                "required": [
                    "accountName",
                    "code",
                    "registrationUri",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "version": {
                        "$ref": "#/components/schemas/InterfaceVersion"
                    },
                    "code": {
                        "type": "string",
                        "description": "The authorization code which can be used at the registration endpoint to complete the authenticator registration",
                        "readOnly": true,
                        "example": "rNxkpy2TSdv3pFgVW9kq"
                    },
                    "registrationUri": {
                        "type": "string",
                        "description": "The location of the registration endpoint",
                        "readOnly": true,
                        "example": "https://tenant.ice.ibmcloud.com/v1.0/authenticators/registration"
                    },
                    "accountName": {
                        "type": "string",
                        "description": "A user friendly name for the registration",
                        "example": "Savings Account"
                    },
                    "openAppRegistrationUri": {
                        "type": "string",
                        "description": "The verifiable link to be consumed by a mobile app to invoke the registration without QR code",
                        "readOnly": true,
                        "example": "https://idaas.ice.ibmcloud.com/registration?code=ABC123&..."
                    },
                    "qrcode": {
                        "type": "string",
                        "description": "The base64 encoded representation the the QR Code. This attribute is included only when the 'qrcodeInResponse' query parameter is 'true’",
                        "readOnly": true,
                        "example": "c2FtcGxlCg=="
                    }
                },
                "description": "The JSON representation of data useful to authenticators to enable registration and other data discovery."
            },
            "CreateQuestionsVerification_2.0": {
                "type": "object",
                "description": "The creation data of a knowledge question verification."
            },
            "KnowledgeQuestionsConfiguration_2.0": {
                "required": [
                    "enabled",
                    "enrollments",
                    "id",
                    "name",
                    "questions",
                    "verifications"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The configuration identifier",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "name": {
                        "type": "string",
                        "description": "The friendly configuration name",
                        "example": "default"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether the configuration is enabled",
                        "example": true
                    },
                    "enrollments": {
                        "$ref": "#/components/schemas/QuestionsEnrollmentsConfig_2.0"
                    },
                    "verifications": {
                        "$ref": "#/components/schemas/KnowledgeQuestionsVerificationsConfig_2.0"
                    },
                    "questions": {
                        "type": "array",
                        "description": "The questions that are configured for use in this profile",
                        "items": {
                            "$ref": "#/components/schemas/QuestionsQuestion_2.0"
                        }
                    }
                },
                "description": "The knowledge questions configuration options."
            },
            "QrVerification_2.0": {
                "required": [
                    "created",
                    "expiry",
                    "id",
                    "location",
                    "profileId",
                    "serviceName",
                    "state",
                    "tenant",
                    "type",
                    "updated",
                    "userId"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the verification",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier of the associated user",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of authentication factor enrollment",
                        "readOnly": true,
                        "example": "qr"
                    },
                    "created": {
                        "type": "string",
                        "description": "The time when the verification was created",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The time when the verification was last updated",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "expiry": {
                        "type": "string",
                        "description": "The time when the verification expires",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the verification",
                        "readOnly": true,
                        "example": "PENDING",
                        "enum": [
                            "PENDING",
                            "TIMEOUT",
                            "CANCELED",
                            "FAILED",
                            "SUCCESS"
                        ]
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The identifier of the user that last updated the verification",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "location": {
                        "type": "string",
                        "description": "The URL for this verification",
                        "readOnly": true,
                        "example": "/v2.0/factors/qr/1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "profileId": {
                        "type": "string",
                        "description": "The authenticator profile identifier. Verifications will need to be completed using an authenticator registration associated with this profile",
                        "readOnly": true,
                        "example": "ecb2bbbb-fd45-4ce9-957f-f18eaf65dfe8"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "The service name associated with the authenticator profile metadata",
                        "readOnly": true,
                        "example": "Cloud Security"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "The name of the tenant",
                        "readOnly": true,
                        "example": "tenant.example.com"
                    },
                    "assertion": {
                        "type": "string",
                        "description": "A JWT which serves as proof that this factor has been performed",
                        "readOnly": true,
                        "example": "ey..."
                    }
                },
                "description": "A QR code login verification."
            },
            "PwdvaultEnrollmentResourceData": {
                "required": [
                    "password",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username associated with the resource",
                        "example": "john"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password associated with the resource",
                        "example": "{jwe}sdfklj3e98"
                    },
                    "created": {
                        "type": "string",
                        "description": "The date on which the resource data was created.  Please note that this data is read-only and will be ignored for updates.",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The date on which the resource was last updated.  Please note that this data is read-only and will be ignored for updates.",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    }
                },
                "description": "A password vault enrollment's resource data."
            },
            "BadGateway": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "readOnly": true,
                        "example": "CSIXX1234X"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message",
                        "readOnly": true,
                        "example": "An invalid response was received from the upstream server"
                    }
                },
                "description": "The message response to the request."
            },
            "TransactionData": {
                "required": [
                    "message",
                    "originIpAddress",
                    "originUserAgent"
                ],
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The context message describing specific or potentially sensitive information about the transaction. This message is not sent with the push notification, instead it is retrieved by the authenticator after the push notification has been received. It may be displayed by the authenticator on the transaction screen",
                        "example": "You have a pending authentication challenge"
                    },
                    "originIpAddress": {
                        "type": "string",
                        "description": "The source IP address that is initiating transaction",
                        "example": "192.168.222.222"
                    },
                    "originUserAgent": {
                        "type": "string",
                        "description": "The user agent that is initiating transaction",
                        "example": "Mozilla Firefox 11"
                    },
                    "additionalData": {
                        "type": "array",
                        "description": "Additional contextual attributes",
                        "items": {
                            "$ref": "#/components/schemas/NameValuePair"
                        }
                    }
                },
                "description": "The JSON representation of the transactional data to be signed."
            },
            "TotpEnrollments_2.0": {
                "required": [
                    "count",
                    "limit",
                    "page",
                    "total",
                    "totp"
                ],
                "type": "object",
                "properties": {
                    "totp": {
                        "type": "array",
                        "description": "The list of time-based one-time password enrollments",
                        "items": {
                            "$ref": "#/components/schemas/TotpEnrollment_2.0"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "description": "The total number of results that are returned per page",
                        "format": "int32",
                        "example": 200
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The total number of results that are returned per page",
                        "format": "int32",
                        "example": 200
                    },
                    "page": {
                        "type": "integer",
                        "description": "The requested page, or the offset",
                        "format": "int32",
                        "example": 1
                    },
                    "total": {
                        "type": "integer",
                        "description": "The number of results returned in the page",
                        "format": "int32",
                        "example": 153
                    }
                },
                "description": "The list of time-based one-time password enrollments."
            },
            "PwdvaultEnrollmentResource": {
                "required": [
                    "name",
                    "resource"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "example": "resource_a"
                    },
                    "resource": {
                        "$ref": "#/components/schemas/PwdvaultEnrollmentResourceData"
                    }
                },
                "description": "A password vault enrollment's resource."
            },
            "ResolveRelyingPartyRequest": {
                "required": [
                    "origin"
                ],
                "type": "object",
                "properties": {
                    "origin": {
                        "type": "string",
                        "description": "The origin used to resolve the relying parties",
                        "example": "https://login.fido.example.com"
                    }
                }
            },
            "AttestationResultRequestResponse_2.0": {
                "required": [
                    "attestationObject",
                    "clientDataJSON"
                ],
                "type": "object",
                "properties": {
                    "clientDataJSON": {
                        "type": "string",
                        "description": "The base64Url-encoded clientDataJSON that is received from the WebAuthn client",
                        "example": "ey...."
                    },
                    "attestationObject": {
                        "type": "string",
                        "description": "The base64Url-encoded attestationObject that is received from the WebAuthn client ",
                        "example": "o2...."
                    }
                }
            },
            "CreateTotpEnrollmentAttributes_2.0": {
                "required": [
                    "accountName",
                    "algorithm",
                    "digits",
                    "period",
                    "secret"
                ],
                "type": "object",
                "properties": {
                    "algorithm": {
                        "type": "string",
                        "description": "The hashing algorithm of the one-time password",
                        "readOnly": true,
                        "example": "SHA1"
                    },
                    "digits": {
                        "type": "integer",
                        "description": "The number of digits in the one-time password",
                        "format": "int32",
                        "readOnly": true,
                        "example": 6
                    },
                    "period": {
                        "type": "integer",
                        "description": "The time period for the one-time password",
                        "format": "int32",
                        "readOnly": true,
                        "example": 30
                    },
                    "accountName": {
                        "type": "string",
                        "description": "The account name that the one-time password is associated with",
                        "readOnly": true,
                        "example": "Jessica"
                    },
                    "secret": {
                        "type": "string",
                        "description": "The shared secret value to be used to seed the one-time password algorithm",
                        "readOnly": true,
                        "example": "HCVUT426LRSLLP4M"
                    },
                    "qrCode": {
                        "type": "string",
                        "description": "A base64 encoded representation of the QR code",
                        "readOnly": true,
                        "example": "iVBORw0KGgoAAA=="
                    }
                },
                "description": "A time-based one-time password enrollments attributes."
            },
            "DiscoverableEmailotp_2.0": {
                "required": [
                    "allowlist",
                    "denylist",
                    "enabled",
                    "path"
                ],
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "The endpoint path of the authentication factor",
                        "example": "/v2.0/factors/emailotp"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the authentication factor",
                        "example": true
                    },
                    "allowlist": {
                        "type": "array",
                        "description": "The list of email domains that are to be allowed. Supported entries can be defined as literal strings and/or regex patterns.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "denylist": {
                        "type": "array",
                        "description": "The list of email domains that are to be denied. Supported entries can be defined as literal strings and/or regex patterns.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "The availability and runtime configuration of emailotp."
            },
            "OtpVerification_2.0": {
                "required": [
                    "attempts",
                    "correlation",
                    "created",
                    "expiry",
                    "id",
                    "retries",
                    "state",
                    "type",
                    "updated"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the verification",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of authentication factor enrollment",
                        "readOnly": true,
                        "example": "otp"
                    },
                    "created": {
                        "type": "string",
                        "description": "The time when the verification was created",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The time when the verification was last updated",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "expiry": {
                        "type": "string",
                        "description": "The time when the verification expires",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the verification",
                        "readOnly": true,
                        "example": "PENDING",
                        "enum": [
                            "PENDING",
                            "TIMEOUT",
                            "CANCELED",
                            "FAILED",
                            "SUCCESS"
                        ]
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The identifier of the user that last updated the verification",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "correlation": {
                        "type": "string",
                        "description": "A value to be associated with the verification",
                        "readOnly": true,
                        "example": "4567"
                    },
                    "attempts": {
                        "type": "integer",
                        "description": "The number of attempts that have been made against the verification",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0
                    },
                    "retries": {
                        "type": "integer",
                        "description": "The maximum number of retry attempts before the verification is marked as failed",
                        "format": "int32",
                        "readOnly": true,
                        "example": 4
                    }
                },
                "description": "A one-time password verification."
            },
            "VerifyVoiceotpVerification_2.0": {
                "required": [
                    "otp"
                ],
                "type": "object",
                "properties": {
                    "otp": {
                        "type": "string",
                        "description": "The one-time password value",
                        "example": "123456"
                    }
                },
                "description": "A voice one-time password verification attempt."
            },
            "DiscoveredRP_2.0": {
                "required": [
                    "assertionOptionsPath",
                    "assertionResultPath",
                    "attestationOptionsPath",
                    "attestationResultPath",
                    "displayName",
                    "id",
                    "origins",
                    "rpId"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The issued relying party identifier",
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "rpId": {
                        "type": "string",
                        "description": "The relying party FIDO2 identifier",
                        "example": "fido.example.com"
                    },
                    "origins": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The origins that are considered valid under the relying party identifier",
                        "items": {
                            "type": "string"
                        }
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The relying party friendly name",
                        "example": "My Relying Party"
                    },
                    "attestationOptionsPath": {
                        "type": "string",
                        "description": "The registration initiation endpoint",
                        "example": "/v2.0/factors/fido2/relyingparties/1e5fa156-3754-4265-8796-1a2f0a6f036f/attestation/options"
                    },
                    "attestationResultPath": {
                        "type": "string",
                        "description": "The registration completion endpoint",
                        "example": "/v2.0/factors/fido2/relyingparties/1e5fa156-3754-4265-8796-1a2f0a6f036f/attestation/result"
                    },
                    "assertionOptionsPath": {
                        "type": "string",
                        "description": "The authentication initiation endpoint",
                        "example": "/v2.0/factors/fido2/relyingparties/1e5fa156-3754-4265-8796-1a2f0a6f036f/assertion/options"
                    },
                    "assertionResultPath": {
                        "type": "string",
                        "description": "The authentication completion endpoint",
                        "example": "/v2.0/factors/fido/relyingparties/1e5fa156-3754-4265-8796-1a2f0a6f036f/assertion/result"
                    }
                },
                "description": "The details of a given relying party."
            },
            "Authenticators": {
                "required": [
                    "authenticators"
                ],
                "type": "object",
                "properties": {
                    "authenticators": {
                        "type": "array",
                        "description": "The list of authenticator registrations",
                        "items": {
                            "$ref": "#/components/schemas/Authenticator"
                        }
                    }
                },
                "description": "The list of authenticator registrations."
            },
            "QuestionAnswer_2.0": {
                "required": [
                    "questionKey"
                ],
                "type": "object",
                "properties": {
                    "questionKey": {
                        "type": "string",
                        "description": "The question identifier key",
                        "readOnly": true,
                        "example": "mothersMaidenName"
                    },
                    "answer": {
                        "type": "string",
                        "description": "The question answer",
                        "example": "smith"
                    }
                },
                "description": "A knowledge questions question."
            },
            "Discoverable_2.0": {
                "required": [
                    "enabled",
                    "path"
                ],
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "The endpoint path of the authentication factor",
                        "readOnly": true,
                        "example": "/v2.0/factors/<type>"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the authentication factor",
                        "example": true
                    }
                },
                "description": "The availability of an authentication factor."
            },
            "VerifiableLinksDigitalAssetLinksConfiguration": {
                "type": "object",
                "properties": {
                    "relation": {
                        "type": "array",
                        "description": "A list of strings that defines the relation rules for how URLs are handled on this domain",
                        "example": "delegate_permission/common.handle_all_urls",
                        "items": {
                            "type": "string"
                        }
                    },
                    "target": {
                        "$ref": "#/components/schemas/VerifiableLinksDigitalAssetLinksTarget"
                    }
                }
            },
            "AttestationOptionsResponse_2.0": {
                "required": [
                    "challenge",
                    "excludeCredentials",
                    "pubKeyCredParams",
                    "rp",
                    "timeout",
                    "user"
                ],
                "type": "object",
                "properties": {
                    "attestation": {
                        "type": "string",
                        "description": "The attestation requirements of this registration",
                        "example": "none"
                    },
                    "authenticatorSelection": {
                        "$ref": "#/components/schemas/AuthenticatorSelection_2.0"
                    },
                    "pubKeyCredParams": {
                        "type": "array",
                        "description": "The valid public key formats in this attestation",
                        "items": {
                            "$ref": "#/components/schemas/Fido2PublicKeyParams"
                        }
                    },
                    "excludeCredentials": {
                        "type": "array",
                        "description": "The credentials that must not be used for this registration",
                        "items": {
                            "$ref": "#/components/schemas/FidoCredential_2.0"
                        }
                    },
                    "challenge": {
                        "type": "string",
                        "description": "The unique challenge that is used as part of this registration attempt",
                        "example": "Q29uZ3JhdHVsYXRpb25zIFlvdSBmb3VuZCBpdAo"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "How long the WebAuthn client should wait for the user before timing out",
                        "format": "int64",
                        "example": 30000
                    },
                    "user": {
                        "$ref": "#/components/schemas/FidoUser_2.0"
                    },
                    "rp": {
                        "$ref": "#/components/schemas/RelyingParty_2.0"
                    },
                    "extensions": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/JsonValue"
                        },
                        "description": "Additional parameters requesting additional processing by the client and authenticator"
                    }
                },
                "description": "A set of attestation options."
            },
            "PwdvaultConfiguration": {
                "required": [
                    "enabled",
                    "publicKey",
                    "resources"
                ],
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the password vault",
                        "example": true
                    },
                    "publicKey": {
                        "$ref": "#/components/schemas/PwdvaultPublicKey"
                    },
                    "resources": {
                        "type": "array",
                        "description": "The list of configured resources",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "The password vault configuration."
            },
            "AuthenticatorSelection_2.0": {
                "type": "object",
                "properties": {
                    "authenticatorAttachment": {
                        "type": "string",
                        "description": "The sort of authenticator attachment that is allowed",
                        "example": "cross-platform"
                    },
                    "residentKey": {
                        "type": "string",
                        "description": "Specifies the extent to which the Relying Party desires to create a client-side discoverable credential",
                        "example": "preferred",
                        "enum": [
                            "discouraged",
                            "preferred",
                            "required"
                        ]
                    },
                    "requireResidentKey": {
                        "type": "boolean",
                        "description": "Whether registration requires a resident key"
                    },
                    "userVerification": {
                        "type": "string",
                        "description": "The extent to which the user must verify",
                        "example": "preferred"
                    }
                }
            },
            "VoiceotpConfiguration_2.0": {
                "required": [
                    "charset",
                    "enabled",
                    "expiry",
                    "length",
                    "retries"
                ],
                "type": "object",
                "properties": {
                    "charset": {
                        "type": "string",
                        "description": "The allowed alphanumeric character set for one-time password generation. Only uppercase letters are supported",
                        "example": "0123456789"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of voice one-time password to be used in runtime flows",
                        "example": true
                    },
                    "expiry": {
                        "maximum": 1800,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The number of seconds until the one-time password expires",
                        "format": "int32",
                        "example": 300
                    },
                    "length": {
                        "maximum": 20,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The length of the one-time password",
                        "format": "int32",
                        "example": 6
                    },
                    "retries": {
                        "maximum": 10,
                        "minimum": 0,
                        "type": "integer",
                        "description": "The number of retry attempts before the verification is marked as failed",
                        "format": "int32",
                        "example": 2
                    }
                },
                "description": "The voice one-time password configuration."
            },
            "AttestationResultRequest_2.0": {
                "required": [
                    "id",
                    "nickname",
                    "rawId",
                    "response",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "response": {
                        "$ref": "#/components/schemas/AttestationResultRequestResponse_2.0"
                    },
                    "id": {
                        "type": "string",
                        "description": "The credential identifier that is received from the WebAuthn client",
                        "example": "VGhpcyBpcyBhbiBJRAo="
                    },
                    "nickname": {
                        "type": "string",
                        "description": "The friendly name for the registration",
                        "example": "Jessica's FIDO key"
                    },
                    "rawId": {
                        "type": "string",
                        "description": "The credential identifier that is received from the WebAuthn client",
                        "example": "VGhpcyBpcyBhbiBJRAo="
                    },
                    "type": {
                        "type": "string",
                        "description": "The credential type. It must be 'public-key' for FIDO",
                        "example": "public-key"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the enrollment to be used in runtime flows",
                        "example": true
                    },
                    "getTransports": {
                        "type": "array",
                        "description": "The transports supported by the authenticator",
                        "items": {
                            "type": "string"
                        }
                    },
                    "getClientExtensionResults": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "The results of processing client extensions requested by the Relying Party"
                    },
                    "authenticatorAttachment": {
                        "type": "string",
                        "description": "The authenticator's attachment modality",
                        "example": "platform"
                    }
                }
            },
            "CreateFidoRelyingPartyConfig_2.0": {
                "required": [
                    "metadataConfig",
                    "name",
                    "origins",
                    "rpId"
                ],
                "type": "object",
                "properties": {
                    "rpId": {
                        "type": "string",
                        "description": "The FIDO relying party identifier",
                        "example": "fido.ice.ibm.com"
                    },
                    "origins": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The origins that are considered valid under the relying party identifier",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The friendly name for the relying party",
                        "example": "Cloud Relying Party"
                    },
                    "allowedAttestationFormats": {
                        "type": "array",
                        "description": "The attestation formats that are accepted by this relying party",
                        "items": {
                            "type": "string",
                            "enum": [
                                "PACKED",
                                "TPM",
                                "FIDO_U2F",
                                "ANDROID_SAFETYNET",
                                "ANDROID_KEY",
                                "NONE",
                                "APPLE"
                            ]
                        }
                    },
                    "allowedAttestationTypes": {
                        "type": "array",
                        "description": "The attestation types that are accepted by this relying party",
                        "items": {
                            "type": "string",
                            "enum": [
                                "BASIC",
                                "ATTCA",
                                "SELF",
                                "ANONCA",
                                "NONE"
                            ]
                        }
                    },
                    "metadataConfig": {
                        "$ref": "#/components/schemas/FidoRpMetadataConfig_2.0"
                    },
                    "pubKeyCredParams": {
                        "type": "array",
                        "description": "An ordered list of valid public key formats presented at registration",
                        "items": {
                            "$ref": "#/components/schemas/PublicKeyCredParams"
                        }
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether this relying party is available for use at runtime",
                        "example": true
                    },
                    "webAuthn": {
                        "type": "boolean",
                        "description": "Is this relying party enforcing strict WebAuthn",
                        "example": true
                    },
                    "attestationCredProtect": {
                        "type": "string",
                        "description": "The default credProtect option enforced for attestations",
                        "example": "userVerificationOptional",
                        "enum": [
                            "none",
                            "userVerificationOptional",
                            "userVerificationOptionalWithCredentialIDList",
                            "userVerificationRequired"
                        ]
                    }
                },
                "description": "A configured FIDO relying party creation request."
            },
            "FidoRpMetadataConfig_2.0": {
                "required": [
                    "enforcement",
                    "includeAll",
                    "includedMetadata",
                    "includedMetadataServices"
                ],
                "type": "object",
                "properties": {
                    "enforcement": {
                        "type": "boolean",
                        "description": "Specifies whether matching and valid metadata is required when verifying attestations",
                        "example": true
                    },
                    "includeAll": {
                        "type": "boolean",
                        "description": "Specifies whether all the available metadata is included when enumerating metadata for a match",
                        "example": true
                    },
                    "includedMetadata": {
                        "type": "array",
                        "description": "A list of metadata identifiers to be included when looking for metadata. The attribute is ignored if all metadata is included",
                        "items": {
                            "type": "string"
                        }
                    },
                    "includedMetadataServices": {
                        "type": "array",
                        "description": "A list of metadata service identifiers to be included when looking for metadata. The attribute is ignored if all metadata is included",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "The metadata settings for a FIDO relying party."
            },
            "PwdvaultPublicKey": {
                "required": [
                    "id",
                    "key"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The identifier for the public key",
                        "example": "mykey"
                    },
                    "key": {
                        "type": "string",
                        "description": "The public key which is used to protect the passwords",
                        "example": "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwFd794Bjt...\n-----END PUBLIC KEY-----"
                    }
                },
                "description": "The public key configuration for the password vault."
            },
            "Authenticator": {
                "required": [
                    "attributes",
                    "clientId",
                    "creationTime",
                    "enabled",
                    "id",
                    "owner",
                    "state"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the registration",
                        "readOnly": true,
                        "example": "7b676daa-8725-472d-a7f2-88f05c0b798b"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The unique identifier of the owner of the registration",
                        "readOnly": true,
                        "example": "50TPV1B8Q9"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "The time at which this registration was created",
                        "readOnly": true,
                        "example": "2018-04-19T09:21:38.414Z"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The unique identifier of the authenticator client associated with the registration",
                        "readOnly": true,
                        "example": "64f20377-6041-47ec-a47f-d9bd0a5095e7"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the registration to be used for runtime flows",
                        "example": true
                    },
                    "state": {
                        "type": "string",
                        "description": "The overall state of the authenticator registration. After initial registration, the state will be ENROLLING. The ENROLLING state is the only state in which a registration may enroll in authentication methods. The value will change from ENROLLING to ACTIVE after the first registration refresh",
                        "readOnly": true,
                        "example": "ACTIVE"
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/AuthenticatorAttributes"
                    }
                },
                "description": "The JSON representation of an authenticator registration."
            },
            "SubType": {
                "required": [
                    "algorithm",
                    "enabled",
                    "supportedAlgorithms"
                ],
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the authentication method subtype to be used for runtime flows",
                        "example": true
                    },
                    "algorithm": {
                        "type": "string",
                        "description": "The preferred cryptographic key generation algorithm",
                        "example": "RSASHA256"
                    },
                    "supportedAlgorithms": {
                        "type": "array",
                        "description": "List of supported cryptographic key generation algorithms",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "EnrollSignatureMethodFailedResponse": {
                "required": [
                    "messageDescription",
                    "messageId",
                    "requestObject"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIBH1234X"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "Requester locale specific descriptive message.",
                        "example": "CSIBH1234X The access token included in the request is not valid."
                    },
                    "requestObject": {
                        "$ref": "#/components/schemas/EnrollSignatureMethod"
                    }
                },
                "description": "The JSON representation of a failed signature enrollment."
            },
            "CreateEmailRecovery_2.0": {
                "required": [
                    "userId"
                ],
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier of the associated user",
                        "example": "50CP15KFD3"
                    },
                    "baseVerificationUrl": {
                        "type": "string",
                        "description": "The base URL of the password reset URL that will be sent to the user in email. The recovery code will be appended to this URL in the email as a query parameter.",
                        "example": "https://tenant/authsvc/mtfim/sps/authsvc"
                    },
                    "themeId": {
                        "type": "string",
                        "description": "The ID of the theme template to be applied to the email.",
                        "example": "covg2ivod6ml8xwl"
                    }
                },
                "description": "The creation data of email-based password recovery."
            },
            "NotImplemented": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "readOnly": true,
                        "example": "CSIXX1234X"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message",
                        "readOnly": true,
                        "example": "Access to the requested resource is disabled"
                    }
                },
                "description": "The message response to the request."
            },
            "FulfillVerification": {
                "required": [
                    "id",
                    "userAction"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the authentication method enrollment",
                        "example": "f867dceb-a360-44f4-883f-70723272d27f"
                    },
                    "userAction": {
                        "type": "string",
                        "description": "The user wishes to complete the transaction with one of the following state changes:<br> CANCELED - The transaction has been cancelled by the end user or administrator,<br> USER_DENIED - The user has denied or rejected the transaction using the authenticator,<br> USER_FRAUDULENT - The user has denied the transaction using the authenticator and marked it as fraudulent,<br> BIOMETRY_FAILED - The user attempted to verify the transaction but biometry authentication failed,<br> VERIFY_ATTEMPT - The user wishes to attempt to verify the transaction. The request MUST also include a value for 'signedData'.<br>Support values",
                        "example": "VERIFY_ATTEMPT",
                        "enum": [
                            "CANCELED",
                            "USER_DENIED",
                            "USER_FRAUDULENT",
                            "BIOMETRY_FAILED",
                            "VERIFY_ATTEMPT"
                        ]
                    },
                    "signedData": {
                        "type": "string",
                        "description": "The base64 encoded value of the data as a result of signing the 'transactionData' with the private key created for this enrollment. This is required when 'userAction' is VERIFY_ATTEMPT",
                        "example": "563r324F3214=="
                    }
                },
                "description": "The JSON representation of a verification attempt."
            },
            "Conflict": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier",
                        "readOnly": true,
                        "example": "CSIXX1234X"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message",
                        "readOnly": true,
                        "example": "The request could not be processed due to a conflict"
                    }
                },
                "description": "The message response to the request."
            },
            "QuestionKey_2.0": {
                "required": [
                    "questionKey"
                ],
                "type": "object",
                "properties": {
                    "questionKey": {
                        "type": "string",
                        "description": "The question identifier key",
                        "readOnly": true,
                        "example": "mothersMaidenName"
                    }
                },
                "description": "A knowledge question."
            },
            "PushNotification": {
                "required": [
                    "completionTime",
                    "message",
                    "pushToken",
                    "send",
                    "sendState",
                    "startTime"
                ],
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The context message sent in the push notification. This message should not contain any sensitve information. This message is displayed as the notification message when it arrives at the device",
                        "example": "You have a pending authentication challenge"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title message sent in the push notification. This message should not contain any sensitve information. This message is displayed as the notification title when it arrives at the device",
                        "example": "IBM Verify"
                    },
                    "send": {
                        "type": "boolean",
                        "description": "If false, a push notification will not be sent to the registered authenticator",
                        "example": true
                    },
                    "sendState": {
                        "type": "string",
                        "description": "The status of delivery of the push notification. Support values",
                        "example": "SENDING",
                        "enum": [
                            "SENDING",
                            "SUCCESS",
                            "FAILED",
                            "DISABLED"
                        ]
                    },
                    "pushToken": {
                        "type": "string",
                        "description": "The push token used as the 'send to' device destination identifier",
                        "example": "5fw75HqyXnivkpmb%3AudWNSI7s"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "The time at which the sending of the notification attempt commenced",
                        "example": "2018-04-19T09:21:38.414Z"
                    },
                    "completionTime": {
                        "type": "string",
                        "description": "The time at which the sending of the notification attempt concluded",
                        "example": "2018-04-19T09:21:38.414Z"
                    }
                },
                "description": "The JSON representation of the push notifications attributes."
            },
            "AllEnrollments_2.0": {
                "required": [
                    "count",
                    "factors",
                    "limit",
                    "page",
                    "total"
                ],
                "type": "object",
                "properties": {
                    "factors": {
                        "type": "array",
                        "description": "The list of authentication factor enrollments",
                        "items": {
                            "$ref": "#/components/schemas/Enrollment_2.0"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "description": "The total number of results that are returned per page",
                        "format": "int32",
                        "example": 200
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The total number of results that are returned per page",
                        "format": "int32",
                        "example": 200
                    },
                    "page": {
                        "type": "integer",
                        "description": "The requested page, or the offset",
                        "format": "int32",
                        "example": 1
                    },
                    "total": {
                        "type": "integer",
                        "description": "The number of results returned in the page",
                        "format": "int32",
                        "example": 153
                    }
                },
                "description": "The list of authentication factor enrollments."
            },
            "QuestionsEnrollment_2.0": {
                "required": [
                    "attributes",
                    "created",
                    "enabled",
                    "id",
                    "references",
                    "type",
                    "updated",
                    "userId",
                    "validated"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the enrollment",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier of the associated user",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of authentication factor enrollment",
                        "readOnly": true,
                        "example": "<type>"
                    },
                    "created": {
                        "type": "string",
                        "description": "The creation time of the enrollment",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The time the enrollment was last updated",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "attempted": {
                        "type": "string",
                        "description": "The time the enrollment was last used for verification",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the enrollment to be used in runtime flows",
                        "example": true
                    },
                    "validated": {
                        "type": "boolean",
                        "description": "The validation state of the enrollment",
                        "readOnly": true,
                        "example": true
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/QuestionsEnrollmentAttributes_2.0"
                    },
                    "references": {
                        "$ref": "#/components/schemas/QuestionsEnrollmentIndvReferences_2.0"
                    }
                },
                "description": "A knowledge questions enrollment."
            },
            "CreateVoiceotpTransient_2.0": {
                "required": [
                    "phoneNumber"
                ],
                "type": "object",
                "properties": {
                    "correlation": {
                        "type": "string",
                        "description": "A value to be associated with the verification. It will be prefixed to the one-time password in the phone call to be sent.",
                        "example": "4567"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "The phone number to be used to deliver one-time password values",
                        "example": "+15345678911"
                    }
                },
                "description": "The creation data for a voice one-time password verification."
            },
            "KnowledgeQuestionsVerificationsConfig_2.0": {
                "required": [
                    "expiry",
                    "requiredAnswers"
                ],
                "type": "object",
                "properties": {
                    "expiry": {
                        "maximum": 300,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The number of seconds until the verification expires",
                        "format": "int32",
                        "example": 120
                    },
                    "requiredAnswers": {
                        "minimum": 1,
                        "type": "integer",
                        "description": "The number of answers that are required",
                        "format": "int32",
                        "example": 3
                    }
                },
                "description": "The verification-specific configuration options for knowledge questions"
            },
            "FidoAllMetadataServices_2.0": {
                "required": [
                    "mds"
                ],
                "type": "object",
                "properties": {
                    "mds": {
                        "type": "array",
                        "description": "The list of FIDO metadata service entries",
                        "items": {
                            "$ref": "#/components/schemas/FidoMetadataService_2.0"
                        }
                    }
                },
                "description": "The list of FIDO metadata service entries."
            },
            "IdentitySourceResponse": {
                "required": [
                    "id",
                    "location",
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the identity source",
                        "example": "bd45bba8-a1d4-4de2-bc80-be2855589363"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the identity source",
                        "example": "My Identity Source"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the identity source. Supported values =",
                        "example": "maasconnect",
                        "enum": [
                            "maasconnect",
                            "ibmldap",
                            "onpremldap"
                        ]
                    },
                    "location": {
                        "type": "string",
                        "description": "The URL of the identity source",
                        "example": "https://tenant.ice.ibmcloud.com/verify/v1.0/authnmethods/password/bd45bba8-a1d4-4de2-bc80-be2855589363"
                    }
                }
            },
            "MfaProvidersResult": {
                "required": [
                    "capability",
                    "created",
                    "id",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "The associated enrollment attribute as a key-value pair"
                    },
                    "capability": {
                        "type": "string",
                        "description": "The external MFA provider authentication capability",
                        "readOnly": true,
                        "example": "duo:push"
                    },
                    "id": {
                        "type": "string",
                        "description": "The external MFA provider enrollment identifier",
                        "readOnly": true,
                        "example": "59ccdb55-0103-4498-8dc6-3fda9deebe25"
                    },
                    "transactionId": {
                        "type": "string",
                        "description": "The action transation identifier",
                        "readOnly": true,
                        "example": "d24e3904-02aa-430b-b4fb-92cec8c643fd"
                    },
                    "created": {
                        "type": "string",
                        "description": "The time when the action was created",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The time when the action was last updated",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "message": {
                        "type": "string",
                        "description": "The associated message from the external MFA provider",
                        "readOnly": true,
                        "example": " "
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the action",
                        "readOnly": true,
                        "example": "PENDING",
                        "enum": [
                            "PENDING",
                            "TIMEOUT",
                            "CANCELED",
                            "FAILED",
                            "SUCCESS"
                        ]
                    },
                    "assertion": {
                        "type": "string",
                        "description": "A JWT which serves as proof that this factor has been performed",
                        "readOnly": true
                    }
                },
                "description": "The external MFA providers result."
            },
            "VerifiableLinksAppSiteAssociationApplinks": {
                "required": [
                    "details"
                ],
                "type": "object",
                "properties": {
                    "details": {
                        "type": "array",
                        "description": "The list of applications and the supported verifiable links for the domain.",
                        "items": {
                            "$ref": "#/components/schemas/VerifiableLinksAppSiteAssociationDetails"
                        }
                    },
                    "defaults": {
                        "$ref": "#/components/schemas/VerifiableLinksAppSiteAssociationComponent"
                    },
                    "substitutionVariables": {
                        "type": "object",
                        "properties": {},
                        "description": "The default configuration that will manage verifiable links pattern matching."
                    }
                }
            },
            "SmsotpTransient_2.0": {
                "required": [
                    "attempts",
                    "correlation",
                    "created",
                    "expiry",
                    "id",
                    "phoneNumber",
                    "retries",
                    "state",
                    "type",
                    "updated"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the verification",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of authentication factor enrollment",
                        "readOnly": true,
                        "example": "smsotp"
                    },
                    "created": {
                        "type": "string",
                        "description": "The time when the verification was created",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The time when the verification was last updated",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "expiry": {
                        "type": "string",
                        "description": "The time when the verification expires",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the verification",
                        "readOnly": true,
                        "example": "PENDING",
                        "enum": [
                            "PENDING",
                            "TIMEOUT",
                            "CANCELED",
                            "FAILED",
                            "SUCCESS"
                        ]
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The identifier of the user that last updated the verification",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "correlation": {
                        "type": "string",
                        "description": "A value to be associated with the verification. It will be prefixed to the one-time password in the SMS to be sent.",
                        "readOnly": true,
                        "example": "4567"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "The phone number to be used to deliver one-time password values",
                        "readOnly": true,
                        "example": "+15345678911"
                    },
                    "attempts": {
                        "type": "integer",
                        "description": "The number of attempts that have been made against the verification",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0
                    },
                    "retries": {
                        "type": "integer",
                        "description": "The maximum number of retry attempts before the verification is marked as failed",
                        "format": "int32",
                        "readOnly": true,
                        "example": 4
                    }
                },
                "description": "A transient SMS one-time password verification."
            },
            "VerifyEmailRecovery_2.0": {
                "required": [
                    "code"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "The code that was provided when initiating the recovery flow.",
                        "example": "befb3cae91484c1dbd8aa8dd7d7bbc88"
                    }
                },
                "description": "A password recovery transaction verification attempt."
            },
            "QuestionsVerification_2.0": {
                "required": [
                    "created",
                    "expiry",
                    "id",
                    "questions",
                    "state",
                    "type",
                    "updated",
                    "userId"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the verification",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier of the associated user",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of authentication factor",
                        "readOnly": true,
                        "example": "<type>"
                    },
                    "created": {
                        "type": "string",
                        "description": "The time when the verification was created",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The time when the verification was last updated",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "expiry": {
                        "type": "string",
                        "description": "The time when the verification expires",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the verification",
                        "readOnly": true,
                        "example": "PENDING",
                        "enum": [
                            "PENDING",
                            "TIMEOUT",
                            "CANCELED",
                            "FAILED",
                            "SUCCESS"
                        ]
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The identifier of the user that last updated the verification",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "questions": {
                        "type": "array",
                        "description": "The list of verification question challenges",
                        "items": {
                            "$ref": "#/components/schemas/QuestionQuestion_2.0"
                        }
                    }
                },
                "description": "A knowledge questions verification."
            },
            "GetSignatureMethodResponse": {
                "required": [
                    "attributes",
                    "creationTime",
                    "enabled",
                    "enrollmentUri",
                    "id",
                    "methodType",
                    "owner",
                    "subType",
                    "validated"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the enrollment",
                        "readOnly": true,
                        "example": "f867dceb-a360-44f4-883f-70723272d27f"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The unique identifier of the owner of the enrollment",
                        "readOnly": true,
                        "example": "50TPV1B8Q9"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "The time at which this enrollment was created",
                        "readOnly": true,
                        "example": "2018-04-19T09:21:38.414Z"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the enrollment to be used for runtime flows",
                        "example": false
                    },
                    "enrollmentUri": {
                        "type": "string",
                        "description": "The location of the enrollment",
                        "readOnly": true,
                        "example": "https://tenant.ice.ibmcloud.com/v1.0/authnmethods/signature/{id}"
                    },
                    "methodType": {
                        "type": "string",
                        "description": "The type of authentication method",
                        "readOnly": true,
                        "example": "signature"
                    },
                    "subType": {
                        "type": "string",
                        "description": "The specific sub-type of the enrollment. Support values",
                        "readOnly": true,
                        "example": "fingerprint",
                        "enum": [
                            "userPresence",
                            "fingerprint",
                            "face"
                        ]
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/SignatureAttributes"
                    },
                    "_embedded": {
                        "$ref": "#/components/schemas/Authenticator"
                    },
                    "validated": {
                        "type": "boolean",
                        "description": "The validated attribute of the signature factor enromment",
                        "example": false
                    }
                },
                "description": "A specific signature authentication method enrollment."
            },
            "AssertionOptionsResponse_2.0": {
                "required": [
                    "challenge",
                    "rpId",
                    "timeout"
                ],
                "type": "object",
                "properties": {
                    "rpId": {
                        "type": "string",
                        "description": "The relying party ID",
                        "example": "fido.verify.ibm.com"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "The time for the client to wait for user interaction",
                        "format": "int64",
                        "example": 30000
                    },
                    "challenge": {
                        "type": "string",
                        "description": "The unique challenge used as part of this authentication attempt",
                        "example": "Q29uZ3JhdHVsYXRpb25zIFlvdSBmb3VuZCBpdAo"
                    },
                    "allowCredentials": {
                        "type": "array",
                        "description": "The credentials allowed to perform authentication. Can be empty when performing login without a username",
                        "items": {
                            "$ref": "#/components/schemas/FidoCredential_2.0"
                        }
                    },
                    "userVerification": {
                        "type": "string",
                        "description": "The extent to which the user must verify",
                        "example": "preferred"
                    },
                    "extensions": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/JsonValue"
                        },
                        "description": "Additional parameters requesting additional processing by the client and authenticator"
                    }
                }
            },
            "InitiateVerification": {
                "required": [
                    "authenticationMethods",
                    "expiresIn",
                    "logic",
                    "pushNotification",
                    "transactionData"
                ],
                "type": "object",
                "properties": {
                    "transactionData": {
                        "$ref": "#/components/schemas/TransactionData"
                    },
                    "pushNotification": {
                        "$ref": "#/components/schemas/InitiatePushNotification"
                    },
                    "authenticationMethods": {
                        "type": "array",
                        "description": "The authentication methods allowed for the transaction",
                        "items": {
                            "$ref": "#/components/schemas/InitiateAuthenticationMethod"
                        }
                    },
                    "logic": {
                        "type": "string",
                        "description": "The logical operator to apply to the list of authentication methods",
                        "example": "OR"
                    },
                    "expiresIn": {
                        "type": "integer",
                        "description": "The length of time, in seconds, the transaction will be valid",
                        "format": "int32",
                        "example": 120
                    }
                },
                "description": "The JSON representation of the request data to initiate a verification transaction."
            },
            "DiscoverableFido2_2.0": {
                "required": [
                    "enabled",
                    "path",
                    "relyingParties"
                ],
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "The endpoint path of the authentication factor",
                        "example": "/v2.0/factors/fido2"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the authentication factor",
                        "example": true
                    },
                    "relyingParties": {
                        "type": "array",
                        "description": "A collection of relying parties available for use",
                        "items": {
                            "$ref": "#/components/schemas/DiscoveredRP_2.0"
                        }
                    }
                },
                "description": "The availability of FIDO2."
            },
            "QrConfiguration_2.0": {
                "required": [
                    "dsi",
                    "enabled",
                    "expiry",
                    "lsi"
                ],
                "type": "object",
                "properties": {
                    "lsi": {
                        "$ref": "#/components/schemas/ServiceIndexOptions_2.0"
                    },
                    "dsi": {
                        "$ref": "#/components/schemas/ServiceIndexOptions_2.0"
                    },
                    "expiry": {
                        "maximum": 1800,
                        "minimum": 30,
                        "type": "integer",
                        "description": "The number of seconds until the code expires",
                        "format": "int32",
                        "example": 120
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of QR code login to be used in runtime flows",
                        "example": true
                    }
                },
                "description": "The QR code login configuration options."
            },
            "VerifyEmailotpVerification_2.0": {
                "required": [
                    "otp"
                ],
                "type": "object",
                "properties": {
                    "otp": {
                        "type": "string",
                        "description": "The one-time password value",
                        "example": "123456"
                    }
                },
                "description": "A email one-time password verification attempt."
            },
            "SmsotpEnrollment_2.0": {
                "required": [
                    "attributes",
                    "created",
                    "enabled",
                    "id",
                    "type",
                    "updated",
                    "userId",
                    "validated"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the enrollment",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier of the associated user",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of authentication factor enrollment",
                        "readOnly": true,
                        "example": "smsotp"
                    },
                    "created": {
                        "type": "string",
                        "description": "The creation time of the enrollment",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The time the enrollment was last updated",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "attempted": {
                        "type": "string",
                        "description": "The time the enrollment was last used for verification",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the enrollment to be used in runtime flows",
                        "example": true
                    },
                    "validated": {
                        "type": "boolean",
                        "description": "The validation state of the enrollment",
                        "readOnly": true,
                        "example": true
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/SmsotpEnrollmentAttributes_2.0"
                    }
                },
                "description": "A SMS one-time password enrollment."
            },
            "EmailotpConfiguration_2.0": {
                "required": [
                    "charset",
                    "enabled",
                    "expiry",
                    "length",
                    "retries"
                ],
                "type": "object",
                "properties": {
                    "charset": {
                        "type": "string",
                        "description": "The allowed alphanumeric character set for one-time password generation",
                        "example": "0123456789"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of email one-time password to be used in runtime flows",
                        "example": true
                    },
                    "expiry": {
                        "maximum": 1800,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The number of seconds until the one-time password expires",
                        "format": "int32",
                        "example": 300
                    },
                    "length": {
                        "maximum": 20,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The length of the one-time password",
                        "format": "int32",
                        "example": 6
                    },
                    "retries": {
                        "maximum": 10,
                        "minimum": 0,
                        "type": "integer",
                        "description": "The number of retry attempts before the verification is marked as failed",
                        "format": "int32",
                        "example": 2
                    },
                    "allowlist": {
                        "type": "array",
                        "description": "The list of email domains that are to be allowed. Supported entries can be defined as literal strings and/or regex patterns.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "denylist": {
                        "type": "array",
                        "description": "The list of email domains that are to be denied. Supported entries can be defined as literal strings and/or regex patterns.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "The email one-time password configuration."
            },
            "EmailRecovery": {
                "required": [
                    "attempts",
                    "baseVerificationUrl",
                    "created",
                    "id",
                    "state",
                    "type",
                    "updated",
                    "userId"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of this instance",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier of the associated user",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "created": {
                        "type": "string",
                        "description": "The time when the verification was created",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The time when the verification was last updated",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "expiry": {
                        "type": "string",
                        "description": "The time when the verification expires",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the verification",
                        "readOnly": true,
                        "example": "PENDING",
                        "enum": [
                            "PENDING",
                            "TIMEOUT",
                            "CANCELED",
                            "FAILED",
                            "SUCCESS"
                        ]
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The identifier of the user that last updated the verification",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "baseVerificationUrl": {
                        "type": "string",
                        "description": "The base URL of the password reset URL that will be sent to the user in email. The recovery code will be appended to this URL in the email as a query parameter.",
                        "readOnly": true,
                        "example": "https://hostname/authsvc/mtfim/sps/authsvc?PolicyId=urn:ibm:security:authentication:asf:forgotpassword&stage=reset"
                    },
                    "themeId": {
                        "type": "string",
                        "description": "The identifier of the theme template to be applied to the email",
                        "readOnly": true,
                        "example": "covg2ivod6ml8xwl"
                    },
                    "attempts": {
                        "type": "integer",
                        "description": "The number of times the reset password link has been accessed.",
                        "format": "int64",
                        "readOnly": true,
                        "example": 0
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of recovery",
                        "readOnly": true,
                        "example": "email"
                    }
                },
                "description": "The password recovery via email link."
            },
            "InterfaceVersion": {
                "required": [
                    "number",
                    "platform"
                ],
                "type": "object",
                "properties": {
                    "number": {
                        "type": "string",
                        "description": "The interface version number",
                        "readOnly": true,
                        "example": "1.0.1"
                    },
                    "platform": {
                        "type": "string",
                        "description": "The product platform identifier",
                        "readOnly": true,
                        "example": "com.ibm.security.access.verify"
                    }
                },
                "description": "The platform and interface version information."
            },
            "RecaptchaConfiguration": {
                "required": [
                    "id",
                    "name",
                    "references",
                    "secretKey",
                    "siteKey",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The identifier of the reCAPTCHA configuration",
                        "readOnly": true,
                        "example": "0ab4d7a1-a2ce-4430-8dea-471d341669f1"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the reCAPTCHA configuration",
                        "example": "reCAPTCHA"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The reCAPTCHA secret key",
                        "readOnly": true,
                        "example": "*******"
                    },
                    "siteKey": {
                        "type": "string",
                        "description": "The reCAPTCHA site key",
                        "readOnly": true,
                        "example": "*******"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of reCAPTCHA configuration",
                        "readOnly": true,
                        "example": "v3",
                        "enum": [
                            "v3"
                        ]
                    },
                    "references": {
                        "type": "array",
                        "description": "The list of entities referencing the configuration",
                        "items": {
                            "$ref": "#/components/schemas/RecaptchaConfigurationReference"
                        }
                    }
                },
                "description": "The reCAPTCHA configuration."
            },
            "MfaProvidersObject": {
                "required": [
                    "capability",
                    "id"
                ],
                "type": "object",
                "properties": {
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "The associated enrollment attribute as a key-value pair"
                    },
                    "capability": {
                        "type": "string",
                        "description": "The external MFA provider authentication capability",
                        "readOnly": true,
                        "example": "duo:push"
                    },
                    "id": {
                        "type": "string",
                        "description": "The external MFA provider enrollment identifier",
                        "readOnly": true,
                        "example": "59ccdb55-0103-4498-8dc6-3fda9deebe25"
                    }
                },
                "description": "The external MFA providers object."
            },
            "InitiateAuthenticator": {
                "required": [
                    "accountName",
                    "clientId"
                ],
                "type": "object",
                "properties": {
                    "owner": {
                        "type": "string",
                        "description": "The unique identifier of the owner who will own the registration. If not specified, the request owner will be owner of the registration",
                        "example": "50TPV1B8Q9"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The unique identifier of the authenticator client to be associated with the registration",
                        "example": "64f20377-6041-47ec-a47f-d9bd0a5095e7"
                    },
                    "accountName": {
                        "type": "string",
                        "description": "A user friendly name for the registration",
                        "example": "Savings Account"
                    }
                },
                "description": "The JSON representation of the request data to initiate an authenticator registration."
            },
            "FidoMetadata_2.0": {
                "required": [
                    "category",
                    "enabled",
                    "id",
                    "inUse",
                    "metadataStatement",
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the metadata entry",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "category": {
                        "type": "string",
                        "description": "The administrator-assigned category for the metadata entry",
                        "example": "Recommended"
                    },
                    "name": {
                        "type": "string",
                        "description": "The friendly name of the metadata entry",
                        "example": "Generic Key v5"
                    },
                    "metadataStatement": {
                        "type": "string",
                        "description": "The metadata statement. It is mutually exclusive with a certificate"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the metadata statement",
                        "enum": [
                            "FIDO2",
                            "YUBICO"
                        ]
                    },
                    "inUse": {
                        "type": "boolean",
                        "description": "This metadata entry is explicitly in use by any relying party",
                        "readOnly": true,
                        "example": false
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether this metadata is entry enabled. Disabled metadata is not used, regardless of whether it is referenced by a relying party",
                        "example": false
                    }
                },
                "description": "A FIDO metadata document."
            },
            "CreateOtpVerificationResponse_2.0": {
                "required": [
                    "attempts",
                    "correlation",
                    "created",
                    "expiry",
                    "id",
                    "otp",
                    "retries",
                    "state",
                    "type",
                    "updated"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the verification",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of authentication factor enrollment",
                        "readOnly": true,
                        "example": "otp"
                    },
                    "created": {
                        "type": "string",
                        "description": "The time when the verification was created",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The time when the verification was last updated",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "expiry": {
                        "type": "string",
                        "description": "The time when the verification expires",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the verification",
                        "readOnly": true,
                        "example": "PENDING",
                        "enum": [
                            "PENDING",
                            "TIMEOUT",
                            "CANCELED",
                            "FAILED",
                            "SUCCESS"
                        ]
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The identifier of the user that last updated the verification",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "correlation": {
                        "type": "string",
                        "description": "A value to be associated with the verification",
                        "readOnly": true,
                        "example": "4567"
                    },
                    "attempts": {
                        "type": "integer",
                        "description": "The number of attempts that have been made against the verification",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0
                    },
                    "retries": {
                        "type": "integer",
                        "description": "The maximum number of retry attempts before the verification is marked as failed",
                        "format": "int32",
                        "readOnly": true,
                        "example": 4
                    },
                    "otp": {
                        "type": "string",
                        "description": "The one-time password value",
                        "readOnly": true,
                        "example": "123456"
                    }
                },
                "description": "A one-time password verification."
            },
            "CreateEmailotpTransient_2.0": {
                "required": [
                    "emailAddress"
                ],
                "type": "object",
                "properties": {
                    "correlation": {
                        "type": "string",
                        "description": "A value to be associated with the verification. It will be prefixed to the one-time password in the email to be sent.",
                        "example": "4567"
                    },
                    "emailAddress": {
                        "type": "string",
                        "description": "The email address to be used to deliver one-time password values",
                        "example": "jessica@mail.com"
                    }
                },
                "description": "The creation data for a email one-time password verification."
            },
            "FidoRelyingParties_2.0": {
                "required": [
                    "relyingparties"
                ],
                "type": "object",
                "properties": {
                    "relyingparties": {
                        "type": "array",
                        "description": "The list of FIDO relying party configurations",
                        "items": {
                            "$ref": "#/components/schemas/FidoRelyingPartyConfig_2.0"
                        }
                    }
                },
                "description": "The list of FIDO relying parties."
            },
            "AuthenticatorMetadata": {
                "required": [
                    "authenticationMethods",
                    "customAttributes",
                    "registrationUri",
                    "serviceName"
                ],
                "type": "object",
                "properties": {
                    "serviceName": {
                        "type": "string",
                        "description": "The name of the tenant service",
                        "example": "Cloud Bank"
                    },
                    "customAttributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom defined attributes. Attribute keys and values are of string type"
                    },
                    "registrationUri": {
                        "type": "string",
                        "description": "The location of the registration endpoint",
                        "readOnly": true,
                        "example": "https://tenant.ice.ibmcloud.com/v1.0/authenticators/registration"
                    },
                    "authenticationMethods": {
                        "$ref": "#/components/schemas/AuthenticationMethods"
                    }
                },
                "description": "The metadata of a registration."
            },
            "VoiceotpTransient_2.0": {
                "required": [
                    "attempts",
                    "correlation",
                    "created",
                    "expiry",
                    "id",
                    "phoneNumber",
                    "retries",
                    "state",
                    "type",
                    "updated"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the verification",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of authentication factor enrollment",
                        "readOnly": true,
                        "example": "voiceotp"
                    },
                    "created": {
                        "type": "string",
                        "description": "The time when the verification was created",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The time when the verification was last updated",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "expiry": {
                        "type": "string",
                        "description": "The time when the verification expires",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the verification",
                        "readOnly": true,
                        "example": "PENDING",
                        "enum": [
                            "PENDING",
                            "TIMEOUT",
                            "CANCELED",
                            "FAILED",
                            "SUCCESS"
                        ]
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The identifier of the user that last updated the verification",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "correlation": {
                        "type": "string",
                        "description": "A value to be associated with the verification. It will be prefixed to the one-time password in the phone call to be sent.",
                        "readOnly": true,
                        "example": "4567"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "The phone number to be used to deliver one-time password values",
                        "readOnly": true,
                        "example": "+15345678911"
                    },
                    "attempts": {
                        "type": "integer",
                        "description": "The number of attempts that have been made against the verification",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0
                    },
                    "retries": {
                        "type": "integer",
                        "description": "The maximum number of retry attempts before the verification is marked as failed",
                        "format": "int32",
                        "readOnly": true,
                        "example": 4
                    }
                },
                "description": "A transient voice one-time password verification."
            },
            "Enrollment_2.0": {
                "required": [
                    "created",
                    "enabled",
                    "id",
                    "type",
                    "updated",
                    "userId",
                    "validated"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the enrollment",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier of the associated user",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of authentication factor enrollment",
                        "readOnly": true,
                        "example": "<type>"
                    },
                    "created": {
                        "type": "string",
                        "description": "The creation time of the enrollment",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The time the enrollment was last updated",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "attempted": {
                        "type": "string",
                        "description": "The time the enrollment was last used for verification",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the enrollment to be used in runtime flows",
                        "example": true
                    },
                    "validated": {
                        "type": "boolean",
                        "description": "The validation state of the enrollment",
                        "readOnly": true,
                        "example": true
                    }
                },
                "description": "An authentication factor enrollment."
            },
            "PasswordChange": {
                "required": [
                    "newPassword",
                    "oldPassword",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username to change password for",
                        "example": "jessica"
                    },
                    "oldPassword": {
                        "type": "string",
                        "description": "The current password",
                        "example": "Passw0rd"
                    },
                    "newPassword": {
                        "type": "string",
                        "description": "The new password to update to",
                        "example": "Passw0rd1"
                    }
                }
            },
            "AssertionOptionsRequest": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "The identifier of the end user that is performing this verification. If it is not provided, the context that was used for authorization is used.",
                        "example": "00010YE"
                    },
                    "userVerification": {
                        "type": "string",
                        "description": "The extent to which the user must verify",
                        "example": "preferred"
                    },
                    "extensions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Additional parameters requesting additional processing by the client and authenticator"
                    }
                },
                "description": "The options that are presented when initiating a FIDO 2.0 registration."
            },
            "KnowledgeQuestionsProfile_2.0": {
                "required": [
                    "enabled",
                    "enrollments",
                    "id",
                    "name",
                    "questions"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The configuration identifier",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "name": {
                        "type": "string",
                        "description": "The friendly configuration name",
                        "example": "default"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the configuration is enabled or not",
                        "example": true
                    },
                    "enrollments": {
                        "$ref": "#/components/schemas/QuestionsEnrollmentsProfile_2.0"
                    },
                    "questions": {
                        "type": "array",
                        "description": "The questions configured for use in this profile",
                        "items": {
                            "$ref": "#/components/schemas/QuestionQuestion_2.0"
                        }
                    }
                },
                "description": "The knowledge questions configuration options."
            },
            "SignatureAuthenticationMethod": {
                "required": [
                    "attributes",
                    "enabled",
                    "enrollmentUri"
                ],
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Indicates if the authentication method is enabled",
                        "readOnly": true,
                        "example": true
                    },
                    "enrollmentUri": {
                        "type": "string",
                        "description": "The location of the authentication method enrollment endpoint",
                        "readOnly": true,
                        "example": "https://tenant.ice.ibmcloud.com/v1.0/authnmethods/signature"
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/SignatureMethodAttributes"
                    }
                },
                "description": "The enrollment information for signature based authentication method."
            },
            "CreateQrVerificationResponse_2.0": {
                "required": [
                    "created",
                    "dsi",
                    "expiry",
                    "id",
                    "location",
                    "lsi",
                    "profileId",
                    "serviceName",
                    "state",
                    "tenant",
                    "type",
                    "updated"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the verification",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of authentication factor enrollment",
                        "readOnly": true,
                        "example": "qr"
                    },
                    "created": {
                        "type": "string",
                        "description": "The time when the verification was created",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The time when the verification was last updated",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "expiry": {
                        "type": "string",
                        "description": "The time when the verification expires",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the verification",
                        "readOnly": true,
                        "example": "PENDING",
                        "enum": [
                            "PENDING",
                            "TIMEOUT",
                            "CANCELED",
                            "FAILED",
                            "SUCCESS"
                        ]
                    },
                    "location": {
                        "type": "string",
                        "description": "The URL for this verification",
                        "readOnly": true,
                        "example": "/v2.0/factors/qr/1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "profileId": {
                        "type": "string",
                        "description": "The authenticator profile identifier. Verifications will need to be completed using an authenticator registration associated with this profile",
                        "readOnly": true,
                        "example": "ecb2bbbb-fd45-4ce9-957f-f18eaf65dfe8"
                    },
                    "serviceName": {
                        "type": "string",
                        "description": "The service name associated with the authenticator profile metadata",
                        "readOnly": true,
                        "example": "Cloud Security"
                    },
                    "tenant": {
                        "type": "string",
                        "description": "The name of the tenant",
                        "readOnly": true,
                        "example": "tenant.example.com"
                    },
                    "assertion": {
                        "type": "string",
                        "description": "A JWT which serves as proof that this factor has been performed",
                        "readOnly": true,
                        "example": "ey..."
                    },
                    "lsi": {
                        "type": "string",
                        "description": "The login service index to be used by the authenticator registration on subsequent verification attempt",
                        "readOnly": true,
                        "example": "vu6Jak84Uhv1MkFFjglRB00rm"
                    },
                    "dsi": {
                        "type": "string",
                        "description": "The device service index to be used for quering the completion state",
                        "readOnly": true,
                        "example": "vyRs27v4DWLaKixvuBmN9DxAR"
                    },
                    "qrCode": {
                        "type": "array",
                        "description": "A base64 encoded representation of the QR code",
                        "example": "iVBORw0KGgoAAA==",
                        "items": {
                            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                            "type": "string",
                            "format": "byte"
                        }
                    },
                    "openAppLoginUrl": {
                        "type": "string",
                        "description": "The verifiable link to be consumed by a mobile app to invoke the login without QR code",
                        "readOnly": true,
                        "example": "https://idaas.ice.ibmcloud.com/login?code=ABC123&..."
                    }
                },
                "description": "A QR code login verification creation response."
            },
            "EmailotpVerification_2.0": {
                "required": [
                    "attempts",
                    "correlation",
                    "created",
                    "emailAddress",
                    "expiry",
                    "id",
                    "retries",
                    "state",
                    "type",
                    "updated",
                    "userId"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the verification",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier of the associated user",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of authentication factor enrollment",
                        "readOnly": true,
                        "example": "emailotp"
                    },
                    "created": {
                        "type": "string",
                        "description": "The time when the verification was created",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The time when the verification was last updated",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "expiry": {
                        "type": "string",
                        "description": "The time when the verification expires",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the verification",
                        "readOnly": true,
                        "example": "PENDING",
                        "enum": [
                            "PENDING",
                            "TIMEOUT",
                            "CANCELED",
                            "FAILED",
                            "SUCCESS"
                        ]
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The identifier of the user that last updated the verification",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "correlation": {
                        "type": "string",
                        "description": "A value to be associated with the verification. It will be prefixed to the one-time password in the email to be sent.",
                        "readOnly": true,
                        "example": "4567"
                    },
                    "emailAddress": {
                        "type": "string",
                        "description": "The email address to be used to deliver one-time password values",
                        "readOnly": true,
                        "example": "jessica@mail.com"
                    },
                    "attempts": {
                        "type": "integer",
                        "description": "The number of attempts that have been made against the verification",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0
                    },
                    "retries": {
                        "type": "integer",
                        "description": "The maximum number of retry attempts before the verification is marked as failed",
                        "format": "int32",
                        "readOnly": true,
                        "example": 4
                    }
                },
                "description": "A email one-time password verification."
            },
            "MfaProvidersEntities": {
                "required": [
                    "capabilities"
                ],
                "type": "object",
                "properties": {
                    "capabilities": {
                        "type": "array",
                        "description": "The list of external MFA providers entities",
                        "items": {
                            "$ref": "#/components/schemas/MfaProvidersEntity"
                        }
                    }
                },
                "description": "The list of external MFA providers entities."
            },
            "VerifiableLinksDigitalAssetLinksTarget": {
                "required": [
                    "namespace"
                ],
                "type": "object",
                "properties": {
                    "namespace": {
                        "type": "string",
                        "description": "A string representing the type of the target being described by this object",
                        "example": "android_app",
                        "enum": [
                            "web",
                            "android_app"
                        ]
                    },
                    "site": {
                        "type": "string",
                        "description": "A string value that contains the site that is authorised to handle verifiable link redirection from this domain. Required when 'namespace' field is set to 'web'"
                    },
                    "package_name": {
                        "type": "string",
                        "description": "A string value that contains the package name of the application that is authorised to handle verifiable link redirection from this domain. Required when 'namespace' field is set to 'android_app'",
                        "example": "com.ibm.security.verifyapp"
                    },
                    "sha256_cert_fingerprints": {
                        "type": "array",
                        "description": "An array of string values that contains the sha 256 cert fingerprints of the application described in 'package_name'. Required when 'namespace' field is set to 'android_app'",
                        "example": "20:45:C1:BF:49:E7:7B:C5:40:9D:AF:39:2A:42:D8:65:69:06:30:20:8B:7A:29:76:D6:3A:E7:DC:3E:71:DD:C3",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "QuestionsEnrollments_2.0": {
                "required": [
                    "questions"
                ],
                "type": "object",
                "properties": {
                    "questions": {
                        "type": "array",
                        "description": "The list of knowledge questions enrollments",
                        "items": {
                            "$ref": "#/components/schemas/QuestionsEnrollment_2.0"
                        }
                    }
                },
                "description": "The list of knowledge questions enrollments."
            },
            "EnrollSignatureAttributes": {
                "required": [
                    "algorithm",
                    "publicKey",
                    "signedData"
                ],
                "type": "object",
                "properties": {
                    "algorithm": {
                        "type": "string",
                        "description": "The algorithm of the public key",
                        "example": "RSASHA256"
                    },
                    "deviceSecurity": {
                        "type": "boolean",
                        "description": "Indicates if device based authentication protected secure storage is used",
                        "example": true
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The base64 encoded X.509 SubjectPublicKeyInfo public key to use in signature verification",
                        "example": "12ewdDE12=="
                    },
                    "signedData": {
                        "type": "string",
                        "description": "The base64 encoded value of the data as a result of signing the authenticator ID. Currently only PKCS#1 v1.5 padding is supported for RSA signatures.",
                        "example": "563r324F3214=="
                    },
                    "additionalData": {
                        "type": "array",
                        "description": "This value will be included with authentication challenges and can be used by the signing party. It is not interpreted or validated by the server",
                        "items": {
                            "$ref": "#/components/schemas/NameValuePair"
                        }
                    }
                },
                "description": "Attributes to be associated with an enrollment"
            },
            "VerifyOtpVerification_2.0": {
                "required": [
                    "otp"
                ],
                "type": "object",
                "properties": {
                    "otp": {
                        "type": "string",
                        "description": "The one-time password value",
                        "example": "123456"
                    }
                },
                "description": "A one-time password verification attempt."
            },
            "CreateFidoMetadataService_2.0": {
                "required": [
                    "enabled",
                    "trustAnchorIds",
                    "url"
                ],
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "description": "The URL of the Metadata Service.",
                        "example": "https://mds3.fidoalliance.org/"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether this Metadata Service entry is enabled. Disabled entries will not have their contents fetched and will not present the contained documents for processing.",
                        "example": true
                    },
                    "trustAnchorIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The list of friendly names of configured signer certificates which will be used for validation of the Metadata Service. Currently this expects the root certificate of the JWT signature returned by the Metadata Service.",
                        "example": "[\"FIDO MDS JWT cert\"]",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "A FIDO metadata service configuration."
            },
            "FidoAllMetadata_2.0": {
                "required": [
                    "metadata"
                ],
                "type": "object",
                "properties": {
                    "metadata": {
                        "type": "array",
                        "description": "The list of FIDO metadata entries",
                        "items": {
                            "$ref": "#/components/schemas/FidoMetadata_2.0"
                        }
                    }
                },
                "description": "The list of FIDO metadata entries."
            },
            "VoiceotpEnrollment_2.0": {
                "required": [
                    "attributes",
                    "created",
                    "enabled",
                    "id",
                    "type",
                    "updated",
                    "userId",
                    "validated"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the enrollment",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier of the associated user",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of authentication factor enrollment",
                        "readOnly": true,
                        "example": "voiceotp"
                    },
                    "created": {
                        "type": "string",
                        "description": "The creation time of the enrollment",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The time the enrollment was last updated",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "attempted": {
                        "type": "string",
                        "description": "The time the enrollment was last used for verification",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the enrollment to be used in runtime flows",
                        "example": true
                    },
                    "validated": {
                        "type": "boolean",
                        "description": "The validation state of the enrollment",
                        "readOnly": true,
                        "example": true
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/VoiceotpEnrollmentAttributes_2.0"
                    }
                },
                "description": "A voice one-time password enrollment."
            },
            "DiscoverableClient": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the authenticator client",
                        "readOnly": true,
                        "example": "ecb2bbbb-fd45-4ce9-957f-f18eaf65dfe8"
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name of the client",
                        "readOnly": true,
                        "example": "VerifyAuthenticator"
                    }
                },
                "description": "An authenticator client which is enabled for runtime flows."
            },
            "CreateEmailotpEnrollment_2.0": {
                "required": [
                    "emailAddress"
                ],
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier of the associated user",
                        "example": "50CP15KFD3"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the enrollment to be used in runtime flows",
                        "example": true
                    },
                    "emailAddress": {
                        "type": "string",
                        "description": "The email address to be used to deliver one-time password values",
                        "example": "jessica@mail.com"
                    }
                },
                "description": "The creation data of a email one-time password enrollment."
            },
            "CreateVoiceotpEnrollment_2.0": {
                "required": [
                    "phoneNumber"
                ],
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier of the associated user",
                        "example": "50CP15KFD3"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the enrollment to be used in runtime flows",
                        "example": true
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "The phone number to be used to deliver one-time password values",
                        "example": "+15345678911"
                    }
                },
                "description": "The creation data of a voice one-time password enrollment."
            },
            "MfaProviderDefinition": {
                "required": [
                    "capabilities",
                    "credentialPrefix",
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "capabilities": {
                        "type": "array",
                        "description": "The factor capabilities permitted with this provider instance",
                        "items": {
                            "type": "string"
                        }
                    },
                    "credentialPrefix": {
                        "type": "string",
                        "description": "The credential identifier prefix",
                        "readOnly": true,
                        "example": "ext"
                    },
                    "description": {
                        "type": "string",
                        "description": "A friendly description",
                        "example": "Our external MFA integration"
                    },
                    "id": {
                        "type": "string",
                        "description": "The external MFA provider configuration identifier",
                        "readOnly": true,
                        "example": "0ab4d7a1-a2ce-4430-8dea-471d341669f1"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the external MFA provider",
                        "example": "External Security"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of external MFA integration",
                        "readOnly": true,
                        "example": "generic",
                        "enum": [
                            "generic",
                            "duo"
                        ]
                    }
                },
                "description": "The external MFA providers definition."
            },
            "EmailotpEnrollment_2.0": {
                "required": [
                    "attributes",
                    "created",
                    "enabled",
                    "id",
                    "type",
                    "updated",
                    "userId",
                    "validated"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the enrollment",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier of the associated user",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of authentication factor enrollment",
                        "readOnly": true,
                        "example": "emailotp"
                    },
                    "created": {
                        "type": "string",
                        "description": "The creation time of the enrollment",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The time the enrollment was last updated",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "attempted": {
                        "type": "string",
                        "description": "The time the enrollment was last used for verification",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the enrollment to be used in runtime flows",
                        "example": true
                    },
                    "validated": {
                        "type": "boolean",
                        "description": "The validation state of the enrollment",
                        "readOnly": true,
                        "example": true
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/EmailotpEnrollmentAttributes_2.0"
                    }
                },
                "description": "A email one-time password enrollment."
            },
            "PasswordAuthentication": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username to authenticate as",
                        "example": "jessica"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password to authenticate with",
                        "example": "Passw0rd"
                    }
                }
            },
            "FidoCredential_2.0": {
                "required": [
                    "id",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The credential identifier",
                        "example": "SSBhbSBhIGNyZWRlbnRpYWwK"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the credential. It must be 'public-key' for FIDO",
                        "example": "public-key"
                    }
                },
                "description": "A FIDO 2.0 credential."
            },
            "CreateQuestionsEnrollmentAttributes_2.0": {
                "required": [
                    "questions"
                ],
                "type": "object",
                "properties": {
                    "questions": {
                        "type": "array",
                        "description": "The list of questions with answers",
                        "items": {
                            "$ref": "#/components/schemas/QuestionAnswer_2.0"
                        }
                    }
                },
                "description": "A knowledge questions enrollment's attributes."
            },
            "GrantAuthenticator": {
                "required": [
                    "attributes"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "The authorization code provided by an initiation request. Required for completing a registration",
                        "example": "rNxkpy2TSdv3pFgVW9kq"
                    },
                    "refreshToken": {
                        "type": "string",
                        "description": "The refresh token of the existing authenticator registration. Required for refreshing a registration",
                        "example": "tGzv3JOkF0XG5Qx2TlKWIA"
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/GrantAuthenticatorAttributes"
                    }
                },
                "description": "The JSON representation of the request data to register or refresh an authenticator."
            },
            "QuestionsEnrollmentIndvReferences_2.0": {
                "required": [
                    "profileId"
                ],
                "type": "object",
                "properties": {
                    "profileId": {
                        "type": "string",
                        "description": "The configuration profile identifier",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "questions": {
                        "type": "array",
                        "description": "The list of available questions",
                        "items": {
                            "$ref": "#/components/schemas/QuestionQuestion_2.0"
                        }
                    }
                },
                "description": "A knowledge questions enrollment's references."
            },
            "AttemptQuestionsVerification_2.0": {
                "required": [
                    "questions"
                ],
                "type": "object",
                "properties": {
                    "questions": {
                        "type": "array",
                        "description": "The list of questions with answers",
                        "items": {
                            "$ref": "#/components/schemas/QuestionAnswer_2.0"
                        }
                    }
                },
                "description": "The data of a knowledge question verification attempt."
            },
            "JsonValue": {
                "type": "object",
                "properties": {
                    "valueType": {
                        "type": "string",
                        "enum": [
                            "ARRAY",
                            "OBJECT",
                            "STRING",
                            "NUMBER",
                            "TRUE",
                            "FALSE",
                            "NULL"
                        ]
                    }
                }
            },
            "VoiceotpEnrollmentAttributes_2.0": {
                "required": [
                    "phoneNumber"
                ],
                "type": "object",
                "properties": {
                    "phoneNumber": {
                        "type": "string",
                        "description": "The phone number to be used to deliver one-time password values",
                        "example": "+15345678911"
                    }
                },
                "description": "A voice one-time password enrollment attributes."
            },
            "MfaProviderConfiguration": {
                "required": [
                    "capabilities",
                    "capabilityCacheTtl",
                    "credentialPrefix",
                    "description",
                    "enabled",
                    "id",
                    "name",
                    "type",
                    "uniqueNameAttribute",
                    "webhookId"
                ],
                "type": "object",
                "properties": {
                    "capabilities": {
                        "type": "array",
                        "description": "The factor capabilities permitted with this provider instance",
                        "items": {
                            "type": "string"
                        }
                    },
                    "capabilityCacheTtl": {
                        "type": "integer",
                        "description": "The number of seconds cached capability enrollments will be stored",
                        "format": "int32",
                        "example": 0
                    },
                    "credentialPrefix": {
                        "type": "string",
                        "description": "The credential identifier prefix",
                        "readOnly": true,
                        "example": "ext"
                    },
                    "description": {
                        "type": "string",
                        "description": "A friendly description",
                        "example": "Our external MFA integration"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of external MFA provider to be used in runtime flows",
                        "example": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The external MFA provider configuration identifier",
                        "readOnly": true,
                        "example": "0ab4d7a1-a2ce-4430-8dea-471d341669f1"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the external MFA provider",
                        "example": "External Security"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of external MFA integration",
                        "readOnly": true,
                        "example": "generic",
                        "enum": [
                            "generic",
                            "duo"
                        ]
                    },
                    "uniqueNameAttribute": {
                        "type": "string",
                        "description": "The account attribute that identifies the user in the external provider system",
                        "example": "email"
                    },
                    "webhookId": {
                        "type": "string",
                        "description": "The webhook configuration identifier",
                        "readOnly": true,
                        "example": "87e0cd55-366a-45b6-a401-243f9bd5ab7f"
                    }
                },
                "description": "The external MFA providers configuration."
            },
            "UpdateQuestionsEnrollmentAttributes_2.0": {
                "required": [
                    "questions"
                ],
                "type": "object",
                "properties": {
                    "questions": {
                        "type": "array",
                        "description": "The list of enrolled questions",
                        "items": {
                            "$ref": "#/components/schemas/QuestionAnswer_2.0"
                        }
                    }
                },
                "description": "A set of knowledge questions enrollment attribute."
            },
            "MfaProvidersEntity": {
                "required": [
                    "capability",
                    "id",
                    "providerId",
                    "providerName"
                ],
                "type": "object",
                "properties": {
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "The associated enrollment attribute as a key-value pair"
                    },
                    "capability": {
                        "type": "string",
                        "description": "The external MFA provider authentication capability",
                        "readOnly": true,
                        "example": "duo:push"
                    },
                    "id": {
                        "type": "string",
                        "description": "The external MFA provider enrollment identifier",
                        "readOnly": true,
                        "example": "59ccdb55-0103-4498-8dc6-3fda9deebe25"
                    },
                    "providerId": {
                        "type": "string",
                        "description": "The external MFA provider configuration identifier",
                        "readOnly": true,
                        "example": "0ab4d7a1-a2ce-4430-8dea-471d341669f1"
                    },
                    "providerName": {
                        "type": "string",
                        "description": "The name of the external MFA provider",
                        "example": "External Security"
                    }
                },
                "description": "The external MFA providers entity."
            },
            "TotpEnrollment_2.0": {
                "required": [
                    "attributes",
                    "created",
                    "enabled",
                    "id",
                    "type",
                    "updated",
                    "userId",
                    "validated"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the enrollment",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier of the associated user",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of authentication factor enrollment",
                        "readOnly": true,
                        "example": "totp"
                    },
                    "created": {
                        "type": "string",
                        "description": "The creation time of the enrollment",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The time the enrollment was last updated",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "attempted": {
                        "type": "string",
                        "description": "The time the enrollment was last used for verification",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the enrollment to be used in runtime flows",
                        "example": true
                    },
                    "validated": {
                        "type": "boolean",
                        "description": "The validation state of the enrollment",
                        "readOnly": true,
                        "example": true
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/TotpEnrollmentAttributes_2.0"
                    }
                },
                "description": "A time-based one-time password enrollment."
            },
            "SignatureMethod": {
                "required": [
                    "attributes",
                    "creationTime",
                    "enabled",
                    "enrollmentUri",
                    "id",
                    "methodType",
                    "owner",
                    "subType",
                    "validated"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the enrollment",
                        "readOnly": true,
                        "example": "f867dceb-a360-44f4-883f-70723272d27f"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The unique identifier of the owner of the enrollment",
                        "readOnly": true,
                        "example": "50TPV1B8Q9"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "The time at which this enrollment was created",
                        "readOnly": true,
                        "example": "2018-04-19T09:21:38.414Z"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the enrollment to be used for runtime flows",
                        "example": false
                    },
                    "enrollmentUri": {
                        "type": "string",
                        "description": "The location of the enrollment",
                        "readOnly": true,
                        "example": "https://tenant.ice.ibmcloud.com/v1.0/authnmethods/signature/{id}"
                    },
                    "methodType": {
                        "type": "string",
                        "description": "The type of authentication method",
                        "readOnly": true,
                        "example": "signature"
                    },
                    "subType": {
                        "type": "string",
                        "description": "The specific sub-type of the enrollment. Support values",
                        "readOnly": true,
                        "example": "fingerprint",
                        "enum": [
                            "userPresence",
                            "fingerprint",
                            "face"
                        ]
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/SignatureAttributes"
                    },
                    "validated": {
                        "type": "boolean",
                        "description": "The validated attribute of the signature factor enromment",
                        "example": false
                    }
                },
                "description": "The JSON representation of a signature enrollment."
            },
            "Fido2PublicKeyParams": {
                "type": "object",
                "properties": {
                    "alg": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "type": {
                        "type": "string"
                    }
                }
            },
            "DiscoverableQuestions_2.0": {
                "required": [
                    "enabled",
                    "path",
                    "profiles"
                ],
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "The endpoint path of the authentication factor",
                        "example": "/v2.0/factors/questions"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the authentication factor",
                        "example": true
                    },
                    "profiles": {
                        "type": "array",
                        "description": "The enabled knowledge questions configuration profiles",
                        "items": {
                            "$ref": "#/components/schemas/KnowledgeQuestionsProfile_2.0"
                        }
                    }
                },
                "description": "The knowledge questions discovery configuration."
            },
            "QuestionsEnrollmentsConfig_2.0": {
                "required": [
                    "maxAnswerLength",
                    "minAnswerLength",
                    "minRequiredAnswers",
                    "regexMatch",
                    "requireUniqueAnswers"
                ],
                "type": "object",
                "properties": {
                    "minRequiredAnswers": {
                        "minimum": 1,
                        "type": "integer",
                        "description": "The minimum number of required enrolled answers",
                        "format": "int32",
                        "example": 3
                    },
                    "requireUniqueAnswers": {
                        "type": "boolean",
                        "description": "Specifies whether unique answers are required",
                        "example": true
                    },
                    "minAnswerLength": {
                        "maximum": 256,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The minimum answer length",
                        "format": "int32",
                        "example": 1
                    },
                    "maxAnswerLength": {
                        "maximum": 256,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The maximum answer length",
                        "format": "int32",
                        "example": 128
                    },
                    "regexMatch": {
                        "type": "string",
                        "description": "Regex of permitted characters in an enrolled answer",
                        "example": "^[a-zA-Z0-9_ ]+$"
                    }
                },
                "description": "The enrollment specific configuration options for knowledge questions."
            },
            "AuthenticationMethods": {
                "type": "object",
                "properties": {
                    "totp": {
                        "$ref": "#/components/schemas/TotpAuthenticationMethod"
                    },
                    "signature_fingerprint": {
                        "$ref": "#/components/schemas/SignatureAuthenticationMethod"
                    },
                    "signature_userPresence": {
                        "$ref": "#/components/schemas/SignatureAuthenticationMethod"
                    },
                    "signature_face": {
                        "$ref": "#/components/schemas/SignatureAuthenticationMethod"
                    }
                },
                "description": "The enabled authentication methods for this tenant."
            },
            "Verifications": {
                "required": [
                    "verifications"
                ],
                "type": "object",
                "properties": {
                    "verifications": {
                        "type": "array",
                        "description": "The list of verification transactions",
                        "items": {
                            "$ref": "#/components/schemas/Verification"
                        }
                    }
                },
                "description": "The list of verification transactions."
            },
            "FidoReferences_2.0": {
                "required": [
                    "rpUuid"
                ],
                "type": "object",
                "properties": {
                    "rpUuid": {
                        "type": "string",
                        "description": "The relying party unique identifier for this enrollment",
                        "readOnly": true
                    }
                }
            },
            "SmsotpVerification_2.0": {
                "required": [
                    "attempts",
                    "correlation",
                    "created",
                    "expiry",
                    "id",
                    "phoneNumber",
                    "retries",
                    "state",
                    "type",
                    "updated",
                    "userId"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the verification",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier of the associated user",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of authentication factor enrollment",
                        "readOnly": true,
                        "example": "smsotp"
                    },
                    "created": {
                        "type": "string",
                        "description": "The time when the verification was created",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The time when the verification was last updated",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "expiry": {
                        "type": "string",
                        "description": "The time when the verification expires",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the verification",
                        "readOnly": true,
                        "example": "PENDING",
                        "enum": [
                            "PENDING",
                            "TIMEOUT",
                            "CANCELED",
                            "FAILED",
                            "SUCCESS"
                        ]
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The identifier of the user that last updated the verification",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "correlation": {
                        "type": "string",
                        "description": "A value to be associated with the verification. It will be prefixed to the one-time password in the SMS to be sent.",
                        "readOnly": true,
                        "example": "4567"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "The phone number to be used to deliver one-time password values",
                        "readOnly": true,
                        "example": "+15345678911"
                    },
                    "attempts": {
                        "type": "integer",
                        "description": "The number of attempts that have been made against the verification",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0
                    },
                    "retries": {
                        "type": "integer",
                        "description": "The maximum number of retry attempts before the verification is marked as failed",
                        "format": "int32",
                        "readOnly": true,
                        "example": 4
                    }
                },
                "description": "A SMS one-time password verification."
            },
            "CreateRecaptchaReference": {
                "required": [
                    "location",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the reference",
                        "example": "User Registration"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location of the reference",
                        "example": "/v2.0/flows/e0076f18-356b-43cd-8544-f9a93b8e795e"
                    }
                },
                "description": "The reCAPTCHA reference."
            },
            "EmailotpEnrollmentAttributes_2.0": {
                "required": [
                    "emailAddress"
                ],
                "type": "object",
                "properties": {
                    "emailAddress": {
                        "type": "string",
                        "description": "The email address to be used to deliver one-time password values",
                        "example": "jessica@mail.com"
                    }
                },
                "description": "A email one-time password enrollment attributes."
            },
            "DiscoverableFactors_2.0": {
                "required": [
                    "emailotp",
                    "fido2",
                    "qr",
                    "questions",
                    "restrictions",
                    "signatures",
                    "smsotp",
                    "totp",
                    "voiceotp"
                ],
                "type": "object",
                "properties": {
                    "emailotp": {
                        "$ref": "#/components/schemas/DiscoverableEmailotp_2.0"
                    },
                    "fido2": {
                        "$ref": "#/components/schemas/DiscoverableFido2_2.0"
                    },
                    "qr": {
                        "$ref": "#/components/schemas/Discoverable_2.0"
                    },
                    "questions": {
                        "$ref": "#/components/schemas/DiscoverableQuestions_2.0"
                    },
                    "signatures": {
                        "$ref": "#/components/schemas/Discoverable_2.0"
                    },
                    "smsotp": {
                        "$ref": "#/components/schemas/Discoverable_2.0"
                    },
                    "totp": {
                        "$ref": "#/components/schemas/DiscoverableTotp_2.0"
                    },
                    "voiceotp": {
                        "$ref": "#/components/schemas/Discoverable_2.0"
                    },
                    "restrictions": {
                        "$ref": "#/components/schemas/Restrictions_2.0"
                    }
                },
                "description": "The availability of all authentication factors."
            },
            "CreateQuestionsEnrollment_2.0": {
                "required": [
                    "attributes",
                    "references"
                ],
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier of the associated user",
                        "example": "50CP15KFD3"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the enrollment that is used in the runtime flows",
                        "example": true
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/CreateQuestionsEnrollmentAttributes_2.0"
                    },
                    "references": {
                        "$ref": "#/components/schemas/CreateQuestionsEnrollmentReferences_2.0"
                    }
                },
                "description": "The creation data of a knowledge question enrollment."
            },
            "TotpMethodAttributes": {
                "required": [
                    "algorithm",
                    "digits",
                    "period",
                    "secret"
                ],
                "type": "object",
                "properties": {
                    "digits": {
                        "type": "integer",
                        "description": "The length of the one-time password",
                        "format": "int32",
                        "readOnly": true,
                        "example": 6
                    },
                    "secret": {
                        "type": "string",
                        "description": "The shared secret value to be used to seed the algorithm",
                        "readOnly": true,
                        "example": "HCVUT426LRSLLP4M"
                    },
                    "period": {
                        "type": "integer",
                        "description": "The number of seconds a code will be valid for",
                        "format": "int32",
                        "readOnly": true,
                        "example": 30
                    },
                    "algorithm": {
                        "type": "string",
                        "description": "The hashing algorithm",
                        "readOnly": true,
                        "example": "SHA256"
                    }
                },
                "description": "Additional attributes for a TOTP based authentication method."
            },
            "VerifyTotpEnrollment_2.0": {
                "required": [
                    "otp"
                ],
                "type": "object",
                "properties": {
                    "otp": {
                        "type": "string",
                        "description": "The one-time password value",
                        "example": "123456"
                    }
                },
                "description": "A time-based one-time password verification attempt."
            },
            "TotpAuthenticationMethod": {
                "required": [
                    "enabled",
                    "enrollmentUri"
                ],
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Indicates if the authentication method is enabled",
                        "readOnly": true,
                        "example": true
                    },
                    "enrollmentUri": {
                        "type": "string",
                        "description": "The location of the authentication method enrollment endpoint",
                        "readOnly": true,
                        "example": "https://tenant.ice.ibmcloud.com/v1.0/authnmethods/totp"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the TOTP enrollment",
                        "readOnly": true,
                        "example": "f0cf603f-ae9b-49ce-ad07-70f5777377db"
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/TotpMethodAttributes"
                    }
                },
                "description": "The enrollment information for a TOTP authentication method."
            },
            "Verification": {
                "required": [
                    "authenticationMethods",
                    "authenticatorId",
                    "completionTime",
                    "creationTime",
                    "expiryTime",
                    "id",
                    "logic",
                    "owner",
                    "pushNotification",
                    "state",
                    "transactionData",
                    "transactionUri",
                    "userActions"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the transaction",
                        "example": "a5f562cb-684b-4918-bca6-def6f6c4a81b"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The unique identifier of the owner of the transaction",
                        "example": "50TPV1B8Q9"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "The time at which the transaction was created",
                        "example": "2018-04-19T09:21:38.414Z"
                    },
                    "completionTime": {
                        "type": "string",
                        "description": "The time at which the transaction entered a completion state",
                        "example": "2018-04-19T09:21:38.414Z"
                    },
                    "expiryTime": {
                        "type": "string",
                        "description": "The time at which the transaction will expire and cease to be valid",
                        "example": "2018-04-19T09:21:38.414Z"
                    },
                    "authenticatorId": {
                        "type": "string",
                        "description": "The unique identifier for the associated authenticator registration",
                        "example": "7b676daa-8725-472d-a7f2-88f05c0b798b"
                    },
                    "transactionUri": {
                        "type": "string",
                        "description": "The location of the transaction",
                        "example": "https://tenant.ice.ibmcloud.com/v1.0/authenticators/{id}/verification/{trxnId}"
                    },
                    "state": {
                        "type": "string",
                        "description": "This is the overall completion state of the transaction. After initial creation of the transaction, the state will be PENDING. The value may change from PENDING to any one of the other enumerated values. However, this value becomes immutable once it has been changed from PENDING. The values are as follows:<br> PENDING - The transaction is waiting for the user to use the authenticator to complete the authentication challenge,<br> TIMEOUT - The transaction has expired. No attempt to verify, cancel, or deny the transaction has been received within the expiry period,<br> CANCELED - The transaction has been cancelled by the end user or administrator,<br> USER_DENIED - The user has denied or rejected the transaction using the authenticator,<br> USER_FRAUDULENT - The user has denied the transaction using the authenticator and marked it as fraudulent,<br> BIOMETRY_FAILED - The user attempted to verify the transaction but biometry authentication failed,<br> VERIFY_FAILED - An attempt to verify the transaction has failed,<br> VERIFY_SUCCESS - An attempt to verify the transaction has succeeded.<br>Support values",
                        "example": "PENDING",
                        "enum": [
                            "PENDING",
                            "TIMEOUT",
                            "CANCELED",
                            "USER_DENIED",
                            "USER_FRAUDULENT",
                            "BIOMETRY_FAILED",
                            "VERIFY_FAILED",
                            "VERIFY_SUCCESS"
                        ]
                    },
                    "transactionData": {
                        "type": "string",
                        "description": "The transactional data to be signed",
                        "example": "{\\\"originIpAddress\\\":\\\"192.168.222.222\\\",\\\"originUserAgent\\\":\\\"Mozilla Firefox 11\\\",\\\"additionalData\\\":[{\\\"name\\\":\\\"foo\\\",\\\"value\\\":\\\"bar\\\"}],\\\"message\\\":\\\"There is an action that needs your attention.\\\",\\\"timestamp\\\":\\\"2018-04-19T09:21:38.414Z\\\"}"
                    },
                    "pushNotification": {
                        "$ref": "#/components/schemas/PushNotification"
                    },
                    "authenticationMethods": {
                        "type": "array",
                        "description": "The authentication methods allowed for the transaction",
                        "items": {
                            "$ref": "#/components/schemas/AuthenticationMethod"
                        }
                    },
                    "logic": {
                        "type": "string",
                        "description": "The logical operator to apply to the list of authentication methods",
                        "example": "OR"
                    },
                    "userActions": {
                        "type": "array",
                        "description": "The user action data sent from the authenticator in response to the transaction",
                        "items": {
                            "$ref": "#/components/schemas/UserAction"
                        }
                    },
                    "assertion": {
                        "type": "string",
                        "description": "A JWT which serves as proof that this factor has been performed",
                        "readOnly": true,
                        "example": "ey..."
                    }
                },
                "description": "The JSON representation of a verification transaction."
            },
            "Clients": {
                "required": [
                    "clients"
                ],
                "type": "object",
                "properties": {
                    "clients": {
                        "type": "array",
                        "description": "The list of client instances",
                        "items": {
                            "$ref": "#/components/schemas/Client"
                        }
                    }
                },
                "description": "A list of authenticator clients which is valid for runtime flows supporting registrations."
            },
            "CreateSmsotpVerification_2.0": {
                "type": "object",
                "properties": {
                    "correlation": {
                        "type": "string",
                        "description": "A value to be associated with the verification. It will be prefixed to the one-time password in the SMS to be sent.",
                        "example": "4567"
                    }
                },
                "description": "The creation data for a SMS one-time password verification."
            },
            "PublicKeyCredParams": {
                "required": [
                    "alg",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "alg": {
                        "type": "integer",
                        "description": "COSE algorithm identifier",
                        "format": "int64",
                        "example": -7,
                        "enum": [
                            -7,
                            -8,
                            -35,
                            -36,
                            -37,
                            -38,
                            -39,
                            -257,
                            -258,
                            -259,
                            -65535
                        ]
                    },
                    "type": {
                        "type": "string",
                        "description": "Algorithm type",
                        "example": "public-key",
                        "enum": [
                            "public-key"
                        ]
                    }
                },
                "description": "Allowed COSE key types in their WebaAuthn form"
            },
            "VerifyEmailRecoveryResponse_2.0": {
                "required": [
                    "userId"
                ],
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "The user for whom the recovery flow was completed.",
                        "example": "600000ZRY1"
                    }
                },
                "description": "A password recovery transaction verification attempt response."
            },
            "FidoUser_2.0": {
                "required": [
                    "displayName",
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The IBM unique identifier (IUI) of the user that is to perform the operation"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The friendly name of the user that is to perform the operation",
                        "example": "Jessica User"
                    },
                    "name": {
                        "type": "string",
                        "description": "The username of the user that is to perform the operation",
                        "example": "jessica"
                    }
                },
                "description": "A user that is performing FIDO 2.0 operations."
            },
            "VerifiableLinksDigitalAssetLinks": {
                "required": [
                    "items"
                ],
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "description": "The list of items in a digital asset link file configuration array",
                        "items": {
                            "$ref": "#/components/schemas/VerifiableLinksDigitalAssetLinksConfiguration"
                        }
                    }
                },
                "description": "A digital assetlink file configuration."
            },
            "Restrictions_2.0": {
                "required": [
                    "appliedOn",
                    "appliedToIDS",
                    "deadline",
                    "reqFactors"
                ],
                "type": "object",
                "properties": {
                    "reqFactors": {
                        "type": "integer",
                        "description": "The number of factors a user is required to have enrolled",
                        "format": "int32",
                        "readOnly": true,
                        "example": 2
                    },
                    "appliedOn": {
                        "type": "string",
                        "description": "The epoch time this restriction was applied",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "deadline": {
                        "type": "string",
                        "description": "The epoch time this restriction will start being enforced",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "appliedToIDS": {
                        "type": "string",
                        "description": "The comma separated list of identity sources this restriction is applied to",
                        "readOnly": true,
                        "example": "ids1.realm1.com,ids2.realm2.com"
                    }
                },
                "description": "The restrictions applied to factor enrollment."
            },
            "RelyingParty_2.0": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": " The relying party ID",
                        "example": "fido.example.com"
                    },
                    "name": {
                        "type": "string",
                        "description": "The friendly name of the relying party",
                        "example": "FIDO Relying Party"
                    }
                },
                "description": "A FIDO 2.0 relying party entity."
            },
            "VerifiableLinksAppSiteAssociationDetails": {
                "type": "object",
                "properties": {
                    "appIDs": {
                        "type": "array",
                        "description": "A list of applications IDs that can handle URLs from this domain as per the rules defined in components.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "components": {
                        "type": "array",
                        "description": "A list of component objects that define the URL handling rules for this domain.",
                        "items": {
                            "$ref": "#/components/schemas/VerifiableLinksAppSiteAssociationComponent"
                        }
                    },
                    "appID": {
                        "type": "string",
                        "description": "An application id that is authorised to handle URLs defined in the paths array."
                    },
                    "paths": {
                        "type": "array",
                        "description": "A list of path strings to match for verifiable link redirection for the application defined in appID.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "CreateTotpEnrollment_2.0": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier of the associated user",
                        "example": "50CP15KFD3"
                    },
                    "accountName": {
                        "type": "string",
                        "description": "The account name that the one-time password is associated with",
                        "example": "Jessica"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the enrollment to be used in runtime flows",
                        "example": true
                    }
                },
                "description": "The creation data of a time-based one-time password enrollment."
            },
            "GetSignatureMethodsResponse": {
                "required": [
                    "signatures"
                ],
                "type": "object",
                "properties": {
                    "signatures": {
                        "type": "array",
                        "description": "The list of signature authentication method enrollments",
                        "items": {
                            "$ref": "#/components/schemas/GetSignatureMethodResponse"
                        }
                    }
                },
                "description": "The list of signature authentication method enrollments."
            },
            "Fido2EnrollmentList_2.0": {
                "required": [
                    "fido2"
                ],
                "type": "object",
                "properties": {
                    "fido2": {
                        "type": "array",
                        "description": "The list of FIDO2 enrollments",
                        "items": {
                            "$ref": "#/components/schemas/FidoEnrollment_2.0"
                        }
                    }
                },
                "description": "The list of FIDO2 enrollments."
            },
            "UserAttribute": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the attribute",
                        "example": "metadata"
                    },
                    "values": {
                        "type": "array",
                        "description": "The values of the attributes",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ResolvedRP_2.0": {
                "required": [
                    "fido2",
                    "origin"
                ],
                "type": "object",
                "properties": {
                    "origin": {
                        "type": "string",
                        "description": "The origin used to resolve the relying parties",
                        "example": "https://login.fido.example.com"
                    },
                    "fido2": {
                        "type": "array",
                        "description": "The resolved relying parties",
                        "items": {
                            "$ref": "#/components/schemas/DiscoveredRP_2.0"
                        }
                    }
                },
                "description": "The details of a given Relying party."
            },
            "BHUser": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the user",
                        "example": "504FCQMC8H"
                    },
                    "attributes": {
                        "type": "array",
                        "description": "The attributes of the user",
                        "items": {
                            "$ref": "#/components/schemas/UserAttribute"
                        }
                    },
                    "groups": {
                        "type": "array",
                        "description": "The groups of the user",
                        "items": {
                            "$ref": "#/components/schemas/UserGroup_0"
                        }
                    },
                    "assertion": {
                        "type": "string",
                        "description": "A JWT which serves as proof that this factor has been performed."
                    }
                }
            },
            "AuthenticatorAttributes": {
                "required": [
                    "accountName",
                    "applicationId",
                    "applicationVersion",
                    "deviceId",
                    "deviceName",
                    "deviceType",
                    "faceSupport",
                    "fingerprintSupport",
                    "frontCameraSupport",
                    "osVersion",
                    "pushToken",
                    "verifySdkVersion"
                ],
                "type": "object",
                "properties": {
                    "pushToken": {
                        "type": "string",
                        "description": "The token used to send push notifications to the authenticator",
                        "readOnly": true,
                        "example": "5fw75HqyXnivkpmb%3AudWNSI7s"
                    },
                    "accountName": {
                        "type": "string",
                        "description": "A user friendly name for the registration",
                        "readOnly": true,
                        "example": "Savings Account"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "The mobile application identifier assigned or registered with the mobile platform provider",
                        "readOnly": true,
                        "example": "com.ibm.security.verifyapp"
                    },
                    "applicationVersion": {
                        "type": "string",
                        "description": "The version of the registering mobile application",
                        "readOnly": true,
                        "example": "1.0.5"
                    },
                    "verifySdkVersion": {
                        "type": "string",
                        "description": "The version of the IBM Verify SDK",
                        "readOnly": true,
                        "example": "1.0.1"
                    },
                    "deviceName": {
                        "type": "string",
                        "description": "The mobile device manufacturer device name",
                        "readOnly": true,
                        "example": "John's iPhone"
                    },
                    "deviceType": {
                        "type": "string",
                        "description": "The mobile device type",
                        "readOnly": true,
                        "example": "iPhone"
                    },
                    "platformType": {
                        "type": "string",
                        "description": "The mobile device platform type. Support values",
                        "readOnly": true,
                        "example": "IOS",
                        "enum": [
                            "Android",
                            "IOS",
                            "IPADOS",
                            "Other"
                        ]
                    },
                    "deviceId": {
                        "type": "string",
                        "description": "The mobile device identifier",
                        "readOnly": true,
                        "example": "3f9821f4-b79f-47e3-9efc-51a48cf00ea7"
                    },
                    "osVersion": {
                        "type": "string",
                        "description": "The version of the mobile operating system",
                        "readOnly": true,
                        "example": "11.2.1"
                    },
                    "faceSupport": {
                        "type": "boolean",
                        "description": "Whether the mobile device supports facial recognition",
                        "readOnly": true,
                        "example": false
                    },
                    "fingerprintSupport": {
                        "type": "boolean",
                        "description": "Whether the mobile device supports a fingerprint sensor",
                        "readOnly": true,
                        "example": true
                    },
                    "frontCameraSupport": {
                        "type": "boolean",
                        "description": "Whether the mobile device support a front facing camera",
                        "readOnly": true,
                        "example": true
                    },
                    "mdmDeviceId": {
                        "type": "string",
                        "description": "The MDM device identifier",
                        "readOnly": true,
                        "example": "8fea710e-88a5-4658-ab8a-66a3bf49e4a1"
                    },
                    "deviceInsecure": {
                        "type": "boolean",
                        "description": "Whether the mobile device is deemed insecure; jailbroken or rooted",
                        "readOnly": true,
                        "example": true
                    }
                },
                "description": "Additional attributes to be associated with the registration. All values must be URL encoded."
            },
            "CreateClient": {
                "required": [
                    "accessTokenLifetime",
                    "authorizationCodeLifetime",
                    "enabled",
                    "name",
                    "refreshTokenLifetime"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The display name of the OAuth client",
                        "example": "VerifyAuthenticator"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the OAuth client is enabled for runtime use"
                    },
                    "accessTokenLifetime": {
                        "type": "integer",
                        "description": "The length of time, in seconds, an access token will be valid",
                        "format": "int32",
                        "example": 3600
                    },
                    "refreshTokenLifetime": {
                        "type": "integer",
                        "description": "The length of time, in seconds, a refresh token will be valid",
                        "format": "int32",
                        "example": 63115200
                    },
                    "authorizationCodeLifetime": {
                        "type": "integer",
                        "description": "The length of time, in seconds, an authorization code will be valid",
                        "format": "int32",
                        "example": 120
                    }
                }
            },
            "CreateMfaProviderConfiguration": {
                "required": [
                    "capabilities",
                    "credentialPrefix",
                    "name",
                    "uniqueNameAttribute",
                    "webhookId"
                ],
                "type": "object",
                "properties": {
                    "capabilities": {
                        "type": "array",
                        "description": "The factor capabilities permitted with this provider instance",
                        "items": {
                            "type": "string"
                        }
                    },
                    "capabilityCacheTtl": {
                        "type": "integer",
                        "description": "The number of seconds cached capability enrollments will be stored",
                        "format": "int32",
                        "example": 0
                    },
                    "credentialPrefix": {
                        "type": "string",
                        "description": "The credential identifier prefix",
                        "example": "ext"
                    },
                    "description": {
                        "type": "string",
                        "description": "A friendly description",
                        "example": "Our external MFA integration"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of external MFA provider to be used in runtime flows",
                        "example": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the external MFA provider",
                        "example": "External Security"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of external MFA integration",
                        "example": "generic",
                        "enum": [
                            "generic",
                            "duo"
                        ]
                    },
                    "uniqueNameAttribute": {
                        "type": "string",
                        "description": "The account attribute that identifies the user in the external provider system",
                        "example": "email"
                    },
                    "webhookId": {
                        "type": "string",
                        "description": "The webhook configuration identifier",
                        "example": "87e0cd55-366a-45b6-a401-243f9bd5ab7f"
                    }
                },
                "description": "The external MFA providers configuration."
            },
            "Client": {
                "required": [
                    "accessTokenLifetime",
                    "authorizationCodeLifetime",
                    "enabled",
                    "id",
                    "name",
                    "refreshTokenLifetime"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the authenticator client",
                        "readOnly": true,
                        "example": "ecb2bbbb-fd45-4ce9-957f-f18eaf65dfe8"
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name of the client",
                        "example": "VerifyAuthenticator"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the client is enabled for runtime use"
                    },
                    "accessTokenLifetime": {
                        "type": "integer",
                        "description": "The length of time, in seconds, an access token will be valid",
                        "format": "int32",
                        "example": 3600
                    },
                    "refreshTokenLifetime": {
                        "type": "integer",
                        "description": "The length of time, in seconds, a refresh token will be valid",
                        "format": "int32",
                        "example": 63115200
                    },
                    "authorizationCodeLifetime": {
                        "type": "integer",
                        "description": "The length of time, in seconds, an authorization code will be valid",
                        "format": "int32",
                        "example": 120
                    }
                },
                "description": "An authenticator client which is valid for runtime flows supporting registrations."
            },
            "VerifiableLinksAppSiteAssociationComponent": {
                "type": "object",
                "properties": {
                    "/": {
                        "type": "string",
                        "description": "A regex pattern for matching with the URL path.",
                        "example": "/${path_var}*"
                    },
                    "?": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A regex pattern for matching with the URL query component."
                    },
                    "#": {
                        "type": "string",
                        "description": "A regex pattern for matching with the URL fragment component.",
                        "example": "*"
                    },
                    "exclude": {
                        "type": "boolean",
                        "description": "A boolean which represents if verifiable link routing will be denied if a match is made against URLs handled by this component.",
                        "example": false
                    },
                    "comment": {
                        "type": "string",
                        "description": "A string ignored by the verifiable links system which is used to provide information about the component.",
                        "example": "This is an example comment on an example component."
                    },
                    "caseSensitive": {
                        "type": "boolean",
                        "description": "A boolean which represents if URLs handled by this component require case sensitive matching.",
                        "example": true
                    },
                    "percentEncoded": {
                        "type": "boolean",
                        "description": "A boolean which represents if URLs handled by this component are percent-encoded.",
                        "example": true
                    }
                }
            },
            "EnrollSignatureMethodsPartialResponse": {
                "type": "object",
                "properties": {
                    "successes": {
                        "type": "array",
                        "description": "List of successful signature enrollments",
                        "items": {
                            "$ref": "#/components/schemas/SignatureMethod"
                        }
                    },
                    "failures": {
                        "type": "array",
                        "description": "List of signature enrollment failures",
                        "items": {
                            "$ref": "#/components/schemas/EnrollSignatureMethodFailedResponse"
                        }
                    }
                },
                "description": "The JSON representation of a partial signature enrollment."
            },
            "CreateEmailotpVerification_2.0": {
                "type": "object",
                "properties": {
                    "correlation": {
                        "type": "string",
                        "description": "A value to be associated with the verification. It will be prefixed to the one-time password in the email to be sent.",
                        "example": "4567"
                    }
                },
                "description": "The creation data for a email one-time password verification."
            },
            "ServiceIndexOptions_2.0": {
                "required": [
                    "charset",
                    "length"
                ],
                "type": "object",
                "properties": {
                    "length": {
                        "maximum": 45,
                        "minimum": 25,
                        "type": "integer",
                        "description": "The length of the service index identifier",
                        "format": "int32",
                        "example": 25
                    },
                    "charset": {
                        "type": "string",
                        "description": "The character set that is used to generate the alphanumeric identifier. A minimum of 8 unique characters is required.",
                        "example": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
                    }
                },
                "description": "The configuration options for a service index identifier."
            },
            "CreateVoiceotpVerification_2.0": {
                "type": "object",
                "properties": {
                    "correlation": {
                        "type": "string",
                        "description": "A value to be associated with the verification. It will be prefixed to the one-time password in the phone call to be sent.",
                        "example": "4567"
                    }
                },
                "description": "The creation data for a voice one-time password verification."
            },
            "EnrollSignatureMethod": {
                "required": [
                    "attributes",
                    "subType"
                ],
                "type": "object",
                "properties": {
                    "subType": {
                        "type": "string",
                        "description": "The specific sub-type of the enrollment. Support values",
                        "example": "fingerprint",
                        "enum": [
                            "userPresence",
                            "fingerprint",
                            "face"
                        ]
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the enrollment to be used for runtime flows",
                        "example": false
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/EnrollSignatureAttributes"
                    }
                },
                "description": "The JSON representation of the request data to enroll a signature authentication method"
            },
            "QuestionsQuestion_2.0": {
                "required": [
                    "question",
                    "questionKey"
                ],
                "type": "object",
                "properties": {
                    "questionKey": {
                        "type": "string",
                        "description": "The question identifier key",
                        "example": "mothersMaidenName"
                    },
                    "question": {
                        "$ref": "#/components/schemas/QuestionsLocale_2.0"
                    }
                },
                "description": "A set of knowledge question translations for a specific question."
            },
            "QuestionsEnrollmentAttributes_2.0": {
                "required": [
                    "questions"
                ],
                "type": "object",
                "properties": {
                    "questions": {
                        "type": "array",
                        "description": "The list of enrolled questions",
                        "items": {
                            "$ref": "#/components/schemas/QuestionKey_2.0"
                        }
                    }
                },
                "description": "A knowledge questions enrollment attributes."
            },
            "SignatureMethodAttributes": {
                "required": [
                    "algorithm",
                    "supportedAlgorithms"
                ],
                "type": "object",
                "properties": {
                    "algorithm": {
                        "type": "string",
                        "description": "The preferred signing algorithm",
                        "readOnly": true,
                        "example": "RSASHA256"
                    },
                    "supportedAlgorithms": {
                        "type": "array",
                        "description": "A list of supported signing algorithms",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Additional attributes for a signature based authentication method."
            },
            "FulfillVerificationFailedResponse": {
                "required": [
                    "messageDescription",
                    "messageId",
                    "requestObject"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIBH1234X"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "Requester locale specific descriptive message.",
                        "example": "CSIBH1234X The access token included in the request is not valid."
                    },
                    "requestObject": {
                        "$ref": "#/components/schemas/FulfillVerification"
                    }
                },
                "description": "The JSON representation of a failed verification attempt."
            },
            "UsernameRecovered": {
                "required": [
                    "username"
                ],
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username of the associated user",
                        "readOnly": true,
                        "example": "jessica"
                    }
                },
                "description": "The username recovery response."
            },
            "RecaptchaConfigurations": {
                "required": [
                    "recaptcha"
                ],
                "type": "object",
                "properties": {
                    "recaptcha": {
                        "type": "array",
                        "description": "The list of reCAPTCHA configurations",
                        "items": {
                            "$ref": "#/components/schemas/RecaptchaConfiguration"
                        }
                    }
                },
                "description": "The list of reCAPTCHA configurations."
            },
            "VerifiableLinksEntryData": {
                "type": "object",
                "properties": {
                    "datafile": {
                        "type": "object",
                        "properties": {}
                    },
                    "filetype": {
                        "type": "string"
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "hostname": {
                        "type": "string"
                    },
                    "tenantUuid": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "InitiateAuthenticationMethod": {
                "required": [
                    "id",
                    "methodType"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the authentication method enrollment",
                        "example": "f867dceb-a360-44f4-883f-70723272d27f"
                    },
                    "methodType": {
                        "type": "string",
                        "description": "The type of authentication method",
                        "example": "signature"
                    }
                },
                "description": "The list of authentication method enrollments allowed for the authentication challenge."
            },
            "SmsotpConfiguration_2.0": {
                "required": [
                    "charset",
                    "enabled",
                    "expiry",
                    "length",
                    "retries"
                ],
                "type": "object",
                "properties": {
                    "charset": {
                        "type": "string",
                        "description": "The allowed alphanumeric character set for one-time password generation",
                        "example": "0123456789"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of SMS one-time password to be used in runtime flows",
                        "example": true
                    },
                    "expiry": {
                        "maximum": 1800,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The number of seconds until the one-time password expires",
                        "format": "int32",
                        "example": 300
                    },
                    "length": {
                        "maximum": 20,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The length of the one-time password",
                        "format": "int32",
                        "example": 6
                    },
                    "retries": {
                        "maximum": 10,
                        "minimum": 0,
                        "type": "integer",
                        "description": "The number of retry attempts before the verification is marked as failed",
                        "format": "int32",
                        "example": 2
                    }
                },
                "description": "The SMS one-time password configuration."
            },
            "FidoAttributes_2.0": {
                "required": [
                    "attestationFormat",
                    "attestationType",
                    "counter",
                    "credentialId",
                    "credentialPublicKey",
                    "nickname",
                    "rpId",
                    "userPresent",
                    "userVerified"
                ],
                "type": "object",
                "properties": {
                    "attestationType": {
                        "type": "string",
                        "description": "The type of attestation that was performed",
                        "readOnly": true,
                        "example": "Basic"
                    },
                    "attestationFormat": {
                        "type": "string",
                        "description": "The format of attestation that was performed",
                        "readOnly": true,
                        "example": "packed"
                    },
                    "nickname": {
                        "type": "string",
                        "description": "The friendly name of the registration record",
                        "readOnly": true,
                        "example": "My FIDO Authenticator"
                    },
                    "aaGuid": {
                        "type": "string",
                        "description": "The AAGuid of the authenticator used",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "userVerified": {
                        "type": "boolean",
                        "description": "Whether the user verification was performed by the authenticator",
                        "readOnly": true,
                        "example": true
                    },
                    "userPresent": {
                        "type": "boolean",
                        "description": "Whether the user presence was performed by the authenticator",
                        "readOnly": true,
                        "example": true
                    },
                    "icon": {
                        "type": "string",
                        "description": "The metadata icon of the authenticator",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The metadata description of the authenticator",
                        "readOnly": true
                    },
                    "credentialId": {
                        "type": "string",
                        "description": "The credential ID of the authenticator",
                        "readOnly": true
                    },
                    "credentialPublicKey": {
                        "type": "string",
                        "description": "The Base64 encoded CBOR bytes of the COSE public key issued by the authenticator",
                        "readOnly": true
                    },
                    "rpId": {
                        "type": "string",
                        "description": "The relying party ID this enrollment belongs to",
                        "readOnly": true
                    },
                    "counter": {
                        "type": "integer",
                        "description": "The counter of this authenticator",
                        "format": "int64",
                        "readOnly": true,
                        "example": 0
                    },
                    "transports": {
                        "type": "array",
                        "description": "The transports supported by the authenticator",
                        "items": {
                            "type": "string"
                        }
                    },
                    "x5c": {
                        "type": "array",
                        "description": "The attestation trust path of the authenticator",
                        "items": {
                            "type": "string"
                        }
                    },
                    "backupEligibility": {
                        "type": "boolean",
                        "description": "The backup eligibility of the enrollment",
                        "readOnly": true,
                        "example": false
                    },
                    "backupState": {
                        "type": "boolean",
                        "description": "The backup state of the enrollment",
                        "readOnly": true,
                        "example": false
                    }
                }
            },
            "EmailotpEnrollments_2.0": {
                "required": [
                    "count",
                    "emailotp",
                    "limit",
                    "page",
                    "total"
                ],
                "type": "object",
                "properties": {
                    "emailotp": {
                        "type": "array",
                        "description": "The list of email one-time password enrollments",
                        "items": {
                            "$ref": "#/components/schemas/EmailotpEnrollment_2.0"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "description": "The total number of results that are returned per page",
                        "format": "int32",
                        "example": 200
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The total number of results that are returned per page",
                        "format": "int32",
                        "example": 200
                    },
                    "page": {
                        "type": "integer",
                        "description": "The requested page, or the offset",
                        "format": "int32",
                        "example": 1
                    },
                    "total": {
                        "type": "integer",
                        "description": "The number of results returned in the page",
                        "format": "int32",
                        "example": 153
                    }
                },
                "description": "The list of email one-time password enrollments."
            },
            "SmsotpEnrollments_2.0": {
                "required": [
                    "count",
                    "limit",
                    "page",
                    "smsotp",
                    "total"
                ],
                "type": "object",
                "properties": {
                    "smsotp": {
                        "type": "array",
                        "description": "The list of SMS one-time password enrollments",
                        "items": {
                            "$ref": "#/components/schemas/SmsotpEnrollment_2.0"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "description": "The total number of results that are returned per page",
                        "format": "int32",
                        "example": 200
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The total number of results that are returned per page",
                        "format": "int32",
                        "example": 200
                    },
                    "page": {
                        "type": "integer",
                        "description": "The requested page, or the offset",
                        "format": "int32",
                        "example": 1
                    },
                    "total": {
                        "type": "integer",
                        "description": "The number of results returned in the page",
                        "format": "int32",
                        "example": 153
                    }
                },
                "description": "The list of SMS one-time password enrollments."
            },
            "QuestionQuestion_2.0": {
                "required": [
                    "question",
                    "questionKey"
                ],
                "type": "object",
                "properties": {
                    "questionKey": {
                        "type": "string",
                        "description": "The question identifier key",
                        "readOnly": true,
                        "example": "mothersMaidenName"
                    },
                    "question": {
                        "type": "string",
                        "description": "Question text",
                        "readOnly": true,
                        "example": "What is your mother's maiden name?"
                    }
                },
                "description": "A knowledge question."
            },
            "TransientFactor_2.0": {
                "required": [
                    "attributes",
                    "enabled",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "The type of authentication factor",
                        "readOnly": true,
                        "example": "<type>"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the transient factor",
                        "example": true
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/TransientFactorAttributes_2.0"
                    }
                },
                "description": "A transient authentication factor."
            },
            "VerifiableLinksAppSiteAssociationAppList": {
                "type": "object",
                "properties": {
                    "apps": {
                        "type": "array",
                        "description": "A list of application IDs that are authorised to use the service on this domain.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "VoiceotpEnrollments_2.0": {
                "required": [
                    "count",
                    "limit",
                    "page",
                    "total",
                    "voiceotp"
                ],
                "type": "object",
                "properties": {
                    "voiceotp": {
                        "type": "array",
                        "description": "The list of voice one-time password enrollments",
                        "items": {
                            "$ref": "#/components/schemas/VoiceotpEnrollment_2.0"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "description": "The total number of results that are returned per page",
                        "format": "int32",
                        "example": 200
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The total number of results that are returned per page",
                        "format": "int32",
                        "example": 200
                    },
                    "page": {
                        "type": "integer",
                        "description": "The requested page, or the offset",
                        "format": "int32",
                        "example": 1
                    },
                    "total": {
                        "type": "integer",
                        "description": "The number of results returned in the page",
                        "format": "int32",
                        "example": 153
                    }
                },
                "description": "The list of voice one-time password enrollments."
            },
            "IdentitySources": {
                "required": [
                    "password"
                ],
                "type": "object",
                "properties": {
                    "password": {
                        "type": "array",
                        "description": "The list of identity sources",
                        "items": {
                            "$ref": "#/components/schemas/IdentitySourceResponse"
                        }
                    }
                },
                "description": "The list of identity sources."
            },
            "FidoEnrollment_2.0": {
                "required": [
                    "attributes",
                    "created",
                    "enabled",
                    "id",
                    "references",
                    "type",
                    "updated",
                    "userId",
                    "validated"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the enrollment",
                        "readOnly": true,
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier of the associated user",
                        "readOnly": true,
                        "example": "50CP15KFD3"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of authentication factor enrollment",
                        "readOnly": true,
                        "example": "<type>"
                    },
                    "created": {
                        "type": "string",
                        "description": "The creation time of the enrollment",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The time the enrollment was last updated",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "attempted": {
                        "type": "string",
                        "description": "The time the enrollment was last used for verification",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the enrollment to be used in runtime flows",
                        "example": true
                    },
                    "validated": {
                        "type": "boolean",
                        "description": "The validation state of the enrollment",
                        "readOnly": true,
                        "example": true
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/FidoAttributes_2.0"
                    },
                    "references": {
                        "$ref": "#/components/schemas/FidoReferences_2.0"
                    },
                    "assertion": {
                        "type": "string",
                        "description": "A JWT which serves as proof that this factor has been performed",
                        "readOnly": true
                    }
                }
            },
            "NameValuePair": {
                "required": [
                    "name",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the pair",
                        "example": "foo"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the pair",
                        "example": "bar"
                    }
                },
                "description": "An pair of values to represent an attribute."
            },
            "TransientFactorAttributes_2.0": {
                "required": [
                    "emailAddress",
                    "phoneNumber"
                ],
                "type": "object",
                "properties": {
                    "phoneNumber": {
                        "type": "string",
                        "description": "The phone number to which OTP values are delivered",
                        "example": "+15345678911"
                    },
                    "emailAddress": {
                        "type": "string",
                        "description": "The email address to which the OTP values are delivered",
                        "example": "jessica@mail.com"
                    }
                },
                "description": "Transient factor attributes."
            },
            "TotpEnrollmentAttributes_2.0": {
                "required": [
                    "accountName",
                    "algorithm",
                    "digits",
                    "period"
                ],
                "type": "object",
                "properties": {
                    "algorithm": {
                        "type": "string",
                        "description": "The hashing algorithm of the one-time password",
                        "readOnly": true,
                        "example": "SHA1"
                    },
                    "digits": {
                        "type": "integer",
                        "description": "The number of digits in the one-time password",
                        "format": "int32",
                        "readOnly": true,
                        "example": 6
                    },
                    "period": {
                        "type": "integer",
                        "description": "The time period for the one-time password",
                        "format": "int32",
                        "readOnly": true,
                        "example": 30
                    },
                    "accountName": {
                        "type": "string",
                        "description": "The account name that the one-time password is associated with",
                        "readOnly": true,
                        "example": "Jessica"
                    }
                },
                "description": "A time-based one-time password enrollment attributes."
            },
            "FidoMetadataService_2.0": {
                "required": [
                    "enabled",
                    "id",
                    "lastUpdate",
                    "nextUpdate",
                    "predefined",
                    "revision",
                    "status",
                    "trustAnchorIds",
                    "url"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the metadata service configuration entry",
                        "readOnly": true,
                        "example": "2f6462e0-3544-4a45-a418-85edd59269a1"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the Metadata Service referenced by this entry",
                        "readOnly": true,
                        "example": "https://mds3.fidoalliance.org/"
                    },
                    "predefined": {
                        "type": "boolean",
                        "description": "Has this Metadata Service entry been predefined",
                        "readOnly": true,
                        "example": false
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Is this Metadata Service entry currently enabled for use with authentication devices",
                        "readOnly": true,
                        "example": false
                    },
                    "revision": {
                        "type": "integer",
                        "description": "The current revision number of the data hosted on the Metadata Service",
                        "format": "int32",
                        "readOnly": true,
                        "example": 13
                    },
                    "nextUpdate": {
                        "type": "integer",
                        "description": "The timestamp representing the date at which the Metadata Service should next be probed for an update",
                        "format": "int64",
                        "readOnly": true
                    },
                    "lastUpdate": {
                        "type": "integer",
                        "description": "The timestamp representing the date at which the Metadata Service was last probed for an update",
                        "format": "int64",
                        "readOnly": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the last attempt to fetch the data hosted at this Metadata Service",
                        "readOnly": true,
                        "example": "SUCCESS",
                        "enum": [
                            "SUCCESS",
                            "FAILED",
                            "PENDING"
                        ]
                    },
                    "trustAnchorIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The set of friendly names of configured signer certificates which will be used for validation of the Metadata Service. Currently this expects the root certificate of the JWT signature retrieved from the Metadata Service.",
                        "example": "[\"FIDO MDS JWT cert\"]",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "A FIDO metadata service configuration."
            },
            "CreateSmsotpTransient_2.0": {
                "required": [
                    "phoneNumber"
                ],
                "type": "object",
                "properties": {
                    "correlation": {
                        "type": "string",
                        "description": "A value to be associated with the verification. It will be prefixed to the one-time password in the SMS to be sent.",
                        "example": "4567"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "The phone number to be used to deliver one-time password values",
                        "example": "+15345678911"
                    }
                },
                "description": "The creation data for a SMS one-time password verification."
            },
            "MfaProviderDefinitions": {
                "required": [
                    "mfaproviders"
                ],
                "type": "object",
                "properties": {
                    "mfaproviders": {
                        "type": "array",
                        "description": "The list of external MFA providers definitions",
                        "items": {
                            "$ref": "#/components/schemas/MfaProviderDefinition"
                        }
                    }
                },
                "description": "The list of external MFA providers definitions."
            },
            "VerifiableLinksAppSiteAssociation": {
                "required": [
                    "applinks"
                ],
                "type": "object",
                "properties": {
                    "applinks": {
                        "$ref": "#/components/schemas/VerifiableLinksAppSiteAssociationApplinks"
                    },
                    "webcredentials": {
                        "$ref": "#/components/schemas/VerifiableLinksAppSiteAssociationAppList"
                    },
                    "appclips": {
                        "$ref": "#/components/schemas/VerifiableLinksAppSiteAssociationAppList"
                    }
                },
                "description": "An apple app site association file configuration."
            },
            "RecaptchaConfigurationReference": {
                "required": [
                    "created",
                    "location",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the reference",
                        "readOnly": true,
                        "example": "User Registration"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location of the reference",
                        "readOnly": true,
                        "example": "/v2.0/flows/e0076f18-356b-43cd-8544-f9a93b8e795e"
                    },
                    "created": {
                        "type": "string",
                        "description": "The time when the reference was created",
                        "readOnly": true,
                        "example": "2018-07-16T02:13:47.719Z"
                    }
                },
                "description": "A reCAPTCHA configuration reference."
            },
            "CreateSmsotpEnrollment_2.0": {
                "required": [
                    "phoneNumber"
                ],
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier of the associated user",
                        "example": "50CP15KFD3"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of the enrollment to be used in runtime flows",
                        "example": true
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "The phone number to be used to deliver one-time password values",
                        "example": "+15345678911"
                    }
                },
                "description": "The creation data of a SMS one-time password enrollment."
            },
            "MfaProviderConfigurations": {
                "required": [
                    "mfaproviders"
                ],
                "type": "object",
                "properties": {
                    "mfaproviders": {
                        "type": "array",
                        "description": "The list of external MFA providers configuration",
                        "items": {
                            "$ref": "#/components/schemas/MfaProviderConfiguration"
                        }
                    }
                },
                "description": "The list of external MFA providers configuration."
            },
            "VerifySmsotpVerification_2.0": {
                "required": [
                    "otp"
                ],
                "type": "object",
                "properties": {
                    "otp": {
                        "type": "string",
                        "description": "The one-time password value",
                        "example": "123456"
                    }
                },
                "description": "A SMS one-time password verification attempt."
            },
            "Signature": {
                "required": [
                    "enabled"
                ],
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "The enabled state of signature authentication methods. If 'false' this will override any subtype enabled states",
                        "example": true
                    },
                    "userPresence": {
                        "$ref": "#/components/schemas/SubType"
                    },
                    "fingerprint": {
                        "$ref": "#/components/schemas/SubType"
                    },
                    "face": {
                        "$ref": "#/components/schemas/SubType"
                    }
                }
            },
            "GrantAuthenticatorAttributes": {
                "required": [
                    "accountName",
                    "applicationId",
                    "applicationVersion",
                    "deviceId",
                    "deviceName",
                    "deviceType",
                    "faceSupport",
                    "fingerprintSupport",
                    "frontCameraSupport",
                    "osVersion",
                    "pushToken",
                    "verifySdkVersion"
                ],
                "type": "object",
                "properties": {
                    "pushToken": {
                        "type": "string",
                        "description": "The token used to send push notifications to the authenticator",
                        "example": "5fw75HqyXnivkpmb%3AudWNSI7s"
                    },
                    "accountName": {
                        "type": "string",
                        "description": "A user friendly name for the registration",
                        "example": "Savings Account"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "The mobile application identifier assigned or registered with the mobile platform provider",
                        "readOnly": true,
                        "example": "com.ibm.security.verifyapp"
                    },
                    "applicationVersion": {
                        "type": "string",
                        "description": "The version of the registering mobile application",
                        "example": "1.0.5"
                    },
                    "verifySdkVersion": {
                        "type": "string",
                        "description": "The version of the IBM Verify SDK",
                        "example": "1.0.1"
                    },
                    "deviceName": {
                        "type": "string",
                        "description": "The mobile device manufacturer device name",
                        "example": "John's iPhone"
                    },
                    "deviceType": {
                        "type": "string",
                        "description": "The mobile device type",
                        "readOnly": true,
                        "example": "iPhone"
                    },
                    "platformType": {
                        "type": "string",
                        "description": "The mobile device platform type. Support values",
                        "readOnly": true,
                        "example": "IOS",
                        "enum": [
                            "Android",
                            "IOS",
                            "IPADOS",
                            "Other"
                        ]
                    },
                    "deviceId": {
                        "type": "string",
                        "description": "The mobile device identifier",
                        "readOnly": true,
                        "example": "3f9821f4-b79f-47e3-9efc-51a48cf00ea7"
                    },
                    "osVersion": {
                        "type": "string",
                        "description": "The version of the mobile operating system",
                        "example": "11.2.1"
                    },
                    "faceSupport": {
                        "type": "boolean",
                        "description": "Whether the mobile device supports facial recognition",
                        "readOnly": true,
                        "example": false
                    },
                    "fingerprintSupport": {
                        "type": "boolean",
                        "description": "Whether the mobile device supports a fingerprint sensor",
                        "readOnly": true,
                        "example": true
                    },
                    "frontCameraSupport": {
                        "type": "boolean",
                        "description": "Whether the mobile device support a front facing camera",
                        "readOnly": true,
                        "example": true
                    },
                    "mdmDeviceId": {
                        "type": "string",
                        "description": "The MDM device identifier",
                        "readOnly": true,
                        "example": "8fea710e-88a5-4658-ab8a-66a3bf49e4a1"
                    },
                    "deviceInsecure": {
                        "type": "boolean",
                        "description": "Whether the mobile device is deemed insecure; jailbroken or rooted",
                        "readOnly": true,
                        "example": true
                    }
                },
                "description": "Additional attributes to be associated with the registration. All values must be URL encoded."
            },
            "UsernameRecovery": {
                "required": [
                    "attributes",
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The identity source identifier",
                        "example": "2492f190-0d9f-4c80-8a0e-fafd44666ca8"
                    },
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The attributes on which to recover the username"
                    }
                },
                "description": "The username recovery request."
            },
            "CreateQuestionsEnrollmentReferences_2.0": {
                "required": [
                    "profileId"
                ],
                "type": "object",
                "properties": {
                    "profileId": {
                        "type": "string",
                        "description": "The configuration profile identifier",
                        "example": "1e5fa156-3754-4265-8796-1a2f0a6f036f"
                    }
                },
                "description": "A knowledge questions enrollment's references."
            },
            "SignatureAttributes": {
                "required": [
                    "additionalData",
                    "algorithm",
                    "authenticatorId",
                    "authenticatorUri",
                    "deviceSecurity"
                ],
                "type": "object",
                "properties": {
                    "algorithm": {
                        "type": "string",
                        "description": "The algorithm of the public key",
                        "readOnly": true,
                        "example": "RSASHA256"
                    },
                    "authenticatorId": {
                        "type": "string",
                        "description": "The unique identifier for the associated authenticator registration",
                        "readOnly": true,
                        "example": "7b676daa-8725-472d-a7f2-88f05c0b798b"
                    },
                    "authenticatorUri": {
                        "type": "string",
                        "description": "The location of the associated authenticator registration",
                        "readOnly": true,
                        "example": "https://tenant.ice.ibmcloud.com/v1.0/authenticators/{id}"
                    },
                    "additionalData": {
                        "type": "array",
                        "description": "Additional data to be included with authentication challenges",
                        "items": {
                            "$ref": "#/components/schemas/NameValuePair"
                        }
                    },
                    "deviceSecurity": {
                        "type": "boolean",
                        "description": "Indicates if device based authentication protected secure storage is used",
                        "readOnly": true,
                        "example": true
                    }
                },
                "description": "Attributes to be associated with an enrollment"
            },
            "PwdvaultEnrollment": {
                "required": [
                    "resources"
                ],
                "type": "object",
                "properties": {
                    "resources": {
                        "type": "array",
                        "description": "The resources",
                        "items": {
                            "$ref": "#/components/schemas/PwdvaultEnrollmentResource"
                        }
                    }
                },
                "description": "The data of a password vault enrollment."
            },
            "PatchOperation_1": {
                "required": [
                    "op",
                    "path"
                ],
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "description": "The operation to be performed. The value must be one of the following values \"add\", \"remove\", \"replace\", \"move\", \"copy\", or \"test\"",
                        "example": "replace"
                    },
                    "path": {
                        "type": "string",
                        "description": "The reference location in the target document that is to be altered",
                        "example": "/a/b/c"
                    },
                    "from": {
                        "type": "string",
                        "description": "The reference location in the target document from which to copy or move the value",
                        "example": "/a/b/b"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value to use in an add, replace, or test operation. The data type of the specified value is the type to be stored at the reference location",
                        "example": "foo"
                    }
                },
                "description": "The operation that is to be performed."
            },
            "Component_1": {
                "required": [
                    "details",
                    "name",
                    "status",
                    "time"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the evaluated component",
                        "example": "ZooKeeper"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the evaluated component",
                        "example": "good"
                    },
                    "details": {
                        "type": "string",
                        "description": "A descriptive message about the health status",
                        "example": "Successfully connected to ZooKeeper"
                    },
                    "others": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        }
                    },
                    "time": {
                        "type": "string",
                        "description": "The time that was taken to evaluate the health status of the component",
                        "example": "4ms"
                    }
                },
                "description": "The health status of a component."
            },
            "UserGroup_0": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the group",
                        "example": "admin"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the group",
                        "example": "Administrators"
                    },
                    "sourceId": {
                        "type": "string",
                        "description": "The source identifier of the group",
                        "example": "bd45bba8-a1d4-4de2-bc80-be2855589363"
                    }
                }
            },
            "HealthCheckModel": {
                "required": [
                    "components",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "components": {
                        "type": "array",
                        "description": "The health check status for all of the GTA components.",
                        "items": {
                            "$ref": "#/components/schemas/Component_2"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "The over all resulting status of the health check.",
                        "example": "good",
                        "enum": [
                            "good",
                            "bad",
                            "marginal"
                        ]
                    }
                }
            },
            "Tenant": {
                "required": [
                    "companyName",
                    "enabled",
                    "friendlyName",
                    "properties",
                    "status",
                    "tenantId",
                    "tenantType",
                    "uuid"
                ],
                "type": "object",
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "description": "The unique tenant identifier. Required for a create operation only. Once created, this becomes a read-only value.",
                        "example": "webui-dev-ite-firefox-5-15.ite1.idng.ibmcloudsecurity.com"
                    },
                    "tenantType": {
                        "type": "string",
                        "description": "The type of tenant this is. Valid values are SSO_SVC_1.0 or ICE_1.0",
                        "example": "SSO_SVC_1.0"
                    },
                    "friendlyName": {
                        "type": "string",
                        "description": "The short name or human readable name of the tenant.",
                        "example": "webui-dev-ite-firefox-5-15"
                    },
                    "companyName": {
                        "type": "string",
                        "description": "The company name that is associated with the tenant.",
                        "example": "Hooli"
                    },
                    "companyEmail": {
                        "type": "string",
                        "description": "The optional company email contact that is associated with the tenant.",
                        "example": "shiba@suchwow.amaze"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Is this tenant enabled?",
                        "example": true
                    },
                    "status": {
                        "type": "string",
                        "description": "What is the status of this tenant? Is it configured or unconfigured?",
                        "example": "configured"
                    },
                    "instanceAdminURL": {
                        "type": "string",
                        "description": "The tenant instance administration URL. This is generated and is a read-only property.",
                        "example": "https://webui-dev-ite-firefox-5-15.ite1.idng.ibmcloudsecurity.com:9543/v1/mgmt/idaas"
                    },
                    "endpointURLs": {
                        "$ref": "#/components/schemas/TenantEndpointURLsModel"
                    },
                    "properties": {
                        "type": "array",
                        "description": "The list of tenant properties",
                        "items": {
                            "$ref": "#/components/schemas/TenantProperty"
                        }
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The tenants unique identifier. This is generated and is a read-only property.",
                        "example": "0b31832c-b732-492e-8526-821be356a5fc"
                    }
                },
                "xml": {
                    "name": "tenant"
                }
            },
            "TenantEndpointURLsModel": {
                "type": "object",
                "properties": {
                    "authorization": {
                        "type": "string",
                        "description": "The authorization endpoint.",
                        "example": "https://webui-dev-ite-firefox-5-15.ite1.idng.ibmcloudsecurity.com/idaas/oidc/endpoint/default/authorize"
                    },
                    "userinfo": {
                        "type": "string",
                        "description": "The user info endpoint.",
                        "example": "https://webui-dev-ite-firefox-5-15.ite1.idng.ibmcloudsecurity.com/idaas/oidc/endpoint/default/userinfo"
                    },
                    "token": {
                        "type": "string",
                        "description": "The token endpoint.",
                        "example": "https://webui-dev-ite-firefox-5-15.ite1.idng.ibmcloudsecurity.com/idaas/oidc/endpoint/default/token"
                    }
                }
            },
            "TenantProperty": {
                "type": "object",
                "xml": {
                    "name": "property"
                }
            },
            "User": {
                "required": [
                    "addresses",
                    "emails",
                    "id",
                    "name",
                    "schemas",
                    "userName"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of Strings containing URIs that are used to indicate the\nnamespaces of the SCIM schemas that define the attributes present in the\ncurrent JSON structure.\n  The schemas \"urn:ietf:params:scim:schemas:core:2.0:User\"  and \"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\" are returned in the response.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the Resource as defined by the Service. \nThis attribute is readonly and will be sent by the service. \n Any value specified for this attribute in the JSON POST or \nPUT request payload will be ignored"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Unique identifier for the Resource as defined by the Provisioning Client. \nThis attribute is the identification of a resource between the provisioning client and the service provider \nby allowing the client to use a filter to locate the resource with an identifier from the provisioning domain. \n"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/MetaV2_0"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Unique identifier for the User, typically used by the user to directly authenticate \n to the service provider. Often displayed to the user as their unique identifier within \n the system (as opposed to id or externalId, which are generally opaque and not user-friendly \n identifiers). Each User MUST include a non-empty userName value. This identifier MUST be \n unique across the Service Consumer's entire set of Users. It MUST be a stable ID that does \n not change when the same User is returned in subsequent requests."
                    },
                    "title": {
                        "type": "string",
                        "description": "The user's title, such as \"Vice President.\""
                    },
                    "name": {
                        "$ref": "#/components/schemas/Name_0"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the User, suitable for display to end-users. Each User returned MAY include a \nnon-empty displayName value. The name SHOULD be the full name of the User being described \nif known (e.g. Babs Jensen or Ms. Barbara J Jensen, III), but MAY be a username or handle, \nif that is all that is available (e.g. bjensen). The value provided SHOULD be the primary \ntextual label by which this User is normally displayed by the Service Provider when presenting \nit to end-users"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "A Boolean value indicating the User's administrative status. The definitive meaning of this \nattribute is determined by the Service Provider though a value of true infers the User is, \nfor example, able to login while a value of false implies the User's account has been suspended. \nA missing vaue implies that the value is true"
                    },
                    "emails": {
                        "type": "array",
                        "description": "List of emails for the user.  Only one is supported.",
                        "items": {
                            "$ref": "#/components/schemas/EmailAddress_0"
                        }
                    },
                    "addresses": {
                        "type": "array",
                        "description": "List of addresses for the user.",
                        "items": {
                            "$ref": "#/components/schemas/Address_0"
                        }
                    },
                    "phoneNumbers": {
                        "type": "array",
                        "description": "List of phone numbers for the user.",
                        "items": {
                            "$ref": "#/components/schemas/PhoneNumber_0"
                        }
                    },
                    "groups": {
                        "type": "array",
                        "description": "List of Groups that the User is a member of. \n Any value specified for this attribute in the JSON POST or \nPUT request payload will be ignored.  Group membership is managed using the /Groups API.",
                        "items": {
                            "$ref": "#/components/schemas/Groups_0"
                        }
                    },
                    "urn:ietf:params:scim:schemas:extension:ibm:2.0:User": {
                        "$ref": "#/components/schemas/CICCustomUserResponse_0"
                    }
                }
            },
            "ExternalErrorMessageModel": {
                "required": [
                    "message"
                ],
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "The error message.",
                        "example": "CTJMS0000E The translated error message from the catalog"
                    }
                }
            },
            "AdminUser": {
                "required": [
                    "addresses",
                    "emails",
                    "id",
                    "name",
                    "schemas",
                    "userName"
                ],
                "type": "object",
                "properties": {
                    "schemas": {
                        "type": "array",
                        "description": "An array of Strings containing URIs that are used to indicate the\nnamespaces of the SCIM schemas that define the attributes present in the\ncurrent JSON structure.\n  The schemas \"urn:ietf:params:scim:schemas:core:2.0:User\"  and \"urn:ietf:params:scim:schemas:extension:ibm:2.0:User\" are returned in the response.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the Resource as defined by the Service. \nThis attribute is readonly and will be sent by the service. \n Any value specified for this attribute in the JSON POST or \nPUT request payload will be ignored"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "Unique identifier for the Resource as defined by the Provisioning Client. \nThis attribute is the identification of a resource between the provisioning client and the service provider \nby allowing the client to use a filter to locate the resource with an identifier from the provisioning domain. \n"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/MetaV2_0"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Unique identifier for the User, typically used by the user to directly authenticate \n to the service provider. Often displayed to the user as their unique identifier within \n the system (as opposed to id or externalId, which are generally opaque and not user-friendly \n identifiers). Each User MUST include a non-empty userName value. This identifier MUST be \n unique across the Service Consumer's entire set of Users. It MUST be a stable ID that does \n not change when the same User is returned in subsequent requests."
                    },
                    "title": {
                        "type": "string",
                        "description": "The user's title, such as \"Vice President.\""
                    },
                    "name": {
                        "$ref": "#/components/schemas/Name_0"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the User, suitable for display to end-users. Each User returned MAY include a \nnon-empty displayName value. The name SHOULD be the full name of the User being described \nif known (e.g. Babs Jensen or Ms. Barbara J Jensen, III), but MAY be a username or handle, \nif that is all that is available (e.g. bjensen). The value provided SHOULD be the primary \ntextual label by which this User is normally displayed by the Service Provider when presenting \nit to end-users"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "A Boolean value indicating the User's administrative status. The definitive meaning of this \nattribute is determined by the Service Provider though a value of true infers the User is, \nfor example, able to login while a value of false implies the User's account has been suspended. \nA missing vaue implies that the value is true"
                    },
                    "emails": {
                        "type": "array",
                        "description": "List of emails for the user.  Only one is supported.",
                        "items": {
                            "$ref": "#/components/schemas/EmailAddress_0"
                        }
                    },
                    "addresses": {
                        "type": "array",
                        "description": "List of addresses for the user.",
                        "items": {
                            "$ref": "#/components/schemas/Address_0"
                        }
                    },
                    "phoneNumbers": {
                        "type": "array",
                        "description": "List of phone numbers for the user.",
                        "items": {
                            "$ref": "#/components/schemas/PhoneNumber_0"
                        }
                    },
                    "groups": {
                        "type": "array",
                        "description": "List of Groups that the User is a member of. \n Any value specified for this attribute in the JSON POST or \nPUT request payload will be ignored.  Group membership is managed using the /Groups API.",
                        "items": {
                            "$ref": "#/components/schemas/Groups_0"
                        }
                    },
                    "urn:ietf:params:scim:schemas:extension:ibm:2.0:User": {
                        "$ref": "#/components/schemas/CICCustomUserResponse_0"
                    }
                }
            },
            "CreateAdminUser": {
                "required": [
                    "emailAddress"
                ],
                "type": "object",
                "properties": {
                    "emailAddress": {
                        "type": "string",
                        "description": "The email address of the IBM ID account.",
                        "example": "someuser@somedomain.com"
                    }
                }
            },
            "Properties": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "UserIdentitySourcesModel": {
                "required": [
                    "enabled",
                    "id",
                    "instanceName",
                    "predefined",
                    "properties",
                    "providerType",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "instanceName": {
                        "type": "string",
                        "example": "Cloud Directory"
                    },
                    "id": {
                        "type": "string",
                        "example": "97887284-1cf5-4fe6-b1f4-5ab83123d69e"
                    },
                    "providerType": {
                        "type": "string",
                        "example": "ibmldap"
                    },
                    "enabled": {
                        "type": "boolean",
                        "example": true
                    },
                    "predefined": {
                        "type": "boolean",
                        "example": true
                    },
                    "status": {
                        "type": "string",
                        "example": "configured"
                    },
                    "properties": {
                        "type": "array",
                        "example": "[{'key': 'redirect_url', 'value': 'https://test.tenant.ibm.com/idaas/mtfim/sps/idaas/login/ibmldap?identity_source_id=4'}]",
                        "items": {
                            "$ref": "#/components/schemas/Properties"
                        }
                    }
                }
            },
            "RestWebApplicationExceptionModel": {
                "required": [
                    "result"
                ],
                "type": "object",
                "properties": {
                    "result": {
                        "type": "string",
                        "description": "The error message.",
                        "example": "CTJMS0000E The translated error message from the catalog"
                    }
                }
            },
            "PostIdentityFilterInput": {
                "required": [
                    "user"
                ],
                "type": "object",
                "properties": {
                    "user": {
                        "type": "string",
                        "description": "The username.",
                        "example": "someuser@somedomain.com"
                    },
                    "oidcUrl": {
                        "type": "boolean",
                        "description": "Send the local redirect URL if oidcUrl is false, else send the OIDC redirect URL."
                    },
                    "type": {
                        "type": "string",
                        "description": "The identity source type (e.g. ibmldap)",
                        "example": "ibmldap",
                        "enum": [
                            "ibmldap|ibmid|saml20|facebook|linkedin|google|github|social"
                        ]
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The client ID.",
                        "example": "someid"
                    }
                }
            },
            "UserStatusResponseModel": {
                "required": [
                    "user"
                ],
                "type": "object",
                "properties": {
                    "user": {
                        "type": "string",
                        "description": "The user that is currently authenticated, otherwise \"unauthenticated\"",
                        "example": "some.user@mailserver.com"
                    },
                    "realmName": {
                        "type": "string",
                        "description": "The real name of the authenticated user",
                        "example": "www.ibm.com"
                    },
                    "isFederated": {
                        "type": "boolean",
                        "description": "Whether or not the authenticated user is a federated user",
                        "example": false
                    }
                }
            },
            "USCAddressesModel": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "example": "work",
                        "enum": [
                            "work"
                        ]
                    },
                    "locality": {
                        "type": "string",
                        "example": "The city or locality component."
                    },
                    "streetAddress": {
                        "type": "string",
                        "example": "The street address."
                    },
                    "postalCode": {
                        "type": "string",
                        "example": "The postal code."
                    },
                    "country": {
                        "type": "string",
                        "description": "The country code.",
                        "example": "US"
                    }
                }
            },
            "USCEmailsModel": {
                "required": [
                    "type",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "A label that indicates the attribute function; for example, \"work\".  Only a single email is allowed.",
                        "enum": [
                            "work"
                        ]
                    },
                    "value": {
                        "type": "string",
                        "description": "The e-mail addresses for the user. The value is canonicalized by the service provider. For example, bjensen@example.com instead of bjensen@EXAMPLE.COM."
                    }
                }
            },
            "USCNameModel": {
                "type": "object",
                "properties": {
                    "familyName": {
                        "type": "string",
                        "description": "The family name of the user, or the last name in most Western languages. For example, Jensen is the family name from the full name Ms. Barbara J Jensen, PhD."
                    },
                    "givenName": {
                        "type": "string",
                        "description": "The given name of the user, or first name in most Western languages. For example, Barbara is the given name from the full name Ms. Barbara J Jensen, PhD."
                    }
                }
            },
            "USCPhoneNumbersModel": {
                "required": [
                    "type",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "A label that indicates the attribute's function; for example, \"work\" or \"home\".",
                        "example": "work",
                        "enum": [
                            "work",
                            "fax",
                            "home",
                            "mobile",
                            "pager"
                        ]
                    },
                    "value": {
                        "type": "string",
                        "description": "A list of phone numbers that are associated with the user. The value is be canonicalized by the service provider according to format in RFC3966, for example, \"tel:+1-201-555-0123\". Canonical type values are work, home, mobile, fax, and pager."
                    }
                }
            },
            "USCUserResponseModel": {
                "required": [
                    "id",
                    "schemas"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the resource as defined by the service. This attribute is read-only and ise sent by the service. Any value that is specified for this attribute in the JSON POST or PUT request payload is ignored."
                    },
                    "schemas": {
                        "type": "array",
                        "description": "An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure. The schemas \"urn:scim:schemas:core:1.0\" are returned in the response.",
                        "example": "urn:scim:schemas:core:1.0",
                        "items": {
                            "type": "string"
                        }
                    },
                    "externalId": {
                        "type": "string",
                        "description": "A unique identifier for the resource that is defined by the provisioning client. It identifies a resource between the provisioning client and the service provider. The client can use a filter to locate the resource with an identifier from the provisioning domain."
                    },
                    "groups": {
                        "type": "array",
                        "description": "The list of groups that the user belongs to.",
                        "items": {
                            "$ref": "#/components/schemas/Groups_0"
                        }
                    },
                    "meta": {
                        "type": "array",
                        "description": "The user meta data.",
                        "items": {
                            "$ref": "#/components/schemas/Meta_0"
                        }
                    },
                    "pwdChangedTime": {
                        "type": "string",
                        "description": "Indicates the time when the password was changed for the current user entry.",
                        "example": "20150331204436.707773Z"
                    },
                    "emailVerified": {
                        "type": "string",
                        "description": "When the user's email was verified. Specified in seconds past the epoch.",
                        "example": "1586206429"
                    },
                    "userName": {
                        "type": "string",
                        "description": "The username. Must be unique.",
                        "example": "someuser@abc.com"
                    },
                    "name": {
                        "$ref": "#/components/schemas/USCNameModel"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "A Boolean value that indicates the user's administrative status.",
                        "example": true
                    },
                    "emails": {
                        "type": "array",
                        "description": "A list of email addresses that are associated with the user. Only one is supported.",
                        "items": {
                            "$ref": "#/components/schemas/USCEmailsModel"
                        }
                    },
                    "emailId": {
                        "type": "string",
                        "description": "An identifier that maps to a section in the email template for email delivery. This can be used for sending a different email based on the identifier passed in. If the emailId is not present, the 'default' email identifier in the template is used.",
                        "example": "default"
                    },
                    "phoneNumbers": {
                        "type": "array",
                        "description": "A list of phone numbers that are associated with the user.",
                        "items": {
                            "$ref": "#/components/schemas/USCPhoneNumbersModel"
                        }
                    },
                    "addresses": {
                        "type": "array",
                        "description": "A list of addresses that are associated with the user.",
                        "items": {
                            "$ref": "#/components/schemas/USCAddressesModel"
                        }
                    },
                    "stateId": {
                        "type": "string",
                        "description": "The state identifier associated with the registration request. The default is 'default' if not specified.",
                        "example": "stateID"
                    }
                }
            },
            "USCMacrosModel": {
                "required": [
                    "name",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The macro name must begin and end with a @ sign.",
                        "example": "@MACRO1@"
                    },
                    "value": {
                        "type": "string",
                        "description": "The string to replace for the macro.",
                        "example": "Some string"
                    }
                }
            },
            "USCRegistrationCompleteModel": {
                "required": [
                    "emails",
                    "password",
                    "userName"
                ],
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string",
                        "description": "The token to validate.  This field is required for registrationType 'normal'.",
                        "example": "349765"
                    },
                    "userName": {
                        "type": "string",
                        "description": "The username. Must be unique.",
                        "example": "someuser@abc.com"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password",
                        "example": "secret"
                    },
                    "name": {
                        "$ref": "#/components/schemas/USCNameModel"
                    },
                    "emails": {
                        "type": "array",
                        "description": "This is a list of email addresses.",
                        "items": {
                            "$ref": "#/components/schemas/USCEmailsModel"
                        }
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Set to FALSE to lock the account. The default is TRUE if not present. ",
                        "example": true
                    },
                    "phoneNumbers": {
                        "type": "array",
                        "description": "This is a list of phone numbers.",
                        "items": {
                            "$ref": "#/components/schemas/USCPhoneNumbersModel"
                        }
                    },
                    "addresses": {
                        "type": "array",
                        "description": "This is a list of addresses.",
                        "items": {
                            "$ref": "#/components/schemas/USCAddressesModel"
                        }
                    },
                    "companyName": {
                        "type": "string",
                        "example": "IBM"
                    },
                    "sendEmail": {
                        "type": "boolean",
                        "description": "Send an email that registration is complete. The default is TRUE if not present.",
                        "example": true
                    },
                    "emailId": {
                        "type": "string",
                        "description": "An identifier that maps to a section in the email template for email delivery. This can be used for sending a different email based on the identifier passed in. If the emailId is not present, the 'default' email identifier in the template is used.",
                        "example": "default"
                    },
                    "macros": {
                        "type": "array",
                        "description": "An array of email macros. The macro name must start and end with a @ sign.",
                        "items": {
                            "$ref": "#/components/schemas/USCMacrosModel"
                        }
                    }
                }
            },
            "USCRegistrationModel": {
                "required": [
                    "emailAddress"
                ],
                "type": "object",
                "properties": {
                    "emailAddress": {
                        "type": "string",
                        "description": "The user's email address.",
                        "example": "someone@abc.com"
                    },
                    "stateId": {
                        "type": "string",
                        "description": "The state identifier associated with the registration request. The default is 'default' if not specified.",
                        "example": "stateID"
                    },
                    "emailId": {
                        "type": "string",
                        "description": "An identifier that maps to a section in the email template for email delivery. This can be used for sending a different email based on the identifier passed in. If the emailId is not present, the 'default' email identifier in the template is used.",
                        "example": "default"
                    },
                    "adopterId": {
                        "type": "string",
                        "description": "An identifier that can be used to customize the token length, expiration in minutes, and the character set. See the /adopter/adopter.properties template file for an example. ",
                        "example": "adopterID"
                    },
                    "macros": {
                        "type": "array",
                        "description": "An array of email macros. The macro name must start and end with a @ sign.",
                        "items": {
                            "$ref": "#/components/schemas/USCMacrosModel"
                        }
                    }
                }
            },
            "USCPreverifyModel": {
                "required": [
                    "emails",
                    "password",
                    "userName"
                ],
                "type": "object",
                "properties": {
                    "userName": {
                        "type": "string",
                        "description": "The username. Must be unique.",
                        "example": "someuser@abc.com"
                    },
                    "id": {
                        "type": "string",
                        "description": "The IBM unique identifier. Must be unique.",
                        "example": "A1B2C3D4E5"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password",
                        "example": "secret"
                    },
                    "name": {
                        "$ref": "#/components/schemas/USCNameModel"
                    },
                    "emails": {
                        "type": "array",
                        "description": "This is a list of email addresses.",
                        "items": {
                            "$ref": "#/components/schemas/USCEmailsModel"
                        }
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Set to FALSE to lock the account. The default is TRUE if not present. ",
                        "example": true
                    },
                    "phoneNumbers": {
                        "type": "array",
                        "description": "This is a list of phone numbers.",
                        "items": {
                            "$ref": "#/components/schemas/USCPhoneNumbersModel"
                        }
                    },
                    "addresses": {
                        "type": "array",
                        "description": "This is a list of addresses.",
                        "items": {
                            "$ref": "#/components/schemas/USCAddressesModel"
                        }
                    },
                    "companyName": {
                        "type": "string",
                        "example": "IBM"
                    },
                    "sendEmail": {
                        "type": "boolean",
                        "description": "Send an email that registration is complete. The default is TRUE if not present.",
                        "example": true
                    },
                    "emailId": {
                        "type": "string",
                        "description": "An identifier that maps to a section in the email template for email delivery. This can be used for sending a different email based on the identifier passed in. If the emailId is not present, the 'default' email identifier in the template is used.",
                        "example": "default"
                    },
                    "macros": {
                        "type": "array",
                        "description": "An array of email macros. The macro name must start and end with a @ sign.",
                        "items": {
                            "$ref": "#/components/schemas/USCMacrosModel"
                        }
                    }
                }
            },
            "USCTokenValidationResponseModel": {
                "required": [
                    "stateId",
                    "userId"
                ],
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "The user identifier associated with the validation token. ",
                        "example": "someone@abc.com"
                    },
                    "stateId": {
                        "type": "string",
                        "description": "The state identifier associated with the token.",
                        "example": "stateID"
                    }
                }
            },
            "USCEmailValidationCompleteModel": {
                "required": [
                    "token"
                ],
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string",
                        "description": "The token to validate.",
                        "example": "349765"
                    }
                }
            },
            "USCForgotPasswordModel": {
                "required": [
                    "userName"
                ],
                "type": "object",
                "properties": {
                    "userName": {
                        "type": "string",
                        "description": "The username.",
                        "example": "someuser@abc.com"
                    },
                    "stateId": {
                        "type": "string",
                        "description": "The state identifier associated with the forgot password request. The default is 'default' if not specified.",
                        "example": "stateID"
                    },
                    "emailId": {
                        "type": "string",
                        "description": "An identifier that maps to a section in the email template for email delivery. This can be used for sending a different email based on the identifier passed in. If the emailId is not present, the 'default' email identifier in the template is used.",
                        "example": "default"
                    },
                    "adopterId": {
                        "type": "string",
                        "description": "An identifier that can be used to customize the token length, expiration in minutes, and the character set. See the /adopter/adopter.properties template file for an example. ",
                        "example": "adopterID"
                    },
                    "macros": {
                        "type": "array",
                        "description": "An array of email macros. The macro name must start and end with a @ sign.",
                        "items": {
                            "$ref": "#/components/schemas/USCMacrosModel"
                        }
                    }
                }
            },
            "USCGenerateTokenModel": {
                "required": [
                    "emailAddress"
                ],
                "type": "object",
                "properties": {
                    "emailAddress": {
                        "type": "string",
                        "description": "The email address to generate the token for.",
                        "example": "someone@abc.com"
                    },
                    "stateId": {
                        "type": "string",
                        "description": "The state identifier associated with the request. The default is 'default' if not specified.",
                        "example": "stateID"
                    },
                    "emailId": {
                        "type": "string",
                        "description": "An identifier that maps to a section in the email template for email delivery. This can be used for sending a different email based on the identifier passed in. If the emailId is not present, the 'default' email identifier in the template is used.",
                        "example": "default"
                    },
                    "adopterId": {
                        "type": "string",
                        "description": "An identifier that can be used to customize the token length, expiration in minutes, and the character set. See the /adopter/adopter.properties template file for an example. ",
                        "example": "adopterID"
                    },
                    "macros": {
                        "type": "array",
                        "description": "An array of email macros. The macro name must start and end with a @ sign.",
                        "items": {
                            "$ref": "#/components/schemas/USCMacrosModel"
                        }
                    }
                }
            },
            "USCForgotPasswordCompleteModel": {
                "required": [
                    "password",
                    "token"
                ],
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string",
                        "description": "The token to validate.",
                        "example": "349765"
                    },
                    "password": {
                        "type": "string",
                        "description": "The new password",
                        "example": "secret"
                    },
                    "emailId": {
                        "type": "string",
                        "description": "An identifier that maps to a section in the email template for email delivery. This can be used for sending a different email based on the identifier passed in. If the emailId is not present, the 'default' email identifier in the template is used.",
                        "example": "default"
                    }
                }
            },
            "USCTokenValidationModel": {
                "required": [
                    "token"
                ],
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string",
                        "description": "The token to validate.",
                        "example": "349765"
                    },
                    "delete": {
                        "type": "boolean",
                        "description": "A value of true deletes the token after successful validation. Defaults to false if not specified.",
                        "example": true
                    }
                }
            },
            "TenantPropertiesModel": {
                "required": [
                    "properties"
                ],
                "type": "object",
                "properties": {
                    "properties": {
                        "type": "array",
                        "description": "The tenant properties are a list of key,value pairs.",
                        "items": {
                            "$ref": "#/components/schemas/TenantPropertyModel"
                        }
                    }
                }
            },
            "TenantPropertyModel": {
                "required": [
                    "key",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The name of the tenant property."
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the tenant property."
                    }
                }
            },
            "NextPwdResetStepResponseModel": {
                "required": [
                    "httpMethod",
                    "method",
                    "uri"
                ],
                "type": "object",
                "properties": {
                    "method": {
                        "type": "string",
                        "description": "The method that is used to verify the user's identity.",
                        "example": "emailotp",
                        "enum": [
                            "emailLink",
                            "emailotp",
                            "smsotp",
                            "totp",
                            "fingerprint",
                            "userpresence"
                        ]
                    },
                    "httpMethod": {
                        "type": "string",
                        "description": "The HTTP method for the next step's API call to verify the user's identity.",
                        "example": "POST",
                        "enum": [
                            "POST",
                            "PUT"
                        ]
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "The created time for the method.",
                        "example": "2024-02-09T11:19:42.12Z"
                    },
                    "expiryTime": {
                        "type": "string",
                        "description": "The expiry time for the method.",
                        "example": "2024-02-09T11:24:42.12Z"
                    },
                    "uri": {
                        "type": "string",
                        "description": "The HTTP URI for the next step's API call to verify the user's identity.",
                        "example": "/v1.0/usc/password/resetter/{trxId}/validator"
                    }
                }
            },
            "PwdResetResponseModel": {
                "required": [
                    "nextStep",
                    "stepsRemaining",
                    "trxId"
                ],
                "type": "object",
                "properties": {
                    "trxId": {
                        "type": "string",
                        "description": "The transaction ID of the request."
                    },
                    "stepsRemaining": {
                        "type": "integer",
                        "description": "The number of steps that remain to verify the user's identity.",
                        "format": "int32",
                        "example": 2
                    },
                    "nextStep": {
                        "$ref": "#/components/schemas/NextPwdResetStepResponseModel"
                    }
                }
            },
            "Data": {
                "type": "object",
                "properties": {
                    "correlation": {
                        "type": "string",
                        "description": "The correlation to prepend to the OTP that is sent to the user.  An example is 3235-126543, where the correlation is 3235, and 126543 is the OTP.",
                        "example": "3235"
                    },
                    "baseVerificationUrl": {
                        "type": "string",
                        "description": "Valid for the emailLink method.  The baseVerificationUrl specifies the URL link that is sent in the email to complete the flow.  If the value is not specified, the email includes a built-in URL link that goes to the tenant page to complete the flow.   Query parameters that include the USC transaction ID and factors transaction ID (OTP) are automatically appended to the URL."
                    },
                    "targetUrl": {
                        "type": "string",
                        "description": "Valid for user invitations and password resetter operations. IBM Security Verify will redirect to this location. The redirect will occur when the baseVerificationUrl is not specified which indicates the email link goes to IBM Security Verify for processing. The attribute value has no effect when the baseVerificationUrl is specified.",
                        "example": "https://myapplication.com"
                    },
                    "enrollmentId": {
                        "type": "string",
                        "description": "Valid for the password resetter and username recovery operations. Specify the user's enrollment ID for the method that is used to verify the user's identity or specify \"transient\" to usethe user's profile data.  For the methods that support multiple enrollments for a user, the ID indicates which one of them to use. If not specified, the first user enrollment found for the method is used. If the user is not enrolled for the method and authentication factors tenant configuration indicates to use \"User-enrolled methods only\", then the request will fail. The keyword \"transient\" can be used when the tenant configuration indicates to use \"User profile attributes and enrolled methods\" and the method of verification is emailotp, smsotp, or voiceotp."
                    },
                    "transientValue": {
                        "type": "string",
                        "description": "Valid for the password resetter and username recovery operations. Specify the user's email address or phone number when using the transient factor for emailotp, smsotp, or voiceotp. The enrollmentId using the keyword \"transient\" must be specified and then the transientValue will be used.  If the transient value is not specified, the user's mobile phone number or work email address will be used depending on the type of factor used. The transient value specified must match the work email address or one of the phone numbers in the user's profile."
                    }
                }
            },
            "PwdResetModel": {
                "required": [
                    "steps",
                    "userName"
                ],
                "type": "object",
                "properties": {
                    "userName": {
                        "type": "string",
                        "description": "The user's user name.",
                        "example": "someuser@abc.com"
                    },
                    "steps": {
                        "type": "array",
                        "description": "The steps that are required to verify the user's identity before the password can be reset.",
                        "items": {
                            "$ref": "#/components/schemas/PwdResetStep"
                        }
                    },
                    "stateId": {
                        "type": "string",
                        "description": "The state identifier that is associated with the reset password request.",
                        "example": "default"
                    }
                }
            },
            "PwdResetStep": {
                "required": [
                    "method"
                ],
                "type": "object",
                "properties": {
                    "method": {
                        "type": "string",
                        "description": "The method that is used to verify the user's identity.",
                        "example": "emailLink",
                        "enum": [
                            "emailLink",
                            "emailotp",
                            "smsotp",
                            "voiceotp",
                            "totp",
                            "fingerprint",
                            "userpresence"
                        ]
                    },
                    "data": {
                        "$ref": "#/components/schemas/Data"
                    }
                }
            },
            "GetInviteResponseModel": {
                "required": [
                    "email",
                    "expiration",
                    "trxId"
                ],
                "type": "object",
                "properties": {
                    "trxId": {
                        "type": "string",
                        "description": "The transaction ID of the request."
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address of the user to invite."
                    },
                    "realm": {
                        "type": "string",
                        "description": "The realm name.",
                        "example": "cloudIdentityRealm"
                    },
                    "adopterId": {
                        "type": "string",
                        "description": "An identifier that is used to make an invitation to an adopterId + email unique.  When you resend the unique invitation, the existing unique invitation with that adopterId + email combination is replaced."
                    },
                    "stateId": {
                        "type": "string",
                        "description": "An identier that is associated with the transaction."
                    },
                    "groups": {
                        "type": "array",
                        "description": "The list of group IDs that are used to add the user as a member.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "expiration": {
                        "type": "string",
                        "description": "The expiration date of the invitation in UTC format."
                    }
                }
            },
            "GetInvitesResponseModel": {
                "required": [
                    "limit",
                    "page",
                    "total"
                ],
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "description": "The total number of invitations that matched the query.",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The limit of invitations that are returned.",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "The page number.",
                        "format": "int32"
                    },
                    "invitations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GetInviteResponseModel"
                        }
                    }
                }
            },
            "NextUsernameRecoveryStepResponseModel": {
                "required": [
                    "httpMethod",
                    "method",
                    "uri"
                ],
                "type": "object",
                "properties": {
                    "method": {
                        "type": "string",
                        "description": "The method that is used to verify the user's identity.",
                        "example": "emailotp",
                        "enum": [
                            "emailotp",
                            "smsotp",
                            "totp",
                            "fingerprint",
                            "userpresence"
                        ]
                    },
                    "httpMethod": {
                        "type": "string",
                        "description": "The HTTP method for the next step's API call to verify the user's identity.",
                        "example": "POST",
                        "enum": [
                            "POST",
                            "PUT"
                        ]
                    },
                    "uri": {
                        "type": "string",
                        "description": "The HTTP URI for the next step's API call to verify the user's identity.",
                        "example": "/v1.0/usc/username/recovery/{trxId}/validator"
                    }
                }
            },
            "UsernameRecoveryResponseModel": {
                "required": [
                    "nextStep",
                    "stepsRemaining",
                    "trxId"
                ],
                "type": "object",
                "properties": {
                    "trxId": {
                        "type": "string",
                        "description": "The transaction ID of the request."
                    },
                    "stepsRemaining": {
                        "type": "integer",
                        "description": "The number of steps that remain to verify the user's identity.",
                        "format": "int32",
                        "example": 2
                    },
                    "nextStep": {
                        "$ref": "#/components/schemas/NextUsernameRecoveryStepResponseModel"
                    }
                }
            },
            "UsernameRecoveryModel": {
                "required": [
                    "attributes",
                    "steps"
                ],
                "type": "object",
                "properties": {
                    "attributes": {
                        "type": "array",
                        "description": "The name and value of the attributes to use to find the user's account information.  The attributes are combined together with an AND to find the user's account.",
                        "items": {
                            "$ref": "#/components/schemas/UserAttribute_0"
                        }
                    },
                    "steps": {
                        "type": "array",
                        "description": "The steps that are required to verify the user's identity before the user name can be recovered.",
                        "items": {
                            "$ref": "#/components/schemas/UsernameRecoveryStep"
                        }
                    },
                    "stateId": {
                        "type": "string",
                        "description": "The state identifier that is associated with the forgot user name request.",
                        "example": "default"
                    }
                }
            },
            "UsernameRecoveryStep": {
                "required": [
                    "method"
                ],
                "type": "object",
                "properties": {
                    "method": {
                        "type": "string",
                        "description": "The method that is used to verify the user's identity.",
                        "example": "emailotp",
                        "enum": [
                            "email",
                            "emailotp",
                            "smsotp",
                            "voiceotp",
                            "totp",
                            "fingerprint",
                            "userpresence"
                        ]
                    },
                    "data": {
                        "$ref": "#/components/schemas/Data"
                    }
                }
            },
            "InviteUserCompleteResponseModel": {
                "required": [
                    "stateId"
                ],
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier for the user.",
                        "example": "50X3534334"
                    },
                    "stateId": {
                        "type": "string",
                        "description": "The state identifier that is associated with the transaction ID.",
                        "example": "default"
                    }
                }
            },
            "InviteCompleteResultModel": {
                "required": [
                    "op",
                    "path",
                    "result"
                ],
                "type": "object",
                "properties": {
                    "result": {
                        "type": "string",
                        "description": "The result.  If the result is a failure, then an error message is returned.",
                        "enum": [
                            "success",
                            "failure"
                        ]
                    },
                    "op": {
                        "type": "string",
                        "description": "The operation.",
                        "example": "PATCH"
                    },
                    "path": {
                        "type": "string",
                        "description": "The resource path.",
                        "example": "https://mytenant.com/v2.0/Groups/6013434334"
                    },
                    "error": {
                        "type": "string",
                        "description": "The error message.",
                        "example": "CSIAI0051E Cannot find group with ID [6013434334]."
                    }
                }
            },
            "InviteUserCompleteMultiStatusResponseModel": {
                "required": [
                    "stateId"
                ],
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier for the user.",
                        "example": "50X3534334"
                    },
                    "stateId": {
                        "type": "string",
                        "description": "The state identifier that is associated with the transaction ID.",
                        "example": "default"
                    },
                    "results": {
                        "type": "array",
                        "description": "If present, then one or more errors occurred while adding the user to groups.  Each element in the array represents the result of adding the user to the group.",
                        "items": {
                            "$ref": "#/components/schemas/InviteCompleteResultModel"
                        }
                    }
                }
            },
            "InviteUserCompleteModel": {
                "required": [
                    "otp",
                    "user"
                ],
                "type": "object",
                "properties": {
                    "otp": {
                        "type": "string",
                        "description": "The OTP string from the email link.  In the email link, the factorTrnxId query parameter is the OTP."
                    },
                    "notifyComplete": {
                        "type": "boolean",
                        "description": "Notify the user that the invitation is complete. If the attribute is not specified, the email notification is sent."
                    },
                    "user": {
                        "type": "string",
                        "description": "The user data that is used to create the account or the user's ID to update an existing account.  See the POST /v2.0/Users API for the JSON payload that passes to this API for creating an account."
                    }
                }
            },
            "UsernameRecoveryCompleteResponseModel": {
                "required": [
                    "userName"
                ],
                "type": "object",
                "properties": {
                    "userName": {
                        "type": "string",
                        "description": "The user's recovered user name.",
                        "example": "bob"
                    },
                    "stateId": {
                        "type": "string",
                        "description": "The state identifier that is associated with the user name recovery request.",
                        "example": "default"
                    }
                }
            },
            "UsernameRecoveryCompleteModel": {
                "type": "object",
                "properties": {
                    "otp": {
                        "type": "string",
                        "description": "The OTP string for the last step to verify the user's identify before recovering the user name."
                    }
                }
            },
            "PwdResetCompleteResponseModel": {
                "required": [
                    "userId"
                ],
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier for the user.",
                        "example": "50X3534334"
                    },
                    "stateId": {
                        "type": "string",
                        "description": "The state identifier that is associated with the reset password request.",
                        "example": "default"
                    }
                }
            },
            "PwdResetCompleteModel": {
                "required": [
                    "password"
                ],
                "type": "object",
                "properties": {
                    "otp": {
                        "type": "string",
                        "description": "The OTP string for the last step to verify the user's identify before allowing the password to be reset."
                    },
                    "password": {
                        "type": "string",
                        "description": "The new password for the user."
                    }
                }
            },
            "PwdResetValidatorResponseModel": {
                "required": [
                    "nextStep",
                    "stepsRemaining",
                    "trxId",
                    "userId"
                ],
                "type": "object",
                "properties": {
                    "trxId": {
                        "type": "string",
                        "description": "The transaction ID of the request."
                    },
                    "stepsRemaining": {
                        "type": "integer",
                        "description": "The number of steps that remain to verify the user's identity.",
                        "format": "int32",
                        "example": 2
                    },
                    "nextStep": {
                        "$ref": "#/components/schemas/NextPwdResetStepResponseModel"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The unique identifier for the user resource as defined by the service."
                    }
                }
            },
            "ValidatorModel": {
                "type": "object",
                "properties": {
                    "otp": {
                        "type": "string",
                        "description": "The OTP string that is used to verify the user's identify."
                    }
                }
            },
            "InviteUserValidatorResponseModel": {
                "required": [
                    "nextStep",
                    "stepsRemaining",
                    "trxId"
                ],
                "type": "object",
                "properties": {
                    "trxId": {
                        "type": "string",
                        "description": "The transaction ID of the request."
                    },
                    "targetUrl": {
                        "type": "string",
                        "description": "The target URL."
                    },
                    "stepsRemaining": {
                        "type": "integer",
                        "description": "The number of steps that remain.",
                        "format": "int32",
                        "example": 1
                    },
                    "nextStep": {
                        "$ref": "#/components/schemas/NextInviteUserStepResponseModel"
                    },
                    "stateId": {
                        "type": "string",
                        "description": "The state identifier that is associated with the invitation.",
                        "example": "default"
                    },
                    "realmName": {
                        "type": "string",
                        "description": "The realm associated with the invitation.",
                        "example": "cloudIdentityRealm"
                    },
                    "groups": {
                        "type": "array",
                        "description": "The list of groups associated with the invitation.",
                        "items": {
                            "$ref": "#/components/schemas/Group_0"
                        }
                    }
                }
            },
            "NextInviteUserStepResponseModel": {
                "required": [
                    "httpMethod",
                    "uri"
                ],
                "type": "object",
                "properties": {
                    "httpMethod": {
                        "type": "string",
                        "description": "The HTTP method for the next step's API call.",
                        "example": "PUT",
                        "enum": [
                            "PUT"
                        ]
                    },
                    "uri": {
                        "type": "string",
                        "description": "The HTTP URI for the next step's API call.",
                        "example": "/v1.0/usc/user/invitation/{trxId}"
                    }
                }
            },
            "InviteUserMultiStatusResponseModel": {
                "required": [
                    "messageDescription",
                    "messageId",
                    "results"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The ID of the message."
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "The message description."
                    },
                    "results": {
                        "type": "array",
                        "description": "The result of each invitation.",
                        "items": {
                            "$ref": "#/components/schemas/InviteUserResultModel"
                        }
                    }
                }
            },
            "InviteUserResultModel": {
                "required": [
                    "email",
                    "result"
                ],
                "type": "object",
                "properties": {
                    "trxId": {
                        "type": "string",
                        "description": "The transaction ID."
                    },
                    "expiration": {
                        "type": "string",
                        "description": "The expiration date of the invitation in UTC format."
                    },
                    "error": {
                        "type": "string",
                        "description": "The error message."
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address."
                    },
                    "result": {
                        "type": "string",
                        "description": "The result of sending the invitation.  If the result is a failure, an error message is returned.",
                        "enum": [
                            "failure",
                            "success"
                        ]
                    }
                }
            },
            "InvitationModel": {
                "required": [
                    "email"
                ],
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email address of the user to invite."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user to invite that is sent in the email."
                    },
                    "stateId": {
                        "type": "string",
                        "description": "An identier that gets associated with each transaction.  If not present, it defaults to \"default\"."
                    }
                }
            },
            "InviteUserModel": {
                "required": [
                    "invitations",
                    "steps"
                ],
                "type": "object",
                "properties": {
                    "invitations": {
                        "type": "array",
                        "description": "An array of email, name, and state ID for each invitation.  For each invitation, a transaction ID is generated and returned in the response.",
                        "items": {
                            "$ref": "#/components/schemas/InvitationModel"
                        }
                    },
                    "realm": {
                        "type": "string",
                        "description": "The realm name.  If not present, it defaults to the cloudIdentityRealm.",
                        "example": "cloudIdentityRealm"
                    },
                    "expirationInDays": {
                        "type": "integer",
                        "description": "The number of days before the invitation expires.  The range is 1 to 30.  If not specified, the default is 30.",
                        "format": "int32",
                        "example": 7
                    },
                    "groups": {
                        "type": "array",
                        "description": "The list of group IDs to add the user as a member.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "steps": {
                        "type": "array",
                        "description": "An array of MFA steps to perform. Only a single factor of type \"emailLink\" is supported",
                        "items": {
                            "$ref": "#/components/schemas/InviteUserStep"
                        }
                    },
                    "adopterId": {
                        "type": "string",
                        "description": "An identifier that is used to make an invitation to an adopterId + email unique. When you resend the unique invitation, the existing unique invitation with that adopterId + email combination is replaced.  If not present, defaults to \"default\"."
                    }
                }
            },
            "InviteUserStep": {
                "required": [
                    "method"
                ],
                "type": "object",
                "properties": {
                    "method": {
                        "type": "string",
                        "description": "The method that is used to verify the user's identity.",
                        "example": "emailLink",
                        "enum": [
                            "emailLink"
                        ]
                    },
                    "data": {
                        "$ref": "#/components/schemas/Data"
                    }
                }
            },
            "AccessControlAllowOrigin": {
                "required": [
                    "origin",
                    "regex"
                ],
                "type": "object",
                "properties": {
                    "origin": {
                        "type": "string",
                        "description": "Allowed domain or a regular expression for allowed domains.",
                        "example": "https://www.ibm.com"
                    },
                    "regex": {
                        "type": "boolean",
                        "description": "Boolean that indicates if the specified origin is a regular expression."
                    }
                }
            },
            "TargetUrlAllowedHost": {
                "required": [
                    "regex",
                    "targetUrl"
                ],
                "type": "object",
                "properties": {
                    "targetUrl": {
                        "type": "string",
                        "description": "Target URL or a regular expression for allowed hosts.",
                        "example": "https://www.ibm.com"
                    },
                    "regex": {
                        "type": "boolean",
                        "description": "Boolean that indicates if the specified target URL is a regular expression."
                    }
                }
            },
            "TenantPropertiesModelV2": {
                "type": "object",
                "properties": {
                    "accessControlAllowOrigin": {
                        "type": "array",
                        "description": "A list of allowed domains or regular expressions for allowed domains.",
                        "example": "[{\"regex\": false,\"origin\": \"https://www.ibm.com\"},{\"regex\": true,\"origin\": \"^https\"}]",
                        "items": {
                            "$ref": "#/components/schemas/AccessControlAllowOrigin"
                        }
                    },
                    "targetUrlAllowedHostV2": {
                        "type": "array",
                        "description": "A list of target URLs or regular expressions for allowed hosts.",
                        "example": "[{\"regex\": false,\"targetUrl\": \"https://tenantname.com\"},{\"regex\": true,\"targetUrl\": \"^https\"}]",
                        "items": {
                            "$ref": "#/components/schemas/TargetUrlAllowedHost"
                        }
                    },
                    "securityHeaderContentSecurityPolicy": {
                        "type": "string",
                        "description": "A string for the Content Security Policy (CSP) header.",
                        "example": "default-src 'self' example.com *.example.com"
                    }
                }
            },
            "Component_2": {
                "required": [
                    "details",
                    "name",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the component being checked.",
                        "example": "DB connectivity"
                    },
                    "status": {
                        "type": "string",
                        "description": "The resulting status of the health check.",
                        "example": "good"
                    },
                    "details": {
                        "type": "string",
                        "description": "A message about what was checked.",
                        "example": "Connectivity to 'Config store' is good.",
                        "enum": [
                            "good",
                            "bad",
                            "marginal"
                        ]
                    }
                }
            },
            "TenantModel_0": {
                "required": [
                    "tenantUUID",
                    "zkTenant"
                ],
                "type": "object",
                "properties": {
                    "tenantUUID": {
                        "type": "string",
                        "description": "The existing tenant UUID of the tenant that has been exported.  Its a readonly value that is populated on export and should not be changed."
                    },
                    "newTenantUUID": {
                        "type": "string",
                        "description": "The new tenant UUID of the tenant that is being imported.  Its specified on import.  Its an optional field."
                    },
                    "zkTenant": {
                        "$ref": "#/components/schemas/Tenant"
                    }
                }
            },
            "Address_0": {
                "type": "object",
                "properties": {
                    "locality": {
                        "type": "string",
                        "description": "The city or locality component."
                    },
                    "country": {
                        "type": "string",
                        "description": "The country name component."
                    },
                    "type": {
                        "type": "string",
                        "description": "A label indicating the attribute's function; e.g., \"work\" or \"home\".",
                        "enum": [
                            "work"
                        ]
                    },
                    "streetAddress": {
                        "type": "string",
                        "description": "The street address."
                    },
                    "postalCode": {
                        "type": "string",
                        "description": "The postal code."
                    },
                    "formatted": {
                        "type": "string",
                        "description": "The formatted value of the address."
                    },
                    "primary": {
                        "type": "boolean",
                        "description": "Indicates whether this is the primdary address for correspondence."
                    },
                    "region": {
                        "type": "string",
                        "description": "The region."
                    }
                }
            },
            "CICCustomUserResponse_0": {
                "type": "object",
                "properties": {
                    "userCategory": {
                        "type": "string",
                        "description": "The user category. \n",
                        "enum": [
                            "regular",
                            "federated"
                        ]
                    },
                    "emailVerified": {
                        "type": "integer",
                        "description": "A timestamp indicating when the user's email was verified. \n",
                        "format": "int64"
                    },
                    "realm": {
                        "type": "string",
                        "description": "Realm to which the user belongs. Always \"cloudIdentityRealm\" for non-federated users\n"
                    },
                    "unqualifiedUserName": {
                        "type": "string",
                        "description": "Unqualified federated user name. \n"
                    },
                    "twoFactorAuthentication": {
                        "type": "boolean",
                        "description": "Indicates if two factory authentication is required.  Defaults to \"false\" if not provided.  Applies to regular users only. \n"
                    },
                    "pwdReset": {
                        "type": "boolean",
                        "description": "Indicates the password is reset for the current user entry. This value is readonly.\n"
                    },
                    "pwdChangedTime": {
                        "type": "integer",
                        "description": "Indicates the time when the password changed for the current user entry. This value is readonly.\nwas changed.",
                        "format": "int64"
                    },
                    "pwdAccountLockedTime": {
                        "type": "string",
                        "description": "Field indicating timestamp at which the user's password was locked. This value is readonly.\n The value of this field is in milliseconds"
                    },
                    "pwdExpirationWarned": {
                        "type": "string",
                        "description": "Field indicating timestamp at which the user's password expiration is set. This value is readonly.\n The value of this field is in milliseconds"
                    },
                    "pwdFailureTime": {
                        "type": "array",
                        "description": "Field indicating a list of timestamp at which the user attempted to login with wrong password \n The value of this field is in milliseconds. This value is readonly.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "pwdGraceUseTime": {
                        "type": "array",
                        "description": "Field indicating a list of timestamp at which the user attempted to see extended or grace time \n The value of this field is in milliseconds. This value is readonly.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "EmailAddress_0": {
                "required": [
                    "type",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "description": "E-mail addresses for the user. The value SHOULD be canonicalized by the Service Provider, \n e.g. bjensen@example.com instead of bjensen@EXAMPLE.COM"
                    },
                    "type": {
                        "type": "string",
                        "description": "A label indicating the attribute's function; e.g., \"work\".  Only a single email will be allowed",
                        "enum": [
                            "work"
                        ]
                    }
                }
            },
            "Groups_0": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "description": "The display name of the group that the user belongs to."
                    }
                }
            },
            "MetaV2_0": {
                "type": "object",
                "properties": {
                    "resourceType": {
                        "type": "string",
                        "description": "Field indicating the type of resource. \n"
                    },
                    "created": {
                        "type": "string",
                        "description": "A DateTime string indicating when the user was created. \n"
                    },
                    "lastModified": {
                        "type": "string",
                        "description": "A DateTime string indicating when the user was last modified. \n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The URI of the resource being returned. \n"
                    }
                }
            },
            "Name_0": {
                "type": "object",
                "properties": {
                    "formatted": {
                        "type": "string",
                        "description": "The full name including all  username, middle names, and suffixes as appropriate, formatted for display. \nThis value is returned by the Service Provider if  it is not part of the POST payload.  If the POST, PUT  JSON Payload  contains the value for this attribute, the  value in the payload will take precedence."
                    },
                    "familyName": {
                        "type": "string",
                        "description": "The family name of the User, or Last Name in most Western languages \n(e.g. Jensen given the full name Ms. Barbara J Jensen, III.)."
                    },
                    "givenName": {
                        "type": "string",
                        "description": "The given name of the User, or First Name in most Western languages \n(e.g. Barbara given the full name Ms. Barbara J Jensen, III.)."
                    }
                }
            },
            "PhoneNumber_0": {
                "required": [
                    "type",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "description": "Phone numbers for the User. The value SHOULD be canonicalized by the Service Provider \naccording to format in RFC3966 e.g. \"tel:+1-201-555-0123\". Canonical Type values of \nwork, home, mobile, fax, and pager."
                    },
                    "type": {
                        "type": "string",
                        "description": "A label indicating the attribute's function; e.g., \"work\" or \"home\".",
                        "enum": [
                            "work",
                            "home",
                            "mobile",
                            "pager",
                            "fax"
                        ]
                    }
                }
            },
            "Meta_0": {
                "type": "object",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "A DateTime string that indicates when the user was created."
                    },
                    "modified": {
                        "type": "string",
                        "description": "A DateTime string that indicates when the user was last modified."
                    }
                }
            },
            "ExternalErrorMessage_0": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "The error code."
                    },
                    "messageId": {
                        "type": "string",
                        "description": "The ID of the message."
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "The message description."
                    }
                }
            },
            "UserAttribute_0": {
                "required": [
                    "name",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the attribute that is used to find the user's account information.  Choose an attribute name that has a unique value for the user. Attribute names for a user record can be retrieved by using the GET /v2.0/Schema/attributes API.",
                        "example": "email"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the attribute that is used to find the user's account information.",
                        "example": "someuser@somewhere.com"
                    }
                }
            },
            "Group_0": {
                "required": [
                    "displayName",
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the resource as defined by the service.",
                        "example": "6X1000000M"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name for the group.",
                        "example": "Test Group"
                    }
                }
            },
            "UserGroupToEntitlementRevoke": {
                "type": "object",
                "properties": {
                    "users": {
                        "type": "array",
                        "description": "List of users to whom the entitlement will be revoked.",
                        "items": {
                            "$ref": "#/components/schemas/UserToEntitlementRevoke"
                        }
                    },
                    "groups": {
                        "type": "array",
                        "description": "List of groups to whom the entitlement will be revoked.",
                        "items": {
                            "$ref": "#/components/schemas/GroupToEntitlementRevoke"
                        }
                    }
                },
                "description": "Bulk object used to revoke one or more users and groups to an entitlement."
            },
            "ListBulkGrantRevokeEntitlementToUserAddEntitlementToUserRemove": {
                "type": "object",
                "properties": {
                    "grant": {
                        "type": "array",
                        "description": "List of entitlements to grant",
                        "items": {
                            "$ref": "#/components/schemas/EntitlementToUserAdd"
                        }
                    },
                    "revoke": {
                        "type": "array",
                        "description": "List of entitlements to revoke",
                        "items": {
                            "$ref": "#/components/schemas/EntitlementToUserRemove"
                        }
                    }
                },
                "description": "Bulk object used to grant / revoke one or more entitlements"
            },
            "ListResponseReviewAdminAssignment": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/ReviewAdminAssignment"
                        }
                    }
                }
            },
            "UpdateAssignmentRight": {
                "required": [
                    "op",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "description": "The operation to be performed.",
                        "enum": [
                            "add",
                            "remove",
                            "replace"
                        ]
                    },
                    "value": {
                        "type": "string",
                        "description": "The attribute content used for the operation."
                    },
                    "oldValue": {
                        "type": "string",
                        "description": "The old value to replace. This field is mandatory only if the operation is <b>\"replace\"</b>."
                    }
                },
                "description": "Rest representation to update an assignment right value."
            },
            "ListResponseAccessStatistics": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/AccessStatistics"
                        }
                    }
                },
                "description": "Object used to return a list of objects"
            },
            "EntitlementSearch": {
                "type": "object",
                "properties": {
                    "accessInfo": {
                        "$ref": "#/components/schemas/AccessInfo"
                    },
                    "accessType": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Type of the access",
                        "items": {
                            "type": "string"
                        }
                    },
                    "application": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Unique identifier of the application",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sort": {
                        "$ref": "#/components/schemas/Sort"
                    }
                }
            },
            "ListResponseApplicationAssignment": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/ApplicationAssignmentResult"
                        }
                    }
                }
            },
            "ListResponseSelfAdminAssignment": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/SelfAdminAssignment"
                        }
                    }
                }
            },
            "PermissionRemediationInput": {
                "required": [
                    "category",
                    "ext_ref",
                    "rights"
                ],
                "type": "object",
                "properties": {
                    "category": {
                        "type": "string",
                        "description": "Category of the permission",
                        "example": "attribute",
                        "enum": [
                            "attribute",
                            "group",
                            "default"
                        ]
                    },
                    "ext_ref": {
                        "type": "string",
                        "description": "Unique identifier of the permission in the target system",
                        "example": "profile"
                    },
                    "rights": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Right values of the permission",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "EntitlementPropertyBean": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "entitlementCode": {
                        "type": "string"
                    },
                    "tenant": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "dataType": {
                        "type": "string"
                    },
                    "creationUser": {
                        "type": "string"
                    },
                    "creationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastModUser": {
                        "type": "string"
                    },
                    "lastModTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "attr1": {
                        "type": "string"
                    },
                    "attr2": {
                        "type": "string"
                    },
                    "attr3": {
                        "type": "string"
                    },
                    "attr4": {
                        "type": "string"
                    },
                    "attr5": {
                        "type": "string"
                    }
                }
            },
            "Assignment": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the assignment.",
                        "example": "f165f244-43dc-4a54-bb6d-fe3dyd81d8233"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the assignment.",
                        "example": "USER",
                        "enum": [
                            "USER",
                            "GROUP"
                        ]
                    },
                    "entitlement": {
                        "type": "string",
                        "description": "Code of the entitlement.",
                        "example": "d865f244-43dc-4a54-bb6d-fe31ed81d821"
                    },
                    "entitlementName": {
                        "type": "string",
                        "description": "Name of the entitlement.",
                        "example": "read"
                    },
                    "entitlementType": {
                        "type": "string",
                        "description": "Type of the entitlement.",
                        "example": "role"
                    },
                    "entitlementSubType": {
                        "type": "string",
                        "description": "Sub type of the entitlement.",
                        "example": "regular"
                    },
                    "entitlementExtRef": {
                        "type": "string",
                        "description": "Unique identifier of the mapped object in the connected application.",
                        "example": "<unique_identifier>"
                    },
                    "application": {
                        "type": "string",
                        "description": "Id of the application.",
                        "example": "5519128428712589829"
                    },
                    "rights": {
                        "type": "boolean",
                        "description": "Indicate if the entitlement has rights",
                        "readOnly": true,
                        "example": false
                    },
                    "rightValues": {
                        "type": "array",
                        "description": "List of rights values",
                        "example": "[read, write, read_write]",
                        "items": {
                            "type": "string"
                        }
                    },
                    "properties": {
                        "$ref": "#/components/schemas/EntitlementProperties"
                    },
                    "user": {
                        "type": "string",
                        "description": "Code of the user.",
                        "example": "6000005EKH"
                    },
                    "group": {
                        "type": "string",
                        "description": "Code of the group.",
                        "example": "50CFD1VTR1"
                    },
                    "vv": {
                        "type": "boolean",
                        "description": "Indicate if the entitlement is in visibility violation."
                    },
                    "brt": {
                        "type": "boolean",
                        "description": "If true the entitlement is granted for each users in the group."
                    },
                    "creationUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the creator of the entitlement.",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Indicate the creation date of the entitlement.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "lastModUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the last user that has changed the entitlement.",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "lastModTime": {
                        "type": "string",
                        "description": "Indicate the last modification date of the entitlement.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "justification": {
                        "type": "string",
                        "description": "Justification for the delegation"
                    }
                },
                "description": "Rest representation for an assignment."
            },
            "AccessRequestSubmitResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "description": "True if the operation was performed correctly, false otherwise",
                        "readOnly": true
                    },
                    "code": {
                        "type": "string",
                        "description": "Unique identifier",
                        "readOnly": true,
                        "example": "<unique_identifier>"
                    },
                    "messageId": {
                        "type": "string",
                        "description": "Unique identifier of the message error.",
                        "readOnly": true,
                        "example": "<message_error_id>"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "Description of the error.",
                        "readOnly": true,
                        "example": "<message_text>"
                    },
                    "group": {
                        "type": "string",
                        "description": "Code of the group",
                        "example": "50CFD1VTR1"
                    },
                    "entitlement": {
                        "type": "string",
                        "description": "Unique identifier of the entitlement.",
                        "example": "d866d244-43dc-4a54-bb6d-fe31ed81d822"
                    }
                },
                "description": "Response for submit access request."
            },
            "ListBulkGrantRevokeGrantEntitlementToGroupRevokeEntitlementToGroup": {
                "type": "object",
                "properties": {
                    "grant": {
                        "type": "array",
                        "description": "List of entitlements to grant",
                        "items": {
                            "$ref": "#/components/schemas/GrantEntitlementToGroup"
                        }
                    },
                    "revoke": {
                        "type": "array",
                        "description": "List of entitlements to revoke",
                        "items": {
                            "$ref": "#/components/schemas/RevokeEntitlementToGroup"
                        }
                    }
                },
                "description": "Bulk object used to grant / revoke one or more entitlements"
            },
            "PermissionRemediationOutput": {
                "type": "object",
                "properties": {
                    "compliantList": {
                        "type": "array",
                        "description": "List of compliant permissions",
                        "items": {
                            "$ref": "#/components/schemas/PermissionRemediationResult"
                        }
                    },
                    "notFoundInAuthZ": {
                        "type": "array",
                        "description": "List of permissions not found in AuthZ",
                        "items": {
                            "$ref": "#/components/schemas/PermissionRemediationResult"
                        }
                    },
                    "moreInAuthZ": {
                        "type": "array",
                        "description": "List of permissions present only in AuthZ",
                        "items": {
                            "$ref": "#/components/schemas/PermissionRemediationResultWithRight"
                        }
                    },
                    "diffInAuthZList": {
                        "type": "array",
                        "description": "List of right values present in AuthZ",
                        "items": {
                            "$ref": "#/components/schemas/PermissionRemediationResultWithRight"
                        }
                    }
                }
            },
            "ReportConfigOffline": {
                "type": "object",
                "properties": {
                    "application": {
                        "type": "string"
                    },
                    "from": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "to": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "columns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReportColumn"
                        }
                    }
                }
            },
            "RevokeEntitlementToGroup": {
                "required": [
                    "entitlement"
                ],
                "type": "object",
                "properties": {
                    "entitlement": {
                        "type": "string",
                        "description": "Unique identifier of the entitlement.",
                        "example": "d866d244-43dc-4a54-bb6d-fe31ed81d822"
                    },
                    "delete_visibility_violation": {
                        "type": "boolean",
                        "description": "If true all the direct assignments in visibility violation will be delete.",
                        "example": false
                    }
                },
                "description": "Object used to revoke an entitlement to a group"
            },
            "PatchEntitlement": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the entitlement. Unique accross the application",
                        "example": "Test entitlement unique name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description",
                        "example": "Test entitlement description"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Id of the user owner of the entitlement",
                        "example": "<unique ID>"
                    },
                    "conditionSet": {
                        "type": "array",
                        "description": "Condition set to determine the users that belong to this role. And, Example value:[{\"erDepartment\":[{\"op\":\"eq\",\"vl\":\"Security\"},{\"op\":\"ne\",\"vl\":\"Sales\"}],\"erPersonType\":[{\"op\":\"sw\",\"vl\":\"Employee\"},{\"op\":\"ne\",\"vl\":\"Contractor\"}]},{\"erDepartment\":[{\"op\":\"eq\",\"vl\":\"Marketing\"}]}]",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Operation_and_Value"
                                }
                            }
                        }
                    }
                },
                "description": "Rest representation for an application entitlement to be updated."
            },
            "ListResponseDelegateeAdminAssignment": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/DelegateeAdminAssignment"
                        }
                    }
                }
            },
            "EntitlementFindResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "description": "True if the provided entitlement is found, false otherwise",
                        "readOnly": true
                    },
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the entitlement.",
                        "example": "d866d244-43dc-4a54-bb6d-fe31ed81d822"
                    },
                    "entitlementName": {
                        "type": "string",
                        "description": "Name of the entitlement",
                        "readOnly": true,
                        "example": "Basic Access"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the entitlement",
                        "readOnly": true,
                        "enum": [
                            "role",
                            "permission"
                        ]
                    },
                    "application": {
                        "type": "string",
                        "description": "Unique identifier of the application.",
                        "example": "e966d244-ab6d-ab6d-4a54-d866d244d822"
                    },
                    "applicationDetails": {
                        "$ref": "#/components/schemas/ApplicationDetails"
                    },
                    "messageId": {
                        "type": "string",
                        "description": "Unique identifier of the message error.",
                        "readOnly": true,
                        "example": "<message_error_id>"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "Description of the error.",
                        "readOnly": true,
                        "example": "<message_text>"
                    }
                },
                "description": "Response for a entitlement find request."
            },
            "AdminAssignment": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the assignment.",
                        "example": "f165f244-43dc-4a54-bb6d-fe3dyd81d8233"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the assignment.",
                        "example": "USER",
                        "enum": [
                            "USER",
                            "GROUP"
                        ]
                    },
                    "reserved": {
                        "type": "boolean",
                        "description": "Indicate it is a reserved default authorization that can't be deleted.",
                        "readOnly": true,
                        "example": false
                    },
                    "entitlement": {
                        "type": "string",
                        "description": "Code of the entitlement.",
                        "example": "d865f244-43dc-4a54-bb6d-fe31ed81d821"
                    },
                    "entitlementName": {
                        "type": "string",
                        "description": "Name of the entitlement.",
                        "example": "read"
                    },
                    "entitlementType": {
                        "type": "string",
                        "description": "Type of the entitlement.",
                        "example": "role"
                    },
                    "entitlementSubType": {
                        "type": "string",
                        "description": "Sub type of the entitlement.",
                        "example": "regular"
                    },
                    "user": {
                        "type": "string",
                        "description": "Code of the user.",
                        "example": "6000005EKH"
                    },
                    "group": {
                        "type": "string",
                        "description": "Code of the group.",
                        "example": "50CFD1VTR1"
                    },
                    "delegator": {
                        "type": "string",
                        "description": "Code of the delegator.",
                        "example": "50CFD1VTR1"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Indicate if the assignment is enabled or not."
                    },
                    "vv": {
                        "type": "boolean",
                        "description": "Indicate if the entitlement is in visibility violation."
                    },
                    "brt": {
                        "type": "boolean",
                        "description": "If true the entitlement is granted for each users in the group."
                    },
                    "startDate": {
                        "type": "string",
                        "description": "Indicate the start date of the assignment.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "endDate": {
                        "type": "string",
                        "description": "Indicate the end date of the assignment.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "creationUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the creator of the entitlement.",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Indicate the creation date of the entitlement.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "lastModUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the last user that has changed the entitlement.",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "lastModTime": {
                        "type": "string",
                        "description": "Indicate the last modification date of the entitlement.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "userDetails": {
                        "$ref": "#/components/schemas/User_0"
                    },
                    "groupDetails": {
                        "$ref": "#/components/schemas/Group_1"
                    },
                    "delegatorDetails": {
                        "$ref": "#/components/schemas/User_0"
                    },
                    "creationUserDetails": {
                        "$ref": "#/components/schemas/User_0"
                    },
                    "lastModUserDetails": {
                        "$ref": "#/components/schemas/User_0"
                    }
                },
                "description": "Rest representation for an admin assignment."
            },
            "ApplicationDetails": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string"
                    }
                },
                "description": "Rest representation for an application with few details."
            },
            "ProvCfgResult": {
                "required": [
                    "provisioning",
                    "targetId",
                    "targetKey",
                    "targetType"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the provisioning configuration",
                        "readOnly": true,
                        "example": "d865f244-43dc-4a54-bb6d-fe31ed81d821"
                    },
                    "targetId": {
                        "type": "string",
                        "description": "Identifier of the target system",
                        "example": "6096872148"
                    },
                    "targetKey": {
                        "type": "string",
                        "description": "Key of the target system",
                        "example": "549c70ea-89fd-4611-9ccb-d4ce58ec78d0"
                    },
                    "targetType": {
                        "type": "string",
                        "description": "Type of the target system",
                        "example": "Salesforce"
                    },
                    "application": {
                        "type": "string",
                        "description": "Id of the application",
                        "example": "5519383071221766610"
                    },
                    "provisioning": {
                        "type": "integer",
                        "description": "Enable or disable provisioning",
                        "format": "int32",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "creationUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the creator of the entitlement",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Indicate the creation date of the entitlement",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "lastModUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the last user that has changed the entitlement",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "lastModTime": {
                        "type": "string",
                        "description": "Indicate the last modification date of the entitlement",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "description": "Rest representation for an application provisioning policy."
            },
            "AssignmentRight": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the assignment",
                        "example": "f165f244-43dc-4a54-bb6d-fe3dyd81d8233"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the assignment",
                        "enum": [
                            "USER",
                            "GROUP"
                        ]
                    },
                    "entitlement": {
                        "type": "string",
                        "description": "Unique identifier of the entitlement",
                        "example": "d865f244-43dc-4a54-bb6d-fe31ed81d821"
                    },
                    "path": {
                        "type": "string",
                        "description": "Path of the entitlement",
                        "readOnly": true,
                        "example": "/<parent_code>/<child_code>/"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of the right",
                        "example": "d865f244-43dc-4a54-bb6d-fe31ed81d821"
                    },
                    "creationUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the creator of the entitlement",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Indicate the creation date of the entitlement",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "lastModUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the last user that has changed the entitlement",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "lastModTime": {
                        "type": "string",
                        "description": "Indicate the last modification date of the entitlement",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "description": "Rest representation for a generic assignment with right value."
            },
            "ListResponseAccessAssignment": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/AccessAssignment"
                        }
                    }
                }
            },
            "GroupToEntitlementGrant": {
                "required": [
                    "brt",
                    "group"
                ],
                "type": "object",
                "properties": {
                    "group": {
                        "type": "string",
                        "description": "Unique identifier of the group.",
                        "example": "50CFD1VTR1"
                    },
                    "brt": {
                        "type": "boolean",
                        "description": "If true the entitlement will be granted to each users in the group",
                        "example": false
                    },
                    "rights": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Right values",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Object used to grant an entitlement to a group."
            },
            "UpdateAssignmentRightResult": {
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "description": "The operation to be performed.",
                        "enum": [
                            "add",
                            "remove",
                            "replace"
                        ]
                    },
                    "oldValue": {
                        "type": "string",
                        "description": "The old value to replace. This field will not be null if the operation is <b>\"replace\"</b>."
                    },
                    "value": {
                        "type": "string",
                        "description": "The attribute content used for the operation."
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Boolean to indicate if the operation has been done correctly."
                    },
                    "messageId": {
                        "type": "string",
                        "description": "Unique identifier of the admin entitlement.",
                        "example": "<message_error_id>"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "Unique identifier of the admin entitlement.",
                        "example": "<message_text>"
                    }
                }
            },
            "ApplicationAssignmentResult": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the application entitlement.",
                        "readOnly": true,
                        "example": "d866d244-43dc-4a54-bb6d-fe31ed81d822"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the application entitlement.",
                        "example": "appEntitlement"
                    },
                    "application": {
                        "type": "string",
                        "description": "Id of the application",
                        "example": "5519383071221766610"
                    },
                    "hasRights": {
                        "type": "integer",
                        "description": "Does this entitlement have rights associated with it.",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0
                    }
                }
            },
            "GroupToEntitlementRevoke": {
                "required": [
                    "delete_visibility_violation",
                    "group"
                ],
                "type": "object",
                "properties": {
                    "group": {
                        "type": "string",
                        "description": "Unique identifier of the group.",
                        "example": "50CFD1VTR1"
                    },
                    "delete_visibility_violation": {
                        "type": "boolean",
                        "description": "If true the direct assignemnt of the entitlements will be removed",
                        "example": false
                    }
                },
                "description": "Object used to revoke an entitlement to a group."
            },
            "ListResponseAdminAssignment": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/AdminAssignment"
                        }
                    }
                }
            },
            "ListResponseApplicationPermission": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/ApplicationPermission"
                        }
                    }
                }
            },
            "ListResponseGroup": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/Group_1"
                        }
                    }
                }
            },
            "RestrictedAssignmentSearch": {
                "type": "object",
                "properties": {
                    "accessInfo": {
                        "$ref": "#/components/schemas/AccessInfo"
                    },
                    "status": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Status of the access assignment",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sort": {
                        "$ref": "#/components/schemas/Sort"
                    }
                }
            },
            "EntitlementWithChildren": {
                "required": [
                    "application",
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the entitlement. Unique accross the application",
                        "example": "Test entitlement unique name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description",
                        "example": "Test entitlement description"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the entitlement",
                        "enum": [
                            "role",
                            "permission"
                        ]
                    },
                    "subType": {
                        "type": "string",
                        "description": "Sub type of the entitlement.",
                        "enum": [
                            "regular",
                            "dynamic"
                        ]
                    },
                    "application": {
                        "type": "string",
                        "description": "Unique identifier of the application",
                        "example": "<unique identifier>"
                    },
                    "category": {
                        "type": "string",
                        "description": "Category of the entitlement.",
                        "example": "Test category"
                    },
                    "extRef": {
                        "type": "string",
                        "description": "Unique identifier of the mapped object in the connected application.",
                        "example": "<unique_identifier>"
                    },
                    "conditionSet": {
                        "type": "array",
                        "description": "Condition set to determine the users that belong to this role. And, Example value:[{\"erDepartment\":[{\"op\":\"eq\",\"vl\":\"Security\"},{\"op\":\"ne\",\"vl\":\"Sales\"}],\"erPersonType\":[{\"op\":\"sw\",\"vl\":\"Employee\"},{\"op\":\"ne\",\"vl\":\"Contractor\"}]},{\"erDepartment\":[{\"op\":\"eq\",\"vl\":\"Marketing\"}]}]",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Operation_and_Value"
                                }
                            }
                        }
                    },
                    "rightsValues": {
                        "type": "array",
                        "description": "Fixed right values associated to child permissions",
                        "items": {
                            "$ref": "#/components/schemas/EntitlementRight"
                        }
                    }
                }
            },
            "UserTargetRemediationOutput": {
                "required": [
                    "permissions"
                ],
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "Unique identifier of the user",
                        "example": "50T65SKD8C"
                    },
                    "compliant": {
                        "type": "boolean",
                        "description": "Indicate if the data in the microservice are compliant with the input",
                        "example": true
                    },
                    "message": {
                        "type": "string",
                        "description": "Details of why the compare/remediation operation is not performed",
                        "example": "<error_code> - <error_message>"
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/PermissionRemediationOutput"
                    }
                }
            },
            "ListResponseAdminPermission": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/AdminPermission"
                        }
                    }
                }
            },
            "EntitlementStatistics": {
                "required": [
                    "count"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Count",
                        "format": "int32"
                    },
                    "application": {
                        "$ref": "#/components/schemas/ApplicationInfo"
                    },
                    "accessType": {
                        "type": "string",
                        "description": "Type of the access",
                        "readOnly": true,
                        "enum": [
                            "permission",
                            "app role",
                            "admin role",
                            "dynamic role"
                        ]
                    }
                },
                "description": "Statistics of the requestable accesses."
            },
            "EntitlementWithProperties": {
                "type": "object",
                "properties": {
                    "entitlement": {
                        "$ref": "#/components/schemas/EntitlementBean_0"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EntitlementPropertyBean"
                        }
                    }
                }
            },
            "UserTargetRemediationInput": {
                "required": [
                    "permissions",
                    "userId"
                ],
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "Unique identifier of the user",
                        "example": "50T65SKD8C"
                    },
                    "permissions": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "List of permissions",
                        "items": {
                            "$ref": "#/components/schemas/PermissionRemediationInput"
                        }
                    }
                }
            },
            "GroupToAdminEntitlementGrant": {
                "required": [
                    "brt",
                    "group"
                ],
                "type": "object",
                "properties": {
                    "group": {
                        "type": "string",
                        "description": "Unique identifier of the group.",
                        "example": "50CFD1VTR1"
                    },
                    "brt": {
                        "type": "boolean",
                        "description": "If true the entitlement will be granted to each users in the group",
                        "example": false
                    }
                },
                "description": "Object used to grant an entitlement to a group."
            },
            "ListResponseAdminEntitlementRelation": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/AdminEntitlementRelation"
                        }
                    }
                }
            },
            "DelegatorDelegateeAccessAssignment": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the assignment.",
                        "example": "f165f244-43dc-4a54-bb6d-fe3dyd81d8233"
                    },
                    "user": {
                        "type": "string",
                        "description": "Code of the user.",
                        "example": "6000005EKH"
                    },
                    "userDetails": {
                        "$ref": "#/components/schemas/User_0"
                    },
                    "startDate": {
                        "type": "string",
                        "description": "Indicate the start date of the assignment.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "endDate": {
                        "type": "string",
                        "description": "Indicate the end date of the assignment.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "justification": {
                        "type": "string",
                        "description": "Reason for this delegation.",
                        "readOnly": true
                    }
                },
                "description": "Rest representation for delegatee or delgator of an admin assignment."
            },
            "RemediationInput": {
                "required": [
                    "applicationId",
                    "user"
                ],
                "type": "object",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "Unique identifier of the application",
                        "example": "4293929112744398435"
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserTargetRemediationInput"
                    }
                }
            },
            "AdminEntitlementProperties": {
                "type": "object",
                "properties": {
                    "resourceType": {
                        "type": "string",
                        "description": "Indicate the resource type of the entitlement",
                        "readOnly": true
                    }
                }
            },
            "UserGroupToEntitlementGrant": {
                "type": "object",
                "properties": {
                    "users": {
                        "type": "array",
                        "description": "List of users to whom the entitlement will be assigned.",
                        "items": {
                            "$ref": "#/components/schemas/UserToEntitlementGrant"
                        }
                    },
                    "groups": {
                        "type": "array",
                        "description": "List of groups to whom the entitlement will be assigned.",
                        "items": {
                            "$ref": "#/components/schemas/GroupToEntitlementGrant"
                        }
                    }
                },
                "description": "Bulk object used to grant one or more users and groups to an entitlement."
            },
            "AdminResource": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Resource type.",
                        "readOnly": true,
                        "enum": [
                            "user",
                            "group",
                            "application"
                        ]
                    },
                    "value": {
                        "type": "string",
                        "description": "ID of the resource.",
                        "readOnly": true,
                        "example": "600000Y7XF"
                    }
                }
            },
            "ListResponseRestrictedEntitlementChildren": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/RestrictedEntitlementChildren"
                        }
                    }
                }
            },
            "AdminEntitlement": {
                "required": [
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the admin entitlement.",
                        "example": "adminEntitlement"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the admin entitlement.",
                        "example": "Admin Entitlement"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the admin entitlement.",
                        "enum": [
                            "role",
                            "permission"
                        ]
                    },
                    "subType": {
                        "type": "string",
                        "description": "Sub type of the admin entitlement.",
                        "enum": [
                            "regular",
                            "dynamic"
                        ]
                    },
                    "properties": {
                        "$ref": "#/components/schemas/AdminEntitlementProperties"
                    }
                },
                "description": "Rest representation for an admin entitlement."
            },
            "ListResponseAssignmentRight": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/AssignmentRight"
                        }
                    }
                }
            },
            "ListResponseAdminEntitlementChildren": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/AdminEntitlementChildren"
                        }
                    }
                }
            },
            "ListResponseAssignment": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/Assignment"
                        }
                    }
                }
            },
            "UserGroupList": {
                "type": "object",
                "properties": {
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "PatchAdminEntitlement": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the entitlement. Unique accross the application",
                        "example": "Test entitlement unique name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description",
                        "example": "Test entitlement description"
                    },
                    "hasScope": {
                        "type": "boolean",
                        "description": "hasScope"
                    },
                    "conditionSet": {
                        "type": "array",
                        "description": "Condition set to determine the users that belong to this role. And, Example value:[{\"erDepartment\":[{\"op\":\"eq\",\"vl\":\"Security\"},{\"op\":\"ne\",\"vl\":\"Sales\"}],\"erPersonType\":[{\"op\":\"sw\",\"vl\":\"Employee\"},{\"op\":\"ne\",\"vl\":\"Contractor\"}]},{\"erDepartment\":[{\"op\":\"eq\",\"vl\":\"Marketing\"}]}]",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Operation_and_Value"
                                }
                            }
                        }
                    }
                },
                "description": "Rest representation for an admin entitlement to be updated."
            },
            "EntitlementRight": {
                "type": "object",
                "properties": {
                    "entitlement": {
                        "type": "string",
                        "description": "Unique identifier of the permission",
                        "example": "<unique identifier>"
                    },
                    "values": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Values of the rights",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ApplicationResult": {
                "type": "object",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "Unique identifier of the application",
                        "readOnly": true,
                        "example": "2041609960875394734"
                    }
                }
            },
            "BulkGrantRevokeResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "description": "True if the operation was performed correctly, false otherwise",
                        "readOnly": true
                    },
                    "code": {
                        "type": "string",
                        "description": "Unique identifier",
                        "readOnly": true,
                        "example": "<unique_identifier>"
                    },
                    "operation": {
                        "type": "string",
                        "description": "Operation type",
                        "readOnly": true,
                        "enum": [
                            "grant",
                            "revoke"
                        ]
                    },
                    "messageId": {
                        "type": "string",
                        "description": "Unique identifier of the message error.",
                        "readOnly": true,
                        "example": "<message_error_id>"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "Description of the error.",
                        "readOnly": true,
                        "example": "<message_text>"
                    }
                },
                "description": "Object used to return a bulk result for the grant / revoke operation."
            },
            "AdminDelegation": {
                "required": [
                    "assignment",
                    "user"
                ],
                "type": "object",
                "properties": {
                    "assignment": {
                        "type": "string",
                        "description": "Unique identifier of the admin assignment.",
                        "example": "d166d244-43dc-4454-bb6d-ff31ed81d822"
                    },
                    "user": {
                        "type": "string",
                        "description": "Id of the delegatee",
                        "example": "6000005EKH"
                    },
                    "startDate": {
                        "type": "string",
                        "description": "Indicate the start date of the delegation",
                        "format": "date-time"
                    },
                    "expireDate": {
                        "type": "string",
                        "description": "Indicate the expire date of the delegation",
                        "format": "date-time"
                    },
                    "justification": {
                        "type": "string"
                    }
                },
                "description": "Rest representation for an admin delegation."
            },
            "EntitlementRightResult": {
                "required": [
                    "code"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the right",
                        "readOnly": true,
                        "example": "<unique_identifier>"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of the right",
                        "example": "<value>"
                    }
                },
                "description": "Rest representation for an application entitlement right."
            },
            "AdminPermission": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the admin permission.",
                        "readOnly": true,
                        "example": "adminPermission"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the admin permission.",
                        "readOnly": true,
                        "example": "AdminPermission"
                    }
                }
            },
            "UserGroupToAdminEntitlementGrant": {
                "type": "object",
                "properties": {
                    "users": {
                        "type": "array",
                        "description": "List of users to whom the entitlement will be assigned.",
                        "items": {
                            "$ref": "#/components/schemas/UserToAdminEntitlementGrant"
                        }
                    },
                    "groups": {
                        "type": "array",
                        "description": "List of groups to whom the entitlement will be assigned.",
                        "items": {
                            "$ref": "#/components/schemas/GroupToAdminEntitlementGrant"
                        }
                    }
                },
                "description": "Bulk object used to grant one or more users and groups to an entitlement."
            },
            "EntitlementChildren": {
                "required": [
                    "application",
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the entitlement",
                        "readOnly": true,
                        "example": "d865f244-43dc-4a54-bb6d-fe31ed81d821"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the entitlement. Unique accross the application",
                        "example": "Test entitlement unique name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description",
                        "example": "Test entitlement description"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the entitlement",
                        "enum": [
                            "role",
                            "permission"
                        ]
                    },
                    "subType": {
                        "type": "string",
                        "description": "Sub type of the entitlement.",
                        "enum": [
                            "regular",
                            "dynamic"
                        ]
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Indicate if the entitlement is disabled.",
                        "readOnly": true,
                        "example": false
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of a dynamic entitlement",
                        "readOnly": true,
                        "example": "active",
                        "enum": [
                            "waiting",
                            "inprogress",
                            "reviewpublish",
                            "active",
                            "active_waiting",
                            "active_inprogress",
                            "active_reviewpublish",
                            "inactive"
                        ]
                    },
                    "application": {
                        "type": "string",
                        "description": "Unique identifier of the application",
                        "example": "<unique identifier>"
                    },
                    "category": {
                        "type": "string",
                        "description": "Category of the entitlement.",
                        "example": "Test category"
                    },
                    "rights": {
                        "type": "boolean",
                        "description": "Indicate if the entitlement has rights",
                        "readOnly": true
                    },
                    "extRef": {
                        "type": "string",
                        "description": "Unique identifier of the mapped object in the connected application.",
                        "example": "<unique_identifier>"
                    },
                    "assignPolicy": {
                        "type": "integer",
                        "description": "Indicate the assign policy of the entitlement. If the value is 0 the entitlement can be assigned manually, otherwise the entitlement can not be assigned by the user.",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0,
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "properties": {
                        "$ref": "#/components/schemas/EntitlementProperties"
                    },
                    "lvl": {
                        "type": "integer",
                        "description": "Indicate the level of the entitlement.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "path": {
                        "type": "string",
                        "description": "Indicate the path of the entitlement.",
                        "readOnly": true,
                        "example": "/<parent_code>/<child_code>/"
                    },
                    "creationUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the creator of the entitlement",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Indicate the creation date of the entitlement",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "lastModUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the last user that has changed the entitlement",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "lastModTime": {
                        "type": "string",
                        "description": "Indicate the last modification date of the entitlement",
                        "format": "date-time",
                        "readOnly": true
                    }
                }
            },
            "GrantAdminEntitlementToGroup": {
                "required": [
                    "brt",
                    "entitlement"
                ],
                "type": "object",
                "properties": {
                    "entitlement": {
                        "type": "string",
                        "description": "Unique identifier of the entitlement.",
                        "example": "d866d244-43dc-4a54-bb6d-fe31ed81d822"
                    },
                    "brt": {
                        "type": "boolean",
                        "description": "If true the entitlement will be granted to each users in the group.",
                        "example": false
                    }
                }
            },
            "EntitlementRightCanonicalValues": {
                "type": "object",
                "properties": {
                    "entitlement": {
                        "type": "string",
                        "description": "Unique identifier of the entitlement",
                        "example": "d865f244-43dc-4a54-bb6d-fe31ed81d821"
                    },
                    "canonicalValues": {
                        "type": "array",
                        "description": "Canonical values of the rights",
                        "items": {
                            "$ref": "#/components/schemas/EntitlementRightResult"
                        }
                    }
                }
            },
            "RestrictedEntitlementChildren": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the entitlement",
                        "readOnly": true,
                        "example": "<unique identifier>"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the entitlement. Unique accross the application",
                        "example": "Test entitlement unique name"
                    },
                    "label": {
                        "type": "string",
                        "description": "Localization name of the entitlement.",
                        "example": "Admin Entitlement"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the entitlement",
                        "enum": [
                            "role",
                            "permission"
                        ]
                    },
                    "hasScope": {
                        "type": "integer",
                        "description": "Indicate the the entitlement has scope. If the value is 0 the entitlement doesn't have scope, otherwise the entitlement has scope.",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0,
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "rights": {
                        "type": "boolean",
                        "description": "Indicate if the entitlement has rights.",
                        "readOnly": true
                    },
                    "rightsValues": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Rights values associated to this child in the role",
                        "items": {
                            "type": "string"
                        }
                    },
                    "extRef": {
                        "type": "string",
                        "description": "Unique identifier of the mapped object in the connected application.",
                        "example": "<unique_identifier>"
                    },
                    "lvl": {
                        "type": "integer",
                        "description": "Indicate the level of the entitlement.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "path": {
                        "type": "string",
                        "description": "Indicate the path of the entitlement.",
                        "readOnly": true,
                        "example": "/<parent_code>/<child_code>/"
                    },
                    "countChildren": {
                        "type": "integer",
                        "description": "Number of children.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "properties": {
                        "$ref": "#/components/schemas/EntitlementProperties"
                    }
                },
                "description": "Rest representation for entitlement children."
            },
            "ListResponseUser": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/User_0"
                        }
                    }
                }
            },
            "ApplicationPermission": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the admin permission.",
                        "readOnly": true,
                        "example": "adminPermission"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the admin permission.",
                        "readOnly": true,
                        "example": "AdminPermission"
                    },
                    "application": {
                        "type": "string",
                        "description": "Unique identifier of the application",
                        "readOnly": true,
                        "example": "<unique identifier>"
                    }
                }
            },
            "EntitlementRightsValue": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "unique identifier of right.",
                        "example": "<unique_identifier>"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "display name of right.",
                        "example": "Admin"
                    }
                },
                "description": "contains list of right objects."
            },
            "ListBulkGrantRevokeAdminEntitlementToUserAdminEntitlementToUser": {
                "type": "object",
                "properties": {
                    "grant": {
                        "type": "array",
                        "description": "List of entitlements to grant",
                        "items": {
                            "$ref": "#/components/schemas/AdminEntitlementToUser"
                        }
                    },
                    "revoke": {
                        "type": "array",
                        "description": "List of entitlements to revoke",
                        "items": {
                            "$ref": "#/components/schemas/AdminEntitlementToUser"
                        }
                    }
                },
                "description": "Bulk object used to grant / revoke one or more entitlements"
            },
            "HealthStatusComponent": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "details": {
                        "type": "string"
                    },
                    "time": {
                        "type": "string"
                    }
                }
            },
            "ListBulkGrantRevokeAdminResourceAdminResource": {
                "type": "object",
                "properties": {
                    "grant": {
                        "type": "array",
                        "description": "List of entitlements to grant",
                        "items": {
                            "$ref": "#/components/schemas/AdminResource"
                        }
                    },
                    "revoke": {
                        "type": "array",
                        "description": "List of entitlements to revoke",
                        "items": {
                            "$ref": "#/components/schemas/AdminResource"
                        }
                    }
                },
                "description": "Bulk object used to grant / revoke one or more entitlements"
            },
            "IBGroupResource": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Code of IB group resource.",
                        "example": "2041609960875394734"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of entitlement.",
                        "example": "Basic access"
                    },
                    "resourceSubType": {
                        "type": "string",
                        "description": "Entitlement category.",
                        "example": "group"
                    },
                    "rightsRef": {
                        "type": "string",
                        "description": "Rights reference to lookup rights values.",
                        "example": "role"
                    },
                    "rightsLabel": {
                        "type": "string",
                        "description": "Rights lable to display on UI.",
                        "example": "Scope"
                    },
                    "isMandatory": {
                        "type": "boolean",
                        "description": "Rights are mandatory or not for the entitlement.",
                        "example": true
                    },
                    "isMultiValue": {
                        "type": "boolean",
                        "description": "Multi value allowed or not for the entitlement.",
                        "example": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of rights for the entitlement.",
                        "example": "reference"
                    }
                }
            },
            "PermissionRemediationResultWithRight": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the permission",
                        "example": "d865f244-43dc-4a54-bb6d-fe31ed81d821"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the permission",
                        "example": "profile"
                    },
                    "category": {
                        "type": "string",
                        "description": "Category of the permission",
                        "example": "attribute"
                    },
                    "ext_ref": {
                        "type": "string",
                        "description": "Unique identifier of the permission in the target system",
                        "example": "profile"
                    },
                    "remediated": {
                        "type": "boolean",
                        "description": "Indicate if the remediation operation was performed correctly",
                        "example": true
                    },
                    "message": {
                        "type": "string",
                        "description": "Details of why the compare/remediation operation is not performed",
                        "example": "<error_code> - <error_message>"
                    },
                    "targetRights": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Target right values",
                        "items": {
                            "type": "string"
                        }
                    },
                    "rights": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Right values",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "AdminEntitlementDetailsResult": {
                "required": [
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the admin entitlement.",
                        "readOnly": true,
                        "example": "d866d244-43dc-4a54-bb6d-fe31ed81d822"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the admin entitlement.",
                        "example": "adminEntitlement"
                    },
                    "label": {
                        "type": "string",
                        "description": "Localization name of the admin entitlement.",
                        "example": "Admin Entitlement"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the admin entitlement.",
                        "example": "Admin Entitlement"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the admin entitlement.",
                        "enum": [
                            "role",
                            "permission"
                        ]
                    },
                    "subType": {
                        "type": "string",
                        "description": "Sub type of the admin entitlement.",
                        "enum": [
                            "regular",
                            "dynamic"
                        ]
                    },
                    "ootb": {
                        "type": "boolean",
                        "description": "Out Of the box content"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Indicate if the admin entitlement is disabled.",
                        "readOnly": true,
                        "example": false
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of a dynamic admin entitlement",
                        "readOnly": true,
                        "example": "active",
                        "enum": [
                            "waiting",
                            "inprogress",
                            "reviewpublish",
                            "active",
                            "active_waiting",
                            "active_inprogress",
                            "active_reviewpublish",
                            "inactive"
                        ]
                    },
                    "hasScope": {
                        "type": "integer",
                        "description": "Indicate the the entitlement has scope. If the value is 0 the entitlement doesn't have scope, otherwise the entitlement has scope.",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0,
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "assignPolicy": {
                        "type": "integer",
                        "description": "Indicate the assign policy of the entitlement. If the value is 0 the entitlement can be assigned manually, otherwise the entitlement can not be assigned by the user.",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0,
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "subscription": {
                        "type": "string",
                        "description": "Subscription of the admin entitlement.",
                        "example": "cig"
                    },
                    "countChildren": {
                        "type": "integer",
                        "description": "Number of entitlement contained in the role",
                        "format": "int32",
                        "readOnly": true
                    },
                    "creationUserDetails": {
                        "$ref": "#/components/schemas/User_0"
                    },
                    "lastModUserDetails": {
                        "$ref": "#/components/schemas/User_0"
                    },
                    "properties": {
                        "$ref": "#/components/schemas/AdminEntitlementProperties"
                    },
                    "conditionSet": {
                        "type": "array",
                        "description": "Condition set to determine the users that belong to this role. And, Example value:[{\"erDepartment\":[{\"op\":\"eq\",\"vl\":\"Security\"},{\"op\":\"ne\",\"vl\":\"Sales\"}],\"erPersonType\":[{\"op\":\"sw\",\"vl\":\"Employee\"},{\"op\":\"ne\",\"vl\":\"Contractor\"}]},{\"erDepartment\":[{\"op\":\"eq\",\"vl\":\"Marketing\"}]}]",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Operation_and_Value"
                                }
                            }
                        }
                    },
                    "countChildrenPermissions": {
                        "type": "integer",
                        "description": "Number of permissions contained in the role",
                        "format": "int32",
                        "readOnly": true
                    },
                    "countUsers": {
                        "type": "integer",
                        "description": "Number of users granted",
                        "format": "int32",
                        "readOnly": true
                    },
                    "countGroups": {
                        "type": "integer",
                        "description": "Number of groups granted",
                        "format": "int32",
                        "readOnly": true
                    },
                    "evaluationStartTime": {
                        "type": "string",
                        "description": "Evaluation start time",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "evaluationEndTime": {
                        "type": "string",
                        "description": "Evaluation end time",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "Error message for failed admin entitlement",
                        "readOnly": true
                    },
                    "updatedConditionSet": {
                        "type": "array",
                        "description": "Condition set to determine the users that belong to this role. And, Example value:[{\"erDepartment\":[{\"op\":\"eq\",\"vl\":\"Security\"},{\"op\":\"ne\",\"vl\":\"Sales\"}],\"erPersonType\":[{\"op\":\"sw\",\"vl\":\"Employee\"},{\"op\":\"ne\",\"vl\":\"Contractor\"}]},{\"erDepartment\":[{\"op\":\"eq\",\"vl\":\"Marketing\"}]}]",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Operation_and_Value"
                                }
                            }
                        }
                    },
                    "creationUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the creator of the admin entitlement.",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Indicate the creation date of the admin entitlement.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "lastModUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the last user that has changed the admin entitlement.",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "lastModTime": {
                        "type": "string",
                        "description": "Indicate the last modification date of the entitlement.",
                        "format": "date-time",
                        "readOnly": true
                    }
                }
            },
            "EntitlementRelation": {
                "required": [
                    "application",
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the entitlement",
                        "readOnly": true,
                        "example": "d865f244-43dc-4a54-bb6d-fe31ed81d821"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the entitlement. Unique accross the application",
                        "example": "Test entitlement unique name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description",
                        "example": "Test entitlement description"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the entitlement",
                        "enum": [
                            "role",
                            "permission"
                        ]
                    },
                    "subType": {
                        "type": "string",
                        "description": "Sub type of the entitlement.",
                        "enum": [
                            "regular",
                            "dynamic"
                        ]
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Indicate if the entitlement is disabled.",
                        "readOnly": true,
                        "example": false
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of a dynamic entitlement",
                        "readOnly": true,
                        "example": "active",
                        "enum": [
                            "waiting",
                            "inprogress",
                            "reviewpublish",
                            "active",
                            "active_waiting",
                            "active_inprogress",
                            "active_reviewpublish",
                            "inactive"
                        ]
                    },
                    "application": {
                        "type": "string",
                        "description": "Unique identifier of the application",
                        "example": "<unique identifier>"
                    },
                    "category": {
                        "type": "string",
                        "description": "Category of the entitlement.",
                        "example": "Test category"
                    },
                    "rights": {
                        "type": "boolean",
                        "description": "Indicate if the entitlement has rights",
                        "readOnly": true
                    },
                    "extRef": {
                        "type": "string",
                        "description": "Unique identifier of the mapped object in the connected application.",
                        "example": "<unique_identifier>"
                    },
                    "assignPolicy": {
                        "type": "integer",
                        "description": "Indicate the assign policy of the entitlement. If the value is 0 the entitlement can be assigned manually, otherwise the entitlement can not be assigned by the user.",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0,
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "properties": {
                        "$ref": "#/components/schemas/EntitlementProperties"
                    },
                    "lvl": {
                        "type": "integer",
                        "description": "Indicate the level of the entitlement.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "path": {
                        "type": "string",
                        "description": "Indicate the path of the entitlement.",
                        "readOnly": true,
                        "example": "/<parent_code>/<child_code>/"
                    },
                    "group": {
                        "type": "string",
                        "description": "Code of the group.",
                        "readOnly": true,
                        "example": "50CFD1VTR1"
                    },
                    "direct": {
                        "type": "boolean",
                        "description": "Indicate if the entitlement granted directly.",
                        "readOnly": true
                    },
                    "creationUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the creator of the entitlement",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Indicate the creation date of the entitlement",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "lastModUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the last user that has changed the entitlement",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "lastModTime": {
                        "type": "string",
                        "description": "Indicate the last modification date of the entitlement",
                        "format": "date-time",
                        "readOnly": true
                    }
                }
            },
            "UserToEntitlementRevoke": {
                "required": [
                    "user"
                ],
                "type": "object",
                "properties": {
                    "user": {
                        "type": "string",
                        "description": "Unique identifier of the user.",
                        "example": "50T65SKD8C"
                    },
                    "group": {
                        "type": "string",
                        "description": "Code of the group.",
                        "example": "50CFD1VTR1"
                    }
                },
                "description": "Object used to revoke an entitlement to a user."
            },
            "AccessDetailsResult": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the entitlement",
                        "readOnly": true,
                        "example": "<unique identifier>"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the entitlement. Unique accross the application",
                        "readOnly": true,
                        "example": "Test entitlement unique name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description",
                        "readOnly": true,
                        "example": "Test entitlement description"
                    },
                    "accessType": {
                        "type": "string",
                        "description": "Type of the entitlement",
                        "readOnly": true,
                        "enum": [
                            "permission",
                            "app role"
                        ]
                    },
                    "application": {
                        "type": "string",
                        "description": "Unique identifier of the application",
                        "readOnly": true,
                        "example": "<unique identifier>"
                    },
                    "hasRights": {
                        "type": "boolean",
                        "description": "Indicate if the entitlement has rights.",
                        "readOnly": true
                    },
                    "properties": {
                        "$ref": "#/components/schemas/EntitlementProperties"
                    },
                    "applicationDetails": {
                        "$ref": "#/components/schemas/ApplicationDetails"
                    },
                    "fixedRights": {
                        "type": "array",
                        "description": "Fixed right values of the entitlement",
                        "items": {
                            "$ref": "#/components/schemas/EntitlementRight"
                        }
                    },
                    "countChildren": {
                        "type": "integer",
                        "description": "Indicate the number of children for the entitlement",
                        "format": "int32",
                        "readOnly": true
                    },
                    "countChildrenPermissions": {
                        "type": "integer",
                        "description": "Number of permissions contained in the role",
                        "format": "int32",
                        "readOnly": true
                    }
                }
            },
            "ListBulkGrantRevokeAdminDelegationString": {
                "type": "object",
                "properties": {
                    "grant": {
                        "type": "array",
                        "description": "List of entitlements to grant",
                        "items": {
                            "$ref": "#/components/schemas/AdminDelegation"
                        }
                    },
                    "revoke": {
                        "type": "array",
                        "description": "List of entitlements to revoke",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Bulk object used to grant / revoke one or more entitlements"
            },
            "EnvironmentDetails": {
                "type": "object",
                "properties": {
                    "service": {
                        "type": "string"
                    },
                    "build": {
                        "type": "string"
                    },
                    "cbi": {
                        "type": "string"
                    },
                    "hostname": {
                        "type": "string"
                    }
                }
            },
            "AccessRequestResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "description": "True if the operation was performed correctly, false otherwise",
                        "readOnly": true
                    },
                    "code": {
                        "type": "string",
                        "description": "Unique identifier",
                        "readOnly": true,
                        "example": "<unique_identifier>"
                    },
                    "messageId": {
                        "type": "string",
                        "description": "Unique identifier of the message error.",
                        "readOnly": true,
                        "example": "<message_error_id>"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "Description of the error.",
                        "readOnly": true,
                        "example": "<message_text>"
                    }
                },
                "description": "Response for an operation on access request."
            },
            "UserToAdminEntitlementGrant": {
                "required": [
                    "user"
                ],
                "type": "object",
                "properties": {
                    "user": {
                        "type": "string",
                        "description": "Unique identifier of the user.",
                        "example": "50T65SKD8C"
                    },
                    "group": {
                        "type": "string",
                        "description": "Code of the group.",
                        "example": "50CFD1VTR1"
                    }
                },
                "description": "Object used to grant an entitlement to a user."
            },
            "AdminEntitlementToUser": {
                "required": [
                    "entitlement"
                ],
                "type": "object",
                "properties": {
                    "entitlement": {
                        "type": "string",
                        "description": "Unique identifier of the admin entitlement.",
                        "example": "d866d244-43dc-4a54-bb6d-fe31ed81d822"
                    },
                    "group": {
                        "type": "string",
                        "description": "Code of the group",
                        "example": "50CFD1VTR1"
                    }
                },
                "description": "Object used to grant/revoke an admin entitlement to a user"
            },
            "AdminEntitlementResourceGrouped": {
                "type": "object",
                "properties": {
                    "entitlement": {
                        "type": "string",
                        "description": "Unique identifier of the admin entitlement.",
                        "readOnly": true,
                        "example": "d866d244-43dc-4a54-bb6d-fe31ed81d822"
                    },
                    "scopeRestriction": {
                        "type": "boolean",
                        "description": "True when the user has limited scope for the current entitlement, false when user can access all resources without any limitation.",
                        "readOnly": true
                    },
                    "count": {
                        "type": "integer",
                        "description": "Total number of resources for the entitlement.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of resources.",
                        "items": {
                            "$ref": "#/components/schemas/AdminResource"
                        }
                    },
                    "messageId": {
                        "type": "string",
                        "description": "Unique identifier of the message error.",
                        "readOnly": true,
                        "example": "<message_error_id>"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "Description of the error.",
                        "readOnly": true,
                        "example": "<message_text>"
                    }
                }
            },
            "BulkAddRemoveChildrenEntitlement": {
                "type": "object",
                "properties": {
                    "add": {
                        "type": "array",
                        "description": "List of entitlements children to add",
                        "items": {
                            "$ref": "#/components/schemas/Entitlement_1"
                        }
                    },
                    "remove": {
                        "type": "array",
                        "description": "List of entitlements children to remove",
                        "items": {
                            "type": "string"
                        }
                    },
                    "rights": {
                        "type": "array",
                        "description": "Fixed right values for each permissions",
                        "items": {
                            "$ref": "#/components/schemas/EntitlementRight"
                        }
                    }
                },
                "description": "Bulk object used to add / remove one or more entitlements children."
            },
            "AssignmentSearch": {
                "type": "object",
                "properties": {
                    "accessInfo": {
                        "$ref": "#/components/schemas/AccessInfo"
                    },
                    "accessType": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Type of the access",
                        "items": {
                            "type": "string"
                        }
                    },
                    "application": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Unique identifier of the application",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sort": {
                        "$ref": "#/components/schemas/Sort"
                    },
                    "status": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Status of the access assignment",
                        "items": {
                            "type": "string"
                        }
                    },
                    "assignmentSource": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Type of the access assignment",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "AssignmentFulfillment": {
                "required": [
                    "entitlement",
                    "isFulfilled",
                    "user"
                ],
                "type": "object",
                "properties": {
                    "entitlement": {
                        "$ref": "#/components/schemas/EntitlementForFulfillment"
                    },
                    "user": {
                        "type": "string",
                        "description": "User code of the User"
                    },
                    "account": {
                        "type": "string",
                        "description": "Account code of the user"
                    },
                    "isFulfilled": {
                        "type": "boolean",
                        "description": "Determines if the assignment was fulfilled at the target"
                    }
                }
            },
            "AccessAssignment": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the assignment.",
                        "example": "f165f244-43dc-4a54-bb6d-fe3dyd81d8233"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the assignment.",
                        "example": "USER",
                        "enum": [
                            "USER",
                            "GROUP"
                        ]
                    },
                    "group": {
                        "type": "string",
                        "description": "Code of the group.",
                        "example": "50CFD1VTR1"
                    },
                    "entitlement": {
                        "type": "string",
                        "description": "Code of the entitlement.",
                        "example": "d865f244-43dc-4a54-bb6d-fe31ed81d821"
                    },
                    "entitlementName": {
                        "type": "string",
                        "description": "Name of the entitlement.",
                        "example": "read"
                    },
                    "entitlementDesc": {
                        "type": "string",
                        "description": "Description of entitlement"
                    },
                    "accessType": {
                        "type": "string",
                        "description": "Type of the entitlement.",
                        "example": "role"
                    },
                    "application": {
                        "type": "string",
                        "description": "Id of the application.",
                        "example": "5519128428712589829"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of access",
                        "readOnly": true,
                        "enum": [
                            "active",
                            "fullfillment_failed"
                        ]
                    },
                    "assignmentSource": {
                        "type": "string",
                        "description": "Type of access assignment",
                        "readOnly": true,
                        "enum": [
                            "assigned",
                            "delegated"
                        ]
                    },
                    "applicationDetails": {
                        "$ref": "#/components/schemas/ApplicationDetails"
                    },
                    "groupDetails": {
                        "$ref": "#/components/schemas/Group_1"
                    }
                },
                "description": "Rest representation for an access assignment."
            },
            "RemediationOutput": {
                "type": "object",
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/UserTargetRemediationOutput"
                    }
                }
            },
            "BulkAddRemoveChildrenResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "description": "True if the operation was performed correctly, false otherwise",
                        "readOnly": true
                    },
                    "operation": {
                        "type": "string",
                        "description": "Operation type",
                        "readOnly": true,
                        "enum": [
                            "add",
                            "remove"
                        ]
                    },
                    "entitlement": {
                        "type": "string",
                        "description": "Entitlement on which the operation was performed",
                        "readOnly": true,
                        "example": "48cb02e7-07a5-4cb0-a6ba-c5556e94c184"
                    },
                    "messageId": {
                        "type": "string",
                        "description": "Unique identifier of the message error.",
                        "readOnly": true,
                        "example": "<message_error_id>"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "Description of the error.",
                        "readOnly": true,
                        "example": "<message_text>"
                    }
                },
                "description": "Object used to return a bulk result for the add / remove children operation."
            },
            "Sort": {
                "type": "object",
                "properties": {
                    "attribute": {
                        "type": "string",
                        "description": "Attribute on which results will be sorted",
                        "readOnly": true,
                        "example": "name",
                        "enum": [
                            "name",
                            "description"
                        ]
                    },
                    "asc": {
                        "type": "boolean",
                        "description": "Ascending order of sorted results or not",
                        "readOnly": true
                    }
                },
                "description": "Rest representation for sort."
            },
            "ReportConfig": {
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "application": {
                        "type": "string"
                    },
                    "from": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "to": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "columns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReportColumn"
                        }
                    }
                }
            },
            "ListResponseAdminEntitlement": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/AdminEntitlementResult"
                        }
                    }
                }
            },
            "ListResponseManagedAttribute": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/ReportAttribute"
                        }
                    }
                }
            },
            "BulkGrantRevokeUserGroupToEntitlementGrantUserGroupToEntitlementRevoke": {
                "type": "object",
                "properties": {
                    "grant": {
                        "$ref": "#/components/schemas/UserGroupToEntitlementGrant"
                    },
                    "revoke": {
                        "$ref": "#/components/schemas/UserGroupToEntitlementRevoke"
                    }
                },
                "description": "Bulk object used to grant / revoke one or more entitlements"
            },
            "DelegateeAdminAssignment": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the assignment.",
                        "example": "f165f244-43dc-4a54-bb6d-fe3dyd81d8233"
                    },
                    "user": {
                        "type": "string",
                        "description": "Code of the user.",
                        "example": "6000005EKH"
                    },
                    "userDetails": {
                        "$ref": "#/components/schemas/User_0"
                    },
                    "startDate": {
                        "type": "string",
                        "description": "Indicate the start date of the assignment.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "endDate": {
                        "type": "string",
                        "description": "Indicate the end date of the assignment.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "justification": {
                        "type": "string",
                        "description": "Reason for this delegation.",
                        "readOnly": true
                    }
                },
                "description": "Rest representation for delegatee admin assignments."
            },
            "AdminEntitlementResult": {
                "required": [
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the admin entitlement.",
                        "readOnly": true,
                        "example": "d866d244-43dc-4a54-bb6d-fe31ed81d822"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the admin entitlement.",
                        "example": "adminEntitlement"
                    },
                    "label": {
                        "type": "string",
                        "description": "Localization name of the admin entitlement.",
                        "example": "Admin Entitlement"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the admin entitlement.",
                        "example": "Admin Entitlement"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the admin entitlement.",
                        "enum": [
                            "role",
                            "permission"
                        ]
                    },
                    "subType": {
                        "type": "string",
                        "description": "Sub type of the admin entitlement.",
                        "enum": [
                            "regular",
                            "dynamic"
                        ]
                    },
                    "ootb": {
                        "type": "boolean",
                        "description": "Out Of the box content"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Indicate if the admin entitlement is disabled.",
                        "readOnly": true,
                        "example": false
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of a dynamic admin entitlement",
                        "readOnly": true,
                        "example": "active",
                        "enum": [
                            "waiting",
                            "inprogress",
                            "reviewpublish",
                            "active",
                            "active_waiting",
                            "active_inprogress",
                            "active_reviewpublish",
                            "inactive"
                        ]
                    },
                    "hasScope": {
                        "type": "integer",
                        "description": "Indicate the the entitlement has scope. If the value is 0 the entitlement doesn't have scope, otherwise the entitlement has scope.",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0,
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "assignPolicy": {
                        "type": "integer",
                        "description": "Indicate the assign policy of the entitlement. If the value is 0 the entitlement can be assigned manually, otherwise the entitlement can not be assigned by the user.",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0,
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "subscription": {
                        "type": "string",
                        "description": "Subscription of the admin entitlement.",
                        "example": "cig"
                    },
                    "countChildren": {
                        "type": "integer",
                        "description": "Number of entitlement contained in the role",
                        "format": "int32",
                        "readOnly": true
                    },
                    "creationUserDetails": {
                        "$ref": "#/components/schemas/User_0"
                    },
                    "lastModUserDetails": {
                        "$ref": "#/components/schemas/User_0"
                    },
                    "properties": {
                        "$ref": "#/components/schemas/AdminEntitlementProperties"
                    },
                    "creationUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the creator of the admin entitlement.",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Indicate the creation date of the admin entitlement.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "lastModUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the last user that has changed the admin entitlement.",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "lastModTime": {
                        "type": "string",
                        "description": "Indicate the last modification date of the entitlement.",
                        "format": "date-time",
                        "readOnly": true
                    }
                }
            },
            "SelfAdminAssignment": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the assignment.",
                        "example": "f165f244-43dc-4a54-bb6d-fe3dyd81d8233"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the assignment.",
                        "example": "USER",
                        "enum": [
                            "USER",
                            "GROUP"
                        ]
                    },
                    "reserved": {
                        "type": "boolean",
                        "description": "Indicate it is a reserved default authorization that can't be deleted.",
                        "readOnly": true,
                        "example": false
                    },
                    "entitlement": {
                        "type": "string",
                        "description": "Code of the entitlement.",
                        "example": "d865f244-43dc-4a54-bb6d-fe31ed81d821"
                    },
                    "entitlementName": {
                        "type": "string",
                        "description": "Name of the entitlement.",
                        "example": "read"
                    },
                    "entitlementType": {
                        "type": "string",
                        "description": "Type of the entitlement.",
                        "example": "role"
                    },
                    "entitlementSubType": {
                        "type": "string",
                        "description": "Sub type of the entitlement.",
                        "example": "regular"
                    },
                    "entitlementDesc": {
                        "type": "string",
                        "description": "Description of the entitlement.",
                        "example": "role"
                    },
                    "user": {
                        "type": "string",
                        "description": "Code of the user.",
                        "example": "6000005EKH"
                    },
                    "group": {
                        "type": "string",
                        "description": "Code of the group.",
                        "example": "50CFD1VTR1"
                    },
                    "delegator": {
                        "type": "string",
                        "description": "Code of the delegator.",
                        "example": "50CFD1VTR1"
                    },
                    "delegatorDetails": {
                        "$ref": "#/components/schemas/User_0"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Indicate if the assignment is enabled or not."
                    },
                    "vv": {
                        "type": "boolean",
                        "description": "Indicate if the entitlement is in visibility violation."
                    },
                    "brt": {
                        "type": "boolean",
                        "description": "If true the entitlement is granted for each users in the group."
                    },
                    "justification": {
                        "type": "string",
                        "description": "Indicate the justification of the assignment.",
                        "readOnly": true
                    },
                    "startDate": {
                        "type": "string",
                        "description": "Indicate the start date of the assignment.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "endDate": {
                        "type": "string",
                        "description": "Indicate the end date of the assignment.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "creationUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the creator of the entitlement.",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Indicate the creation date of the entitlement.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "lastModUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the last user that has changed the entitlement.",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "lastModTime": {
                        "type": "string",
                        "description": "Indicate the last modification date of the entitlement.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "delegatees": {
                        "type": "array",
                        "description": "List of delegatees for this assignment",
                        "items": {
                            "$ref": "#/components/schemas/User_0"
                        }
                    }
                },
                "description": "Rest representation for self admin assignments."
            },
            "ListResponseReportStatus": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/ReportStatus"
                        }
                    }
                }
            },
            "AdminAssignmentResult": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the admin entitlement.",
                        "readOnly": true,
                        "example": "d866d244-43dc-4a54-bb6d-fe31ed81d822"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the admin entitlement.",
                        "example": "adminEntitlement"
                    },
                    "scope": {
                        "type": "integer",
                        "description": "Scope of the permission.",
                        "format": "int32",
                        "example": 1
                    }
                }
            },
            "ReviewAdminAssignment": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of the assignment.",
                        "example": "USER",
                        "enum": [
                            "USER"
                        ]
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the assignment.",
                        "example": "ADDED",
                        "enum": [
                            "ADDED",
                            "REMOVED"
                        ]
                    },
                    "entitlement": {
                        "type": "string",
                        "description": "Code of the entitlement.",
                        "example": "d865f244-43dc-4a54-bb6d-fe31ed81d821"
                    },
                    "user": {
                        "type": "string",
                        "description": "Code of the user.",
                        "example": "6000005EKH"
                    },
                    "userDetails": {
                        "$ref": "#/components/schemas/User_0"
                    }
                },
                "description": "Rest representation for a review admin assignment."
            },
            "ListResponseAccesses": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/AccessResult_0"
                        }
                    }
                }
            },
            "ListAdminEntitlementResource": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/AdminEntitlementResourceGrouped"
                        }
                    }
                }
            },
            "EntitlementProperties": {
                "type": "object",
                "properties": {
                    "rightsRef": {
                        "type": "string",
                        "description": "Rights reference to lookup rights values.",
                        "readOnly": true,
                        "example": "permissionSet"
                    },
                    "rightsLabel": {
                        "type": "string",
                        "description": "Rights label to display on UI.",
                        "readOnly": true,
                        "example": "Rights"
                    },
                    "mandatory": {
                        "type": "string",
                        "description": "Indicate if the entitlement is mandatory",
                        "readOnly": true,
                        "example": "false"
                    },
                    "multivalue": {
                        "type": "string",
                        "description": "Indicate if the entitlement can have one or more right values",
                        "readOnly": true,
                        "example": "true"
                    },
                    "type": {
                        "type": "string",
                        "description": "Indicate the type of the right value",
                        "readOnly": true,
                        "example": "reference"
                    },
                    "canonicalValues": {
                        "type": "array",
                        "description": "Indicate the canonical values supported by permission",
                        "example": "[admin, user]",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "EntitylistString": {
                "type": "object",
                "properties": {
                    "entities": {
                        "type": "array",
                        "description": "entities",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "List of entitlements or assignments"
            },
            "ListResponseEntitlement": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/EntitlementResult"
                        }
                    }
                }
            },
            "ListResourcesResponse": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "scopeRestriction": {
                        "type": "boolean",
                        "description": "True when the user has limited scope for the current entitlement, false when user can access all resources without any limitation.",
                        "readOnly": true
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of resources",
                        "items": {
                            "$ref": "#/components/schemas/AdminResource"
                        }
                    }
                },
                "description": "Object used to return a list of resources"
            },
            "ListBulkGrantRevokeStringString": {
                "type": "object",
                "properties": {
                    "grant": {
                        "type": "array",
                        "description": "List of entitlements to grant",
                        "items": {
                            "type": "string"
                        }
                    },
                    "revoke": {
                        "type": "array",
                        "description": "List of entitlements to revoke",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Bulk object used to grant / revoke one or more entitlements"
            },
            "UserGroups": {
                "type": "object",
                "properties": {
                    "groups": {
                        "type": "array",
                        "description": "List of user's group code.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ReviewAssignment": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of the assignment.",
                        "example": "USER",
                        "enum": [
                            "USER"
                        ]
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the assignment.",
                        "example": "ADDED",
                        "enum": [
                            "ADDED",
                            "REMOVED"
                        ]
                    },
                    "entitlement": {
                        "type": "string",
                        "description": "Code of the entitlement.",
                        "example": "d865f244-43dc-4a54-bb6d-fe31ed81d821"
                    },
                    "user": {
                        "type": "string",
                        "description": "Code of the user.",
                        "example": "6000005EKH"
                    },
                    "userDetails": {
                        "$ref": "#/components/schemas/User_0"
                    }
                },
                "description": "Rest representation for a reivew assignment."
            },
            "RemoveUser": {
                "required": [
                    "user"
                ],
                "type": "object",
                "properties": {
                    "user": {
                        "type": "string",
                        "description": "user"
                    },
                    "ownsOtherResource": {
                        "type": "boolean",
                        "description": "ownsOtherResource"
                    }
                },
                "description": "Object used to remove a user from an entitlement."
            },
            "BulkGrantRevokeUserGroupToAdminEntitlementGrantUserGroupToEntitlementRevoke": {
                "type": "object",
                "properties": {
                    "grant": {
                        "$ref": "#/components/schemas/UserGroupToAdminEntitlementGrant"
                    },
                    "revoke": {
                        "$ref": "#/components/schemas/UserGroupToEntitlementRevoke"
                    }
                },
                "description": "Bulk object used to grant / revoke one or more entitlements"
            },
            "AccessAssignmentDetailsResult": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the assignment.",
                        "example": "f165f244-43dc-4a54-bb6d-fe3dyd81d8233"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the assignment.",
                        "example": "USER",
                        "enum": [
                            "USER",
                            "GROUP"
                        ]
                    },
                    "group": {
                        "type": "string",
                        "description": "Code of the group.",
                        "example": "50CFD1VTR1"
                    },
                    "entitlement": {
                        "type": "string",
                        "description": "Code of the entitlement.",
                        "example": "d865f244-43dc-4a54-bb6d-fe31ed81d821"
                    },
                    "entitlementName": {
                        "type": "string",
                        "description": "Name of the entitlement.",
                        "example": "read"
                    },
                    "entitlementDesc": {
                        "type": "string",
                        "description": "Description of entitlement"
                    },
                    "accessType": {
                        "type": "string",
                        "description": "Type of the entitlement.",
                        "example": "role"
                    },
                    "application": {
                        "type": "string",
                        "description": "Id of the application.",
                        "example": "5519128428712589829"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of access",
                        "readOnly": true,
                        "enum": [
                            "active",
                            "fullfillment_failed"
                        ]
                    },
                    "assignmentSource": {
                        "type": "string",
                        "description": "Type of access assignment",
                        "readOnly": true,
                        "enum": [
                            "assigned",
                            "delegated"
                        ]
                    },
                    "applicationDetails": {
                        "$ref": "#/components/schemas/ApplicationDetails"
                    },
                    "groupDetails": {
                        "$ref": "#/components/schemas/Group_1"
                    },
                    "delegator": {
                        "$ref": "#/components/schemas/DelegatorDelegateeAccessAssignment"
                    },
                    "delegatees": {
                        "type": "array",
                        "description": "Delegatee details",
                        "items": {
                            "$ref": "#/components/schemas/DelegatorDelegateeAccessAssignment"
                        }
                    }
                }
            },
            "EntitylistRequestedEntilement": {
                "type": "object",
                "properties": {
                    "entities": {
                        "type": "array",
                        "description": "entities",
                        "items": {
                            "$ref": "#/components/schemas/RequestedEntilement"
                        }
                    }
                },
                "description": "List of entitlements or assignments"
            },
            "ApplicationInfo": {
                "required": [
                    "id",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Application ID"
                    },
                    "name": {
                        "type": "string",
                        "description": "Application Name"
                    }
                }
            },
            "ListResponseEntitlementStatistics.java": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/EntitlementStatistics"
                        }
                    }
                }
            },
            "EntitlementFilter": {
                "required": [
                    "application",
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the entitlement.",
                        "example": "d865f244-43dc-4a54-bb6d-fe31ed81d821"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the entitlement. Unique accross the application",
                        "example": "Test entitlement unique name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description",
                        "example": "Test entitlement description"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the entitlement",
                        "enum": [
                            "role",
                            "permission"
                        ]
                    },
                    "subType": {
                        "type": "string",
                        "description": "Sub type of the entitlement.",
                        "enum": [
                            "regular",
                            "dynamic"
                        ]
                    },
                    "application": {
                        "type": "string",
                        "description": "Unique identifier of the application",
                        "example": "<unique identifier>"
                    },
                    "category": {
                        "type": "string",
                        "description": "Category of the entitlement.",
                        "example": "Test category"
                    },
                    "extRef": {
                        "type": "string",
                        "description": "Unique identifier of the mapped object in the connected application.",
                        "example": "<unique_identifier>"
                    }
                }
            },
            "UserToEntitlementGrant": {
                "required": [
                    "user"
                ],
                "type": "object",
                "properties": {
                    "user": {
                        "type": "string",
                        "description": "Unique identifier of the user.",
                        "example": "50T65SKD8C"
                    },
                    "group": {
                        "type": "string",
                        "description": "Code of the group.",
                        "example": "50CFD1VTR1"
                    },
                    "rights": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Right values",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Object used to grant an entitlement to a user."
            },
            "BulkAddRemoveIBGroupResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "description": "True if the operation was performed correctly, false otherwise",
                        "readOnly": true
                    },
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the assignment",
                        "readOnly": true,
                        "example": "<unique_identifier>"
                    },
                    "operation": {
                        "type": "string",
                        "description": "Operation type",
                        "readOnly": true,
                        "enum": [
                            "add",
                            "remove"
                        ]
                    },
                    "messageId": {
                        "type": "string",
                        "description": "Unique identifier of the message error",
                        "readOnly": true,
                        "example": "<message_error_id>"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "Description of the error",
                        "readOnly": true,
                        "example": "<message_text>"
                    },
                    "ibresource": {
                        "type": "string"
                    }
                },
                "description": "Object used to return a bulk result for the operation."
            },
            "UserInfo": {
                "type": "object",
                "properties": {
                    "user": {
                        "type": "string"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "AdminEntitlementRelation": {
                "required": [
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the admin entitlement.",
                        "readOnly": true,
                        "example": "d866d244-43dc-4a54-bb6d-fe31ed81d822"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the admin entitlement.",
                        "example": "adminEntitlement"
                    },
                    "label": {
                        "type": "string",
                        "description": "Localization name of the admin entitlement.",
                        "example": "Admin Entitlement"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the admin entitlement.",
                        "example": "Admin Entitlement"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the admin entitlement.",
                        "enum": [
                            "role",
                            "permission"
                        ]
                    },
                    "subType": {
                        "type": "string",
                        "description": "Sub type of the admin entitlement.",
                        "enum": [
                            "regular",
                            "dynamic"
                        ]
                    },
                    "ootb": {
                        "type": "boolean",
                        "description": "Out Of the box content"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Indicate if the admin entitlement is disabled.",
                        "readOnly": true,
                        "example": false
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of a dynamic admin entitlement",
                        "readOnly": true,
                        "example": "active",
                        "enum": [
                            "waiting",
                            "inprogress",
                            "reviewpublish",
                            "active",
                            "active_waiting",
                            "active_inprogress",
                            "active_reviewpublish",
                            "inactive"
                        ]
                    },
                    "hasScope": {
                        "type": "integer",
                        "description": "Indicate the the entitlement has scope. If the value is 0 the entitlement doesn't have scope, otherwise the entitlement has scope.",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0,
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "assignPolicy": {
                        "type": "integer",
                        "description": "Indicate the assign policy of the entitlement. If the value is 0 the entitlement can be assigned manually, otherwise the entitlement can not be assigned by the user.",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0,
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "subscription": {
                        "type": "string",
                        "description": "Subscription of the admin entitlement.",
                        "example": "cig"
                    },
                    "countChildren": {
                        "type": "integer",
                        "description": "Number of entitlement contained in the role",
                        "format": "int32",
                        "readOnly": true
                    },
                    "creationUserDetails": {
                        "$ref": "#/components/schemas/User_0"
                    },
                    "lastModUserDetails": {
                        "$ref": "#/components/schemas/User_0"
                    },
                    "properties": {
                        "$ref": "#/components/schemas/AdminEntitlementProperties"
                    },
                    "lvl": {
                        "type": "integer",
                        "description": "Indicate the level of the admin entitlement.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "path": {
                        "type": "string",
                        "description": "Indicate the path of the admin entitlement.",
                        "readOnly": true,
                        "example": "/<parent_code>/<child_code>/"
                    },
                    "groupCode": {
                        "type": "string",
                        "description": "Code of the group.",
                        "readOnly": true,
                        "example": "50CFD1VTR1"
                    },
                    "delegator": {
                        "type": "string",
                        "description": "Code of the delegator.",
                        "example": "50CFD1VTR1"
                    },
                    "vv": {
                        "type": "boolean",
                        "description": "Indicate if the entitlement is in visibility violation.",
                        "readOnly": true
                    },
                    "direct": {
                        "type": "boolean",
                        "description": "Indicate if the entitlement granted directly.",
                        "readOnly": true
                    },
                    "startDate": {
                        "type": "string",
                        "description": "Indicate the start date of the assignment.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "endDate": {
                        "type": "string",
                        "description": "Indicate the end date of the assignment.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "creationUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the creator of the admin entitlement.",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Indicate the creation date of the admin entitlement.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "lastModUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the last user that has changed the admin entitlement.",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "lastModTime": {
                        "type": "string",
                        "description": "Indicate the last modification date of the entitlement.",
                        "format": "date-time",
                        "readOnly": true
                    }
                }
            },
            "ListResponseAdminAssignment1": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/AdminAssignmentResult"
                        }
                    }
                }
            },
            "AdminEntitlementFilter": {
                "required": [
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the admin entitlement.",
                        "example": "d865f244-43dc-4a54-bb6d-fe31ed81d821"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the admin entitlement.",
                        "example": "adminEntitlement"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the admin entitlement.",
                        "example": "Admin Entitlement"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the admin entitlement.",
                        "enum": [
                            "role",
                            "permission"
                        ]
                    },
                    "subType": {
                        "type": "string",
                        "description": "Sub type of the admin entitlement.",
                        "enum": [
                            "regular",
                            "dynamic"
                        ]
                    },
                    "properties": {
                        "$ref": "#/components/schemas/AdminEntitlementProperties"
                    },
                    "hasScope": {
                        "type": "integer",
                        "description": "Indicate the the entitlement has scope. If the value is 0 the entitlement doesn't have scope, otherwise the entitlement has scope.",
                        "format": "int32",
                        "example": 0,
                        "enum": [
                            0,
                            1
                        ]
                    }
                }
            },
            "ListResponseEntitlementRelation": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/EntitlementRelation"
                        }
                    }
                }
            },
            "GrantEntitlementToGroup": {
                "required": [
                    "brt",
                    "entitlement"
                ],
                "type": "object",
                "properties": {
                    "entitlement": {
                        "type": "string",
                        "description": "Unique identifier of the entitlement.",
                        "example": "d866d244-43dc-4a54-bb6d-fe31ed81d822"
                    },
                    "brt": {
                        "type": "boolean",
                        "description": "If true the entitlement will be granted to each users in the group.",
                        "example": false
                    },
                    "rightValues": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Right values",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Object used to grant an entitlement to a group"
            },
            "ReportAttribute": {
                "type": "object",
                "properties": {
                    "category": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "extName": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "dataType": {
                        "type": "string"
                    },
                    "default": {
                        "type": "boolean"
                    }
                },
                "description": "Report attribute schema."
            },
            "BulkAddRemoveResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "description": "True if the operation was performed correctly, false otherwise",
                        "readOnly": true
                    },
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the assignment",
                        "readOnly": true,
                        "example": "<unique_identifier>"
                    },
                    "user": {
                        "type": "string",
                        "description": "Unique identifier of the user",
                        "readOnly": true,
                        "example": "<unique_identifier>"
                    },
                    "operation": {
                        "type": "string",
                        "description": "Operation type",
                        "readOnly": true,
                        "enum": [
                            "add",
                            "remove"
                        ]
                    },
                    "messageId": {
                        "type": "string",
                        "description": "Unique identifier of the message error",
                        "readOnly": true,
                        "example": "<message_error_id>"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "Description of the error",
                        "readOnly": true,
                        "example": "<message_text>"
                    }
                },
                "description": "Object used to return a bulk result for the operation."
            },
            "ListBulkGrantRevokeGrantAdminEntitlementToGroupRevokeEntitlementToGroup": {
                "type": "object",
                "properties": {
                    "grant": {
                        "type": "array",
                        "description": "List of entitlements to grant",
                        "items": {
                            "$ref": "#/components/schemas/GrantAdminEntitlementToGroup"
                        }
                    },
                    "revoke": {
                        "type": "array",
                        "description": "List of entitlements to revoke",
                        "items": {
                            "$ref": "#/components/schemas/RevokeEntitlementToGroup"
                        }
                    }
                },
                "description": "Bulk object used to grant / revoke one or more entitlements"
            },
            "AccessStatistics": {
                "required": [
                    "count"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Count",
                        "format": "int32"
                    }
                },
                "description": "Statistics of the access."
            },
            "ProvCfg": {
                "required": [
                    "provisioning",
                    "targetId",
                    "targetKey",
                    "targetType"
                ],
                "type": "object",
                "properties": {
                    "targetId": {
                        "type": "string",
                        "description": "Identifier of the target system",
                        "example": "6096872148"
                    },
                    "targetKey": {
                        "type": "string",
                        "description": "Key of the target system",
                        "example": "549c70ea-89fd-4611-9ccb-d4ce58ec78d0"
                    },
                    "targetType": {
                        "type": "string",
                        "description": "Type of the target system",
                        "example": "Salesforce"
                    },
                    "provisioning": {
                        "type": "integer",
                        "description": "Enable or disable provisioning",
                        "format": "int32",
                        "enum": [
                            0,
                            1
                        ]
                    }
                },
                "description": "Rest representation for an application provisioning policy."
            },
            "BulkAddRemoveUser": {
                "type": "object",
                "properties": {
                    "addUsers": {
                        "type": "array",
                        "description": "addUsers",
                        "items": {
                            "type": "string"
                        }
                    },
                    "removeUsers": {
                        "type": "array",
                        "description": "removeUsers",
                        "items": {
                            "$ref": "#/components/schemas/RemoveUser"
                        }
                    },
                    "otherUsers": {
                        "type": "array",
                        "description": "otherUsers",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Bulk object used to add / remove one or more users from one entitlement for resource."
            },
            "RequestedEntilement": {
                "required": [
                    "entitlement",
                    "group"
                ],
                "type": "object",
                "properties": {
                    "entitlement": {
                        "type": "string",
                        "description": "Unique identifier of the entitlement.",
                        "example": "d866d244-43dc-4a54-bb6d-fe31ed81d822"
                    },
                    "group": {
                        "type": "string",
                        "description": "Code of the group",
                        "example": "50CFD1VTR1"
                    },
                    "rightValues": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Right values",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Object used to represent an entitlement that was requested"
            },
            "AdminEntitlementChildren": {
                "required": [
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the admin entitlement.",
                        "readOnly": true,
                        "example": "d866d244-43dc-4a54-bb6d-fe31ed81d822"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the admin entitlement.",
                        "example": "adminEntitlement"
                    },
                    "label": {
                        "type": "string",
                        "description": "Localization name of the admin entitlement.",
                        "example": "Admin Entitlement"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the admin entitlement.",
                        "example": "Admin Entitlement"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the admin entitlement.",
                        "enum": [
                            "role",
                            "permission"
                        ]
                    },
                    "subType": {
                        "type": "string",
                        "description": "Sub type of the admin entitlement.",
                        "enum": [
                            "regular",
                            "dynamic"
                        ]
                    },
                    "ootb": {
                        "type": "boolean",
                        "description": "Out Of the box content"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Indicate if the admin entitlement is disabled.",
                        "readOnly": true,
                        "example": false
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of a dynamic admin entitlement",
                        "readOnly": true,
                        "example": "active",
                        "enum": [
                            "waiting",
                            "inprogress",
                            "reviewpublish",
                            "active",
                            "active_waiting",
                            "active_inprogress",
                            "active_reviewpublish",
                            "inactive"
                        ]
                    },
                    "hasScope": {
                        "type": "integer",
                        "description": "Indicate the the entitlement has scope. If the value is 0 the entitlement doesn't have scope, otherwise the entitlement has scope.",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0,
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "assignPolicy": {
                        "type": "integer",
                        "description": "Indicate the assign policy of the entitlement. If the value is 0 the entitlement can be assigned manually, otherwise the entitlement can not be assigned by the user.",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0,
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "subscription": {
                        "type": "string",
                        "description": "Subscription of the admin entitlement.",
                        "example": "cig"
                    },
                    "countChildren": {
                        "type": "integer",
                        "description": "Number of entitlement contained in the role",
                        "format": "int32",
                        "readOnly": true
                    },
                    "creationUserDetails": {
                        "$ref": "#/components/schemas/User_0"
                    },
                    "lastModUserDetails": {
                        "$ref": "#/components/schemas/User_0"
                    },
                    "properties": {
                        "$ref": "#/components/schemas/AdminEntitlementProperties"
                    },
                    "lvl": {
                        "type": "integer",
                        "description": "Indicate the level of the admin entitlement.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "path": {
                        "type": "string",
                        "description": "Indicate the path of the admin entitlement.",
                        "readOnly": true,
                        "example": "/<parent_code>/<child_code>/"
                    },
                    "creationUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the creator of the admin entitlement.",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Indicate the creation date of the admin entitlement.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "lastModUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the last user that has changed the admin entitlement.",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "lastModTime": {
                        "type": "string",
                        "description": "Indicate the last modification date of the entitlement.",
                        "format": "date-time",
                        "readOnly": true
                    }
                }
            },
            "ListResponseEntitlementChildren": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/EntitlementChildren"
                        }
                    }
                }
            },
            "ReportStatus": {
                "required": [
                    "messageCode",
                    "messageDescription",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "If of the asynchronous report.",
                        "readOnly": true,
                        "example": "<unique identifier>"
                    },
                    "alias": {
                        "type": "string",
                        "description": "Alias of the asynchronous report.",
                        "readOnly": true,
                        "example": "user_entitlement"
                    },
                    "status": {
                        "type": "integer",
                        "description": "Status of the asynchronous report. Allowable Values: 0=NOT_STARTED, 1=ASSIGNED, 2=RUNNING, 3=ERROR, 4=PAUSED, 5=COMPLETED",
                        "format": "int32"
                    },
                    "messageCode": {
                        "type": "string",
                        "description": "Error code for the asynchronous report. It will be filled only if the status is 3=ERROR"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "Error description for the asynchronous report. It will be filled only if the status is 3=ERROR"
                    },
                    "creationUser": {
                        "type": "string",
                        "description": "Id of the creator of the asynchronous report.",
                        "readOnly": true,
                        "example": "<unique identifier>"
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Creation date.",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "lastModUser": {
                        "type": "string",
                        "description": "Id of the user that has performed the last update.",
                        "readOnly": true,
                        "example": "<unique identifier>"
                    },
                    "lastModTime": {
                        "type": "string",
                        "description": "Last modification date.",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "description": "Status of an asynchronous report."
            },
            "ReportColumn": {
                "type": "object",
                "properties": {
                    "attributeCategory": {
                        "type": "string"
                    },
                    "attributeName": {
                        "type": "string"
                    },
                    "attributeKey": {
                        "type": "string"
                    },
                    "isCustom": {
                        "type": "boolean"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "hidden": {
                        "type": "boolean"
                    }
                }
            },
            "AdminEntitlementWithChildren": {
                "required": [
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the admin entitlement.",
                        "example": "adminEntitlement"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the admin entitlement.",
                        "example": "Admin Entitlement"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the admin entitlement.",
                        "enum": [
                            "role",
                            "permission"
                        ]
                    },
                    "subType": {
                        "type": "string",
                        "description": "Sub type of the admin entitlement.",
                        "enum": [
                            "regular",
                            "dynamic"
                        ]
                    },
                    "hasScope": {
                        "type": "integer",
                        "description": "Indicate the the entitlement has scope. If the value is 0 the entitlement doesn't have scope, otherwise the entitlement has scope.",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0,
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "properties": {
                        "$ref": "#/components/schemas/AdminEntitlementProperties"
                    },
                    "conditionSet": {
                        "type": "array",
                        "description": "Condition set to determine the users that belong to this role. And, Example value:[{\"erDepartment\":[{\"op\":\"eq\",\"vl\":\"Security\"},{\"op\":\"ne\",\"vl\":\"Sales\"}],\"erPersonType\":[{\"op\":\"sw\",\"vl\":\"Employee\"},{\"op\":\"ne\",\"vl\":\"Contractor\"}]},{\"erDepartment\":[{\"op\":\"eq\",\"vl\":\"Marketing\"}]}]",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Operation_and_Value"
                                }
                            }
                        }
                    },
                    "children": {
                        "type": "array",
                        "description": "List of unique identifiers of children.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "CodeResult": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier",
                        "readOnly": true,
                        "example": "d865f244-43dc-4a54-bb6d-fe31ed81d821"
                    }
                }
            },
            "AccessInfo": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the access. Unique accross the application",
                        "readOnly": true,
                        "example": "Basic access"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the access",
                        "readOnly": true,
                        "example": "Provides access to the application with basic authorization"
                    }
                },
                "description": "Rest representation for AccessInfo."
            },
            "BulkAddRemoveAdminChildrenAdminEntitlement": {
                "type": "object",
                "properties": {
                    "add": {
                        "type": "array",
                        "description": "List of entitlements children to add",
                        "items": {
                            "$ref": "#/components/schemas/AdminEntitlement"
                        }
                    },
                    "remove": {
                        "type": "array",
                        "description": "List of entitlements children to remove",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Bulk object used to add / remove one or more entitlements children."
            },
            "ListResponseString": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "EntitlementForFulfillment": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the entitlement",
                        "readOnly": true,
                        "example": "<unique identifier>"
                    },
                    "category": {
                        "type": "string",
                        "description": "Category of the entitlement.",
                        "example": "Test category"
                    },
                    "extRef": {
                        "type": "string",
                        "description": "Unique identifier of the mapped object in the connected application.",
                        "example": "<unique_identifier>"
                    }
                },
                "description": "Rest representation for an application entitlement fulfillment."
            },
            "ListResponseReviewAssignment": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/ReviewAssignment"
                        }
                    }
                }
            },
            "PermissionRemediationResult": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the permission",
                        "example": "d865f244-43dc-4a54-bb6d-fe31ed81d821"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the permission",
                        "example": "profile"
                    },
                    "category": {
                        "type": "string",
                        "description": "Category of the permission",
                        "example": "attribute"
                    },
                    "ext_ref": {
                        "type": "string",
                        "description": "Unique identifier of the permission in the target system",
                        "example": "profile"
                    },
                    "remediated": {
                        "type": "boolean",
                        "description": "Indicate if the remediation operation was performed correctly",
                        "example": true
                    },
                    "message": {
                        "type": "string",
                        "description": "Details of why the compare/remediation operation is not performed",
                        "example": "<error_code> - <error_message>"
                    },
                    "targetRights": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Target right values",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "EntitlementToUserRemove": {
                "required": [
                    "entitlement"
                ],
                "type": "object",
                "properties": {
                    "entitlement": {
                        "type": "string",
                        "description": "Unique identifier of the entitlement.",
                        "example": "d866d244-43dc-4a54-bb6d-fe31ed81d822"
                    },
                    "group": {
                        "type": "string",
                        "description": "Code of the group",
                        "example": "50CFD1VTR1"
                    }
                },
                "description": "Object used to revoke an entitlement to a user"
            },
            "EntitlementToUserAdd": {
                "required": [
                    "entitlement"
                ],
                "type": "object",
                "properties": {
                    "entitlement": {
                        "type": "string",
                        "description": "Unique identifier of the entitlement.",
                        "example": "d866d244-43dc-4a54-bb6d-fe31ed81d822"
                    },
                    "group": {
                        "type": "string",
                        "description": "Code of the group",
                        "example": "50CFD1VTR1"
                    },
                    "rightValues": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Right values",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Object used to grant an entitlement to a user"
            },
            "ErrorMessage1": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "Unique identifier of the error message.",
                        "readOnly": true,
                        "example": "<message_error_id>"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "Description of the error message.",
                        "readOnly": true,
                        "example": "<message_text>"
                    }
                }
            },
            "EntitlementDetailsResult": {
                "required": [
                    "application",
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the entitlement",
                        "readOnly": true,
                        "example": "d865f244-43dc-4a54-bb6d-fe31ed81d821"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the entitlement. Unique accross the application",
                        "example": "Test entitlement unique name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description",
                        "example": "Test entitlement description"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the entitlement",
                        "enum": [
                            "role",
                            "permission"
                        ]
                    },
                    "subType": {
                        "type": "string",
                        "description": "Sub type of the entitlement.",
                        "enum": [
                            "regular",
                            "dynamic"
                        ]
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Indicate if the entitlement is disabled.",
                        "readOnly": true,
                        "example": false
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of a dynamic entitlement",
                        "readOnly": true,
                        "example": "active",
                        "enum": [
                            "waiting",
                            "inprogress",
                            "reviewpublish",
                            "active",
                            "active_waiting",
                            "active_inprogress",
                            "active_reviewpublish",
                            "inactive"
                        ]
                    },
                    "application": {
                        "type": "string",
                        "description": "Unique identifier of the application",
                        "example": "<unique identifier>"
                    },
                    "category": {
                        "type": "string",
                        "description": "Category of the entitlement.",
                        "example": "Test category"
                    },
                    "rights": {
                        "type": "boolean",
                        "description": "Indicate if the entitlement has rights",
                        "readOnly": true,
                        "example": false
                    },
                    "extRef": {
                        "type": "string",
                        "description": "Unique identifier of the mapped object in the connected application.",
                        "example": "<unique_identifier>"
                    },
                    "assignPolicy": {
                        "type": "integer",
                        "description": "Indicate the assign policy of the entitlement. If the value is 0 the entitlement can be assigned manually, otherwise the entitlement can not be assigned by the user.",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0,
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "properties": {
                        "$ref": "#/components/schemas/EntitlementProperties"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Id of the user owner of the entitlement.",
                        "readOnly": true
                    },
                    "conditionSet": {
                        "type": "array",
                        "description": "Condition set to determine the users that belong to this role. And, Example value:[{\"erDepartment\":[{\"op\":\"eq\",\"vl\":\"Security\"},{\"op\":\"ne\",\"vl\":\"Sales\"}],\"erPersonType\":[{\"op\":\"sw\",\"vl\":\"Employee\"},{\"op\":\"ne\",\"vl\":\"Contractor\"}]},{\"erDepartment\":[{\"op\":\"eq\",\"vl\":\"Marketing\"}]}]",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Operation_and_Value"
                                }
                            }
                        }
                    },
                    "fixedRights": {
                        "type": "array",
                        "description": "Fixed right values of the entitlement",
                        "items": {
                            "$ref": "#/components/schemas/EntitlementRight"
                        }
                    },
                    "evaluationStartTime": {
                        "type": "string",
                        "description": "Evaluation start time",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "evaluationEndTime": {
                        "type": "string",
                        "description": "Evaluation end time",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "Error message for failed entitlement",
                        "readOnly": true
                    },
                    "updatedConditionSet": {
                        "type": "array",
                        "description": "Condition set to determine the users that belong to this role. And, Example value:[{\"erDepartment\":[{\"op\":\"eq\",\"vl\":\"Security\"},{\"op\":\"ne\",\"vl\":\"Sales\"}],\"erPersonType\":[{\"op\":\"sw\",\"vl\":\"Employee\"},{\"op\":\"ne\",\"vl\":\"Contractor\"}]},{\"erDepartment\":[{\"op\":\"eq\",\"vl\":\"Marketing\"}]}]",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Operation_and_Value"
                                }
                            }
                        }
                    },
                    "creationUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the creator of the entitlement",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Indicate the creation date of the entitlement",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "lastModUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the last user that has changed the entitlement",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "lastModTime": {
                        "type": "string",
                        "description": "Indicate the last modification date of the entitlement",
                        "format": "date-time",
                        "readOnly": true
                    }
                }
            },
            "AccessResult": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the entitlement",
                        "readOnly": true,
                        "example": "<unique identifier>"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the entitlement. Unique accross the application",
                        "readOnly": true,
                        "example": "Test entitlement unique name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description",
                        "readOnly": true,
                        "example": "Test entitlement description"
                    },
                    "accessType": {
                        "type": "string",
                        "description": "Type of the entitlement",
                        "readOnly": true,
                        "enum": [
                            "permission",
                            "app role"
                        ]
                    },
                    "application": {
                        "type": "string",
                        "description": "Unique identifier of the application",
                        "readOnly": true,
                        "example": "<unique identifier>"
                    },
                    "hasRights": {
                        "type": "boolean",
                        "description": "Indicate if the entitlement has rights.",
                        "readOnly": true
                    },
                    "properties": {
                        "$ref": "#/components/schemas/EntitlementProperties"
                    },
                    "applicationDetails": {
                        "$ref": "#/components/schemas/ApplicationDetails"
                    }
                }
            },
            "EntitlementResult": {
                "required": [
                    "application",
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the entitlement",
                        "readOnly": true,
                        "example": "d865f244-43dc-4a54-bb6d-fe31ed81d821"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the entitlement. Unique accross the application",
                        "example": "Test entitlement unique name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description",
                        "example": "Test entitlement description"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the entitlement",
                        "enum": [
                            "role",
                            "permission"
                        ]
                    },
                    "subType": {
                        "type": "string",
                        "description": "Sub type of the entitlement.",
                        "enum": [
                            "regular",
                            "dynamic"
                        ]
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Indicate if the entitlement is disabled.",
                        "readOnly": true,
                        "example": false
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of a dynamic entitlement",
                        "readOnly": true,
                        "example": "active",
                        "enum": [
                            "waiting",
                            "inprogress",
                            "reviewpublish",
                            "active",
                            "active_waiting",
                            "active_inprogress",
                            "active_reviewpublish",
                            "inactive"
                        ]
                    },
                    "application": {
                        "type": "string",
                        "description": "Unique identifier of the application",
                        "example": "<unique identifier>"
                    },
                    "category": {
                        "type": "string",
                        "description": "Category of the entitlement.",
                        "example": "Test category"
                    },
                    "rights": {
                        "type": "boolean",
                        "description": "Indicate if the entitlement has rights",
                        "readOnly": true
                    },
                    "extRef": {
                        "type": "string",
                        "description": "Unique identifier of the mapped object in the connected application.",
                        "example": "<unique_identifier>"
                    },
                    "assignPolicy": {
                        "type": "integer",
                        "description": "Indicate the assign policy of the entitlement. If the value is 0 the entitlement can be assigned manually, otherwise the entitlement can not be assigned by the user.",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0,
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "properties": {
                        "$ref": "#/components/schemas/EntitlementProperties"
                    },
                    "creationUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the creator of the entitlement",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Indicate the creation date of the entitlement",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "lastModUser": {
                        "type": "string",
                        "description": "Indicate the id of who is the last user that has changed the entitlement",
                        "readOnly": true,
                        "example": "6000005EKH"
                    },
                    "lastModTime": {
                        "type": "string",
                        "description": "Indicate the last modification date of the entitlement",
                        "format": "date-time",
                        "readOnly": true
                    }
                }
            },
            "ListResponseApplication": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/ApplicationResult"
                        }
                    }
                }
            },
            "ListResponse_0": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "type": "object",
                            "properties": {}
                        }
                    }
                },
                "description": "Object used to return a list of objects"
            },
            "HealthStatus_0": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "components": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/HealthStatusComponent"
                        }
                    },
                    "envDetails": {
                        "$ref": "#/components/schemas/EnvironmentDetails"
                    },
                    "time": {
                        "type": "string"
                    },
                    "httpCode": {
                        "type": "string",
                        "enum": [
                            "OK",
                            "CREATED",
                            "ACCEPTED",
                            "NO_CONTENT",
                            "RESET_CONTENT",
                            "PARTIAL_CONTENT",
                            "MOVED_PERMANENTLY",
                            "FOUND",
                            "SEE_OTHER",
                            "NOT_MODIFIED",
                            "USE_PROXY",
                            "TEMPORARY_REDIRECT",
                            "BAD_REQUEST",
                            "UNAUTHORIZED",
                            "PAYMENT_REQUIRED",
                            "FORBIDDEN",
                            "NOT_FOUND",
                            "METHOD_NOT_ALLOWED",
                            "NOT_ACCEPTABLE",
                            "PROXY_AUTHENTICATION_REQUIRED",
                            "REQUEST_TIMEOUT",
                            "CONFLICT",
                            "GONE",
                            "LENGTH_REQUIRED",
                            "PRECONDITION_FAILED",
                            "REQUEST_ENTITY_TOO_LARGE",
                            "REQUEST_URI_TOO_LONG",
                            "UNSUPPORTED_MEDIA_TYPE",
                            "REQUESTED_RANGE_NOT_SATISFIABLE",
                            "EXPECTATION_FAILED",
                            "INTERNAL_SERVER_ERROR",
                            "NOT_IMPLEMENTED",
                            "BAD_GATEWAY",
                            "SERVICE_UNAVAILABLE",
                            "GATEWAY_TIMEOUT",
                            "HTTP_VERSION_NOT_SUPPORTED"
                        ]
                    }
                }
            },
            "Group_1": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "name",
                        "readOnly": true
                    }
                },
                "description": "Rest representation for a group."
            },
            "EntitlementBean_0": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tenant": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "category": {
                        "type": "string"
                    },
                    "ootb": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "subscription": {
                        "type": "string"
                    },
                    "isAdmin": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "hasScope": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "hasRight": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "assignPolicy": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "type": {
                        "type": "string"
                    },
                    "subType": {
                        "type": "string"
                    },
                    "applicationCode": {
                        "type": "string"
                    },
                    "extRef": {
                        "type": "string"
                    },
                    "dynamicEntitlementCode": {
                        "type": "string"
                    },
                    "updatedDynamicEntitlementCode": {
                        "type": "string"
                    },
                    "disabled": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "status": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "deleted": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "reserved": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "creationUser": {
                        "type": "string"
                    },
                    "creationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastModUser": {
                        "type": "string"
                    },
                    "lastModTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "attr1": {
                        "type": "string"
                    },
                    "attr2": {
                        "type": "string"
                    },
                    "attr3": {
                        "type": "string"
                    },
                    "attr4": {
                        "type": "string"
                    },
                    "attr5": {
                        "type": "string"
                    },
                    "lvl": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "path": {
                        "type": "string"
                    },
                    "groupPath": {
                        "type": "string"
                    },
                    "accountCode": {
                        "type": "string"
                    },
                    "groupCode": {
                        "type": "string"
                    },
                    "visibilityCode": {
                        "type": "string"
                    },
                    "direct": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "delegator": {
                        "type": "string"
                    },
                    "enable": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "expireDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "inFilter": {
                        "type": "object",
                        "additionalProperties": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "notInFilter": {
                        "type": "object",
                        "additionalProperties": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "likeOrFilter": {
                        "type": "object",
                        "additionalProperties": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "children": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Entitlement_1"
                        }
                    },
                    "rights": {
                        "type": "object",
                        "additionalProperties": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "targetRights": {
                        "type": "object",
                        "additionalProperties": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "vv": {
                        "type": "boolean"
                    },
                    "countChildren": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "countChildrenPermissions": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "countUsers": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "countGroups": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "evaluationStartTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "evaluationEndTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "errorMessage": {
                        "type": "string"
                    },
                    "properties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "Operation_and_Value": {
                "required": [
                    "op",
                    "vl"
                ],
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "description": "Operation",
                        "example": "eq"
                    },
                    "vl": {
                        "type": "string",
                        "description": "Value",
                        "example": "Security"
                    }
                },
                "description": "Rest representation for Operation and Value."
            },
            "ErrorMessage_0": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "Unique identifier of the error message.",
                        "readOnly": true,
                        "example": "<message_error_id>"
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "Description of the error message.",
                        "readOnly": true,
                        "example": "<message_text>"
                    }
                }
            },
            "IB_group_resource": {
                "type": "object",
                "properties": {
                    "add": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IBGroupResource"
                        }
                    },
                    "remove": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Bulk object used to add / remove permission for IB group resource."
            },
            "User_0": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id",
                        "readOnly": true
                    },
                    "userName": {
                        "type": "string",
                        "description": "Username",
                        "readOnly": true
                    },
                    "email": {
                        "type": "string",
                        "description": "Email",
                        "readOnly": true
                    },
                    "givenName": {
                        "type": "string",
                        "description": "FirstName",
                        "readOnly": true
                    },
                    "familyName": {
                        "type": "string",
                        "description": "LastName",
                        "readOnly": true
                    }
                },
                "description": "Rest representation for a user."
            },
            "Entitlement_1": {
                "required": [
                    "application",
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the entitlement. Unique accross the application",
                        "example": "Test entitlement unique name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description",
                        "example": "Test entitlement description"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the entitlement",
                        "enum": [
                            "role",
                            "permission"
                        ]
                    },
                    "subType": {
                        "type": "string",
                        "description": "Sub type of the entitlement.",
                        "enum": [
                            "regular",
                            "dynamic"
                        ]
                    },
                    "application": {
                        "type": "string",
                        "description": "Unique identifier of the application",
                        "example": "<unique identifier>"
                    },
                    "category": {
                        "type": "string",
                        "description": "Category of the entitlement.",
                        "example": "Test category"
                    },
                    "extRef": {
                        "type": "string",
                        "description": "Unique identifier of the mapped object in the connected application.",
                        "example": "<unique_identifier>"
                    }
                },
                "description": "Rest representation for an application entitlement."
            },
            "CryptoSigningResponse": {
                "required": [
                    "pb64u",
                    "sa",
                    "sb64u"
                ],
                "type": "object",
                "properties": {
                    "pb64u": {
                        "type": "string",
                        "description": "The Base64 URL encoded payload string.",
                        "example": "UGF5bG9hZCB0byBzaWdu"
                    },
                    "sa": {
                        "type": "string",
                        "description": "The case-insensitive Java JCA/JCE signing algorithm used.",
                        "example": "SHA256WithRSA"
                    },
                    "sb64u": {
                        "type": "string",
                        "description": "The Base64 URL encoded payload signature string.",
                        "example": "2IG-x99hen8m9XBfEtUiyQmO0Fv-da...(truncated)"
                    }
                }
            },
            "CryptoSigning": {
                "required": [
                    "p",
                    "pb64u"
                ],
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "The case-sensitive label/alias to the private key to sign the payload with. If this parameter is not provided, then the label of the tenant’s ‘default personal certificate’ will be used by default to select the signing private key.",
                        "example": "server"
                    },
                    "p": {
                        "type": "string",
                        "description": "The original raw payload to sign as a UTF-8 String. The system will use the value as-is. This parameter cannot be concurrently specified with the ‘pb64u’ parameter in the same JSON input.",
                        "example": "Payload to sign"
                    },
                    "pb64u": {
                        "type": "string",
                        "description": "The payload to sign as a Base64 URL encoded UTF-8 String. The system will BASE64URL decode this attribute’s value before signing the decoded payload data. This parameter cannot be concurrently specified with the ‘p’ parameter in the same JSON input.",
                        "example": "UGF5bG9hZCB0byBzaWdu"
                    },
                    "sa": {
                        "type": "string",
                        "description": "The case-insensitive Java JCA/JCE signing algorithm. For details on the possible values, see: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#Signature. Avoid the use of SHA1WithRSA as it is considered obsolete and insecure and at the minimum, use SHA256WithRSA.Defaults to SHA256WithRSA",
                        "example": "SHA256WithRSA"
                    },
                    "format": {
                        "type": "string",
                        "description": "The case-insensitive signature output format. For example, 'jwt', 'jws' or 'RFC7515_COMPACT' can be specified  when signing compact’ified JWT 'header.claims payloads to get the signature operation output in RFC7515 Compact Serialization format automatically. In this output format, the response content-type will be set to ‘application/octet-stream’. If this is missing or its value unsupported/unrecognized, then the system’s default/native JSON signature output format will be used and the response content type will be set to ‘application/json’.",
                        "example": "jwt"
                    }
                }
            },
            "CryptoEncryptionResponse": {
                "required": [
                    "cb64u",
                    "ivb64u",
                    "kwa",
                    "pea",
                    "wkb64u"
                ],
                "type": "object",
                "properties": {
                    "pea": {
                        "type": "string",
                        "description": "The case-insensitive payload symmetric encryption algorithm used to encrypt the payload with. For details on the possible values, see: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#Cipher. Always supply the full transformation string, which includes the cipher, operating mode and padding scheme. Defaults to 'AES/CBC/PKCS5Padding'.",
                        "example": "AES/CBC/PKCS5Padding"
                    },
                    "kwa": {
                        "type": "string",
                        "description": "The case-insensitive asymmetric encryption algorithm to securely ‘wrap’ the randomly generated symmetric secret key used in the actual encryption of the payload. For details on the possible values, see: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#Cipher. Note that this parameter requires an asymmetric cipher transformation (Eg, RSA or Elliptic Curve). The default value is offers excellent security at a reasonable resource cost. Unless your application demands it, try to avoid the use of the older and less secure RSA PKCS#1 v1.5 scheme.Defaults to 'RSA/ECB/OAEPWithSHA-256AndMGF1Padding'.",
                        "example": "RSA/ECB/OAEPWithSHA-256AndMGF1Padding"
                    },
                    "cb64u": {
                        "type": "string",
                        "description": "The Base64 URL encoded encrypted payload String. This value is built directly from the output of JCA/JCE standard libraries, with no additional processing. In the specialized case of the AES/GCM symmetric cipher, this value is actually the AES/GCM cryptext bytes plus the AES/GCM auth tag bytes appended to it.",
                        "example": "IPGeiDtv0GouQR4BklBy7A"
                    },
                    "wkb64u": {
                        "type": "string",
                        "description": "The Base64 URL encoded wrapped symmetric payload encryption key. Note that this symmetric encryption key is randomly generated each time.",
                        "example": "xujRAQyA3pt6P2IY72pWtZCT9gSK...(truncated)"
                    },
                    "ivb64u": {
                        "type": "string",
                        "description": "the Base64 URL encoded payload encryption IV. Note that the symmetric encryption IV bytes are randomly generated each time as required. Certain (insecure) cipher transformations do not use IVs.",
                        "example": "SGu6mJxe_syQ1y7tx5sy0Q"
                    }
                }
            },
            "CryptoEncryption": {
                "required": [
                    "label",
                    "p",
                    "pb64u"
                ],
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "The case-sensitive label/alias to the recipient’s certificate to encrypt (or ‘wrap’) the randomly generated payload symmetric encryption secret key with. The referenced certificate must already exist in the tenant’s truststore or the request will fail. Additionally, as the label is G11N ready, it can contain non-English characters. ",
                        "example": "server"
                    },
                    "p": {
                        "type": "string",
                        "description": "The original raw payload to encrypt with, as a UTF-8 String. The system will use the value as-is. This parameter cannot be concurrently specified with the ‘pb64u’ parameter in the same JSON input.",
                        "example": "Payload to sign"
                    },
                    "pb64u": {
                        "type": "string",
                        "description": "The payload to encrypt, as a Base64 URL encoded UTF-8 String. The system will BASE64URL decode this attribute’s value before signing the decoded payload data. This parameter cannot be concurrently specified with the ‘p’ parameter in the same JSON input.",
                        "example": "UGF5bG9hZCB0byBzaWdu"
                    },
                    "aad": {
                        "type": "string",
                        "description": "The raw Additional Authenticated Data (AAD) as a UTF8 encoded String for AEAD mode capable ciphers (Eg, AES-GCM). The system will use the value as-is. This parameter cannot be concurrently specified with the ‘aadb64u’ parameter in the same JSON input. Additionally, if the output format is RFC7516_COMPACT or JWE, then one of the ‘aad’ or ‘aadb64u’ parameter must be present, as required by the spec.",
                        "example": "aad"
                    },
                    "aadb64u": {
                        "type": "string",
                        "description": "The raw Additional Authenticated Data (AAD) as a UTF8 encoded String for AEAD mode capable ciphers (Eg, AES-GCM). The system will BASE64URL decode this parameter’s value before using the decoded AAD data for encryption. This parameter cannot be concurrently specified with the aad parameter in the same JSON input. Additionally, if the output format is RFC7516_COMPACT or JWE, then one of the ‘aad’ or ‘aadb64u’ parameter must be present, as required by the spec.",
                        "example": "aadb64u"
                    },
                    "pea": {
                        "type": "string",
                        "description": "The case-insensitive payload symmetric encryption algorithm used to encrypt the payload with. For details on the possible values, see: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#Cipher. Always supply the full transformation string, which includes the cipher, operating mode and padding scheme. Defaults to 'AES/CBC/PKCS5Padding'.",
                        "example": "AES/CBC/PKCS5Padding"
                    },
                    "pks": {
                        "type": "integer",
                        "description": "The payload’s symmetric encryption key length in bits. For details on the possible values, see: https://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html#importlimits. Defaults to '128'.",
                        "format": "int32",
                        "example": 128
                    },
                    "kwa": {
                        "type": "string",
                        "description": "The case-insensitive asymmetric encryption algorithm to securely ‘wrap’ the randomly generated symmetric secret key used in the actual encryption of the payload. For details on the possible values, see: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#Cipher. Note that this parameter requires an asymmetric cipher transformation (Eg, RSA or Elliptic Curve). The default value offers excellent security at a reasonable resource cost. Unless your application demands it, try to avoid the use of the older and less secure RSA PKCS#1 v1.5 scheme.Defaults to 'RSA/ECB/OAEPWithSHA-256AndMGF1Padding'.",
                        "example": "RSA/ECB/OAEPWithSHA-256AndMGF1Padding"
                    },
                    "kms": {
                        "type": "string",
                        "description": "The case-sensitive key material source to get the signature verification certificate from. The possible values are “default:truststore” or “signer” OR “default:keystore” or “personal”. If this is missing or its value unsupported/unrecognized, then the key material source defaults to the tenant’s default truststore.",
                        "example": "signer",
                        "enum": [
                            "default:truststore",
                            "signer",
                            "default:keystore",
                            "personal"
                        ]
                    },
                    "format": {
                        "type": "string",
                        "description": "The case-insensitive encryption output format. For example: “jwe” or “RFC7516_COMPACT” can be specified when encrypting compact’ified JWE “header” as the AAD and the plaintext payload to get the encryption operation output in the RFC7516 Compact Serialization format in the response body directly. In this output format, the response content-type will be set to ‘application/octet-stream’. If the “split-aesgcm” output format is specified, and if the AES/GCM family of payload encryption cipher transformations are used, then the JSON encryption output format will be emitted, but with separate AES/GCM ciphertext and auth tag values instead of the default Java JCA/JCE’s ‘combined’ representation. This is intended for consumption by non-Java systems and standards, where this representation is prevalent. The response content-type will be set to ‘application/json’. If this is missing or its value unrecognized/unsupported, then the system’s default/native JSON encryption output format will be used and the response content type will be set to ‘application/json’.",
                        "example": "jwt"
                    }
                }
            },
            "CryptoVerify": {
                "required": [
                    "label",
                    "p",
                    "pb64u",
                    "sb64u"
                ],
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "The case-sensitive label/alias to the certificate to verify the payload signature with. The referenced certificate must already exist in the tenant’s truststore or the request will fail. Additionally, as the label is G11N ready, it can contain non-English characters. If supplying as a query parameter override, remember to URL encode the value prior to use.",
                        "example": "server"
                    },
                    "p": {
                        "type": "string",
                        "description": "The original raw payload to verify with, as a UTF-8 String. The system will use the value as-is. This parameter cannot be concurrently specified with the ‘pb64u’ parameter in the same JSON input.",
                        "example": "Payload to sign"
                    },
                    "pb64u": {
                        "type": "string",
                        "description": "The payload to verify with, as a Base64 URL encoded UTF-8 String. The system will BASE64URL decode this attribute’s value before signing the decoded payload data. This parameter cannot be concurrently specified with the ‘p’ parameter in the same JSON input.",
                        "example": "UGF5bG9hZCB0byBzaWdu"
                    },
                    "sa": {
                        "type": "string",
                        "description": "The case-insensitive Java JCA/JCE signing algorithm. This parameter value must match what was used to produce the signature or the request will fail with signature verification failure.",
                        "example": "SHA256WithRSA"
                    },
                    "sb64u": {
                        "type": "string",
                        "description": "The Base64 URL encoded signature to verify.",
                        "example": "6BnJro240sThFPjrrAMD6Mg4NrPfSxQRpafmr...(truncated)"
                    },
                    "kms": {
                        "type": "string",
                        "description": "The case-sensitive key material source to get the signature verification certificate from. The possible values are “default:truststore” or “signer” OR “default:keystore” or “personal”. If this is missing or its value unsupported/unrecognized, then the key material source defaults to the tenant’s default truststore.",
                        "example": "signer",
                        "enum": [
                            "default:truststore",
                            "signer",
                            "default:keystore",
                            "personal"
                        ]
                    }
                }
            },
            "CryptoDecryptionResponse": {
                "required": [
                    "pb64u"
                ],
                "type": "object",
                "properties": {
                    "pb64u": {
                        "type": "string",
                        "description": "The Base64 URL encoded decrypted string.",
                        "example": "UGF5bG9hZCB0byBzaWdu"
                    }
                }
            },
            "CryptoDecryption": {
                "required": [
                    "aesgcmatb64u",
                    "aesgcmcb64u",
                    "aesgcmtl",
                    "cb64u",
                    "kwa",
                    "pea",
                    "wkb64u"
                ],
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "The case-sensitive label/alias to the recipient’s private key to decrypt (or ‘unwrap’) the randomly generated payload symmetric encryption secret key with. If this parameter is missing, then the label of the tenant’s ‘default personal certificate’ will be used by default to select the decryption private key. If even this is missing, then the request will fail.The referenced private key must already exist in the tenant’s keystore or the request will fail. Additionally, as the label is G11N ready, it can contain non-English characters. ",
                        "example": "server"
                    },
                    "cb64u": {
                        "type": "string",
                        "description": "The BASE64URL encoded JCA/JCE ‘combined’ cryptext/ciphertext to decrypt. The system will Base64URL decode this parameter’s value before using the decoded payload data for decryption. If this parameter is present and the AES/GCM family of ciphers is used as the payload encryption algorithm (pea), then the ‘aesgcmtl’ parameter must also be present. This parameter cannot be concurrently specified with the ‘aesgcmcb64u’ and ‘aesgcmatb64u’ parameter pairs in the same JSON input.",
                        "example": "IPGeiDtv0GouQR4BklBy7A"
                    },
                    "aesgcmtl": {
                        "type": "string",
                        "description": "The AES GCM cipher’s authentication tag length parameter in bits. This parameter is required if the AES/GCM family of ciphers is used as the payload encryption algorithm (’pea’) and if the ‘cb64u’ parameter is present. Note that most Java JCA/JCE providers default to 128-bit AES GCM authentication tags.",
                        "example": "aesgcmtl"
                    },
                    "aesgcmcb64u": {
                        "type": "string",
                        "description": "The Base64 URL encoded AES/GCM ciphertext only string. The system will Base64URL decode this parameter’s value before using the data for decryption. The ‘aesgcmatb64u’ parameter is required if this parameter is present.This parameter requires that the payload encryption algorithm (pea) be from the AES/GCM family of ciphers. This parameter cannot be concurrently specified with the ‘cb64u’ parameter in the same JSON input.",
                        "example": "aesgcmcb64u"
                    },
                    "aesgcmatb64u": {
                        "type": "string",
                        "description": "The Base64 URL encoded AES/GCM Authentication Tag data string. The system will Base64URL decode this parameter’s value before using the data for decryption. The ‘aesgcmcb64u’ parameter is required if this parameter is present. This parameter requires that the payload encryption algorithm (pea) be from the AES/GCM family of ciphers. This parameter cannot be concurrently specified with the ‘cb64u’ parameter in the same JSON input",
                        "example": "aesgcmatb64u"
                    },
                    "wkb64u": {
                        "type": "string",
                        "description": "The ‘wrapped’ payload encryption secret key, encrypted with an asymmetric cipher and Base64 URL encoded. The system will Base64URL decode this parameter’s value before ‘unwrapping’ the decoded data to obtain the payload encryption symmetric secret key.",
                        "example": "wkb64u"
                    },
                    "ivb64u": {
                        "type": "string",
                        "description": "The Base64URL encoded payload symmetric encryption IV data. Note that most symmetric ciphers will require the use of IV data for improved security. In those cases, this parameter must be supplied or the decryption process will fail. ",
                        "example": "SGu6mJxe_syQ1y7tx5sy0Q"
                    },
                    "aad": {
                        "type": "string",
                        "description": "The raw Additional Authenticated Data (AAD) as a UTF8 encoded String for AEAD mode capable ciphers (Eg, AES-GCM). The system will use the value as-is. This parameter is used to verify the integrity of the ciphertext prior to decryption and must be included if it was used in the encryption process. This parameter cannot be concurrently specified with the ‘aadb64u’ parameter in the same JSON input.",
                        "example": "aad"
                    },
                    "aadb64u": {
                        "type": "string",
                        "description": "The Base64URL encoded Additional Authenticated Data (AAD) for AEAD mode capable ciphers (Eg, AES-GCM).  The system will BASE64URL decode this parameter’s value before using the decoded AAD data for encryption. This parameter is used to verify the integrity of the ciphertext prior to decryption and must be included if it was used in the encryption process. This parameter cannot be concurrently specified with the ‘aad’ parameter in the same JSON input.",
                        "example": "aadb64u"
                    },
                    "pea": {
                        "type": "string",
                        "description": "The case-insensitive payload symmetric encryption algorithm (more precisely, this is the Java JCA/JCE cipher transformation string) used to encrypt the payload with. This parameter must match what was supplied to the encryption process or decryption will fail.",
                        "example": "AES/CBC/PKCS5Padding"
                    },
                    "kwa": {
                        "type": "string",
                        "description": "The case-insensitive asymmetric encryption algorithm (more precisely, this is the Java JCA/JCE cipher transformation string) to securely ‘wrap’ the randomly generated secret key used in the actual symmetric encryption of the payload. This parameter must match what was supplied to the encryption process or decryption will fail.",
                        "example": "RSA/ECB/OAEPWithSHA-256AndMGF1Padding"
                    }
                }
            },
            "UtilityComputeJob": {
                "required": [
                    "args",
                    "src",
                    "srcb64u",
                    "sys"
                ],
                "type": "object",
                "properties": {
                    "src": {
                        "type": "string",
                        "description": "The JavaScript anonymous function. This section is limited to 2MB. Only one of 'src' or 'srcb64u' is allowed in the input JSON at the same time. If both are present or if both are missing, then the REST API call will fail.",
                        "example": "function(args){return TOOLS.randomString()}"
                    },
                    "srcb64u": {
                        "type": "string",
                        "description": "The Base64 URL encoded JavaScript anonymous function. This section is limited to 2MB. Only one of 'src' or 'srcb64u' is allowed in the input JSON at the same time. If both are present or if both are missing, then the REST API call will fail.",
                        "example": "Wm5WdVkzUnBiMjRvWVhKbmN5bDdjbVYwZFhKdUlGUlBUMHhUTG5KaGJtUnZiVk4wY21sdVp5Z3BmUT09"
                    },
                    "args": {
                        "$ref": "#/components/schemas/UtilityComputeJobArguments"
                    },
                    "sys": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "The compute job's system settings. The available settings are: <br><br> hc.disable_auto_retry: If set to true, then HTTP Client will not automatically retry the request on failures. Defaults to 'false'. <br><br> hc.tls.trust_all_server_certs: If set to true, then the HTTP Client will trust all certificates presented by the TLS server. As a side effect, the tenant's trust store will also not be preloaded. This is equivalent to CURL's --insecure or -k option. Defaults to 'false'. <br><br> hc.tls.enable_hostname_verification: If set to false, then the HTTP Client will not perform hostname verification when connecting to TLS origins. This is useful when you are knowingly connecting to servers whose DNS names do not match with what was in the presented server cert. Defaults to 'true'. <br><br> hc.tls.enable_v1.0: If set to false, then the HTTP Client will refuse to talk to TLS v1.0 servers. Defaults to 'true'.<br><br> hc.tls.enable_v1.1: If set to false, then the HTTP Client will refuse to talk to TLS v1.1 servers. Defaults to 'true'.<br><br> hc.tls.enable_v1.2: If set to false, then the HTTP Client will refuse to talk to TLS v1.2 servers. Defaults to 'true'.<br><br> hc.max_conn_per_route: The maximum number of connections per route that the HTTP Client's internal connection pool will use. Defaults to 5. Limit is 100. <br><br> hc.max_conn_total: The maximum total number of connections that the HTTP Client's internal connection pool will use. Defaults to 10. Limit is 200. <br><br> hc.request.pooled_conn_timeout_msecs: The HTTP Client will timeout if a connection from the pool cannot be obtained after this many milliseconds. This is usually only needed when working with very slow servers. Defaults to 1000. Limit is 120000. <br><br> hc.request.conn_timeout_msecs: The HTTP Client will timeout if a connection to the origin cannot be established after this many milliseconds. Defaults to 5000. Limit is 120000. <br><br> hc.request.socket_timeout_msecs: The HTTP Client will timeout if it does not receive data from an established connection after this many milliseconds. Defaults to 1000. Limit is 120000. <br><br> hc.tls.include_signer_cert_labels: The explicit list of the tenant's signer cert labels to include in the HTTP Client's truststore. If this is not set (This is the default), then ALL of the tenant's signer certs will be included in the HTTP Client's truststore. If this is set to an empty list, then NONE of the tenant's signer certs will be included in the HTTP Client's truststore. <br><br> hc.tls.include_personal_cert_labels: The explicit list of the tenant's personal cert labels to include in the HTTP Client's keystore. If this is not set (This is the default), then ALL of the tenant's personal certs will be included in the HTTP Client's keystore. If this is set to an empty list, then NONE of the tenant's personal certs will be included in the HTTP Client's keystore. <br>"
                    }
                }
            },
            "UtilityComputeJobArguments": {
                "required": [
                    "arg1",
                    "arg2",
                    "arg3",
                    "arg4"
                ],
                "type": "object",
                "properties": {
                    "arg1": {
                        "type": "string",
                        "example": "value1"
                    },
                    "arg2": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "arg3": {
                        "type": "boolean",
                        "example": false
                    },
                    "arg4": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "SingleCertificate": {
                "required": [
                    "cert"
                ],
                "type": "object",
                "properties": {
                    "cert": {
                        "type": "string",
                        "description": "The Base64 encoded bytes of the public key of the certificate. The example shown has been truncated for readability.",
                        "example": "MIICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUFADA........(truncated)"
                    }
                }
            },
            "PostPersonalCertificate": {
                "required": [
                    "algorithm",
                    "cert",
                    "expire",
                    "keysize",
                    "label",
                    "password",
                    "subject"
                ],
                "type": "object",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "The alias or friendly name that is used to uniquely identify the personal certificate. Required for generating a personal certificate. Optional for importing a personal certificate. Overrides the alias provided in the certificate if provided.",
                        "example": "server"
                    },
                    "subject": {
                        "type": "string",
                        "description": "Distinguished name. The person or entity to whom the certificate is being issued. This field can also include the certificate recipient's organization (O), organization unit (OU), locality (L), state or province (ST), and country/region (C). Only required for generating a personal certificate.",
                        "example": "CN=IBM, OU=IBM, O=IBM, L=city, ST=state, C=country"
                    },
                    "expire": {
                        "type": "integer",
                        "description": "The validity period, in days, for the new certificate. Default value is 3650 Only required for generating a personal certificate.",
                        "format": "int32",
                        "example": 3650
                    },
                    "keysize": {
                        "type": "integer",
                        "description": "The size of the new key pair to be created. Valid values are 1024, 2048 or 4096. Default value is 2048. Only required for generating a personal certificate.",
                        "format": "int32",
                        "example": 2048,
                        "enum": [
                            1024,
                            2048,
                            4096
                        ]
                    },
                    "algorithm": {
                        "type": "string",
                        "description": "The algorithm to use to generate the self signed certificate. Default is \"SHA256WithRSA\". Only required for generating a personal certificate.",
                        "example": "SHA256withRSA"
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Flag to specify whether the certificate to be imported or generated should be the default one. There can only be one default certificate per tenant, so if this flag is set to true, the certificate overwrites the previous existing default cert. Use this flag with caution. Changing a default certificate may have an impact on the existing applications set up for single sign-on. If not specified, this flag defaults to false. Optional for both importing or generating a personal certificate.",
                        "example": false
                    },
                    "cert": {
                        "type": "string",
                        "description": "Base64 encoded bytes of a valid .p12 file. The example shown has been truncated for readability. Only required for importing a personal certificate. For generating a personal certificate, do not provide any value for this parameter. ",
                        "example": "MIIK6QIBAzCCCq8GCSqGSIb3DQEHAaCCCqAEggqcMIIKmDC........(truncated)"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password to unlock the .p12 file. Only required for importing a personal certificate.",
                        "example": "password"
                    }
                }
            },
            "PersonalCertificate": {
                "required": [
                    "isDefault"
                ],
                "type": "object",
                "properties": {
                    "isDefault": {
                        "type": "boolean",
                        "description": "Flag to specify whether the specified certificate should be the default one. There can only be one default certificate per tenant, so if this flag is set to true, it'll overwrite the previous existing default cert. Use this flag with caution as changing a default certificate may have an impact on the existing applications set-up for single sign-on.",
                        "example": true
                    }
                }
            },
            "SignerCertificate": {
                "required": [
                    "cert",
                    "label"
                ],
                "type": "object",
                "properties": {
                    "cert": {
                        "type": "string",
                        "description": "The Base64 encoded bytes of the public key of the certificate to be imported. This can be obtained by opening the certificate file in any text editor",
                        "example": "MIICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUFADAuMQswCQYDVQQGEwJVUzEMMAoGA1UEChMDSUJNMREwDwYDVQQLEwhMb2NhbCBDQTAeFw05OTEyMjIwNTAwMDBaFw0wMDEyMjMwNDU5NTlaMC4xCzAJBgNVBAYTAlVTMQwwCgYDVQQKEwNJQk0xETAPBgNVBAsTCExvY2FsIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD2bZEo7xGaX2/0GHkrNFZvlxBou9v1Jmt/PDiTMPve8r9FeJAQ0QdvFST/0JPQYD20rH0bimdDLgNdNynmyRoS2S/IInfpmf69iyc2G0TPyRvmHIiOZbdCd+YBHQi1adkj17NDcWj6S14tVurFX73zx0sNoMS79q3tuXKrDsxeuwIDAQABo4GQMIGNMEsGCVUdDwGG+EIBDQQ+EzxHZW5lcmF0ZWQgYnkgdGhlIFNlY3VyZVdheSBTZWN1cml0eSBTZXJ2ZXIgZm9yIE9TLzM5MCAoUkFDRikwDgYDVR0PAQH/BAQDAgAGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFJ3+ocRyCTJw067dLSwr/nalx6YMMA0GCSqGSIb3DQEBBQUAA4GBAMaQzt+zaj1GU77yzlr8iiMBXgdQrwsZZWJo5exnAucJAEYQZmOfyLiMD6oYq+ZnfvM0n8G/Y79q8nhwvuxpYOnRSAXFp6xSkrIOeZtJMY1h00LKp/JX3Ng1svZ2agE126JHsQ0bhzN5TKsYfbwfTwfjdWAGy6Vf1nYi/rO+ryMO"
                    },
                    "label": {
                        "type": "string",
                        "description": "The alias or friendly name of the certificate to be imported.",
                        "example": "HttpsSSLCert"
                    }
                }
            },
            "ErrorBean_0": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "readOnly": true
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "The Locale specific descriptive message.",
                        "readOnly": true
                    }
                }
            },
            "Certificate_0": {
                "required": [
                    "issuer",
                    "keysize",
                    "label",
                    "notafter",
                    "notbefore",
                    "serial_number",
                    "signature_algorithm",
                    "subject",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "keysize": {
                        "type": "integer",
                        "description": "The key size or key bit length of the certificate.",
                        "format": "int32",
                        "example": 2048
                    },
                    "notbefore": {
                        "type": "string",
                        "description": "The earliest date and time on which the certificate is valid.",
                        "example": "8 Mar 2017 08:14:24 GMT"
                    },
                    "subject": {
                        "type": "string",
                        "description": "The person or entity to whom the certificate is being issued. This field can also include the certificate recipient's organization (O), organization unit (OU), locality (L), state or province (ST), and country/region (C).",
                        "example": "CN=IBM, OU=IBM, O=IBM, L=city, ST=state, C=country"
                    },
                    "notafter": {
                        "type": "string",
                        "description": "The time and date after which the certificate is no longer valid.",
                        "example": "7 Feb 2027 08:14:24 GMT"
                    },
                    "signature_algorithm": {
                        "type": "string",
                        "description": "The algorithm used to sign the public key certificate.",
                        "example": "SHA256withRSA"
                    },
                    "serial_number": {
                        "type": "string",
                        "description": "The serial number used to uniquely identify the certificate within the issuer's system.",
                        "example": "145048539"
                    },
                    "label": {
                        "type": "string",
                        "description": "The alias (friendly name) of the certificate to import.",
                        "example": "HttpsSSLCert"
                    },
                    "version": {
                        "type": "integer",
                        "description": "The version number of the certificate format.",
                        "format": "int32",
                        "example": 3
                    },
                    "issuer": {
                        "type": "string",
                        "description": "The name of the entity that issued the certificate.",
                        "example": "CN=IBM, OU=IBM, O=IBM, L=city, ST=state, C=country"
                    }
                }
            },
            "ErrorBean1_0": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "readOnly": true
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "The Locale specific descriptive message.",
                        "readOnly": true
                    }
                }
            },
            "AsyncContext": {
                "type": "object",
                "properties": {
                    "request": {
                        "$ref": "#/components/schemas/ServletRequest"
                    },
                    "response": {
                        "$ref": "#/components/schemas/ServletResponse"
                    },
                    "timeout": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "BufferedReader": {
                "type": "object"
            },
            "ClassLoader": {
                "type": "object",
                "properties": {
                    "parent": {
                        "$ref": "#/components/schemas/ClassLoader"
                    }
                }
            },
            "Cookie": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "maxAge": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "path": {
                        "type": "string"
                    },
                    "secure": {
                        "type": "boolean"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "httpOnly": {
                        "type": "boolean"
                    }
                }
            },
            "Enumeration": {
                "type": "object"
            },
            "EnumerationLocale": {
                "type": "object"
            },
            "EnumerationServlet": {
                "type": "object"
            },
            "EnumerationString": {
                "type": "object"
            },
            "FilterRegistration": {
                "type": "object",
                "properties": {
                    "servletNameMappings": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "urlPatternMappings": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "className": {
                        "type": "string"
                    },
                    "initParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "HttpServletRequest": {
                "type": "object",
                "properties": {
                    "authType": {
                        "type": "string"
                    },
                    "cookies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Cookie"
                        }
                    },
                    "headerNames": {
                        "$ref": "#/components/schemas/EnumerationString"
                    },
                    "method": {
                        "type": "string"
                    },
                    "pathInfo": {
                        "type": "string"
                    },
                    "pathTranslated": {
                        "type": "string"
                    },
                    "contextPath": {
                        "type": "string"
                    },
                    "queryString": {
                        "type": "string"
                    },
                    "remoteUser": {
                        "type": "string"
                    },
                    "userPrincipal": {
                        "$ref": "#/components/schemas/Principal"
                    },
                    "requestedSessionId": {
                        "type": "string"
                    },
                    "requestURI": {
                        "type": "string"
                    },
                    "requestURL": {
                        "$ref": "#/components/schemas/StringBuffer"
                    },
                    "servletPath": {
                        "type": "string"
                    },
                    "session": {
                        "$ref": "#/components/schemas/HttpSession"
                    },
                    "requestedSessionIdValid": {
                        "type": "boolean"
                    },
                    "requestedSessionIdFromCookie": {
                        "type": "boolean"
                    },
                    "requestedSessionIdFromURL": {
                        "type": "boolean"
                    },
                    "requestedSessionIdFromUrl": {
                        "type": "boolean"
                    },
                    "parts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Part"
                        }
                    },
                    "attributeNames": {
                        "$ref": "#/components/schemas/EnumerationString"
                    },
                    "characterEncoding": {
                        "type": "string"
                    },
                    "contentLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "contentLengthLong": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "inputStream": {
                        "$ref": "#/components/schemas/ServletInputStream"
                    },
                    "parameterNames": {
                        "$ref": "#/components/schemas/EnumerationString"
                    },
                    "parameterMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "protocol": {
                        "type": "string"
                    },
                    "scheme": {
                        "type": "string"
                    },
                    "serverName": {
                        "type": "string"
                    },
                    "serverPort": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "reader": {
                        "$ref": "#/components/schemas/BufferedReader"
                    },
                    "remoteAddr": {
                        "type": "string"
                    },
                    "remoteHost": {
                        "type": "string"
                    },
                    "locale": {
                        "$ref": "#/components/schemas/Locale"
                    },
                    "locales": {
                        "$ref": "#/components/schemas/EnumerationLocale"
                    },
                    "secure": {
                        "type": "boolean"
                    },
                    "remotePort": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "localName": {
                        "type": "string"
                    },
                    "localAddr": {
                        "type": "string"
                    },
                    "localPort": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "servletContext": {
                        "$ref": "#/components/schemas/ServletContext"
                    },
                    "asyncStarted": {
                        "type": "boolean"
                    },
                    "asyncSupported": {
                        "type": "boolean"
                    },
                    "asyncContext": {
                        "$ref": "#/components/schemas/AsyncContext"
                    },
                    "dispatcherType": {
                        "type": "string",
                        "enum": [
                            "FORWARD",
                            "INCLUDE",
                            "REQUEST",
                            "ASYNC",
                            "ERROR"
                        ]
                    }
                }
            },
            "HttpSession": {
                "type": "object",
                "properties": {
                    "creationTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "id": {
                        "type": "string"
                    },
                    "lastAccessedTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "servletContext": {
                        "$ref": "#/components/schemas/ServletContext"
                    },
                    "maxInactiveInterval": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "sessionContext": {
                        "$ref": "#/components/schemas/HttpSessionContext"
                    },
                    "attributeNames": {
                        "$ref": "#/components/schemas/EnumerationString"
                    },
                    "valueNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "new": {
                        "type": "boolean"
                    }
                }
            },
            "HttpSessionContext": {
                "type": "object",
                "properties": {
                    "ids": {
                        "$ref": "#/components/schemas/EnumerationString"
                    }
                }
            },
            "InputStream": {
                "type": "object"
            },
            "JspConfigDescriptor": {
                "type": "object",
                "properties": {
                    "taglibs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaglibDescriptor"
                        }
                    },
                    "jspPropertyGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JspPropertyGroupDescriptor"
                        }
                    }
                }
            },
            "JspPropertyGroupDescriptor": {
                "type": "object",
                "properties": {
                    "urlPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "elIgnored": {
                        "type": "string"
                    },
                    "pageEncoding": {
                        "type": "string"
                    },
                    "scriptingInvalid": {
                        "type": "string"
                    },
                    "isXml": {
                        "type": "string"
                    },
                    "includePreludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "includeCodas": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "deferredSyntaxAllowedAsLiteral": {
                        "type": "string"
                    },
                    "trimDirectiveWhitespaces": {
                        "type": "string"
                    },
                    "defaultContentType": {
                        "type": "string"
                    },
                    "buffer": {
                        "type": "string"
                    },
                    "errorOnUndeclaredNamespace": {
                        "type": "string"
                    }
                }
            },
            "Part": {
                "type": "object",
                "properties": {
                    "inputStream": {
                        "$ref": "#/components/schemas/InputStream"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "submittedFileName": {
                        "type": "string"
                    },
                    "size": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "headerNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "Principal": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                }
            },
            "PrintWriter": {
                "type": "object"
            },
            "ServletContext": {
                "type": "object",
                "properties": {
                    "contextPath": {
                        "type": "string"
                    },
                    "majorVersion": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "minorVersion": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "effectiveMajorVersion": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "effectiveMinorVersion": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "servlets": {
                        "$ref": "#/components/schemas/EnumerationServlet"
                    },
                    "servletNames": {
                        "$ref": "#/components/schemas/EnumerationString"
                    },
                    "serverInfo": {
                        "type": "string"
                    },
                    "initParameterNames": {
                        "$ref": "#/components/schemas/EnumerationString"
                    },
                    "attributeNames": {
                        "$ref": "#/components/schemas/EnumerationString"
                    },
                    "servletContextName": {
                        "type": "string"
                    },
                    "servletRegistrations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ServletRegistration"
                        }
                    },
                    "filterRegistrations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/FilterRegistration"
                        }
                    },
                    "sessionCookieConfig": {
                        "$ref": "#/components/schemas/SessionCookieConfig"
                    },
                    "defaultSessionTrackingModes": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "COOKIE",
                                "URL",
                                "SSL"
                            ]
                        }
                    },
                    "effectiveSessionTrackingModes": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "COOKIE",
                                "URL",
                                "SSL"
                            ]
                        }
                    },
                    "jspConfigDescriptor": {
                        "$ref": "#/components/schemas/JspConfigDescriptor"
                    },
                    "classLoader": {
                        "$ref": "#/components/schemas/ClassLoader"
                    },
                    "virtualServerName": {
                        "type": "string"
                    }
                }
            },
            "ServletInputStream": {
                "type": "object",
                "properties": {
                    "finished": {
                        "type": "boolean"
                    },
                    "ready": {
                        "type": "boolean"
                    }
                }
            },
            "ServletOutputStream": {
                "type": "object",
                "properties": {
                    "ready": {
                        "type": "boolean"
                    }
                }
            },
            "ServletRegistration": {
                "type": "object",
                "properties": {
                    "mappings": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "runAsRole": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "className": {
                        "type": "string"
                    },
                    "initParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "ServletRequest": {
                "type": "object",
                "properties": {
                    "attributeNames": {
                        "$ref": "#/components/schemas/EnumerationString"
                    },
                    "characterEncoding": {
                        "type": "string"
                    },
                    "contentLength": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "contentLengthLong": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "inputStream": {
                        "$ref": "#/components/schemas/ServletInputStream"
                    },
                    "parameterNames": {
                        "$ref": "#/components/schemas/EnumerationString"
                    },
                    "parameterMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "protocol": {
                        "type": "string"
                    },
                    "scheme": {
                        "type": "string"
                    },
                    "serverName": {
                        "type": "string"
                    },
                    "serverPort": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "reader": {
                        "$ref": "#/components/schemas/BufferedReader"
                    },
                    "remoteAddr": {
                        "type": "string"
                    },
                    "remoteHost": {
                        "type": "string"
                    },
                    "locale": {
                        "$ref": "#/components/schemas/Locale"
                    },
                    "locales": {
                        "$ref": "#/components/schemas/EnumerationLocale"
                    },
                    "secure": {
                        "type": "boolean"
                    },
                    "remotePort": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "localName": {
                        "type": "string"
                    },
                    "localAddr": {
                        "type": "string"
                    },
                    "localPort": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "servletContext": {
                        "$ref": "#/components/schemas/ServletContext"
                    },
                    "asyncStarted": {
                        "type": "boolean"
                    },
                    "asyncSupported": {
                        "type": "boolean"
                    },
                    "asyncContext": {
                        "$ref": "#/components/schemas/AsyncContext"
                    },
                    "dispatcherType": {
                        "type": "string",
                        "enum": [
                            "FORWARD",
                            "INCLUDE",
                            "REQUEST",
                            "ASYNC",
                            "ERROR"
                        ]
                    }
                }
            },
            "ServletResponse": {
                "type": "object",
                "properties": {
                    "characterEncoding": {
                        "type": "string"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "outputStream": {
                        "$ref": "#/components/schemas/ServletOutputStream"
                    },
                    "writer": {
                        "$ref": "#/components/schemas/PrintWriter"
                    },
                    "bufferSize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "committed": {
                        "type": "boolean"
                    },
                    "locale": {
                        "$ref": "#/components/schemas/Locale"
                    }
                }
            },
            "SessionCookieConfig": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "httpOnly": {
                        "type": "boolean"
                    },
                    "secure": {
                        "type": "boolean"
                    },
                    "maxAge": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "StringBuffer": {
                "type": "object"
            },
            "TaglibDescriptor": {
                "type": "object",
                "properties": {
                    "taglibURI": {
                        "type": "string"
                    },
                    "taglibLocation": {
                        "type": "string"
                    }
                }
            },
            "DeviceManager": {
                "required": [
                    "identitySourceEnabled",
                    "identitySourceId",
                    "instanceName",
                    "jitpEnabled",
                    "mdmProps",
                    "uniqueUserIdentifier"
                ],
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "The configured status.",
                        "example": "configured"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "A descriptive name to represent this instance.",
                        "example": "TryISV MTLS-Auth provider"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specify whether this instance is enabled."
                    },
                    "identitySourceId": {
                        "type": "string",
                        "description": "The identity provider id.",
                        "example": "<UUID>"
                    },
                    "jitpEnabled": {
                        "type": "boolean",
                        "description": "Specify whether Just-In-Time-Provisioning is enabled."
                    },
                    "syncUserDeviceInfo": {
                        "type": "boolean",
                        "description": "Flag to indicate IBM Security Verify, if we should contact MDM provider to fetch user/device information."
                    },
                    "uniqueUserIdentifier": {
                        "type": "string",
                        "description": "The unique attribute that is used to identify an existing user in the Verify identity provider or perform a JITP with its value for userName"
                    },
                    "attributeMappings": {
                        "type": "array",
                        "description": "The attribute mappings configuration.",
                        "items": {
                            "$ref": "#/components/schemas/AttributeMapping_0"
                        }
                    },
                    "identitySourceEnabled": {
                        "type": "boolean",
                        "description": "Read only information about the configured identity provider's enabled status."
                    },
                    "mdmProps": {
                        "$ref": "#/components/schemas/MdmProps"
                    },
                    "deviceManagerId": {
                        "type": "string",
                        "description": "Read only and generated after creating this provider.",
                        "example": "<UUID>"
                    },
                    "fetchAttributes": {
                        "type": "array",
                        "description": "The names of the user attributes to fetch.",
                        "example": "[\"country\", \"department\", \"employeeId\"]",
                        "items": {
                            "type": "string"
                        }
                    },
                    "csrUidLocation": {
                        "type": "string",
                        "description": "Whether the user identifier is part of CSR's Subject or SAN field.",
                        "example": "sanEmail"
                    },
                    "uniqueUserIdentifierRequestRule": {
                        "type": "string",
                        "description": "The custom rule to evaluate the uniqueUserIdentifier attribute value.",
                        "example": "requestContext.userPrincipalName.split('@')[0]"
                    }
                }
            },
            "MdmProps": {
                "required": [
                    "authentication",
                    "authenticationType",
                    "scepChallengePassword",
                    "tenantName",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "tenantName": {
                        "type": "string",
                        "description": "The MDM tenant name.",
                        "example": "tryisv.com"
                    },
                    "type": {
                        "type": "string",
                        "description": "The MDM type.",
                        "example": "MicrosoftIntune",
                        "enum": [
                            "MicrosoftIntune",
                            "Jamf"
                        ]
                    },
                    "authenticationType": {
                        "type": "string",
                        "description": "The authentication type supported in the MDM tenant.",
                        "example": "OAuth",
                        "enum": [
                            "OAuth",
                            "Basic"
                        ]
                    },
                    "maxClientCertsPerDevice": {
                        "type": "integer",
                        "description": "Maximum number of client certificates that can be issued per device per user.",
                        "format": "int32",
                        "example": 3
                    },
                    "userDeviceStatusCacheTimeout": {
                        "type": "integer",
                        "description": "The user/device cache timeout in minutes.",
                        "format": "int32",
                        "example": 720
                    },
                    "scepChallengePassword": {
                        "type": "string",
                        "description": "The SCEP challenge password for Jamf, this field is required when \"type\" is \"Jamf\" and the value of \"scepChallengeType\" is \"static\".",
                        "example": "Ohn0id0nTl1keUs1ngAsT^T1Ccha11enGepA55w0rDwHenDynAm1c1sp00s1ble"
                    },
                    "scepChallengeType": {
                        "type": "string",
                        "description": "The SCEP Challenge Type for Jamf, required when type is Jamf.",
                        "example": "dynamic",
                        "enum": [
                            "dynamic",
                            "static"
                        ]
                    },
                    "authentication": {
                        "$ref": "#/components/schemas/Authentication_0"
                    },
                    "scepChallengeWebhookConfigured": {
                        "type": "boolean",
                        "description": "Flag to indicate if webhoook configuration is completed on the MDM tenant and can now be persisted in the device manager."
                    },
                    "webhooks": {
                        "$ref": "#/components/schemas/Webhooks"
                    }
                }
            },
            "PostEvalOptions": {
                "required": [
                    "custom",
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The post evaluation operation id.",
                        "example": "base64encoding"
                    },
                    "custom": {
                        "type": "string",
                        "description": "The post evaluation operation custom rule.",
                        "example": "idsuser.$property[0]"
                    }
                }
            },
            "ScepChallenge": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "The username of the webhook SCEP challenge. Should be aplhanumeric.",
                        "example": "scep challenge username"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the webhook SCEP challenge. Should be aplhanumeric, atleast 8 characters long and maximum of 32 characters.",
                        "example": "scepChallengePassword"
                    }
                }
            },
            "ServiceAccount": {
                "required": [
                    "accountEmail",
                    "serviceAccountEmail",
                    "serviceAccountPrivateKey"
                ],
                "type": "object",
                "properties": {
                    "serviceAccountEmail": {
                        "type": "string",
                        "description": "The service account's email id.",
                        "example": "ibmsecurityverify-mdm@tryisv.iam.gserviceaccount.com"
                    },
                    "accountEmail": {
                        "type": "string",
                        "description": "The tenant admin account's email.",
                        "example": "admin@tryisv.com"
                    },
                    "serviceAccountPrivateKey": {
                        "type": "string",
                        "description": "The service account's private key",
                        "example": "<Private key as a single line string>"
                    }
                }
            },
            "Webhooks": {
                "type": "object",
                "properties": {
                    "scepChallenge": {
                        "$ref": "#/components/schemas/ScepChallenge"
                    }
                }
            },
            "MdmConnection": {
                "required": [
                    "identitySourceId",
                    "mdmProps"
                ],
                "type": "object",
                "properties": {
                    "mdmProps": {
                        "$ref": "#/components/schemas/MdmConnectionProps"
                    },
                    "identitySourceId": {
                        "type": "string",
                        "description": "The identity source Id.",
                        "example": "a231aea8-27ae-4620-8d04-667b51e71ed7"
                    },
                    "syncUserDeviceInfo": {
                        "type": "boolean",
                        "description": "Flag to indicate CI, if we should contact mdm provider to fetch user/device info or not"
                    },
                    "uniqueUserIdentifier": {
                        "type": "string",
                        "description": "The name of the attribute to be used as the unique identifier.",
                        "example": "id"
                    },
                    "realm": {
                        "type": "string"
                    }
                }
            },
            "MdmConnectionProps": {
                "required": [
                    "authentication",
                    "tenantName"
                ],
                "type": "object",
                "properties": {
                    "tenantName": {
                        "type": "string",
                        "description": "The MDM tenant name.",
                        "example": "tryisv.com"
                    },
                    "authentication": {
                        "$ref": "#/components/schemas/Authentication_0"
                    }
                }
            },
            "SmartcardProvider": {
                "required": [
                    "identitySourceEnabled",
                    "identitySourceId",
                    "instanceName",
                    "jitpEnabled",
                    "subjectKeyIdentifier",
                    "uniqueUserIdentifier"
                ],
                "type": "object",
                "properties": {
                    "instanceName": {
                        "type": "string",
                        "description": "A descriptive name to represent this instance.",
                        "example": "TryISV MTLS-Auth provider"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specify whether this instance is enabled."
                    },
                    "identitySourceId": {
                        "type": "string",
                        "description": "The identity provider id.",
                        "example": "<UUID>"
                    },
                    "jitpEnabled": {
                        "type": "boolean",
                        "description": "Specify whether Just-In-Time-Provisioning is enabled."
                    },
                    "uniqueUserIdentifier": {
                        "type": "string",
                        "description": "The unique attribute that is used to identify an existing user in the Verify identity provider or perform a JITP with its value for userName"
                    },
                    "attributeMappings": {
                        "type": "array",
                        "description": "The attribute mappings configuration.",
                        "items": {
                            "$ref": "#/components/schemas/AttributeMapping_0"
                        }
                    },
                    "identitySourceEnabled": {
                        "type": "boolean",
                        "description": "Read only information about the configured identity provider's enabled status."
                    },
                    "smartcardProviderId": {
                        "type": "string",
                        "description": "Read only and generated after creating this provider.",
                        "example": "<UUID>"
                    },
                    "uniqueUserIdentifierRequestRule": {
                        "type": "string",
                        "description": "The custom rule to evaluate the uniqueUserIdentifier attribute value.",
                        "example": "requestContext.subjectCN[0].split('@')[0]"
                    },
                    "subjectKeyIdentifier": {
                        "type": "string",
                        "description": "Subject Key Identifier of the immediate certificate authority that is issuing the X.509 client certificates.",
                        "example": "6D:55:3E:F9:5D:82:14:C5:03:D2:93:4A:64:D9:0A:A1:CC:FB:B9:A0"
                    }
                }
            },
            "AttributeMapping_0": {
                "required": [
                    "attrId",
                    "idsAttrName",
                    "jitpOption"
                ],
                "type": "object",
                "properties": {
                    "idsAttrName": {
                        "type": "string",
                        "description": "The incoming attribute name.",
                        "example": "mail"
                    },
                    "attrId": {
                        "type": "string",
                        "description": "The internal user attribute id.",
                        "example": "3"
                    },
                    "jitpOption": {
                        "type": "string",
                        "description": "The JITP option on the attribute.",
                        "example": "ALWAYS"
                    },
                    "postEval": {
                        "$ref": "#/components/schemas/PostEvalOptions"
                    }
                }
            },
            "Authentication_0": {
                "required": [
                    "clientId",
                    "clientSecret",
                    "password",
                    "serviceAccount",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "The clientid of the MicrosoftIntune tenant.",
                        "example": "f106a7b3-cc2a-444d-a356-c71ec161e145"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "The clientSecret of the MicrosoftIntune tenant.",
                        "example": "clientsecret value"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the Jamf tenant Basic Authentication.",
                        "example": "Basic Authentication username"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the Jamf tenant Basic Authentication.",
                        "example": "Basic Authentication password value"
                    },
                    "serviceAccount": {
                        "$ref": "#/components/schemas/ServiceAccount"
                    }
                }
            },
            "ErrorBean_1": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "readOnly": true
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale specific descriptive message.",
                        "readOnly": true
                    }
                }
            },
            "TenantCounterUpdateModel": {
                "type": "object",
                "properties": {
                    "emailCount": {
                        "type": "integer",
                        "description": "the email count",
                        "format": "int32"
                    },
                    "smsCount": {
                        "type": "integer",
                        "description": "the sms count",
                        "format": "int32"
                    },
                    "voiceCount": {
                        "type": "integer",
                        "description": "the voice count",
                        "format": "int32"
                    },
                    "pushCount": {
                        "type": "integer",
                        "description": "the push count",
                        "format": "int32"
                    }
                }
            },
            "TenantCounterModel": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string"
                    },
                    "hostname": {
                        "type": "string"
                    },
                    "customerType": {
                        "type": "string"
                    },
                    "emailCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "smsCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "voiceCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "pushCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "emailQuota": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "smsQuota": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "voiceQuota": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "pushQuota": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "NotificationError": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "error id, e.g. \"CSIAP3502E\""
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "error description, e.g. \"The tenant specified is invalid.\""
                    }
                }
            },
            "HealthCheckResponse": {
                "required": [
                    "components",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "components": {
                        "type": "array",
                        "description": "The health check status for all of the Notification Service components.",
                        "items": {
                            "$ref": "#/components/schemas/Component_3"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "The overall status result of the health check.",
                        "example": "good",
                        "enum": [
                            "good",
                            "bad",
                            "marginal"
                        ]
                    }
                }
            },
            "FakeEmailAddressPattern": {
                "required": [
                    "patterns"
                ],
                "type": "object",
                "properties": {
                    "patterns": {
                        "type": "array",
                        "description": "pattern",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "FakeEmailAddressItem": {
                "type": "object",
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "description": "tenantId"
                    },
                    "patterns": {
                        "type": "array",
                        "description": "patterns",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "VoiceConfig": {
                "type": "object",
                "properties": {
                    "primaryProvider": {
                        "type": "string",
                        "description": "the primary email provider"
                    }
                }
            },
            "EmailConfig": {
                "type": "object",
                "properties": {
                    "primaryProvider": {
                        "type": "string",
                        "description": "the primary email provider"
                    }
                }
            },
            "SMSConfig": {
                "type": "object",
                "properties": {
                    "primaryProvider": {
                        "type": "string",
                        "description": "the primary email provider"
                    }
                }
            },
            "SMSOTPNotification": {
                "required": [
                    "content",
                    "correlation",
                    "expiry",
                    "otp",
                    "recipient"
                ],
                "type": "object",
                "properties": {
                    "recipient": {
                        "type": "string",
                        "description": "the international phone number with country code, e.g. 18005551212"
                    },
                    "content": {
                        "type": "string",
                        "description": "the message body",
                        "example": "Your passcode is 123456"
                    },
                    "contentType": {
                        "type": "string",
                        "description": "Optional. If specified, must be 'text'",
                        "example": "text"
                    },
                    "otp": {
                        "type": "string",
                        "description": "The one-time password value",
                        "example": "123456"
                    },
                    "correlation": {
                        "type": "string",
                        "description": "A value to be associated with the verification. It will be prefixed to the one-time password in the SMS to be sent.",
                        "example": "4579"
                    },
                    "expiry": {
                        "type": "integer",
                        "description": "The number of seconds until the one-time password expires",
                        "format": "int32",
                        "example": 300
                    }
                }
            },
            "App": {
                "type": "object",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "the id of the custom app that will receive the push. See Push Credentials Management endpoints for storing credentials for a custom push app."
                    },
                    "useDevCreds": {
                        "type": "boolean",
                        "description": "When set to true, use the dev creds stored for the custom push app indicated by appId. Default behavior if not supplied is to use the production creds. See Push Credentials Management endpoints for storing dev and prod credentials for a custom push app."
                    }
                }
            },
            "FirebaseNotification": {
                "type": "object",
                "properties": {
                    "app": {
                        "$ref": "#/components/schemas/App"
                    },
                    "payload": {
                        "type": "string",
                        "description": "String representation of JSON payload to be sent directly to the push service. If provided, takes precedence over 'json' field"
                    },
                    "json": {
                        "type": "object",
                        "properties": {},
                        "description": "JSON payload to be sent directly to the push service. Used only when string 'payload' field is not provided"
                    }
                }
            },
            "ApnsNotification": {
                "required": [
                    "deviceToken"
                ],
                "type": "object",
                "properties": {
                    "app": {
                        "$ref": "#/components/schemas/App"
                    },
                    "deviceToken": {
                        "type": "string",
                        "description": "the target device token"
                    },
                    "payload": {
                        "type": "string",
                        "description": "String representation of JSON payload to be sent directly to the push service. If provided, takes precedence over 'json' field"
                    },
                    "json": {
                        "type": "object",
                        "properties": {},
                        "description": "JSON payload to be sent directly to the push service. Used only when string 'payload' field is not provided"
                    }
                }
            },
            "EmailNotification": {
                "required": [
                    "content",
                    "contentType",
                    "recipients",
                    "subject"
                ],
                "type": "object",
                "properties": {
                    "recipients": {
                        "$ref": "#/components/schemas/Recipients"
                    },
                    "subject": {
                        "type": "string",
                        "description": "the subject line",
                        "example": "Subject Here"
                    },
                    "content": {
                        "type": "string",
                        "description": "the message body",
                        "example": "Message Here"
                    },
                    "contentType": {
                        "type": "string",
                        "description": "the content type",
                        "example": "text/html"
                    },
                    "category": {
                        "type": "string",
                        "description": "the email category",
                        "example": "TenantCreate"
                    }
                }
            },
            "Recipients": {
                "required": [
                    "to"
                ],
                "type": "object",
                "properties": {
                    "to": {
                        "type": "array",
                        "description": "email addresses of recipients",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "Message": {
                "required": [
                    "body"
                ],
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "the title of the notification",
                        "example": "Title Here"
                    },
                    "body": {
                        "type": "string",
                        "description": "the message body",
                        "example": "Message Here"
                    }
                }
            },
            "VoiceNotification": {
                "required": [
                    "content",
                    "otp",
                    "recipient"
                ],
                "type": "object",
                "properties": {
                    "recipient": {
                        "type": "string",
                        "description": "the international phone number with country code, e.g. 18005551212"
                    },
                    "content": {
                        "type": "string",
                        "description": "the message body",
                        "example": "Your passcode is 123456.<break> Use the passcode to complete your request."
                    },
                    "otp": {
                        "type": "string",
                        "description": "The OTP code. Max 10 chars.",
                        "example": "123456"
                    },
                    "language": {
                        "type": "string",
                        "description": "Optional. The language used for voice message translation.",
                        "example": "en-US"
                    }
                }
            },
            "NotificationEvent": {
                "type": "object",
                "properties": {
                    "notificationId": {
                        "type": "string"
                    },
                    "subtype": {
                        "type": "string"
                    },
                    "provider": {
                        "type": "string"
                    },
                    "providerMessageId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "statusMessage": {
                        "type": "string"
                    },
                    "deliveryStatus": {
                        "type": "string"
                    },
                    "recipient": {
                        "type": "string"
                    },
                    "sender": {
                        "type": "string"
                    },
                    "time": {
                        "type": "string"
                    },
                    "appId": {
                        "type": "string"
                    },
                    "tenantname": {
                        "type": "string"
                    },
                    "tenantid": {
                        "type": "string"
                    }
                }
            },
            "SMSNotification": {
                "required": [
                    "content",
                    "recipient"
                ],
                "type": "object",
                "properties": {
                    "recipient": {
                        "type": "string",
                        "description": "the international phone number with country code, e.g. 18005551212"
                    },
                    "content": {
                        "type": "string",
                        "description": "the message body",
                        "example": "Your passcode is 123456"
                    },
                    "contentType": {
                        "type": "string",
                        "description": "Optional. If specified, must be 'text'",
                        "example": "text"
                    }
                }
            },
            "APNSPushConfig": {
                "type": "object",
                "properties": {
                    "developmentCreds": {
                        "$ref": "#/components/schemas/APNSPushCredentials"
                    },
                    "productionCreds": {
                        "$ref": "#/components/schemas/APNSPushCredentials"
                    }
                }
            },
            "APNSPushCredentials": {
                "required": [
                    "base64Cert",
                    "certPassword"
                ],
                "type": "object",
                "properties": {
                    "base64Cert": {
                        "type": "string",
                        "description": "the certificate store in base64 format"
                    },
                    "certPassword": {
                        "type": "string",
                        "description": "the password for the certificate store"
                    }
                }
            },
            "FirebasePushConfig": {
                "type": "object",
                "properties": {
                    "developmentCreds": {
                        "$ref": "#/components/schemas/FirebasePushCredentials"
                    },
                    "productionCreds": {
                        "$ref": "#/components/schemas/FirebasePushCredentials"
                    }
                }
            },
            "FirebasePushCredentials": {
                "required": [
                    "serviceAccountJSON"
                ],
                "type": "object",
                "properties": {
                    "serviceAccountJSON": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "the service account JSON sourced from Firebase account of the mobile app"
                    }
                }
            },
            "PushCredentials": {
                "required": [
                    "appId"
                ],
                "type": "object",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "the unique app identifier of the mobile app (mobile app App ID or Project ID)"
                    },
                    "apnsPushConfig": {
                        "$ref": "#/components/schemas/APNSPushConfig"
                    },
                    "firebasePushConfig": {
                        "$ref": "#/components/schemas/FirebasePushConfig"
                    }
                }
            },
            "Credential": {
                "required": [
                    "appId",
                    "id"
                ],
                "type": "object",
                "properties": {
                    "apnsPushConfig": {
                        "$ref": "#/components/schemas/APNSPushConfig"
                    },
                    "firebasePushConfig": {
                        "$ref": "#/components/schemas/FirebasePushConfig"
                    },
                    "appId": {
                        "type": "string",
                        "description": "The unique app identifier of the mobile app (mobile app App ID or Project ID)"
                    },
                    "id": {
                        "type": "string",
                        "description": "The CI assigned identifier of the push credential set"
                    }
                }
            },
            "Credentials": {
                "required": [
                    "credentials"
                ],
                "type": "object",
                "properties": {
                    "credentials": {
                        "type": "array",
                        "description": "The push credentials",
                        "items": {
                            "$ref": "#/components/schemas/Credential"
                        }
                    }
                }
            },
            "BlockedPhoneNumberParm": {
                "type": "object",
                "properties": {
                    "patterns": {
                        "type": "array",
                        "description": "patterns",
                        "items": {
                            "type": "string"
                        }
                    },
                    "countryFilterType": {
                        "type": "string",
                        "description": "allow or block"
                    },
                    "countries": {
                        "type": "array",
                        "description": "countries",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "EmailSuppression": {
                "type": "object",
                "properties": {
                    "recipient": {
                        "type": "string",
                        "description": "recipient"
                    }
                }
            },
            "BlockedPhoneNumberItem": {
                "type": "object",
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "description": "tenantId"
                    },
                    "patterns": {
                        "type": "array",
                        "description": "patterns",
                        "items": {
                            "type": "string"
                        }
                    },
                    "countryFilterType": {
                        "type": "string",
                        "description": "countryFilterType"
                    },
                    "countries": {
                        "type": "array",
                        "description": "countries",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "Component_3": {
                "required": [
                    "details",
                    "name",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the component that is being checked.",
                        "example": "Zookeeper"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status result of the health check.",
                        "example": "good"
                    },
                    "details": {
                        "type": "string",
                        "description": "A message about what was checked.",
                        "example": "The connection to Zookeeper is successful.",
                        "enum": [
                            "good",
                            "bad",
                            "marginal"
                        ]
                    }
                }
            },
            "PushNotification_0": {
                "required": [
                    "platform",
                    "recipient"
                ],
                "type": "object",
                "properties": {
                    "platform": {
                        "type": "string",
                        "description": "the device platform - Android or IOS"
                    },
                    "app": {
                        "$ref": "#/components/schemas/App"
                    },
                    "recipient": {
                        "type": "string",
                        "description": "the device registration token"
                    },
                    "message": {
                        "$ref": "#/components/schemas/Message"
                    },
                    "data": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "custom data to be sent to the app. JSONObject containing key-value pairs."
                    }
                }
            },
            "FunctionStringString": {
                "type": "object"
            },
            "AdditionalConfiguration": {
                "type": "object",
                "properties": {
                    "clientAuthMethod": {
                        "type": "string",
                        "description": "Client authentication method."
                    },
                    "validateClientAssertionJti": {
                        "type": "boolean",
                        "description": "Whether need to validate the jti of incoming client auth JWT."
                    },
                    "allowedClientAssertionVerificationKeys": {
                        "type": "array",
                        "description": "List of allowed key IDs to use for verifying incoming JWT signature.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tlsClientAuthAttribute": {
                        "type": "string",
                        "description": "MTLS client authentication attribute."
                    },
                    "tlsClientAuthAttributeValue": {
                        "type": "string",
                        "description": "MTLS client authentication attribute value."
                    },
                    "certificateBoundAccessTokens": {
                        "type": "boolean",
                        "description": "Indicates if certificate bound access tokens must be issued."
                    },
                    "oidcv3": {
                        "type": "boolean",
                        "description": "Indicator whether the client configuration is for OIDC v3."
                    },
                    "requirePushAuthorize": {
                        "type": "boolean",
                        "description": "Whether only push authorize requests will be processed."
                    },
                    "introspectAuthorization": {
                        "type": "string",
                        "description": "Option of which client(s) are authorized to perform introspection.  Default is 'any'",
                        "example": "self",
                        "enum": [
                            "self",
                            "any",
                            "app"
                        ]
                    },
                    "responseTypes": {
                        "type": "array",
                        "description": "List of response types allowed at authorize endpoint. If not specified, the restriction is solely based on grant type enabled.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "responseModes": {
                        "type": "array",
                        "description": "List of response modes allowed at authorize endpoint.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "authorizeRequestMap": {
                        "type": "array",
                        "description": "List of enrichment mapping for authorize endpoint request.",
                        "items": {
                            "$ref": "#/components/schemas/ClientEnrichmentMap"
                        }
                    },
                    "authorizeResponseMap": {
                        "type": "array",
                        "description": "List of enrichment mapping for authorize endpoint response.",
                        "items": {
                            "$ref": "#/components/schemas/ClientEnrichmentMap"
                        }
                    },
                    "tokenRequestMap": {
                        "type": "array",
                        "description": "List of enrichment mapping for token endpoint request.",
                        "items": {
                            "$ref": "#/components/schemas/ClientEnrichmentMap"
                        }
                    },
                    "tokenResponseMap": {
                        "type": "array",
                        "description": "List of enrichment mapping for token endpoint response.",
                        "items": {
                            "$ref": "#/components/schemas/ClientEnrichmentMap"
                        }
                    },
                    "introspectResponseMap": {
                        "type": "array",
                        "description": "List of enrichment mapping for introspect endpoint response.",
                        "items": {
                            "$ref": "#/components/schemas/ClientEnrichmentMap"
                        }
                    },
                    "userInfoResponseMap": {
                        "type": "array",
                        "description": "List of enrichment mapping for userinfo endpoint response.",
                        "items": {
                            "$ref": "#/components/schemas/ClientEnrichmentMap"
                        }
                    },
                    "userinfoRspSigningAlg": {
                        "type": "string",
                        "description": "Userinfo response JWT signing algorithm."
                    },
                    "userinfoRspSigningKey": {
                        "type": "string",
                        "description": "Userinfo response JWT signing key."
                    },
                    "userinfoRspEncryptionAlg": {
                        "type": "string",
                        "description": "Userinfo response JWT encryption algorithm."
                    },
                    "userinfoRspEncryptionEnc": {
                        "type": "string",
                        "description": "Userinfo response JWT encryption content algorithm."
                    },
                    "userinfoRspEncryptionKey": {
                        "type": "string",
                        "description": "Userinfo response JWT encryption key."
                    },
                    "authorizeRspSigningAlg": {
                        "type": "string",
                        "description": "Authorize response JWT signing algorithm."
                    },
                    "authorizeRspSigningKey": {
                        "type": "string",
                        "description": "Authorize response JWT signing key."
                    },
                    "authorizeRspEncryptionAlg": {
                        "type": "string",
                        "description": "Authorize response JWT encryption algorithm."
                    },
                    "authorizeRspEncryptionEnc": {
                        "type": "string",
                        "description": "Authorize response JWT encryption content algorithm."
                    },
                    "authorizeRspEncryptionKey": {
                        "type": "string",
                        "description": "Authorize response JWT encryption key."
                    },
                    "requestObjectSigningAlg": {
                        "type": "string",
                        "description": "Request object signing algorithm."
                    },
                    "requestObjectEncryptionAlg": {
                        "type": "string",
                        "description": "Request object encryption algorithm."
                    },
                    "requestObjectEncryptionEnc": {
                        "type": "string",
                        "description": "Request object encryption content algorithm."
                    },
                    "requestObjectParametersOnly": {
                        "type": "boolean",
                        "description": "All the request parameters are only in the request object."
                    },
                    "requestObjectRequireExp": {
                        "type": "boolean",
                        "description": "Whether exp is required in the request object."
                    },
                    "requestObjectMaxExpFromNbf": {
                        "$ref": "#/components/schemas/Number"
                    },
                    "requestUris": {
                        "type": "array",
                        "description": "Array of URLs using the https scheme referencing JWT Objects resource containing the request parameters.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "clientAssertionSigningAlg": {
                        "type": "string",
                        "description": "The signing algorithm for the client assertion."
                    },
                    "dpopBoundAccessTokens": {
                        "type": "boolean",
                        "description": "Whether generate the DPoP bound access token."
                    },
                    "validateDPoPProofJti": {
                        "type": "boolean",
                        "description": "Whether need to validate the jti of incoming DPoP JWT."
                    },
                    "dpopProofSigningAlg": {
                        "type": "string",
                        "description": "DPoP JWT signing algorithm."
                    },
                    "subjectTokenTypes": {
                        "type": "array",
                        "description": "Allowed subject token types.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "actorTokenTypes": {
                        "type": "array",
                        "description": "Allowed actor token types.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "requestedTokenTypes": {
                        "type": "array",
                        "description": "Allowed requested token types.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "validateJwtBearerJti": {
                        "type": "boolean",
                        "description": "Whether need to validate the jti of incoming JWT bearer assertion. If not specified, the default is true."
                    },
                    "clientGroups": {
                        "$ref": "#/components/schemas/ClientGroups"
                    },
                    "exchangeForSSOSessionOption": {
                        "type": "string",
                        "description": "Options to exchange token for SSO session. If this is not set, or is set to 'default', the configuration in the OIDC federation settings will take effect.",
                        "example": "default",
                        "enum": [
                            "default",
                            "deny",
                            "allow",
                            "allow_and_revoke"
                        ]
                    },
                    "refreshAttributeMapClaimNames": {
                        "type": "array",
                        "description": "List of ID token and user info claim names that will be updated during a refresh token flow.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "refreshIntrospectMapClaimNames": {
                        "type": "array",
                        "description": "List of JWT access token and introspect claim names that will be updated during a refresh token flow.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "jwks": {
                        "$ref": "#/components/schemas/ClientJwks"
                    }
                }
            },
            "ClientAttributeMap": {
                "required": [
                    "function",
                    "name",
                    "sourceId"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Claim name."
                    },
                    "sourceId": {
                        "type": "string",
                        "description": "Attribute Source Id that this claim mapping to."
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Whether this claim will always be returned."
                    },
                    "function": {
                        "$ref": "#/components/schemas/ClientAttributeRule"
                    },
                    "refresh": {
                        "type": "boolean",
                        "description": "Whether this claim will be refreshed during refresh token flow. Default is false."
                    }
                }
            },
            "ClientAttributeRule": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Transformation rule name."
                    },
                    "custom": {
                        "type": "string",
                        "description": "Custom rule."
                    },
                    "predefined": {
                        "type": "string",
                        "description": "Pre-defined rule identifier."
                    }
                }
            },
            "ClientEnrichmentMap": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Attribute name."
                    },
                    "type": {
                        "type": "string",
                        "description": "Attribute type. Default is 'parameter'",
                        "example": "header",
                        "enum": [
                            "header",
                            "parameter"
                        ]
                    },
                    "custom": {
                        "type": "string",
                        "description": "Rule associated with this mapping."
                    },
                    "predefined": {
                        "type": "string",
                        "description": "Predefined rule associated with this mapping."
                    }
                }
            },
            "ClientGroups": {
                "type": "object",
                "properties": {
                    "tokenExchange": {
                        "type": "array",
                        "description": "List of token exchange groups associated with this client.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "introspect": {
                        "type": "array",
                        "description": "List of introspection groups associated with this client.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ClientJwks": {
                "required": [
                    "keys"
                ],
                "type": "object",
                "properties": {
                    "keys": {
                        "type": "array",
                        "description": "Array of JWKs.",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {}
                            }
                        }
                    }
                }
            },
            "ClientOverrides": {
                "type": "object",
                "properties": {
                    "signKeyLabel": {
                        "type": "string",
                        "description": "Key label used to perform the signing."
                    },
                    "authorizationCodeLifetime": {
                        "$ref": "#/components/schemas/Number"
                    },
                    "accessTokenLifetime": {
                        "$ref": "#/components/schemas/Number"
                    },
                    "refreshTokenLifetime": {
                        "$ref": "#/components/schemas/Number"
                    },
                    "maxAuthorizationGrantLifetime": {
                        "$ref": "#/components/schemas/Number"
                    },
                    "renewRefreshToken": {
                        "type": "boolean",
                        "description": "When set to true, refresh token lifetime will be used. Default is false."
                    },
                    "tcmBehavior": {
                        "type": "string",
                        "description": "Trusted client management behavior.",
                        "example": "never_prompt",
                        "enum": [
                            "never_prompt",
                            "always_prompt"
                        ]
                    },
                    "restrictScopes": {
                        "type": "boolean",
                        "description": "Restrict custom scopes, true or false. Default is false."
                    },
                    "scopes": {
                        "type": "array",
                        "description": "List of allowed custom scopes.",
                        "items": {
                            "$ref": "#/components/schemas/CustomScope"
                        }
                    }
                }
            },
            "CreateOidcClient": {
                "required": [
                    "clientName",
                    "grantTypes"
                ],
                "type": "object",
                "properties": {
                    "isDynamicClient": {
                        "type": "boolean",
                        "description": "Indicator of dynamic client. Only set to true for dynamic client."
                    },
                    "apiClientOwners": {
                        "type": "array",
                        "description": "API Client IDs that own this client.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "clientName": {
                        "type": "string",
                        "description": "Display name. Maximum 256 characters."
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "Client secret. Maximum 512 characters. Will be auto-generated if this parameter is not provided. Empty string value is for public client."
                    },
                    "category": {
                        "type": "string",
                        "description": "Client category. Maximum 32 characters."
                    },
                    "definitionId": {
                        "type": "string",
                        "description": "Definition ID that this client is associated with. The Definition must already exist. If not specified, the client will be attached to the default definition."
                    },
                    "appId": {
                        "type": "string",
                        "description": "Application ID that this client is associated with."
                    },
                    "idSources": {
                        "type": "array",
                        "description": "List of allowed ID Sources based on priority.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "requirePkceVerification": {
                        "type": "boolean",
                        "description": "Require PKCE verification. If not provided, the value will be set to false."
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable the client. If not provided, the value will be set to true."
                    },
                    "grantTypes": {
                        "type": "array",
                        "description": "List of allowed grant types. Must be subset of Definition's grant types (grant_types_supported) listed at /oidc/endpoint/{definition_id}/.well-known/openid-configuration",
                        "items": {
                            "type": "string"
                        }
                    },
                    "policyAppliedAPIGrantTypes": {
                        "type": "array",
                        "description": "List of API-based grant types which access policy must be applied. Must be subset of allowed API-based grant types.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "policyId": {
                        "type": "string",
                        "description": "Access policy ID associated with this client. Only applicable for API client and Application API client."
                    },
                    "birthRightAccess": {
                        "type": "boolean",
                        "description": "Birth right access. Default is false."
                    },
                    "redirectUris": {
                        "type": "array",
                        "description": "List of redirect URIs.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "requestUris": {
                        "type": "array",
                        "description": "List of request URIs.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "jwkSet": {
                        "$ref": "#/components/schemas/ClientJwks"
                    },
                    "jwkUri": {
                        "type": "string",
                        "description": "JSON Web Key (JWK) URI. This will be used instead of requestVerifyKey and idTokenEncryptKey if those are not provided. If specified, JSON Web Key (JWK) Set should not be specified."
                    },
                    "idTokenSigningAlg": {
                        "type": "string",
                        "description": "ID token signing algorithm. List of algorithms (id_token_signing_alg_values_supported) available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration"
                    },
                    "idTokenEncryptAlg": {
                        "type": "string",
                        "description": "ID token key management encryption algorithm. List of algorithms (id_token_encryption_alg_values_supported) available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration"
                    },
                    "idTokenEncryptEnc": {
                        "type": "string",
                        "description": "ID token content encryption algorithm. List of algorithms (id_token_encryption_enc_values_supported) available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration"
                    },
                    "idTokenEncryptKey": {
                        "type": "string",
                        "description": "ID token encryption public key label."
                    },
                    "requestSigningAlg": {
                        "type": "string",
                        "description": "Request signing algorithm. List of algorithms (request_object_signing_alg_values_supported) available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration"
                    },
                    "requestEncryptAlg": {
                        "type": "string",
                        "description": "Request key management encryption algorithm. List of algorithms (request_object_encryption_alg_values_supported) available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration"
                    },
                    "requestEncryptEnc": {
                        "type": "string",
                        "description": "Request content encryption algorithm. List of algorithms (request_object_encryption_enc_values_supported) available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration"
                    },
                    "requestVerifyKey": {
                        "type": "string",
                        "description": "Request signature verification public key label."
                    },
                    "accessTokenType": {
                        "type": "string",
                        "description": "Type of access token to be generated. Default is 'default'",
                        "example": "default",
                        "enum": [
                            "default",
                            "jwt"
                        ]
                    },
                    "audiences": {
                        "type": "array",
                        "description": "List of audiences.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "introspectMap": {
                        "type": "array",
                        "description": "List of application specific claim mapping to attribute source for introspection and JWT access token.",
                        "items": {
                            "$ref": "#/components/schemas/ClientAttributeMap"
                        }
                    },
                    "restrictEntitlements": {
                        "type": "boolean",
                        "description": "Restrict entitlements, true or false. Default is true."
                    },
                    "entitlements": {
                        "type": "array",
                        "description": "List of entitlements assigned to this client.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "defaultEntitlements": {
                        "type": "array",
                        "description": "List of default entitlements assigned to this client.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sendAllClaims": {
                        "type": "boolean",
                        "description": "If true, always return all supported claims. Default is false."
                    },
                    "attributeMap": {
                        "type": "array",
                        "description": "List of application specific claim mapping to attribute source for id token and user info.",
                        "items": {
                            "$ref": "#/components/schemas/ClientAttributeMap"
                        }
                    },
                    "overrideSettings": {
                        "$ref": "#/components/schemas/ClientOverrides"
                    },
                    "jwtBearerIdentifier": {
                        "$ref": "#/components/schemas/JwtBearerIdentifier"
                    },
                    "generateDeviceFlowQRCode": {
                        "type": "boolean",
                        "description": "If true, generate QR Code for the full verification URI. Default is false."
                    },
                    "companyName": {
                        "type": "string",
                        "description": "Company name. Maximum 1024 characters."
                    },
                    "companyUrl": {
                        "type": "string",
                        "description": "Company URL."
                    },
                    "contactPerson": {
                        "type": "string",
                        "description": "Contact person. Maximum 256 characters."
                    },
                    "contactType": {
                        "type": "string",
                        "description": "Contact type.",
                        "enum": [
                            "technical",
                            "support",
                            "administrative",
                            "billing",
                            "other"
                        ]
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address."
                    },
                    "phone": {
                        "type": "string",
                        "description": "Phone number. Maximum 128 characters. No validation done, other than length."
                    },
                    "otherInfo": {
                        "type": "string",
                        "description": "Other miscellaneous information. Maximum 2048 characters."
                    },
                    "themeId": {
                        "type": "string",
                        "description": "Template pages theme to use for all pages related to this OIDC application. Maximum 50 characters."
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this client."
                    },
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Additional properties associated with this client."
                    },
                    "ipFilterOp": {
                        "type": "string",
                        "description": "Operation of IP filter. Default is null, which means IP filter is disabled.",
                        "enum": [
                            "allow",
                            "deny"
                        ]
                    },
                    "ipFilters": {
                        "type": "array",
                        "description": "List of IP filter.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "consentType": {
                        "type": "string",
                        "description": "Type of consent used by this client. The default is null. For new application client and 'isamconnect' client the value will be 'dpcm'.",
                        "enum": [
                            "dpcm"
                        ]
                    },
                    "additionalConfig": {
                        "$ref": "#/components/schemas/AdditionalConfiguration"
                    }
                }
            },
            "CustomScope": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of custom scope."
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of custom scope."
                    }
                }
            },
            "JwtBearerIdentifier": {
                "type": "object",
                "properties": {
                    "searchBy": {
                        "type": "string",
                        "description": "Method to find the User identified by JWT-Bearer sub. Default is by 'uid'"
                    },
                    "defaultIdSource": {
                        "type": "string",
                        "description": "Default identity source when multiple Users of different realm are found."
                    },
                    "defaultRealm": {
                        "type": "string",
                        "description": "Default realm name when multiple Users of different realm are found. Auto-populated based on defaultIdSource."
                    },
                    "function": {
                        "type": "string",
                        "description": "Custom function to identify User. Required when search by custom function."
                    }
                }
            },
            "UpdateOidcClient": {
                "required": [
                    "clientName",
                    "grantTypes"
                ],
                "type": "object",
                "properties": {
                    "secretIssuedAt": {
                        "type": "integer",
                        "description": "Time at which the client secret was issued as the number of seconds from 1970-01-01T00:00:00Z.",
                        "format": "int64"
                    },
                    "isDynamicClient": {
                        "type": "boolean",
                        "description": "Indicator of dynamic client. Only set to true for dynamic client."
                    },
                    "apiClientOwners": {
                        "type": "array",
                        "description": "API Client IDs that own this client.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "clientName": {
                        "type": "string",
                        "description": "Display name. Maximum 256 characters."
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "Client secret. Maximum 512 characters. Will be auto-generated if not specified and previously empty string. Empty string value is for public client."
                    },
                    "category": {
                        "type": "string",
                        "description": "Client category. Maximum 32 characters."
                    },
                    "definitionId": {
                        "type": "string",
                        "description": "Definition ID that this client is associated with. The Definition must already exist. If not specified, the client will still be attached to original definition. If the specified one is different than the original definition, the client will be moved under the specified definition."
                    },
                    "appId": {
                        "type": "string",
                        "description": "Application ID that this client is associated with."
                    },
                    "idSources": {
                        "type": "array",
                        "description": "List of allowed ID Sources based on priority.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "requirePkceVerification": {
                        "type": "boolean",
                        "description": "Require PKCE verification. If not provided, the value will be set to false."
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable or disable the client."
                    },
                    "grantTypes": {
                        "type": "array",
                        "description": "List of allowed grant types. Must be subset of Definition's grant types (grant_types_supported) listed at /oidc/endpoint/{definition_id}/.well-known/openid-configuration",
                        "items": {
                            "type": "string"
                        }
                    },
                    "policyAppliedAPIGrantTypes": {
                        "type": "array",
                        "description": "List of API-based grant types that access policy will be applied. Must be subset of selected API-based grant types.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "policyId": {
                        "type": "string",
                        "description": "Access policy ID associated with this client. Only applicable for API client and Application API client."
                    },
                    "birthRightAccess": {
                        "type": "boolean",
                        "description": "Birth right access. Default is false."
                    },
                    "redirectUris": {
                        "type": "array",
                        "description": "List of redirect URIs.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "requestUris": {
                        "type": "array",
                        "description": "List of request URIs.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "jwkSet": {
                        "$ref": "#/components/schemas/ClientJwks"
                    },
                    "jwkUri": {
                        "type": "string",
                        "description": "JSON Web Key (JWK) URI. This will be used instead of requestVerifyKey and idTokenEncryptKey if those are not provided. If specified, JSON Web Key (JWK) Set should not be specified."
                    },
                    "idTokenSigningAlg": {
                        "type": "string",
                        "description": "ID token signing algorithm. List of algorithms (id_token_signing_alg_values_supported) available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration"
                    },
                    "idTokenEncryptAlg": {
                        "type": "string",
                        "description": "ID token key management encryption algorithm. List of algorithms (id_token_encryption_alg_values_supported) available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration"
                    },
                    "idTokenEncryptEnc": {
                        "type": "string",
                        "description": "ID token content encryption algorithm. List of algorithms (id_token_encryption_enc_values_supported) available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration"
                    },
                    "idTokenEncryptKey": {
                        "type": "string",
                        "description": "ID token encryption public key label."
                    },
                    "requestSigningAlg": {
                        "type": "string",
                        "description": "Request signing algorithm. List of algorithms (request_object_signing_alg_values_supported) available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration"
                    },
                    "requestEncryptAlg": {
                        "type": "string",
                        "description": "Request key management encryption algorithm. List of algorithms (request_object_encryption_alg_values_supported) available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration"
                    },
                    "requestEncryptEnc": {
                        "type": "string",
                        "description": "Request content encryption algorithm. List of algorithms (request_object_encryption_enc_values_supported) available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration"
                    },
                    "requestVerifyKey": {
                        "type": "string",
                        "description": "Request signature verification public key label."
                    },
                    "accessTokenType": {
                        "type": "string",
                        "description": "Type of access token to be generated. Default is 'default'",
                        "example": "default",
                        "enum": [
                            "default",
                            "jwt"
                        ]
                    },
                    "audiences": {
                        "type": "array",
                        "description": "List of audiences.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "introspectMap": {
                        "type": "array",
                        "description": "List of application specific claim mapping to attribute source for introspection and JWT access token.",
                        "items": {
                            "$ref": "#/components/schemas/ClientAttributeMap"
                        }
                    },
                    "restrictEntitlements": {
                        "type": "boolean",
                        "description": "Restrict entitlements, true or false. Default is true."
                    },
                    "entitlements": {
                        "type": "array",
                        "description": "List of entitlements assigned to this client.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "defaultEntitlements": {
                        "type": "array",
                        "description": "List of default entitlements assigned to this client.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sendAllClaims": {
                        "type": "boolean",
                        "description": "If true, always return all supported claims. Default is false."
                    },
                    "attributeMap": {
                        "type": "array",
                        "description": "List of application specific claim mapping to attribute source for id_token and user info.",
                        "items": {
                            "$ref": "#/components/schemas/ClientAttributeMap"
                        }
                    },
                    "overrideSettings": {
                        "$ref": "#/components/schemas/ClientOverrides"
                    },
                    "jwtBearerIdentifier": {
                        "$ref": "#/components/schemas/JwtBearerIdentifier"
                    },
                    "generateDeviceFlowQRCode": {
                        "type": "boolean",
                        "description": "If true, generate QR Code for the full verification URI. Default is false."
                    },
                    "companyName": {
                        "type": "string",
                        "description": "Company name. Maximum 1024 characters."
                    },
                    "companyUrl": {
                        "type": "string",
                        "description": "Company URL."
                    },
                    "contactPerson": {
                        "type": "string",
                        "description": "Contact person. Maximum 256 characters."
                    },
                    "contactType": {
                        "type": "string",
                        "description": "Contact type.",
                        "enum": [
                            "technical",
                            "support",
                            "administrative",
                            "billing",
                            "other"
                        ]
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address."
                    },
                    "phone": {
                        "type": "string",
                        "description": "Phone number. Maximum 128 characters. No validation done, other than length."
                    },
                    "otherInfo": {
                        "type": "string",
                        "description": "Other miscellaneous information. Maximum 2048 characters."
                    },
                    "themeId": {
                        "type": "string",
                        "description": "Template pages theme to use for all pages related to this OIDC application."
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this client."
                    },
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Additional properties associated with this client."
                    },
                    "ipFilterOp": {
                        "type": "string",
                        "description": "Operation of IP filter. Default is null, which means IP filter is disabled.",
                        "enum": [
                            "allow",
                            "deny"
                        ]
                    },
                    "ipFilters": {
                        "type": "array",
                        "description": "List of IP filter.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "consentType": {
                        "type": "string",
                        "description": "Type of consent used by this client.",
                        "enum": [
                            "oidc",
                            "dpcm"
                        ]
                    },
                    "additionalConfig": {
                        "$ref": "#/components/schemas/AdditionalConfiguration"
                    }
                }
            },
            "ClientList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Maximum result requested",
                        "format": "int32",
                        "readOnly": true
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Number of result per page",
                        "format": "int32",
                        "readOnly": true
                    },
                    "page": {
                        "type": "integer",
                        "description": "Requested page number",
                        "format": "int32",
                        "readOnly": true
                    },
                    "total": {
                        "type": "integer",
                        "description": "Total result returned in this request",
                        "format": "int32",
                        "readOnly": true
                    },
                    "clients": {
                        "type": "array",
                        "description": "List of result that match the query",
                        "items": {
                            "$ref": "#/components/schemas/Client_0"
                        }
                    }
                }
            },
            "PatchClient": {
                "type": "object",
                "properties": {
                    "birthRightAccess": {
                        "type": "boolean",
                        "description": "Birth right access. Default is false."
                    },
                    "policyId": {
                        "type": "string",
                        "description": "Access policy ID associated with this client."
                    }
                }
            },
            "UpdateBirthRightAccess": {
                "type": "object",
                "properties": {
                    "birthRightAccess": {
                        "type": "boolean",
                        "description": "Birth right access. Default is false."
                    }
                }
            },
            "PatchEntry": {
                "required": [
                    "op",
                    "path"
                ],
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "description": "The operation to be performed.",
                        "enum": [
                            "test",
                            "remove",
                            "add",
                            "replace",
                            "move",
                            "copy",
                            "retrieve"
                        ]
                    },
                    "from": {
                        "type": "string",
                        "description": "The path to copy or move from."
                    },
                    "path": {
                        "type": "string",
                        "description": "The path to perform the specified operation on."
                    },
                    "value": {
                        "type": "object",
                        "properties": {},
                        "description": "The value to add, replace, or verify. For retrieve operation, the value will be put here."
                    },
                    "result": {
                        "type": "string",
                        "description": "The result of the operation.",
                        "enum": [
                            "success",
                            "failure."
                        ]
                    },
                    "error": {
                        "type": "string",
                        "description": "A requester locale specific descriptive message."
                    },
                    "location": {
                        "type": "string",
                        "description": "Location of a successful add operation, when applicable."
                    }
                }
            },
            "PatchResponse": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "readOnly": true
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale specific descriptive message.",
                        "readOnly": true
                    },
                    "results": {
                        "type": "array",
                        "description": "The individual results of the PATCH operation.",
                        "items": {
                            "$ref": "#/components/schemas/PatchEntry"
                        }
                    }
                }
            },
            "ClientPatchEntry": {
                "required": [
                    "op",
                    "path"
                ],
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "description": "The operation that is to be performed.",
                        "example": "remove",
                        "enum": [
                            "add",
                            "remove",
                            "replace",
                            "retrieve"
                        ]
                    },
                    "path": {
                        "type": "string",
                        "description": "The path on which to perform the operation. \n To \"add\" a client, set the path as /. \n To \"replace\", \"remove\", or \"retrieve\" a client set path as /{Client Identifier}.",
                        "example": "/52a3374e-604b-4d8a-bedb-a51ceb96389b"
                    },
                    "value": {
                        "type": "boolean",
                        "description": "The client JSON payload to be added or replaced. Required for the \"add\" or \"replace\" operation."
                    }
                }
            },
            "USCConsent": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The consent identifier.",
                        "readOnly": true,
                        "example": "52a3374e-604b-4d8a-bedb-a51ceb96389b"
                    },
                    "appId": {
                        "type": "string",
                        "description": "The application ID. For API client grants, this property is null.",
                        "readOnly": true,
                        "example": "2919856898870752436"
                    },
                    "category": {
                        "type": "string",
                        "description": "The category of the OIDC client.",
                        "readOnly": true,
                        "enum": [
                            "application",
                            "api_client",
                            "ibm_verify",
                            "default"
                        ]
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The API client's or OIDC application's client ID.",
                        "readOnly": true,
                        "example": "6f1bdd22-eb94-456d-b2c3-ae97181053a3"
                    },
                    "clientName": {
                        "type": "string",
                        "description": "The OIDC application name or API client name.",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user. For API client grants, this value is null.",
                        "readOnly": true
                    },
                    "preferred_username": {
                        "type": "string",
                        "description": "The preferred user name. For API client grants, this value is null.",
                        "readOnly": true
                    },
                    "realmName": {
                        "type": "string",
                        "description": "The realm name.",
                        "readOnly": true,
                        "example": "cloudIdentityRealm"
                    },
                    "username": {
                        "type": "string",
                        "description": "The user's unique ID. For API client grants, this value is the client ID.",
                        "readOnly": true
                    },
                    "entitlements": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The list of entitlements that were consented.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "entitlementLabels": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The list of entitlement labels that were consented.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "scopes": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The list of scopes that were consented.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "issuedOn": {
                        "type": "string",
                        "description": "The time when the consent was issued.",
                        "readOnly": true,
                        "example": "2018-06-20T02:04:58Z"
                    },
                    "lastUsed": {
                        "type": "string",
                        "description": "The time when the consent was last used.",
                        "readOnly": true,
                        "example": "2018-06-20T02:05:58Z"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Flag to indicate the consent is only viewable or can be modified.",
                        "readOnly": true
                    }
                }
            },
            "USCConsentList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Maximum result requested",
                        "format": "int32",
                        "readOnly": true
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Number of result per page",
                        "format": "int32",
                        "readOnly": true
                    },
                    "page": {
                        "type": "integer",
                        "description": "Requested page number",
                        "format": "int32",
                        "readOnly": true
                    },
                    "total": {
                        "type": "integer",
                        "description": "Total result returned in this request",
                        "format": "int32",
                        "readOnly": true
                    },
                    "consents": {
                        "type": "array",
                        "description": "List of result that match the query",
                        "items": {
                            "$ref": "#/components/schemas/USCConsent"
                        }
                    }
                }
            },
            "ConsentPatchEntry": {
                "required": [
                    "op",
                    "path"
                ],
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "description": "The operation that is to be performed.",
                        "example": "remove",
                        "enum": [
                            "remove"
                        ]
                    },
                    "path": {
                        "type": "string",
                        "description": "The path on which to perform the operation. \n To \"remove\" a consent, the path is /{Consent Identifier}. \n To \"remove\" a scope from a consent, the path is /{Consent Identifier}/scopes/{Scope}. \n To \"remove\" an entitlement from a consent, the path is /{Consent Identifier}/entitlements/{Entitlement}.",
                        "example": "/52a3374e-604b-4d8a-bedb-a51ceb96389b/scopes/openid"
                    }
                }
            },
            "SummaryData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Summary data identifier. For clients, it is the client ID. For countries, it is the country code. For IP addresses, it is the IP address itself. For users, it is the unique user identifier.",
                        "readOnly": true
                    },
                    "label": {
                        "type": "string",
                        "description": "The client name. Applicable for clients summary only.",
                        "readOnly": true
                    },
                    "preferred_username": {
                        "type": "string",
                        "description": "The preferred user name. Applicable for users summary only.",
                        "readOnly": true
                    },
                    "realmName": {
                        "type": "string",
                        "description": "The realm name. Applicable for users summary only.",
                        "readOnly": true,
                        "example": "cloudIdentityRealm"
                    },
                    "count": {
                        "type": "integer",
                        "description": "Summary data count.",
                        "format": "int64",
                        "readOnly": true
                    }
                }
            },
            "USCConsentSummary": {
                "type": "object",
                "properties": {
                    "clients": {
                        "type": "array",
                        "description": "Distinct clients in consent data.",
                        "items": {
                            "$ref": "#/components/schemas/SummaryData"
                        }
                    },
                    "entitlements": {
                        "type": "array",
                        "description": "Distinct entitlements in consent data.",
                        "items": {
                            "$ref": "#/components/schemas/SummaryData"
                        }
                    },
                    "scopes": {
                        "type": "array",
                        "description": "Distinct entitlements in consent data.",
                        "items": {
                            "$ref": "#/components/schemas/SummaryData"
                        }
                    },
                    "users": {
                        "type": "array",
                        "description": "Distinct users in consent data.",
                        "items": {
                            "$ref": "#/components/schemas/SummaryData"
                        }
                    },
                    "total_unique": {
                        "type": "integer",
                        "description": "Total unique clients or users or entitlements in consent data.",
                        "format": "int64",
                        "readOnly": true
                    }
                }
            },
            "GenerateOidcDeviceSecret": {
                "type": "object",
                "properties": {
                    "deviceSecretAlg": {
                        "type": "string",
                        "description": "Device secret JWE key encryption algorithm. Default algorithm is ECDH-ES."
                    },
                    "deviceSecretEnc": {
                        "type": "string",
                        "description": "Device secret JWE content encryption algorithm. Default algorithm is A128GCM."
                    }
                }
            },
            "Definition": {
                "required": [
                    "accessTokenLength",
                    "accessTokenLifetime",
                    "enforceSingleAccessTokenPerGrant",
                    "grantTypes",
                    "name",
                    "tokenCharSet"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Definition ID. This value will be auto-generated during creation.",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name. Maximum 256 characters."
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this definition. Maximum 1024 characters."
                    },
                    "dateCreated": {
                        "type": "integer",
                        "description": "Creation timestamp.",
                        "format": "int64",
                        "readOnly": true
                    },
                    "dateModified": {
                        "type": "integer",
                        "description": "Last modified timestamp.",
                        "format": "int64",
                        "readOnly": true
                    },
                    "preMappingRuleId": {
                        "type": "string",
                        "description": "ID of the pre-token mapping rule. Leave this empty to use default mapping rule."
                    },
                    "postMappingRuleId": {
                        "type": "string",
                        "description": "ID of the post-token mapping rule. Leave this empty to use default mapping rule."
                    },
                    "grantTypes": {
                        "type": "array",
                        "description": "List of allowed grant types: authorization_code, implicit, password, refresh_token, client_credentials",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tcmBehavior": {
                        "type": "string",
                        "description": "Trusted client management behavior.",
                        "example": "never_prompt",
                        "enum": [
                            "never_prompt",
                            "always_prompt",
                            "prompt_once_and_remember"
                        ]
                    },
                    "tokenCharSet": {
                        "type": "string",
                        "description": "Token character set. This affects authorization code, access token, and refresh token. Does not affect JWTs (i.e. ID token). Only alphanumeric characters allowed. Case-sensitive."
                    },
                    "accessTokenLifetime": {
                        "type": "integer",
                        "description": "Access token lifetime, in seconds. Maximum 2147483647, minimum 1.",
                        "format": "int32"
                    },
                    "accessTokenLength": {
                        "type": "integer",
                        "description": "Access token length. Maximum 200, minimum 6.",
                        "format": "int32"
                    },
                    "enforceSingleAccessTokenPerGrant": {
                        "type": "boolean",
                        "description": "Enforce single access token per grant."
                    },
                    "authorizationCodeLifetime": {
                        "type": "integer",
                        "description": "Authorization code lifetime, in seconds. Maximum 2147483647, minimum 1. Required only if authorization_code grant type is enabled.",
                        "format": "int32"
                    },
                    "authorizationCodeLength": {
                        "type": "integer",
                        "description": "Authorization code length. Maximum 200, minimum 6. Required only if authorization_code grant type is enabled.",
                        "format": "int32"
                    },
                    "maxAuthorizationGrantLifetime": {
                        "type": "integer",
                        "description": "Authorization grant lifetime, in seconds. Maximum 2147483647, minimum 1. Required only when refresh_token grant type is enabled.",
                        "format": "int32"
                    },
                    "refreshTokenLifetime": {
                        "type": "integer",
                        "description": "Refresh token lifetime, in seconds. Maximum 2147483647, minimum 1. Can be specified when refresh_token grant type is enabled.",
                        "format": "int32"
                    },
                    "refreshTokenLength": {
                        "type": "integer",
                        "description": "Refresh token length. Maximum 200, minimum 6. Required only when refresh_token grant type is enabled.",
                        "format": "int32"
                    },
                    "refreshTokenFaultToleranceLifetime": {
                        "type": "integer",
                        "description": "Refresh token fault tolerance lifetime, in seconds. Maximum 86400, minimum 300.",
                        "format": "int32"
                    },
                    "refreshTokenFaultToleranceOption": {
                        "type": "string",
                        "description": "Refresh token fault tolerance option.",
                        "example": "fault_tolerance_lifetime",
                        "enum": [
                            "fault_tolerance_lifetime",
                            "revoke"
                        ]
                    },
                    "enableMultipleRefreshTokensForFaultTolerance": {
                        "type": "boolean",
                        "description": "Allow multiple refresh tokens for fault tolerance. Required only when refresh_token grant type is enabled."
                    },
                    "pinPolicyEnabled": {
                        "type": "boolean",
                        "description": "Enable PIN policy. Required only when refresh_token grant type is enabled."
                    },
                    "pinLength": {
                        "type": "integer",
                        "description": "PIN length. Maximum 12, minimum 3. Required only when refresh_token grant type is enabled.",
                        "format": "int32"
                    },
                    "deviceFlowPollingInterval": {
                        "type": "integer",
                        "description": "Device-flow polling interval in seconds. Maximum 3600, minimum 2. Default is 5 seconds. Available only when device-flow grant type is enabled.",
                        "format": "int32"
                    },
                    "deviceFlowCodeLifetime": {
                        "type": "integer",
                        "description": "Device-flow device code and user code lifetime, in seconds. Maximum 86400, minimum 1. Default is 300 seconds. Available only when device-flow grant type is enabled.",
                        "format": "int32"
                    },
                    "deviceFlowUserCodeLength": {
                        "type": "integer",
                        "description": "Device-flow user code length. Maximum 200, minimum 6. Default is 6. Available only when device-flow grant type is enabled.",
                        "format": "int32"
                    },
                    "deviceFlowUserCodeCharset": {
                        "type": "string",
                        "description": "Device-flow user code character set. Only alphanumeric characters allowed. Case-sensitive. Available only when device-flow grant type is enabled."
                    },
                    "oidcEnabled": {
                        "type": "boolean",
                        "description": "Enable OpenID Connect. Default to false if not provided."
                    },
                    "issuerIdentifier": {
                        "type": "string",
                        "description": "Issuer of this token. Must be in a valid URI format. Required only when OpenID Connect is enabled for this definition. When left empty and OpenID Connect is enabled, this defaults to https://{tenant_hostname}/oidc/endpoint/{definition_id}"
                    },
                    "idTokenLifetime": {
                        "type": "integer",
                        "description": "ID token lifetime, in seconds. Maximum 2147483647, minimum 1. Required only when OpenID Connect is enabled for this definition.",
                        "format": "int32"
                    },
                    "oidcKeys": {
                        "$ref": "#/components/schemas/DefinitionKeys"
                    },
                    "defaultClaims": {
                        "type": "array",
                        "description": "Default claims that will be output for scope openid.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sendExtendedAttributes": {
                        "type": "boolean",
                        "description": "Set extended attributes in 'ext'."
                    },
                    "jwtValidationTimeSkewInSeconds": {
                        "type": "integer",
                        "description": "Time skew for JWT 'iat', 'exp' and 'nbf' validation in seconds. Maximum 300, minimum 0. Default is 0.",
                        "format": "int32"
                    },
                    "excludeAlgInJwks": {
                        "type": "boolean",
                        "description": "Setting to exclude 'alg' in JWKS."
                    },
                    "extraMetadataAttributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Top level attributes for well-known endpoint to override the existing attribute."
                    },
                    "parDefaultLifetime": {
                        "type": "integer",
                        "description": "Pushed authorization requests default lifetime.",
                        "format": "int32"
                    },
                    "parUriPrefix": {
                        "type": "string",
                        "description": "Pushed authorization requests uri prefix."
                    },
                    "excludeJWKSCertificateChain": {
                        "type": "boolean",
                        "description": "Setting to exclude 'x5c' in JWKS."
                    },
                    "excludeJWKSCertificateThumbprint": {
                        "type": "boolean",
                        "description": "Setting to exclude 'x5t' and 'x5t#S256' in JWKS."
                    },
                    "mtlsEndpointBaseURI": {
                        "type": "string",
                        "description": "Base URL for MTLS endpoints. This must include the protocol scheme like https."
                    },
                    "tokenExchangeIdTokenToleranceWindow": {
                        "type": "integer",
                        "description": "Maximum elapsed seconds since the expiry of an ID Token that it can still be used in token exchange scenario. If not set, no validation is done on the ID token expiry. Maximum 86400, minimum 5.",
                        "format": "int32"
                    },
                    "deviceSecretJWKS": {
                        "type": "array",
                        "description": "JWKS document containing private keys to issue and verify device secret JWE.",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {}
                            }
                        }
                    },
                    "deviceSecretEncKey": {
                        "type": "string",
                        "description": "Key identifier of JWK private key used to issue device secret JWE."
                    },
                    "deviceSecretAlg": {
                        "type": "string",
                        "description": "Device secret JWE key encryption algorithm."
                    },
                    "deviceSecretEnc": {
                        "type": "string",
                        "description": "Device secret JWE content encryption algorithm. When device secret JWE key encryption algorithm is specified, the default for JWE content encryption algorithm is A128GCM."
                    },
                    "exchangeForSSOSessionOption": {
                        "type": "string",
                        "description": "Options to exchange token for SSO session. When this is not set, token exchange for SSO session will be allowed.",
                        "example": "allow",
                        "enum": [
                            "deny",
                            "allow",
                            "allow_and_revoke"
                        ]
                    }
                }
            },
            "DefinitionKeys": {
                "type": "object",
                "properties": {
                    "rsaSignKey": {
                        "type": "string",
                        "description": "RSA signing key label."
                    },
                    "rsaDecryptKey": {
                        "type": "string",
                        "description": "RSA decryption key label."
                    }
                }
            },
            "DefinitionList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Maximum result requested",
                        "format": "int32",
                        "readOnly": true
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Number of result per page",
                        "format": "int32",
                        "readOnly": true
                    },
                    "page": {
                        "type": "integer",
                        "description": "Requested page number",
                        "format": "int32",
                        "readOnly": true
                    },
                    "total": {
                        "type": "integer",
                        "description": "Total result returned in this request",
                        "format": "int32",
                        "readOnly": true
                    },
                    "definitions": {
                        "type": "array",
                        "description": "List of result that match the query",
                        "items": {
                            "$ref": "#/components/schemas/Definition"
                        }
                    }
                }
            },
            "CreateOidcDefinition": {
                "required": [
                    "accessTokenLength",
                    "accessTokenLifetime",
                    "enforceSingleAccessTokenPerGrant",
                    "grantTypes",
                    "name",
                    "tokenCharSet"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Display name. Maximum 256 characters."
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this definition. Maximum 1024 characters."
                    },
                    "preMappingRuleId": {
                        "type": "string",
                        "description": "ID of the pre-token mapping rule. Leave this empty to use default mapping rule."
                    },
                    "postMappingRuleId": {
                        "type": "string",
                        "description": "ID of the post-token mapping rule. Leave this empty to use default mapping rule."
                    },
                    "grantTypes": {
                        "type": "array",
                        "description": "List of allowed grant types: authorization_code, implicit, password, refresh_token, client_credentials",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tcmBehavior": {
                        "type": "string",
                        "description": "Trusted client management behavior.",
                        "example": "never_prompt",
                        "enum": [
                            "never_prompt",
                            "always_prompt",
                            "prompt_once_and_remember"
                        ]
                    },
                    "tokenCharSet": {
                        "type": "string",
                        "description": "Token character set. This affects authorization code, access token, and refresh token. Does not affect JWTs (i.e. ID token). Only alphanumeric characters allowed. Case-sensitive."
                    },
                    "accessTokenLifetime": {
                        "type": "integer",
                        "description": "Access token lifetime, in seconds. Maximum 2147483647, minimum 1.",
                        "format": "int32"
                    },
                    "accessTokenLength": {
                        "type": "integer",
                        "description": "Access token length. Maximum 200, minimum 6.",
                        "format": "int32"
                    },
                    "enforceSingleAccessTokenPerGrant": {
                        "type": "boolean",
                        "description": "Enforce single access token per grant."
                    },
                    "authorizationCodeLifetime": {
                        "type": "integer",
                        "description": "Authorization code lifetime, in seconds. Maximum 2147483647, minimum 1. Required only if authorization_code grant type is enabled.",
                        "format": "int32"
                    },
                    "authorizationCodeLength": {
                        "type": "integer",
                        "description": "Authorization code length. Maximum 200, minimum 6. Required only if authorization_code grant type is enabled.",
                        "format": "int32"
                    },
                    "maxAuthorizationGrantLifetime": {
                        "type": "integer",
                        "description": "Authorization grant lifetime, in seconds. Maximum 2147483647, minimum 1. Required only when refresh_token grant type is enabled.",
                        "format": "int32"
                    },
                    "refreshTokenLifetime": {
                        "type": "integer",
                        "description": "Refresh token lifetime, in seconds. Maximum 2147483647, minimum 1. Can be specified when refresh_token grant type is enabled.",
                        "format": "int32"
                    },
                    "refreshTokenLength": {
                        "type": "integer",
                        "description": "Refresh token length. Maximum 200, minimum 6. Required only when refresh_token grant type is enabled.",
                        "format": "int32"
                    },
                    "refreshTokenFaultToleranceLifetime": {
                        "type": "integer",
                        "description": "Refresh token fault tolerance lifetime, in seconds. Maximum 86400, minimum 300.",
                        "format": "int32"
                    },
                    "refreshTokenFaultToleranceOption": {
                        "type": "string",
                        "description": "Refresh token fault tolerance option.",
                        "example": "fault_tolerance_lifetime",
                        "enum": [
                            "fault_tolerance_lifetime",
                            "revoke"
                        ]
                    },
                    "enableMultipleRefreshTokensForFaultTolerance": {
                        "type": "boolean",
                        "description": "Allow multiple refresh tokens for fault tolerance. Required only when refresh_token grant type is enabled."
                    },
                    "pinPolicyEnabled": {
                        "type": "boolean",
                        "description": "Enable PIN policy. Required only when refresh_token grant type is enabled."
                    },
                    "pinLength": {
                        "type": "integer",
                        "description": "PIN length. Maximum 12, minimum 3. Required only when refresh_token grant type is enabled.",
                        "format": "int32"
                    },
                    "deviceFlowPollingInterval": {
                        "type": "integer",
                        "description": "Device-flow polling interval in seconds. Maximum 3600, minimum 2. Default is 5 seconds. Available only when device-flow grant type is enabled.",
                        "format": "int32"
                    },
                    "deviceFlowCodeLifetime": {
                        "type": "integer",
                        "description": "Device-flow device code and user code lifetime, in seconds. Maximum 86400, minimum 1. Default is 300 seconds. Available only when device-flow grant type is enabled.",
                        "format": "int32"
                    },
                    "deviceFlowUserCodeLength": {
                        "type": "integer",
                        "description": "Device-flow user code length. Maximum 200, minimum 6. Default is 6. Available only when device-flow grant type is enabled.",
                        "format": "int32"
                    },
                    "deviceFlowUserCodeCharset": {
                        "type": "string",
                        "description": "Device-flow user code character set. Only alphanumeric characters allowed. Case-sensitive. Available only when device-flow grant type is enabled."
                    },
                    "oidcEnabled": {
                        "type": "boolean",
                        "description": "Enable OpenID Connect. Default to false if not provided."
                    },
                    "issuerIdentifier": {
                        "type": "string",
                        "description": "Issuer of this token. Must be in a valid URI format. Required only when OpenID Connect is enabled for this definition. When left empty and OpenID Connect is enabled, this defaults to https://{tenant_hostname}/oidc/endpoint/{definition_id}"
                    },
                    "idTokenLifetime": {
                        "type": "integer",
                        "description": "ID token lifetime, in seconds. Maximum 2147483647, minimum 1. Required only when OpenID Connect is enabled for this definition.",
                        "format": "int32"
                    },
                    "oidcKeys": {
                        "$ref": "#/components/schemas/DefinitionKeys"
                    },
                    "defaultClaims": {
                        "type": "array",
                        "description": "Default claims that will be output for scope openid.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sendExtendedAttributes": {
                        "type": "boolean",
                        "description": "Set extended attributes in 'ext'."
                    },
                    "jwtValidationTimeSkewInSeconds": {
                        "type": "integer",
                        "description": "Time skew for JWT 'iat', 'exp' and 'nbf' validation in seconds. Maximum 300, minimum 0. Default is 0.",
                        "format": "int32"
                    },
                    "excludeAlgInJwks": {
                        "type": "boolean",
                        "description": "Setting to exclude 'alg' in JWKS. New definition will always have this set to true."
                    },
                    "extraMetadataAttributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Top level attributes for well-known endpoint to override the existing attribute."
                    },
                    "parDefaultLifetime": {
                        "type": "integer",
                        "description": "Pushed authorization requests default lifetime.",
                        "format": "int32"
                    },
                    "parUriPrefix": {
                        "type": "string",
                        "description": "Pushed authorization requests uri prefix."
                    },
                    "excludeJWKSCertificateChain": {
                        "type": "boolean",
                        "description": "Setting to exclude 'x5c' in JWKS."
                    },
                    "excludeJWKSCertificateThumbprint": {
                        "type": "boolean",
                        "description": "Setting to exclude 'x5t' and 'x5t#S256' in JWKS."
                    },
                    "mtlsEndpointBaseURI": {
                        "type": "string",
                        "description": "Base URL for MTLS endpoints. This must include the protocol scheme like https."
                    },
                    "tokenExchangeIdTokenToleranceWindow": {
                        "type": "integer",
                        "description": "Maximum elapsed seconds since the creation of an ID Token that it can still be used in token exchange scenario.",
                        "format": "int32"
                    },
                    "deviceSecretJWKS": {
                        "type": "array",
                        "description": "JWKS document containing private keys to issue and verify device secret JWE.",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {}
                            }
                        }
                    },
                    "deviceSecretEncKey": {
                        "type": "string",
                        "description": "Key identifier of JWK private key used to issue device secret JWE."
                    },
                    "deviceSecretAlg": {
                        "type": "string",
                        "description": "Device secret JWE key encryption algorithm."
                    },
                    "deviceSecretEnc": {
                        "type": "string",
                        "description": "Device secret JWE content encryption algorithm. When device secret JWE key encryption algorithm is specified, the default for JWE content encryption algorithm is A128GCM."
                    },
                    "exchangeForSSOSessionOption": {
                        "type": "string",
                        "description": "Options to exchange token for SSO session. When this is not set, token exchange for SSO session will be allowed.",
                        "example": "allow",
                        "enum": [
                            "deny",
                            "allow",
                            "allow_and_revoke"
                        ]
                    }
                }
            },
            "UpdateOidcDefinition": {
                "required": [
                    "accessTokenLength",
                    "accessTokenLifetime",
                    "enforceSingleAccessTokenPerGrant",
                    "grantTypes",
                    "name",
                    "tokenCharSet"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Display name. Maximum 256 characters."
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this definition. Maximum 1024 characters."
                    },
                    "preMappingRuleId": {
                        "type": "string",
                        "description": "ID of the pre-token mapping rule. Leave this empty to use default mapping rule."
                    },
                    "postMappingRuleId": {
                        "type": "string",
                        "description": "ID of the post-token mapping rule. Leave this empty to use default mapping rule."
                    },
                    "grantTypes": {
                        "type": "array",
                        "description": "List of allowed grant types: authorization_code, implicit, password, refresh_token, client_credentials",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tcmBehavior": {
                        "type": "string",
                        "description": "Trusted client management behavior.",
                        "example": "never_prompt",
                        "enum": [
                            "never_prompt",
                            "always_prompt",
                            "prompt_once_and_remember"
                        ]
                    },
                    "tokenCharSet": {
                        "type": "string",
                        "description": "Token character set. This affects authorization code, access token, and refresh token. Does not affect JWTs (i.e. ID token). Only alphanumeric characters allowed. Case-sensitive."
                    },
                    "accessTokenLifetime": {
                        "type": "integer",
                        "description": "Access token lifetime, in seconds. Maximum 2147483647, minimum 1.",
                        "format": "int32"
                    },
                    "accessTokenLength": {
                        "type": "integer",
                        "description": "Access token length. Maximum 200, minimum 6.",
                        "format": "int32"
                    },
                    "enforceSingleAccessTokenPerGrant": {
                        "type": "boolean",
                        "description": "Enforce single access token per grant."
                    },
                    "authorizationCodeLifetime": {
                        "type": "integer",
                        "description": "Authorization code lifetime, in seconds. Maximum 2147483647, minimum 1. Required only if authorization_code grant type is enabled.",
                        "format": "int32"
                    },
                    "authorizationCodeLength": {
                        "type": "integer",
                        "description": "Authorization code length. Maximum 200, minimum 6. Required only if authorization_code grant type is enabled.",
                        "format": "int32"
                    },
                    "maxAuthorizationGrantLifetime": {
                        "type": "integer",
                        "description": "Authorization grant lifetime, in seconds. Maximum 2147483647, minimum 1. Required only when refresh_token grant type is enabled.",
                        "format": "int32"
                    },
                    "refreshTokenLifetime": {
                        "type": "integer",
                        "description": "Refresh token lifetime, in seconds. Maximum 2147483647, minimum 1. Can be specified when refresh_token grant type is enabled.",
                        "format": "int32"
                    },
                    "refreshTokenLength": {
                        "type": "integer",
                        "description": "Refresh token length. Maximum 200, minimum 6. Required only when refresh_token grant type is enabled.",
                        "format": "int32"
                    },
                    "refreshTokenFaultToleranceLifetime": {
                        "type": "integer",
                        "description": "Refresh token fault tolerance lifetime, in seconds. Maximum 86400, minimum 300.",
                        "format": "int32"
                    },
                    "refreshTokenFaultToleranceOption": {
                        "type": "string",
                        "description": "Refresh token fault tolerance option.",
                        "example": "fault_tolerance_lifetime",
                        "enum": [
                            "fault_tolerance_lifetime",
                            "revoke"
                        ]
                    },
                    "enableMultipleRefreshTokensForFaultTolerance": {
                        "type": "boolean",
                        "description": "Allow multiple refresh tokens for fault tolerance. Required only when refresh_token grant type is enabled."
                    },
                    "pinPolicyEnabled": {
                        "type": "boolean",
                        "description": "Enable PIN policy. Required only when refresh_token grant type is enabled."
                    },
                    "pinLength": {
                        "type": "integer",
                        "description": "PIN length. Maximum 12, minimum 3. Required only when refresh_token grant type is enabled.",
                        "format": "int32"
                    },
                    "deviceFlowPollingInterval": {
                        "type": "integer",
                        "description": "Device-flow polling interval in seconds. Maximum 3600, minimum 2. Default is 5 seconds. Available only when device-flow grant type is enabled.",
                        "format": "int32"
                    },
                    "deviceFlowCodeLifetime": {
                        "type": "integer",
                        "description": "Device-flow device code and user code lifetime, in seconds. Maximum 86400, minimum 1. Default is 300 seconds. Available only when device-flow grant type is enabled.",
                        "format": "int32"
                    },
                    "deviceFlowUserCodeLength": {
                        "type": "integer",
                        "description": "Device-flow user code length. Maximum 200, minimum 6. Default is 6. Available only when device-flow grant type is enabled.",
                        "format": "int32"
                    },
                    "deviceFlowUserCodeCharset": {
                        "type": "string",
                        "description": "Device-flow user code character set. Only alphanumeric characters allowed. Case-sensitive. Available only when device-flow grant type is enabled."
                    },
                    "oidcEnabled": {
                        "type": "boolean",
                        "description": "Enable OpenID Connect. Default to false if not provided."
                    },
                    "issuerIdentifier": {
                        "type": "string",
                        "description": "Issuer of this token. Must be in a valid URI format. Required only when OpenID Connect is enabled for this definition. When left empty and OpenID Connect is enabled, this defaults to https://{tenant_hostname}/oidc/endpoint/{definition_id}"
                    },
                    "idTokenLifetime": {
                        "type": "integer",
                        "description": "ID token lifetime, in seconds. Maximum 2147483647, minimum 1. Required only when OpenID Connect is enabled for this definition.",
                        "format": "int32"
                    },
                    "oidcKeys": {
                        "$ref": "#/components/schemas/DefinitionKeys"
                    },
                    "defaultClaims": {
                        "type": "array",
                        "description": "Default claims that will be output for scope openid.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sendExtendedAttributes": {
                        "type": "boolean",
                        "description": "Set extended attributes in 'ext'."
                    },
                    "jwtValidationTimeSkewInSeconds": {
                        "type": "integer",
                        "description": "Time skew for JWT 'iat', 'exp' and 'nbf' validation in seconds. Maximum 300, minimum 0. Default is 0.",
                        "format": "int32"
                    },
                    "excludeAlgInJwks": {
                        "type": "boolean",
                        "description": "Setting to exclude 'alg' in JWKS. When not specified, it will take in previous value."
                    },
                    "extraMetadataAttributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Top level attributes for well-known endpoint to override the existing attribute."
                    },
                    "parDefaultLifetime": {
                        "type": "integer",
                        "description": "Pushed authorization requests default lifetime.",
                        "format": "int32"
                    },
                    "parUriPrefix": {
                        "type": "string",
                        "description": "Pushed authorization requests uri prefix."
                    },
                    "excludeJWKSCertificateChain": {
                        "type": "boolean",
                        "description": "Setting to exclude 'x5c' in JWKS."
                    },
                    "excludeJWKSCertificateThumbprint": {
                        "type": "boolean",
                        "description": "Setting to exclude 'x5t' and 'x5t#S256' in JWKS."
                    },
                    "mtlsEndpointBaseURI": {
                        "type": "string",
                        "description": "Base URL for MTLS endpoints. This must include the protocol scheme like https."
                    },
                    "tokenExchangeIdTokenToleranceWindow": {
                        "type": "integer",
                        "description": "Maximum elapsed seconds since the creation of an ID Token that it can still be used in token exchange scenario.",
                        "format": "int32"
                    },
                    "deviceSecretJWKS": {
                        "type": "array",
                        "description": "JWKS document containing private keys to issue and verify device secret JWE.",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {}
                            }
                        }
                    },
                    "deviceSecretEncKey": {
                        "type": "string",
                        "description": "Key identifier of JWK private key used to issue device secret JWE."
                    },
                    "deviceSecretAlg": {
                        "type": "string",
                        "description": "Device secret JWE key encryption algorithm."
                    },
                    "deviceSecretEnc": {
                        "type": "string",
                        "description": "Device secret JWE content encryption algorithm. When device secret JWE key encryption algorithm is specified, the default for JWE content encryption algorithm is A128GCM."
                    },
                    "exchangeForSSOSessionOption": {
                        "type": "string",
                        "description": "Options to exchange token for SSO session. When this is not set, token exchange for SSO session will be allowed.",
                        "example": "allow",
                        "enum": [
                            "deny",
                            "allow",
                            "allow_and_revoke"
                        ]
                    }
                }
            },
            "UpdateOidcDynClientProfile": {
                "required": [
                    "grant_types"
                ],
                "type": "object",
                "properties": {
                    "grant_types": {
                        "type": "array",
                        "description": "List of default grant types. Valid values are: authorization_code, implicit, password, urn:ietf:params:oauth:grant-type:device_code, urn:ietf:params:oauth:grant-type:jwt-bearer and refresh_token.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id_token_claims": {
                        "type": "array",
                        "description": "List of default claims for ID token and user info.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "token_claims": {
                        "type": "array",
                        "description": "List of default claims for introspection and JWT access token.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "access_token_type": {
                        "type": "string",
                        "description": "Type of access token to be generated. Default is 'default'.",
                        "example": "default",
                        "enum": [
                            "default",
                            "jwt"
                        ]
                    },
                    "id_token_signed_response_alg": {
                        "type": "string",
                        "description": "ID token signing algorithm. Default is 'RS256'. When accessTokenType is jwt, asymmetric algorithm should be set as default."
                    },
                    "consent_action": {
                        "type": "string",
                        "description": "Trusted client management behavior. Default is 'always_prompt'.",
                        "example": "never_prompt",
                        "enum": [
                            "never_prompt",
                            "always_prompt"
                        ]
                    },
                    "access_token_lifetime": {
                        "$ref": "#/components/schemas/Number"
                    },
                    "refresh_token_lifetime": {
                        "$ref": "#/components/schemas/Number"
                    },
                    "enforce_pkce": {
                        "type": "boolean",
                        "description": "Enforce PKCE verification. If not provided, the value will be set to true."
                    },
                    "all_users_entitled": {
                        "type": "boolean",
                        "description": "Whether all users are entitled to use this client. If not provided, the value will be set to false."
                    },
                    "allow_custom_client_creds": {
                        "type": "boolean",
                        "description": "Whether custom client credentials are allowed. If not provided, the value will be set to false."
                    },
                    "req_allowed_signing_algs": {
                        "type": "array",
                        "description": "List of allowed signing algorithms for the signed request JWT.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "request_object_require_exp": {
                        "type": "boolean",
                        "description": "Whether exp is required in the request object."
                    },
                    "request_object_max_exp_from_nbf": {
                        "$ref": "#/components/schemas/Number"
                    },
                    "legacy_post_response_code": {
                        "type": "boolean",
                        "description": "When legacy POST response code is set to true, it will return 200 on POST operation. Otherwise as per specification it should be 201."
                    }
                }
            },
            "DynamicClientProfile": {
                "required": [
                    "grant_types"
                ],
                "type": "object",
                "properties": {
                    "grant_types": {
                        "type": "array",
                        "description": "List of default grant types. Valid values are: authorization_code, implicit, password, urn:ietf:params:oauth:grant-type:device_code, urn:ietf:params:oauth:grant-type:jwt-bearer and refresh_token.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id_token_claims": {
                        "type": "array",
                        "description": "List of default claims for ID token and user info.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "token_claims": {
                        "type": "array",
                        "description": "List of default claims for introspection and JWT access token.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "access_token_type": {
                        "type": "string",
                        "description": "Type of access token to be generated. Default is 'default'.",
                        "example": "default",
                        "enum": [
                            "default",
                            "jwt"
                        ]
                    },
                    "id_token_signed_response_alg": {
                        "type": "string",
                        "description": "ID token signing algorithm. Default is 'RS256'. When accessTokenType is jwt, asymmetric algorithm should be set as default."
                    },
                    "consent_action": {
                        "type": "string",
                        "description": "Trusted client management behavior. Default is 'always_prompt'.",
                        "example": "never_prompt",
                        "enum": [
                            "never_prompt",
                            "always_prompt"
                        ]
                    },
                    "access_token_lifetime": {
                        "$ref": "#/components/schemas/Number"
                    },
                    "refresh_token_lifetime": {
                        "$ref": "#/components/schemas/Number"
                    },
                    "enforce_pkce": {
                        "type": "boolean",
                        "description": "Enforce PKCE verification. If not provided, the value will be set to true."
                    },
                    "all_users_entitled": {
                        "type": "boolean",
                        "description": "Whether all users are entitled to use this client. If not provided, the value will be set to false."
                    },
                    "allow_custom_client_creds": {
                        "type": "boolean",
                        "description": "Whether custom client credentials are allowed. If not provided, the value will be set to false."
                    },
                    "req_allowed_signing_algs": {
                        "type": "array",
                        "description": "List of allowed signing algorithms for the signed request JWT.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "request_object_require_exp": {
                        "type": "boolean",
                        "description": "Whether exp is required in the request object."
                    },
                    "request_object_max_exp_from_nbf": {
                        "$ref": "#/components/schemas/Number"
                    },
                    "legacy_post_response_code": {
                        "type": "boolean",
                        "description": "When legacy POST response code is set to true, it will return 200 on POST operation. Otherwise as per specification it should be 201."
                    }
                }
            },
            "UpdateOidcFederation": {
                "required": [
                    "idTokenLifetime",
                    "issuerHostname"
                ],
                "type": "object",
                "properties": {
                    "issuerHostname": {
                        "type": "string",
                        "description": "Host name used for the JWT issuer. It must be the tenant host name or one of the vanity host names. The full issuer string will be https://{issuerHostname}/oidc/endpoint/default"
                    },
                    "idTokenLifetime": {
                        "$ref": "#/components/schemas/Number"
                    },
                    "sendExtendedAttributes": {
                        "type": "boolean",
                        "description": "Add extended attributes to the 'ext' claim in ID token or user info."
                    },
                    "jwtValidationTimeSkewInSeconds": {
                        "type": "integer",
                        "description": "Time skew for JWT 'iat', 'exp' and 'nbf' validation in seconds. Maximum 300, minimum 0. Default is 0.",
                        "format": "int32"
                    },
                    "deviceFlowPollingInterval": {
                        "$ref": "#/components/schemas/Number"
                    },
                    "deviceFlowCodeLifetime": {
                        "$ref": "#/components/schemas/Number"
                    },
                    "extraMetadataAttributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Top level attributes for well-known endpoint to override the existing attribute."
                    },
                    "excludeJWKSCertificateChain": {
                        "type": "boolean",
                        "description": "Setting to exclude 'x5c' in JWKS."
                    },
                    "excludeJWKSCertificateThumbprint": {
                        "type": "boolean",
                        "description": "Setting to exclude 'x5t' and 'x5t#S256' in JWKS."
                    },
                    "mtlsEndpointBaseURI": {
                        "type": "string",
                        "description": "Base URL for MTLS endpoints. This must include the protocol scheme like https."
                    },
                    "defaultSigningKey": {
                        "type": "string",
                        "description": "Default signing key for JWT."
                    },
                    "defaultEncryptionKey": {
                        "type": "string",
                        "description": "Default encryption key for JWT."
                    },
                    "refreshTokenFaultToleranceLifetime": {
                        "$ref": "#/components/schemas/Number"
                    },
                    "refreshTokenFaultToleranceOption": {
                        "type": "string",
                        "description": "Refresh token fault tolerance option.",
                        "example": "fault_tolerance_lifetime",
                        "enum": [
                            "fault_tolerance_lifetime",
                            "revoke"
                        ]
                    },
                    "tokenExchangeIdTokenToleranceWindow": {
                        "$ref": "#/components/schemas/Number"
                    },
                    "exchangeForSSOSessionOption": {
                        "type": "string",
                        "description": "Options to exchange token for SSO session. When this is not set, token exchange for SSO session will be allowed.",
                        "example": "allow",
                        "enum": [
                            "deny",
                            "allow",
                            "allow_and_revoke"
                        ]
                    }
                }
            },
            "FederationSettings": {
                "required": [
                    "idTokenLifetime",
                    "issuerHostname"
                ],
                "type": "object",
                "properties": {
                    "issuerHostname": {
                        "type": "string",
                        "description": "Issuer of this token. Must be in a valid URI format. Required only when OpenID Connect is enabled for this definition. When left empty and OpenID Connect is enabled, this defaults to https://{tenant_hostname}/oidc/endpoint/{definition_id}"
                    },
                    "idTokenLifetime": {
                        "type": "integer",
                        "description": "ID token lifetime, in seconds. Maximum 2147483647, minimum 1.",
                        "format": "int32"
                    },
                    "jwtValidationTimeSkewInSeconds": {
                        "type": "integer",
                        "description": "Time skew for JWT 'iat', 'exp' and 'nbf' validation in seconds. Maximum 300, minimum 0. Default is 0.",
                        "format": "int32"
                    },
                    "sendExtendedAttributes": {
                        "type": "boolean",
                        "description": "Add extended attributes to the 'ext' claim in ID token or user info."
                    },
                    "deviceFlowPollingInterval": {
                        "type": "integer",
                        "description": "Device-flow polling interval in seconds. Maximum 3600, minimum 2.",
                        "format": "int32"
                    },
                    "deviceFlowCodeLifetime": {
                        "type": "integer",
                        "description": "Device-flow device code and user code lifetime, in seconds. Maximum 86400, minimum 1.",
                        "format": "int32"
                    },
                    "extraMetadataAttributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Top level attributes for well-known endpoint to override the existing attribute."
                    },
                    "excludeJWKSCertificateChain": {
                        "type": "boolean",
                        "description": "Setting to exclude 'x5c' in JWKS."
                    },
                    "excludeJWKSCertificateThumbprint": {
                        "type": "boolean",
                        "description": "Setting to exclude 'x5t' and 'x5t#S256' in JWKS."
                    },
                    "mtlsEndpointBaseURI": {
                        "type": "string",
                        "description": "Base URL for MTLS endpoints. This must include the protocol scheme like https."
                    },
                    "defaultSigningKey": {
                        "type": "string",
                        "description": "Default signing key."
                    },
                    "defaultEncryptionKey": {
                        "type": "string",
                        "description": "Default encryption key."
                    },
                    "refreshTokenFaultToleranceLifetime": {
                        "type": "integer",
                        "description": "Refresh token fault tolerance lifetime, in seconds. Maximum 86400, minimum 300.",
                        "format": "int32"
                    },
                    "refreshTokenFaultToleranceOption": {
                        "type": "string",
                        "description": "Refresh token fault tolerance option.",
                        "example": "fault_tolerance_lifetime",
                        "enum": [
                            "fault_tolerance_lifetime",
                            "revoke"
                        ]
                    },
                    "tokenExchangeIdTokenToleranceWindow": {
                        "type": "integer",
                        "description": "Maximum elapsed seconds since the expiry of an ID Token that it can still be used in token exchange scenario. If not set, no validation is done on the ID token expiry. Maximum 86400, minimum 5.",
                        "format": "int32"
                    },
                    "exchangeForSSOSessionOption": {
                        "type": "string",
                        "description": "Options to exchange token for SSO session. When this is not set, token exchange for SSO session will be allowed.",
                        "example": "allow",
                        "enum": [
                            "deny",
                            "allow",
                            "allow_and_revoke"
                        ]
                    }
                }
            },
            "GrantPatchEntry": {
                "required": [
                    "op",
                    "path"
                ],
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "description": "The operation to be performed.",
                        "example": "replace",
                        "enum": [
                            "remove",
                            "replace"
                        ]
                    },
                    "path": {
                        "type": "string",
                        "description": "The path to perform the operation on. \n For \"remove\" operations, the path is /{Grant Identifier} \n For \"replace\" operations, the path is /{Grant Identifier}/enabled",
                        "example": "/52a3374e-604b-4d8a-bedb-a51ceb96389b/enabled"
                    },
                    "value": {
                        "type": "boolean",
                        "description": "Replace the existing value with this value. Required for the \"replace\" operation only."
                    }
                }
            },
            "GrantAttribute": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The attribute id.",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The attribute name.",
                        "readOnly": true
                    },
                    "values": {
                        "type": "array",
                        "description": "The attribute values.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sensitive": {
                        "type": "boolean",
                        "description": "Specifies whether attribute values contain sensitive data.",
                        "readOnly": true
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Specifies whether attribute values can be modified.",
                        "readOnly": true
                    }
                }
            },
            "USCGrant": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The grant identifier.",
                        "readOnly": true,
                        "example": "52a3374e-604b-4d8a-bedb-a51ceb96389b"
                    },
                    "appId": {
                        "type": "string",
                        "description": "The application ID. For API client grants, this property is null.",
                        "readOnly": true,
                        "example": "2919856898870752436"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The API client's or OIDC application's client ID.",
                        "readOnly": true,
                        "example": "6f1bdd22-eb94-456d-b2c3-ae97181053a3"
                    },
                    "clientName": {
                        "type": "string",
                        "description": "The OIDC application name or API client name.",
                        "readOnly": true
                    },
                    "category": {
                        "type": "string",
                        "description": "The category of the OIDC client.",
                        "readOnly": true,
                        "enum": [
                            "application",
                            "api_client",
                            "ibm_verify",
                            "default"
                        ]
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user. For API client grants, this value is null.",
                        "readOnly": true
                    },
                    "username": {
                        "type": "string",
                        "description": "The user's unique ID. For API client grants, this value is the client ID.",
                        "readOnly": true
                    },
                    "preferred_username": {
                        "type": "string",
                        "description": "The preferred user name. For API client grants, this value is null.",
                        "readOnly": true
                    },
                    "realmName": {
                        "type": "string",
                        "description": "The realm name.",
                        "readOnly": true,
                        "example": "cloudIdentityRealm"
                    },
                    "originIP": {
                        "type": "string",
                        "description": "The origin IP address where this grant was created.",
                        "readOnly": true
                    },
                    "location": {
                        "type": "array",
                        "description": "The location where this grant was created. The array contains in this sequence, the country, state, and city of the location.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "The country code where this grant was created.",
                        "readOnly": true
                    },
                    "tokens": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of token types that have been associated with the grant. The list can include tokens other than the currently active token types.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "issuedOn": {
                        "type": "string",
                        "description": "The time when the grant was issued.",
                        "readOnly": true,
                        "example": "2018-06-20T02:04:58Z"
                    },
                    "lastUsed": {
                        "type": "string",
                        "description": "The time when the grant was last used.",
                        "readOnly": true,
                        "example": "2018-06-20T02:05:58Z"
                    },
                    "disabledOn": {
                        "type": "string",
                        "description": "The time when the grant was disabled.",
                        "readOnly": true,
                        "example": "2018-06-20T02:05:58Z"
                    },
                    "retainUntil": {
                        "type": "string",
                        "description": "The time when the grant will be deleted.",
                        "readOnly": true,
                        "example": "2018-06-20T02:05:58Z"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether the grant is enabled.",
                        "readOnly": true
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Flag to indicate the grant is only viewable or can be modified.",
                        "readOnly": true
                    },
                    "attributes": {
                        "type": "array",
                        "description": "A list of attributes that are associated with the grant.",
                        "items": {
                            "$ref": "#/components/schemas/GrantAttribute"
                        }
                    },
                    "scope": {
                        "type": "string",
                        "description": "Scope associated with the grant.",
                        "readOnly": true
                    },
                    "sessionId": {
                        "type": "string",
                        "description": "Session Id associated with this grant.",
                        "readOnly": true
                    },
                    "uaSessionId": {
                        "type": "string",
                        "description": "User-Agent session Id associated with this grant.",
                        "readOnly": true
                    },
                    "getgrantGroupID": {
                        "type": "string",
                        "description": "Grant Group Id, an attribute that can be associated with multiple grants",
                        "readOnly": true
                    },
                    "deviceName": {
                        "type": "string",
                        "description": "Device used to acquire this grant.",
                        "readOnly": true
                    }
                }
            },
            "USCGrantList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "total": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "grants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/USCGrant"
                        }
                    }
                }
            },
            "USCGrantSummary": {
                "type": "object",
                "properties": {
                    "clients": {
                        "type": "array",
                        "description": "Distinct clients in grant data.",
                        "items": {
                            "$ref": "#/components/schemas/SummaryData"
                        }
                    },
                    "countries": {
                        "type": "array",
                        "description": "Distinct countries in grant data.",
                        "items": {
                            "$ref": "#/components/schemas/SummaryData"
                        }
                    },
                    "ipaddresses": {
                        "type": "array",
                        "description": "Distinct IP addresses in grant data.",
                        "items": {
                            "$ref": "#/components/schemas/SummaryData"
                        }
                    },
                    "users": {
                        "type": "array",
                        "description": "Distinct users in grant data.",
                        "items": {
                            "$ref": "#/components/schemas/SummaryData"
                        }
                    },
                    "total_unique": {
                        "type": "integer",
                        "description": "Total unique clients or countries or IP addresses or users in grant data.",
                        "format": "int64",
                        "readOnly": true
                    }
                }
            },
            "USCGrantV2": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The grant identifier.",
                        "readOnly": true,
                        "example": "52a3374e-604b-4d8a-bedb-a51ceb96389b"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether the grant is enabled.",
                        "readOnly": true
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Flag to indicate the grant is only viewable or can be modified.",
                        "readOnly": true
                    },
                    "appId": {
                        "type": "string",
                        "description": "The application ID. For API client or STS client grants, this property is null.",
                        "readOnly": true
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The client ID.",
                        "readOnly": true
                    },
                    "clientName": {
                        "type": "string",
                        "description": "The client name.",
                        "readOnly": true
                    },
                    "category": {
                        "type": "string",
                        "description": "The category of the OIDC client.",
                        "readOnly": true
                    },
                    "subject": {
                        "type": "string",
                        "description": "The user's unique ID. When there is no user associated with the grant, this value is the client ID.",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user. When there is no user associated with the grant, this value is null.",
                        "readOnly": true
                    },
                    "preferred_username": {
                        "type": "string",
                        "description": "The preferred user name. When there is no user associated with the grant, this value is null.",
                        "readOnly": true
                    },
                    "realmName": {
                        "type": "string",
                        "description": "The realm name.",
                        "readOnly": true,
                        "example": "cloudIdentityRealm"
                    },
                    "originIP": {
                        "type": "string",
                        "description": "The origin IP address where this grant was created.",
                        "readOnly": true
                    },
                    "location": {
                        "type": "array",
                        "description": "The location where this grant was created. The array contains in this sequence, the country, state, and city of the location.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "The country code where this grant was created.",
                        "readOnly": true
                    },
                    "tokens": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "A list of token types that have been associated with the grant. The list can include tokens other than the currently active token types.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "scope": {
                        "type": "string",
                        "description": "Scope associated with the grant.",
                        "readOnly": true
                    },
                    "issuedOn": {
                        "type": "string",
                        "description": "The time when the grant was issued.",
                        "readOnly": true,
                        "example": "2018-06-20T02:04:58Z"
                    },
                    "lastModified": {
                        "type": "string",
                        "description": "The time when the grant was last modified.",
                        "readOnly": true,
                        "example": "2018-06-20T02:05:58Z"
                    },
                    "disabledOn": {
                        "type": "string",
                        "description": "The time when the grant was disabled.",
                        "readOnly": true,
                        "example": "2018-06-20T02:05:58Z"
                    },
                    "retainUntil": {
                        "type": "string",
                        "description": "The time when the grant will be deleted.",
                        "readOnly": true,
                        "example": "2018-06-20T02:05:58Z"
                    },
                    "sessionId": {
                        "type": "string",
                        "description": "Session ID associated with this grant.",
                        "readOnly": true
                    },
                    "uaSessionId": {
                        "type": "string",
                        "description": "User-agent session ID associated with this grant.",
                        "readOnly": true
                    },
                    "groupID": {
                        "type": "string",
                        "description": "Grant group ID, an attribute that can be associated with multiple grants",
                        "readOnly": true
                    },
                    "deviceName": {
                        "type": "string",
                        "description": "Device used to acquire this grant.",
                        "readOnly": true
                    }
                }
            },
            "USCGrantV2List": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "total": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "grants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/USCGrantV2"
                        }
                    }
                }
            },
            "STSModule": {
                "required": [
                    "condition",
                    "properties"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Module ID. This is a predefined ID.",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Short description."
                    },
                    "properties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Module properties."
                    },
                    "condition": {
                        "type": "string",
                        "description": "Module condition."
                    }
                }
            },
            "UpdateOidcSTSChain": {
                "required": [
                    "id",
                    "modules",
                    "name",
                    "requestedTokenTypes",
                    "subjectTokenTypes"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "STS Chain ID."
                    },
                    "name": {
                        "type": "string",
                        "description": "STS Chain name."
                    },
                    "description": {
                        "type": "string",
                        "description": "STS Chain description."
                    },
                    "subjectTokenTypes": {
                        "type": "array",
                        "description": "Allowed subject token types.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "actorTokenTypes": {
                        "type": "array",
                        "description": "Allowed actor token types.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "requestedTokenTypes": {
                        "type": "array",
                        "description": "Allowed requested token types.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "modules": {
                        "type": "array",
                        "description": "Sequence of modules in the chain",
                        "items": {
                            "$ref": "#/components/schemas/STSModule"
                        }
                    }
                }
            },
            "STSChain": {
                "required": [
                    "modules",
                    "name",
                    "requestedTokenTypes",
                    "subjectTokenTypes"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "STS Chain ID."
                    },
                    "name": {
                        "type": "string",
                        "description": "STS Chain Name."
                    },
                    "description": {
                        "type": "string",
                        "description": "STS Chain description."
                    },
                    "subjectTokenTypes": {
                        "type": "array",
                        "description": "Allowed subject token types.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "actorTokenTypes": {
                        "type": "array",
                        "description": "Allowed actor token types.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "requestedTokenTypes": {
                        "type": "array",
                        "description": "Allowed requested token types.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "modules": {
                        "type": "array",
                        "description": "Sequence of modules in the chain.",
                        "items": {
                            "$ref": "#/components/schemas/STSModule"
                        }
                    }
                }
            },
            "STSChainList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Maximum result requested",
                        "format": "int32",
                        "readOnly": true
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Number of result per page",
                        "format": "int32",
                        "readOnly": true
                    },
                    "page": {
                        "type": "integer",
                        "description": "Requested page number",
                        "format": "int32",
                        "readOnly": true
                    },
                    "total": {
                        "type": "integer",
                        "description": "Total result returned in this request",
                        "format": "int32",
                        "readOnly": true
                    },
                    "stschains": {
                        "type": "array",
                        "description": "List of result that match the query",
                        "items": {
                            "$ref": "#/components/schemas/STSChain"
                        }
                    }
                }
            },
            "CreateOidcSTSChain": {
                "required": [
                    "modules",
                    "name",
                    "requestedTokenTypes",
                    "subjectTokenTypes"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "STS Chain ID."
                    },
                    "name": {
                        "type": "string",
                        "description": "STS Chain name."
                    },
                    "description": {
                        "type": "string",
                        "description": "STS Chain description."
                    },
                    "subjectTokenTypes": {
                        "type": "array",
                        "description": "Allowed subject token types.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "actorTokenTypes": {
                        "type": "array",
                        "description": "Allowed actor token types.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "requestedTokenTypes": {
                        "type": "array",
                        "description": "Allowed requested token types.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "modules": {
                        "type": "array",
                        "description": "Sequence of modules in the chain",
                        "items": {
                            "$ref": "#/components/schemas/STSModule"
                        }
                    }
                }
            },
            "STSClient": {
                "required": [
                    "clientAuthentication",
                    "clientName",
                    "tokenExchangeSettings"
                ],
                "type": "object",
                "properties": {
                    "clientName": {
                        "type": "string",
                        "description": "Display name. Maximum 256 characters."
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable the client. If not provided, the value will be set to true."
                    },
                    "policyId": {
                        "type": "string",
                        "description": "Access policy ID associated with this client."
                    },
                    "clientGroups": {
                        "$ref": "#/components/schemas/ClientGroups"
                    },
                    "clientAuthentication": {
                        "$ref": "#/components/schemas/STSClientAuthentication"
                    },
                    "tokenExchangeSettings": {
                        "$ref": "#/components/schemas/STSClientTokenExchange"
                    },
                    "tokenSettings": {
                        "$ref": "#/components/schemas/STSClientTokenSettings"
                    }
                }
            },
            "STSClientAuthentication": {
                "type": "object",
                "properties": {
                    "clientAuthMethod": {
                        "type": "string",
                        "description": "Method to authentication the client.",
                        "enum": [
                            "default",
                            "client_secret_basic",
                            "client_secret_post",
                            "private_key_jwt",
                            "tls_client_auth"
                        ]
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "Client secret. Will be auto-generated if this parameter is not provided. Empty string value is for public client."
                    },
                    "clientAssertionSigningAlg": {
                        "type": "string",
                        "description": "The expected signing algorithm of 'private_key_jwt' client assertion."
                    },
                    "validateClientAssertionJti": {
                        "type": "boolean",
                        "description": "Set this to true if 'private_key_jwt' client assertion should only be used once."
                    },
                    "allowedClientAssertionVerificationKeys": {
                        "type": "array",
                        "description": "List of allowed key IDs used to sign the 'private_key_jwt' client assertion.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tlsClientAuthAttribute": {
                        "type": "string",
                        "description": "The name of MTLS client certificate's attribute that need to be verified when using 'tls_client_auth' authentication method.",
                        "enum": [
                            "subject_dn",
                            "san_dns",
                            "san_uri",
                            "san_ip",
                            "san_email"
                        ]
                    },
                    "tlsClientAuthAttributeValue": {
                        "type": "string",
                        "description": "The value of MTLS client certificate's attribute that need to be verified when using 'tls_client_auth' authentication method."
                    }
                }
            },
            "STSClientList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Maximum result requested",
                        "format": "int32",
                        "readOnly": true
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Number of result per page",
                        "format": "int32",
                        "readOnly": true
                    },
                    "page": {
                        "type": "integer",
                        "description": "Requested page number",
                        "format": "int32",
                        "readOnly": true
                    },
                    "total": {
                        "type": "integer",
                        "description": "Total result returned in this request",
                        "format": "int32",
                        "readOnly": true
                    },
                    "clients": {
                        "type": "array",
                        "description": "List of result that match the query",
                        "items": {
                            "$ref": "#/components/schemas/STSClient"
                        }
                    }
                }
            },
            "STSClientTokenExchange": {
                "required": [
                    "requestedTokenTypes",
                    "subjectTokenTypes"
                ],
                "type": "object",
                "properties": {
                    "subjectTokenTypes": {
                        "type": "array",
                        "description": "Allowed subject token types.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "actorTokenTypes": {
                        "type": "array",
                        "description": "Allowed actor token types.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "requestedTokenTypes": {
                        "type": "array",
                        "description": "Allowed requested token types.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "STSClientTokenSettings": {
                "type": "object",
                "properties": {
                    "signingAlg": {
                        "type": "string",
                        "description": "Signing algorithm used when signing the ID token or JWT access token issued by authorization server."
                    },
                    "signingKeyLabel": {
                        "type": "string",
                        "description": "Personal key label used to sign the ID token or JWT access token issued by authorization server. Leave it empty to use default personal key."
                    },
                    "encryptAlg": {
                        "type": "string",
                        "description": "Key management encryption algorithm used when encrypting ID token issued by authorization server."
                    },
                    "encryptEnc": {
                        "type": "string",
                        "description": "Content encryption algorithm used when encrypting ID token issued by authorization server."
                    },
                    "encryptKey": {
                        "type": "string",
                        "description": "Encryption public key used when encrypting ID token issued by authorization server."
                    },
                    "jwksUri": {
                        "type": "string",
                        "description": "JSON Web Keys (JWKS) URI that publish the public key used when encrypting ID token issued by authorization server."
                    },
                    "attributeMap": {
                        "type": "array",
                        "description": "List of claim mapping used to enrich the requested token.",
                        "items": {
                            "$ref": "#/components/schemas/ClientAttributeMap"
                        }
                    },
                    "accessTokenLifetime": {
                        "$ref": "#/components/schemas/Number"
                    },
                    "accessTokenType": {
                        "type": "string",
                        "description": "Type of access token issued by authorization server. Default is 'default'",
                        "example": "default",
                        "enum": [
                            "default",
                            "jwt"
                        ]
                    },
                    "introspectMap": {
                        "type": "array",
                        "description": "List of claim mapping used to enrich JWT access token issued by authorization server.",
                        "items": {
                            "$ref": "#/components/schemas/ClientAttributeMap"
                        }
                    },
                    "certificateBoundAccessTokens": {
                        "type": "boolean",
                        "description": "Indicates that generated access tokens must be bound to MTLS client certificate. When set to true, token exchange requests must be done over MTLS."
                    },
                    "dpopBoundAccessTokens": {
                        "type": "boolean",
                        "description": "Indicates that generated access tokens must be bound to the sender key that signed DPoP header. When set to true, DPoP header must be sent when performing token exchange requests."
                    },
                    "validateDPoPProofJti": {
                        "type": "boolean",
                        "description": "Set this to true if DPoP header should only be used once."
                    },
                    "dpopProofSigningAlg": {
                        "type": "string",
                        "description": "The expected DPoP header signing algorithm."
                    },
                    "restrictEntitlements": {
                        "type": "boolean",
                        "description": "Restrict entitlements, true or false. Default is true."
                    },
                    "entitlements": {
                        "type": "array",
                        "description": "List of entitlements that will be associated with the generated access token.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "restrictScopes": {
                        "type": "boolean",
                        "description": "Restrict custom scopes that can be requested, true or false. Default is false."
                    },
                    "scopes": {
                        "type": "array",
                        "description": "List of allowed custom scopes.",
                        "items": {
                            "$ref": "#/components/schemas/CustomScope"
                        }
                    },
                    "exchangeForSSOSessionOption": {
                        "type": "string",
                        "description": "Options to exchange token for SSO session. If this is not set, or is set to 'default', the configuration in the OIDC federation settings will take effect."
                    }
                }
            },
            "IdentityAttributeMap": {
                "required": [
                    "attributeId",
                    "function",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The token claim to take the value from."
                    },
                    "attributeId": {
                        "type": "string",
                        "description": "IBM Security Verify attribute ID."
                    },
                    "function": {
                        "$ref": "#/components/schemas/ClientAttributeRule"
                    },
                    "jitpOption": {
                        "type": "string",
                        "description": "Specify whether the attribute is stored and updated in the user profile.<br>\"CREATE\" will only store the attribute value during user provisioning and will not update it during subsequent logins.<br>\"ALWAYS\" will store and update the attribute value during subsequent logins as well.<br>\"DISABLED\" will not store this attribute value in the user profile.",
                        "enum": [
                            "ALWAYS",
                            "CREATE",
                            "DISABLED"
                        ]
                    }
                }
            },
            "IdentityMapping": {
                "type": "object",
                "properties": {
                    "attributeMappings": {
                        "type": "array",
                        "description": "Attribute mapping.",
                        "items": {
                            "$ref": "#/components/schemas/IdentityAttributeMap"
                        }
                    },
                    "jitp": {
                        "type": "boolean",
                        "description": "Enables the creation and update of the user account in the identity source realm that is associated with the token."
                    },
                    "realm": {
                        "type": "string",
                        "description": "Realm name of the identity provider that the user will be linked to."
                    },
                    "subjectId": {
                        "type": "string",
                        "description": "The incoming token attribute that is used to link the unique user identifier in IBM Security Verify."
                    },
                    "searchBy": {
                        "type": "string",
                        "description": "The unique user identifier in IBM Security Verify to map to. Default is 'uid'."
                    }
                }
            },
            "UpdateOidcSTSTokenType": {
                "required": [
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Token type ID.",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Token type name."
                    },
                    "type": {
                        "type": "string",
                        "description": "Base token type that this token type adopt."
                    },
                    "description": {
                        "type": "string",
                        "description": "Token type description."
                    },
                    "issuer": {
                        "type": "string",
                        "description": "Token type issuer."
                    },
                    "jwksUri": {
                        "type": "string",
                        "description": "JSON Web Keys (JWKs) URI."
                    },
                    "identityMapping": {
                        "$ref": "#/components/schemas/IdentityMapping"
                    },
                    "validate": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Configuration for validation mode."
                    }
                }
            },
            "CreateOidcSTSTokenType": {
                "required": [
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Token type ID.",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Token type name."
                    },
                    "type": {
                        "type": "string",
                        "description": "Base token type that this token type adopt."
                    },
                    "description": {
                        "type": "string",
                        "description": "Token type description."
                    },
                    "issuer": {
                        "type": "string",
                        "description": "Token type issuer."
                    },
                    "jwksUri": {
                        "type": "string",
                        "description": "JSON Web Keys (JWKs) URI."
                    },
                    "identityMapping": {
                        "$ref": "#/components/schemas/IdentityMapping"
                    },
                    "validate": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Configuration for validation mode."
                    }
                }
            },
            "STSTokenType": {
                "required": [
                    "identityMapping",
                    "issuer",
                    "name",
                    "type",
                    "validate"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Token type ID. If not specified during token type creation, it will be auto-generated. The ID cannot be changed after it is created."
                    },
                    "name": {
                        "type": "string",
                        "description": "A unique name for the token type. This name is used as the value of subject_token_type or actor_token_type during token exchange. The name cannot be changed after it is created."
                    },
                    "type": {
                        "type": "string",
                        "description": "Base token type of this custom token type.",
                        "enum": [
                            "urn:ietf:params:oauth:token-type:jwt"
                        ]
                    },
                    "description": {
                        "type": "string",
                        "description": "Token type description."
                    },
                    "issuer": {
                        "type": "string",
                        "description": "The issuer of this custom token type."
                    },
                    "jwksUri": {
                        "type": "string",
                        "description": "URL referencing the JSON Web Key Set (JWKS) document that contains public keys to be used for JSON Web Token (JWT) validation."
                    },
                    "identityMapping": {
                        "$ref": "#/components/schemas/IdentityMapping"
                    },
                    "validate": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Configuration for token validation."
                    }
                }
            },
            "STSTokenTypeList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "total": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "ststokenTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/STSTokenType"
                        }
                    }
                }
            },
            "StatusBean": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Job ID.",
                        "readOnly": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Job status.",
                        "readOnly": true
                    }
                }
            },
            "FunctionStringString1": {
                "type": "object"
            },
            "Function_0": {
                "type": "object"
            },
            "ErrorBean_2": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "readOnly": true
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale specific descriptive message.",
                        "readOnly": true
                    }
                }
            },
            "Client_0": {
                "required": [
                    "clientName",
                    "grantTypes"
                ],
                "type": "object",
                "properties": {
                    "issuedAt": {
                        "type": "integer",
                        "description": "Time at which the client was issued as the number of seconds from 1970-01-01T00:00:00Z. This value will be auto-generated during creation.",
                        "format": "int64",
                        "readOnly": true
                    },
                    "isDynamicClient": {
                        "type": "boolean",
                        "description": "Indicator of dynamic client. Only set to true for dynamic client."
                    },
                    "apiClientOwners": {
                        "type": "array",
                        "description": "API Client IDs that own this client.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "clientId": {
                        "type": "string",
                        "description": "Client ID. This value will be auto-generated during creation.",
                        "readOnly": true
                    },
                    "clientName": {
                        "type": "string",
                        "description": "Display name. Maximum 256 characters."
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "Client secret. Maximum 512 characters. Will be auto-generated if this parameter is not provided. Empty string value is for public client."
                    },
                    "category": {
                        "type": "string",
                        "description": "Client category. Maximum 32 characters."
                    },
                    "definitionId": {
                        "type": "string",
                        "description": "Definition ID that this client is associated with. The Definition must already exist. If not specified, the client will be attached to the default definition."
                    },
                    "appId": {
                        "type": "string",
                        "description": "Application ID that this client is associated with."
                    },
                    "idSources": {
                        "type": "array",
                        "description": "List of allowed ID Sources based on priority.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "requirePkceVerification": {
                        "type": "boolean",
                        "description": "Require PKCE verification. If not provided, the value will be set to false."
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable the client. If not provided, the value will be set to true."
                    },
                    "grantTypes": {
                        "type": "array",
                        "description": "List of allowed grant types. Must be subset of Definition's grant types (grant_types_supported) listed at /oidc/v1.0/endpoint/{definition_id}/.well-known/openid-configuration",
                        "items": {
                            "type": "string"
                        }
                    },
                    "policyAppliedAPIGrantTypes": {
                        "type": "array",
                        "description": "List of API-based grant types which access policy must be applied. Must be subset of allowed API-based grant types.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "policyId": {
                        "type": "string",
                        "description": "Access policy ID associated with this client. Only applicable for API client and Application API client."
                    },
                    "birthRightAccess": {
                        "type": "boolean",
                        "description": "Birth right access. Default is false."
                    },
                    "redirectUris": {
                        "type": "array",
                        "description": "List of redirect URIs.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "requestUris": {
                        "type": "array",
                        "description": "List of request URIs.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "jwkSet": {
                        "$ref": "#/components/schemas/ClientJwks"
                    },
                    "jwkUri": {
                        "type": "string",
                        "description": "JSON Web Key (JWK) URI. This will be used instead of requestVerifyKey and idTokenEncryptKey if those are not provided. If specified, JSON Web Key (JWK) Set should not be specified."
                    },
                    "idTokenSigningAlg": {
                        "type": "string",
                        "description": "ID token signing algorithm. List of algorithms (id_token_signing_alg_values_supported) available at /oidc/v1.0/endpoint/{definition_id}/.well-known/openid-configuration"
                    },
                    "idTokenEncryptAlg": {
                        "type": "string",
                        "description": "ID token key management encryption algorithm. List of algorithms (id_token_encryption_alg_values_supported) available at /oidc/v1.0/endpoint/{definition_id}/.well-known/openid-configuration"
                    },
                    "idTokenEncryptEnc": {
                        "type": "string",
                        "description": "ID token content encryption algorithm. List of algorithms (id_token_encryption_enc_values_supported) available at /oidc/v1.0/endpoint/{definition_id}/.well-known/openid-configuration"
                    },
                    "idTokenEncryptKey": {
                        "type": "string",
                        "description": "ID token encryption public key label."
                    },
                    "requestSigningAlg": {
                        "type": "string",
                        "description": "Request signing algorithm. List of algorithms (request_object_signing_alg_values_supported) available at /oidc/v1.0/endpoint/{definition_id}/.well-known/openid-configuration"
                    },
                    "requestEncryptAlg": {
                        "type": "string",
                        "description": "Request key management encryption algorithm. List of algorithms (request_object_encryption_alg_values_supported) available at /oidc/v1.0/endpoint/{definition_id}/.well-known/openid-configuration"
                    },
                    "requestEncryptEnc": {
                        "type": "string",
                        "description": "Request content encryption algorithm. List of algorithms (request_object_encryption_enc_values_supported) available at /oidc/v1.0/endpoint/{definition_id}/.well-known/openid-configuration"
                    },
                    "requestVerifyKey": {
                        "type": "string",
                        "description": "Request signature verification public key label."
                    },
                    "accessTokenType": {
                        "type": "string",
                        "description": "Type of access token to be generated. Default is 'default'",
                        "example": "default",
                        "enum": [
                            "default",
                            "jwt"
                        ]
                    },
                    "audiences": {
                        "type": "array",
                        "description": "List of audiences.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "introspectMap": {
                        "type": "array",
                        "description": "List of application specific claim mapping to attribute source for introspection and JWT access token.",
                        "items": {
                            "$ref": "#/components/schemas/ClientAttributeMap"
                        }
                    },
                    "restrictEntitlements": {
                        "type": "boolean",
                        "description": "Restrict entitlements, true or false. Default is true."
                    },
                    "entitlements": {
                        "type": "array",
                        "description": "List of entitlements assigned to this client.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "defaultEntitlements": {
                        "type": "array",
                        "description": "List of default entitlements assigned to this client.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sendAllClaims": {
                        "type": "boolean",
                        "description": "If true, always return all supported claims. Default is false."
                    },
                    "attributeMap": {
                        "type": "array",
                        "description": "List of application specific claim mapping to attribute source for id_token and user info.",
                        "items": {
                            "$ref": "#/components/schemas/ClientAttributeMap"
                        }
                    },
                    "overrideSettings": {
                        "$ref": "#/components/schemas/ClientOverrides"
                    },
                    "jwtBearerIdentifier": {
                        "$ref": "#/components/schemas/JwtBearerIdentifier"
                    },
                    "generateDeviceFlowQRCode": {
                        "type": "boolean",
                        "description": "If true, generate QR Code for the full verification URI. Default is false."
                    },
                    "companyName": {
                        "type": "string",
                        "description": "Company name. Maximum 1024 characters."
                    },
                    "companyUrl": {
                        "type": "string",
                        "description": "Company URL."
                    },
                    "contactPerson": {
                        "type": "string",
                        "description": "Contact person. Maximum 256 characters."
                    },
                    "contactType": {
                        "type": "string",
                        "description": "Contact type.",
                        "enum": [
                            "technical",
                            "support",
                            "administrative",
                            "billing",
                            "other"
                        ]
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address."
                    },
                    "phone": {
                        "type": "string",
                        "description": "Phone number. Maximum 128 characters. No validation done, other than length."
                    },
                    "otherInfo": {
                        "type": "string",
                        "description": "Other miscellaneous information. Maximum 2048 characters."
                    },
                    "themeId": {
                        "type": "string",
                        "description": "Template pages theme to use for all pages related to this OIDC application."
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this client."
                    },
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        },
                        "description": "Additional properties associated with this client."
                    },
                    "ipFilterOp": {
                        "type": "string",
                        "description": "Operation of IP filter. Default is null, which means IP filter is disabled.",
                        "enum": [
                            "allow",
                            "deny"
                        ]
                    },
                    "ipFilters": {
                        "type": "array",
                        "description": "List of IP filter.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "consentType": {
                        "type": "string",
                        "description": "Type of consent used by this client.",
                        "enum": [
                            "oidc",
                            "dpcm"
                        ]
                    },
                    "additionalConfig": {
                        "$ref": "#/components/schemas/AdditionalConfiguration"
                    }
                }
            },
            "Function1_0": {
                "type": "object"
            },
            "ErrorBean1_1": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "readOnly": true
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale specific descriptive message.",
                        "readOnly": true
                    }
                }
            },
            "EntityTag": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "weak": {
                        "type": "boolean"
                    }
                }
            },
            "MediaType": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "subtype": {
                        "type": "string"
                    },
                    "parameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "wildcardType": {
                        "type": "boolean"
                    },
                    "wildcardSubtype": {
                        "type": "boolean"
                    }
                }
            },
            "NewCookie": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "path": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "maxAge": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "expiry": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "secure": {
                        "type": "boolean"
                    },
                    "httpOnly": {
                        "type": "boolean"
                    }
                }
            },
            "Response": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "statusInfo": {
                        "$ref": "#/components/schemas/StatusType"
                    },
                    "entity": {
                        "type": "object",
                        "properties": {}
                    },
                    "mediaType": {
                        "$ref": "#/components/schemas/MediaType"
                    },
                    "language": {
                        "$ref": "#/components/schemas/Locale"
                    },
                    "length": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "allowedMethods": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "cookies": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/NewCookie"
                        }
                    },
                    "entityTag": {
                        "$ref": "#/components/schemas/EntityTag"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastModified": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "location": {
                        "type": "string",
                        "format": "uri"
                    },
                    "links": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link_0"
                        }
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {}
                            }
                        }
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {}
                            }
                        }
                    },
                    "stringHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "StatusType": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "family": {
                        "type": "string",
                        "enum": [
                            "INFORMATIONAL",
                            "SUCCESSFUL",
                            "REDIRECTION",
                            "CLIENT_ERROR",
                            "SERVER_ERROR",
                            "OTHER"
                        ]
                    },
                    "reasonPhrase": {
                        "type": "string"
                    }
                }
            },
            "UriBuilder": {
                "type": "object"
            },
            "BlankResponse": {
                "type": "object"
            },
            "TokenResponse": {
                "required": [
                    "access_token",
                    "expires_in",
                    "grant_id",
                    "token_type"
                ],
                "type": "object",
                "properties": {
                    "access_token": {
                        "type": "string",
                        "description": "The access token that is issued by the authorization server."
                    },
                    "id_token": {
                        "type": "string",
                        "description": "The ID token that is issued by the authorization server, when the requested scope contains 'openid'."
                    },
                    "grant_id": {
                        "type": "string",
                        "description": "The grant identifier of this authorization grant."
                    },
                    "expires_in": {
                        "type": "integer",
                        "description": "The lifetime, in seconds, of the access token.",
                        "format": "int32"
                    },
                    "token_type": {
                        "type": "string",
                        "example": "Bearer",
                        "description": "The type of the access token."
                    },
                    "scope": {
                        "type": "string",
                        "description": "A space-delimited list of scopes that are associated with this access token."
                    },
                    "refresh_token": {
                        "type": "string",
                        "description": "The refresh token that is used to obtain new access tokens. It is only available for authorization_code grant if the refresh_token grant is enabled."
                    }
                }
            },
            "UserInfoResponse": {
                "type": "object",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "The display name that is associated with the subject of this token. This attribute is only available for grants other than client_credentials grants when it is configured to be returned by default, or when requested in the scope or claim parameters."
                    },
                    "sub": {
                        "type": "string",
                        "description": "The subject of the token. For client_credentials grants, the subject is the client_id. For other grants, the subject is the unique user identifier."
                    },
                    "userType": {
                        "type": "string",
                        "description": "The user type that is associated with the subject of this token. This attribute is only available for grants other than client_credentials grants."
                    },
                    "uniqueSecurityName": {
                        "type": "string",
                        "description": "The unique security name that is associated with this token."
                    },
                    "preferred_username": {
                        "type": "string",
                        "description": "The preferred user name that is associated with the subject of this token. This attribute is only available for grants other than client_credentials grant."
                    },
                    "realmName": {
                        "type": "string",
                        "description": "The realm name that is associated with this token."
                    },
                    "ext": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object",
                        "description": "The extension map that is associated with this token."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name that is associated with the subject of this token. This attribute is only available for grants other than client_credentials grants when it is configured to be returned by default or requested in the scope or claim parameters."
                    }
                }
            },
            "JwkResponse": {
                "type": "object",
                "properties": {
                    "kty": {
                        "type": "string",
                        "description": "The key type (RSA, EC, and so on).",
                        "readOnly": true
                    },
                    "use": {
                        "type": "string",
                        "description": "The public key usage (for signing, encryption, and so on).",
                        "readOnly": true
                    },
                    "kid": {
                        "type": "string",
                        "description": "The key identifier value.",
                        "readOnly": true
                    },
                    "x5c": {
                        "type": "array",
                        "description": "The X.509 certificate chain value.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "x5t": {
                        "type": "string",
                        "description": "The X.509 certificate thumbprint.",
                        "readOnly": true
                    },
                    "n": {
                        "type": "string",
                        "description": "The RSA n value.",
                        "readOnly": true
                    },
                    "e": {
                        "type": "string",
                        "description": "The RSA e value.",
                        "readOnly": true
                    }
                }
            },
            "JwksResponse": {
                "required": [
                    "keys"
                ],
                "type": "object",
                "properties": {
                    "keys": {
                        "type": "array",
                        "description": "A list of keys.",
                        "items": {
                            "$ref": "#/components/schemas/JwkResponse"
                        }
                    }
                }
            },
            "DeviceAuthorizeResponse": {
                "required": [
                    "device_code",
                    "expires_in",
                    "user_code",
                    "verification_uri"
                ],
                "type": "object",
                "properties": {
                    "device_code": {
                        "type": "string",
                        "description": "The device verification code that is issued by the authorization server."
                    },
                    "user_code": {
                        "type": "string",
                        "description": "The user verification code that is issued by the authorization server."
                    },
                    "verification_uri": {
                        "type": "string",
                        "description": "The user verification URI on the authorization server."
                    },
                    "verification_uri_complete": {
                        "type": "string",
                        "description": "A verification URI that includes the user code."
                    },
                    "verification_uri_complete_qrcode": {
                        "type": "string",
                        "description": "A complete verification URI in QR code format, Base64 encoded."
                    },
                    "expires_in": {
                        "type": "integer",
                        "description": "The lifetime, in seconds, of the device code and user code.",
                        "format": "int32"
                    },
                    "interval": {
                        "type": "integer",
                        "description": "The minimum amount of time in seconds that the client must wait between polling requests to the token endpoint.",
                        "format": "int32"
                    }
                }
            },
            "DefinitionMetadata": {
                "required": [
                    "authorization_endpoint",
                    "issuer",
                    "response_types_supported"
                ],
                "type": "object",
                "properties": {
                    "issuer": {
                        "type": "string",
                        "description": "The OpenID provider issuer identifier."
                    },
                    "authorization_endpoint": {
                        "type": "string",
                        "description": "The URL of the OpenID provider authorization endpoint."
                    },
                    "token_endpoint": {
                        "type": "string",
                        "description": "The URL of the OpenID provider token endpoint."
                    },
                    "introspection_endpoint": {
                        "type": "string",
                        "description": "The URL of the OpenID provider introspect endpoint."
                    },
                    "userinfo_endpoint": {
                        "type": "string",
                        "description": "The URL of the OpenID provider userinfo endpoint."
                    },
                    "revocation_endpoint": {
                        "type": "string",
                        "description": "The URL of the OpenID provider revoke endpoint."
                    },
                    "device_authorization_endpoint": {
                        "type": "string",
                        "description": "The URL of the OpenID provider device authorization endpoint."
                    },
                    "user_authorization_endpoint": {
                        "type": "string",
                        "description": "The URL of the OpenID provider user authorization endpoint."
                    },
                    "registration_endpoint": {
                        "type": "string",
                        "description": "The URL of the OpenID provider dynamic client registration endpoint."
                    },
                    "jwks_uri": {
                        "type": "string",
                        "description": "The URL of the OpenID provider JSON Web Key Set endpoint."
                    },
                    "response_types_supported": {
                        "type": "array",
                        "description": "The JSON array that contains a list of the response_type values that this OpenID provider supports.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "response_modes_supported": {
                        "type": "array",
                        "description": "The JSON array that contains a list of the response_mode values that this OpenID provider supports.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "grant_types_supported": {
                        "type": "array",
                        "description": "The JSON array that contains a list of the grant_type values that this OpenID provider supports.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "token_endpoint_auth_methods_supported": {
                        "type": "array",
                        "description": "The JSON array that contains a list of client authentication methods that are supported by this token endpoint.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id_token_signing_alg_values_supported": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The JSON array that contains a list of the JSON Web Signature (JWS) signing algorithms that are supported by the OpenID provider for the ID token to encode the claims in a JSON Web Token.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id_token_encryption_alg_values_supported": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The JSON array that contains a list of the JSON Web Encryption (JWE) algorithms that are supported by the OpenID provider for the ID token to encode the claims in a JSON Web Token.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id_token_encryption_enc_values_supported": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The JSON array that contains a list of the JSON Web Encryption (JWE) encryption algorithms that are supported by the OpenID provider for the ID token to encode the claims in a JSON Web Token.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "userinfo_signing_alg_values_supported": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The JSON array that contains a list of the JSON Web Signature (JWS) signing algorithms that are supported by the UserInfo endpoint to encode the claims in a JSON Web Token.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "userinfo_encryption_alg_values_supported": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The JSON array that contains a list of the JSON Web Encryption (JWE) algorithms that are supported by the UserInfo endpoint to encode the claims in a JSON Web Token.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "userinfo_encryption_enc_values_supported": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The JSON array that contains a list of the JSON Web Encryption (JWE) encryption algorithms that are supported by the UserInfo endpoint to encode the claims in a JSON Web Token.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "request_object_signing_alg_values_supported": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The JSON array that contains a list of the JSON Web Signature (JWS) signing algorithms that are supported by the OpenID provider for request objects.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "request_object_encryption_alg_values_supported": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The JSON array that contains a list of the JSON Web Encryption (JWE) algorithms that are supported by the OpenID provider for request objects.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "request_object_encryption_enc_values_supported": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The JSON array that contains a list of the JSON Web Encryption (JWE) encryption algorithms that are supported by the OpenID provider for request objects.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "subject_types_supported": {
                        "type": "array",
                        "description": "The JSON array containing a list of the Subject Identifier types that this OP supports.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "scopes_supported": {
                        "type": "array",
                        "description": "The JSON array that contains a list of the scope values that this server supports.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "claims_supported": {
                        "type": "array",
                        "description": "The JSON array that contains a list of the names of the claims that the OpenID provider might be able to supply values for.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "claim_types_supported": {
                        "type": "array",
                        "description": "The JSON array that contains a list of the claim types that the OpenID provider supports.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "claims_parameter_supported": {
                        "type": "boolean",
                        "description": "A Boolean value that specifies whether the OpenID provider supports the use the claims parameter."
                    },
                    "request_parameter_supported": {
                        "type": "boolean",
                        "description": "A Boolean value that specifies whether the OpenID provider supports the use the request parameter."
                    },
                    "request_uri_parameter_supported": {
                        "type": "boolean",
                        "description": "A Boolean value that specifies whether the OpenID provider supports the use of the request_uri parameter."
                    },
                    "require_request_uri_registration": {
                        "type": "boolean",
                        "description": "A Boolean value that specifies whether the OpenID provider requires that all request_uri values be pre-registered before use. These values are registered by using the request_uris registration parameter."
                    }
                }
            },
            "DynamicClientResponse": {
                "required": [
                    "client_id",
                    "client_name",
                    "client_secret",
                    "client_secret_expires_at",
                    "redirect_uris"
                ],
                "type": "object",
                "properties": {
                    "client_id": {
                        "type": "string",
                        "description": "Client identifier."
                    },
                    "client_id_issued_at": {
                        "type": "string",
                        "description": "Time at which the client identifier was assigned."
                    },
                    "client_secret": {
                        "type": "string",
                        "description": "Client secret."
                    },
                    "client_secret_expires_at": {
                        "type": "string",
                        "description": "Time at which the client secret expires."
                    },
                    "registration_client_uri": {
                        "type": "string",
                        "description": "URL of the client configuration endpoint for this client."
                    },
                    "registration_access_token": {
                        "type": "string",
                        "description": "Access token that is used to run subsequent operations at the client configuration endpoint."
                    },
                    "client_name": {
                        "type": "string",
                        "description": "Client name."
                    },
                    "redirect_uris": {
                        "type": "array",
                        "description": "Array of redirection URIs for use in redirect-based flows.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "grant_types": {
                        "type": "array",
                        "description": "Array of grant types that the client can use. The allowed grant types are 'authorization_code', 'implicit', 'password', 'refresh_token' and 'urn:ietf:params:oauth:grant-type:device_code'.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id_token_signed_response_alg": {
                        "type": "string",
                        "description": "Token signing algorithm. Required for signing the ID token assigned for this client."
                    },
                    "initiate_login_uri": {
                        "type": "string",
                        "description": "URI that uses the https scheme that a third party can use to initiate a login by the RP."
                    },
                    "all_users_entitled": {
                        "type": "boolean",
                        "description": "Set to true if all users are entitled to use this client."
                    }
                }
            },
            "CreateDynamicClient": {
                "required": [
                    "client_id",
                    "client_name",
                    "client_secret",
                    "redirect_uris"
                ],
                "type": "object",
                "properties": {
                    "client_name": {
                        "type": "string",
                        "description": "Client name."
                    },
                    "client_id": {
                        "type": "string",
                        "description": "Client ID. Will be automatically generated if not provided."
                    },
                    "client_secret": {
                        "type": "string",
                        "description": "Client secret. Will be automatically generated if not provided."
                    },
                    "redirect_uris": {
                        "type": "array",
                        "description": "Array of redirection URIs for use in redirect-based flows.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "request_uris": {
                        "type": "array",
                        "description": "Array of request_uri values that are pre-registered by the RP for use at the OP.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "response_types": {
                        "type": "array",
                        "description": "Array of the OAuth 2.0 response types that the client may use.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "grant_types": {
                        "type": "array",
                        "description": "Array of grant types that the client may use. The allowed grant types are 'authorization_code', 'implicit', 'password', 'refresh_token' and 'urn:ietf:params:oauth:grant-type:device_code'.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "jwks_uri": {
                        "type": "string",
                        "description": "URL referencing the client's JSON Web Key Set document representing the client's public keys."
                    },
                    "id_token_signed_response_alg": {
                        "type": "string",
                        "description": "Token signing algorithm. Required for signing the ID token issued for this client."
                    },
                    "userinfo_signed_response_alg": {
                        "type": "string",
                        "description": "Userinfo response JWT signing algorithm."
                    },
                    "userinfo_encrypted_response_alg": {
                        "type": "string",
                        "description": "Userinfo response JWT encryption algorithm."
                    },
                    "userinfo_encrypted_response_enc": {
                        "type": "string",
                        "description": "Userinfo response JWT encryption content algorithm."
                    },
                    "request_object_signing_alg": {
                        "type": "string",
                        "description": "JWS alg algorithm that MUST be used for signing request objects sent to the OP."
                    },
                    "request_object_encryption_alg": {
                        "type": "string",
                        "description": "JWE alg algorithm the RP is declaring that it may use for encrypting request objects sent to the OP."
                    },
                    "request_object_encryption_enc": {
                        "type": "string",
                        "description": "JWE enc algorithm the RP is declaring that it may use for encrypting request objects sent to the OP."
                    },
                    "token_endpoint_auth_method": {
                        "type": "string",
                        "description": "Requested authentication method for the token endpoint."
                    },
                    "token_endpoint_auth_signing_alg": {
                        "type": "string",
                        "description": "JWS alg algorithm that MUST be used for signing the JWT used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods."
                    },
                    "initiate_login_uri": {
                        "type": "string",
                        "description": "URI using the https scheme that a third party can use to initiate a login by the RP."
                    },
                    "all_users_entitled": {
                        "type": "boolean",
                        "description": "Set to true if all users are entitled to use this client."
                    },
                    "consent_action": {
                        "type": "boolean",
                        "description": "Request for user consent."
                    },
                    "enforce_pkce": {
                        "type": "boolean",
                        "description": "Enforce the usage of PKCE."
                    },
                    "tls_client_certificate_bound_access_tokens": {
                        "type": "boolean",
                        "description": "Indicates if certificate binding for access token is required."
                    },
                    "tls_client_auth_subject_dn": {
                        "type": "string",
                        "description": "The expected subject distinguished name of the certificate that the client will use in mutual TLS authentication."
                    },
                    "tls_client_auth_san_dns": {
                        "type": "string",
                        "description": "The expected DNS name SAN entry in the certificate that the client will use in mutual TLS authentication."
                    },
                    "tls_client_auth_san_uri": {
                        "type": "string",
                        "description": "The expected URI SAN entry in the certificate that the client will use in mutual TLS authentication."
                    },
                    "tls_client_auth_san_ip": {
                        "type": "string",
                        "description": "The expected IP address SAN entry in the certificate that the client will use in mutual TLS authentication."
                    },
                    "tls_client_auth_san_email": {
                        "type": "string",
                        "description": "The expected email address SAN entry in the certificate that the client will use in mutual TLS authentication."
                    }
                }
            },
            "PushAuthorizeResponse": {
                "required": [
                    "expires_in",
                    "request_uri"
                ],
                "type": "object",
                "properties": {
                    "request_uri": {
                        "type": "string",
                        "description": "The request URI corresponding to the authorization request posted."
                    },
                    "expires_in": {
                        "type": "integer",
                        "description": "The lifetime, in seconds, of the request_uri.",
                        "format": "int32"
                    }
                }
            },
            "ErrorResponse1": {
                "required": [
                    "error"
                ],
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string",
                        "description": "The OIDC error."
                    },
                    "error_description": {
                        "type": "string",
                        "description": "The OIDC error description."
                    }
                }
            },
            "Function_1": {
                "type": "object"
            },
            "ErrorBean_3": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "readOnly": true
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale specific descriptive message.",
                        "readOnly": true
                    }
                }
            },
            "Link_0": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    },
                    "uriBuilder": {
                        "$ref": "#/components/schemas/UriBuilder"
                    },
                    "rel": {
                        "type": "string"
                    },
                    "rels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "title": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "params": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "ErrorResponse_1": {
                "required": [
                    "error"
                ],
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string",
                        "description": "The OIDC error."
                    },
                    "error_description": {
                        "type": "string",
                        "description": "The OIDC error description."
                    }
                }
            },
            "IntrospectResponse_0": {
                "required": [
                    "active"
                ],
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "The Boolean indicator that indicates whether the presented token is currently active."
                    },
                    "scope": {
                        "type": "string",
                        "description": "A space-delimited list of scopes that are associated with this token."
                    },
                    "client_id": {
                        "type": "string",
                        "description": "The API client's or OIDC application's client ID."
                    },
                    "token_type": {
                        "type": "string",
                        "description": "The type of the token.",
                        "example": "access_token",
                        "enum": [
                            "access_token",
                            "refresh_token"
                        ]
                    },
                    "exp": {
                        "type": "integer",
                        "description": "The timestamp, in the POSIX time format, indicating when this token will expire.",
                        "format": "int32"
                    },
                    "iat": {
                        "type": "integer",
                        "description": "The time stamp, in the POSIX time format, that indicates when this token was originally issued.",
                        "format": "int32"
                    },
                    "grant_type": {
                        "type": "string",
                        "description": "The grant type that is used to request this token."
                    },
                    "realmName": {
                        "type": "string",
                        "description": "The realm name that is associated with this token."
                    },
                    "sub": {
                        "type": "string",
                        "description": "The subject of the token. For client_credentials grants, the subject is the client_id. For other grants, the subject is the unique user identifier."
                    },
                    "uniqueSecurityName": {
                        "type": "string",
                        "description": "The unique security name of the token."
                    },
                    "preferred_username": {
                        "type": "string",
                        "description": "The preferred user name that is associated with the subject of this token. This attribute is only available for grants other than client_credentials grants."
                    },
                    "userType": {
                        "type": "string",
                        "description": "The user type that is associated with the subject of this token. This attribute is only available for grants other than client_credentials grants.",
                        "example": "regular",
                        "enum": [
                            "regular",
                            "federated"
                        ]
                    },
                    "groupIds": {
                        "type": "array",
                        "description": "The list of group IDs that are associated with the subject of this token. This attribute is only available for grants other than client_credentials grants.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The extension map of attributes that are associated with this token."
                    }
                }
            },
            "Function1_1": {
                "type": "object"
            },
            "ErrorBean1_2": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "readOnly": true
                    },
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale specific descriptive message.",
                        "readOnly": true
                    }
                }
            },
            "AllEventsResponse": {
                "required": [
                    "events",
                    "search_after"
                ],
                "type": "object",
                "properties": {
                    "events": {
                        "type": "array",
                        "description": "The events.",
                        "items": {
                            "$ref": "#/components/schemas/Events"
                        }
                    },
                    "search_after": {
                        "$ref": "#/components/schemas/AllEventsSearchAfter"
                    }
                }
            },
            "AllEventsSearchAfter": {
                "required": [
                    "max_size_limit",
                    "total_events"
                ],
                "type": "object",
                "properties": {
                    "total_events": {
                        "type": "integer",
                        "description": "The total number of events.",
                        "format": "int32"
                    },
                    "max_size_limit": {
                        "type": "string",
                        "description": "Indicates if the maximum number of events that can be returned were returned."
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the last event that was returned."
                    },
                    "time": {
                        "type": "string",
                        "description": "The timestamp of the last event that was returned."
                    },
                    "range_type": {
                        "type": "string",
                        "description": "The RANGE_TYPE (time/indexed_at) selected_by the user."
                    }
                }
            },
            "Events": {
                "type": "object"
            },
            "Duration": {
                "type": "object",
                "properties": {
                    "seconds": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "units": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TemporalUnit"
                        }
                    },
                    "zero": {
                        "type": "boolean"
                    },
                    "negative": {
                        "type": "boolean"
                    },
                    "nano": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "HealthCheckComponentStatus": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "BAD",
                            "MARGINAL",
                            "GOOD"
                        ]
                    },
                    "details": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "others": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        }
                    }
                }
            },
            "ServiceHealth": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "time": {
                        "$ref": "#/components/schemas/Duration"
                    },
                    "components": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/HealthCheckComponentStatus"
                        }
                    }
                }
            },
            "TemporalUnit": {
                "type": "object",
                "properties": {
                    "duration": {
                        "$ref": "#/components/schemas/Duration"
                    },
                    "durationEstimated": {
                        "type": "boolean"
                    },
                    "dateBased": {
                        "type": "boolean"
                    },
                    "timeBased": {
                        "type": "boolean"
                    }
                }
            },
            "ServletConfig": {
                "type": "object",
                "properties": {
                    "servletName": {
                        "type": "string"
                    },
                    "servletContext": {
                        "$ref": "#/components/schemas/ServletContext"
                    },
                    "initParameterNames": {
                        "$ref": "#/components/schemas/EnumerationString"
                    }
                }
            },
            "CSVExportRecord": {
                "required": [
                    "state"
                ],
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "description": "Unique identifier for the export request."
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the export request.",
                        "enum": [
                            "cancelled",
                            "completed",
                            "running",
                            "failed",
                            "queued"
                        ]
                    },
                    "fileName": {
                        "type": "string",
                        "description": "fileName of csv file."
                    },
                    "totalEventCount": {
                        "type": "integer",
                        "description": "total events count.",
                        "format": "int32"
                    },
                    "parameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Request Payload for the export request."
                    },
                    "category": {
                        "type": "string",
                        "enum": [
                            "OPERATIONAL_STATUS",
                            "AUDIT",
                            "USER_STATUS",
                            "STATUS"
                        ]
                    },
                    "statistics": {
                        "$ref": "#/components/schemas/CSVExportStats"
                    }
                }
            },
            "CSVExportStats": {
                "required": [
                    "creationTime",
                    "duration",
                    "size",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "startTime": {
                        "type": "string",
                        "description": "The time that the export request started."
                    },
                    "endTime": {
                        "type": "string",
                        "description": "The time that the export request was completed or cancelled."
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "The creation time of the report"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the report",
                        "format": "int32"
                    },
                    "version": {
                        "type": "string",
                        "description": "The report request version"
                    },
                    "duration": {
                        "type": "string",
                        "description": "The total processing time of the export request."
                    }
                }
            },
            "CSVExportJob": {
                "type": "object",
                "properties": {
                    "jobId": {
                        "type": "string"
                    }
                }
            },
            "StatusReportParameters": {
                "required": [
                    "columns"
                ],
                "type": "object",
                "properties": {
                    "filter": {
                        "type": "string",
                        "description": "The SCIM compliant search filter. For example, \"((emails sw \\\\\\\"example\\\\\\\") or (active eq \\\\\\\"true\\\\\\\"))\""
                    },
                    "columns": {
                        "type": "array",
                        "description": "The list of columns that are used when populating the corresponding CSV file.",
                        "items": {
                            "$ref": "#/components/schemas/UserComplianceColumns"
                        }
                    }
                }
            },
            "UserComplianceColumns": {
                "type": "object",
                "properties": {
                    "attributeCategory": {
                        "type": "string"
                    },
                    "attributeName": {
                        "type": "string"
                    },
                    "attributeKey": {
                        "type": "string"
                    }
                }
            },
            "Hits": {
                "required": [
                    "_id",
                    "_index",
                    "_source",
                    "_type",
                    "sort"
                ],
                "type": "object",
                "properties": {
                    "_index": {
                        "type": "string",
                        "description": "The index name."
                    },
                    "_type": {
                        "type": "string",
                        "description": "The type."
                    },
                    "_source": {
                        "type": "object",
                        "properties": {},
                        "description": "The event details."
                    },
                    "_id": {
                        "type": "string",
                        "description": "The ID of an event."
                    },
                    "sort": {
                        "type": "array",
                        "description": "The parameters to sort by. For example, time and ID.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ReportResponse": {
                "required": [
                    "hits",
                    "total"
                ],
                "type": "object",
                "properties": {
                    "hits": {
                        "type": "array",
                        "description": "The response for each operation.",
                        "items": {
                            "$ref": "#/components/schemas/Hits"
                        }
                    },
                    "total": {
                        "type": "integer",
                        "description": "The total.",
                        "format": "int32"
                    }
                }
            },
            "ReportResponseTemplate": {
                "required": [
                    "success"
                ],
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "description": "The success value."
                    },
                    "reportResponse": {
                        "$ref": "#/components/schemas/ReportResponse"
                    }
                }
            },
            "ScheduledCSVJob": {
                "required": [
                    "columns",
                    "frequency",
                    "owner",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description for the export request."
                    },
                    "type": {
                        "type": "string",
                        "description": "Type for the export request."
                    },
                    "frequency": {
                        "type": "string",
                        "description": "frequency for the export request to run.",
                        "enum": [
                            "daily",
                            "weekly",
                            "monthly"
                        ]
                    },
                    "columns": {
                        "type": "array",
                        "description": "Column headers for the export csv to select.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "owner": {
                        "type": "string",
                        "description": "owner of a report."
                    },
                    "jobId": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    },
                    "timeRange": {
                        "type": "string"
                    },
                    "createdOn": {
                        "type": "string"
                    }
                }
            },
            "ScheduledCSVJobs": {
                "type": "object",
                "properties": {
                    "schduledJobs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ScheduledCSVJob"
                        }
                    }
                }
            },
            "Report": {
                "type": "object",
                "properties": {
                    "responseJson": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {}
                        }
                    },
                    "message": {
                        "type": "string"
                    },
                    "success": {
                        "type": "boolean"
                    },
                    "defaultFormat": {
                        "type": "string",
                        "enum": [
                            "JSON",
                            "CSV",
                            "CSVDOWNLOAD"
                        ]
                    }
                }
            },
            "CSVExportHeaderNames": {
                "type": "object",
                "properties": {
                    "headerNames": {
                        "type": "array",
                        "description": "List of header names allowed as CSV file headers.",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "CloudantMetadataStoreId": {
                "required": [
                    "tenantId"
                ],
                "type": "object",
                "properties": {
                    "tenantId": {
                        "type": "string",
                        "description": "The tenant UUID for the export request."
                    },
                    "customAttributes": {
                        "type": "string",
                        "description": "custom Attirbutes."
                    },
                    "jobId": {
                        "type": "string"
                    }
                }
            },
            "CloudantMetadataRecord": {
                "required": [
                    "tenantId"
                ],
                "type": "object",
                "properties": {
                    "get_id": {
                        "type": "string",
                        "description": "Unique identifier for the metadata request."
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The tenant UUID for the export request."
                    },
                    "userId": {
                        "type": "string",
                        "description": "Requested UserId."
                    },
                    "reportName": {
                        "type": "string",
                        "description": "Requested Report Name."
                    },
                    "reportType": {
                        "type": "string",
                        "description": "Requested Report Type."
                    },
                    "attributes": {
                        "type": "string"
                    }
                }
            },
            "CloudantMetadataRecords": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "A list of customized column configurations.",
                        "items": {
                            "$ref": "#/components/schemas/CloudantMetadataRecord"
                        }
                    }
                }
            },
            "OperationalReportParameters": {
                "required": [
                    "columns"
                ],
                "type": "object",
                "properties": {
                    "filter": {
                        "type": "string",
                        "description": "The SCIM compliant search filter. For example, \"((emails sw \\\\\\\"example\\\\\\\") or (active eq \\\\\\\"true\\\\\\\"))\""
                    },
                    "columns": {
                        "type": "array",
                        "description": "The list of columns that are used when populating the corresponding CSV file.",
                        "items": {
                            "$ref": "#/components/schemas/UserComplianceColumns"
                        }
                    }
                }
            },
            "CSVExportRecords": {
                "type": "object",
                "properties": {
                    "jobs": {
                        "type": "array",
                        "description": "A list of CSV export requests.",
                        "items": {
                            "$ref": "#/components/schemas/CSVExportRecord"
                        }
                    }
                }
            },
            "CloudantResourceUnitsRecord": {
                "required": [
                    "aa_ru",
                    "active_users",
                    "cia_ru",
                    "cig_ru",
                    "mfa_ru",
                    "sso_ru",
                    "tenantId",
                    "tenantName",
                    "total_ru"
                ],
                "type": "object",
                "properties": {
                    "get_id": {
                        "type": "string",
                        "description": "Unique identifier for the metadata request."
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The tenant UUID for the export request."
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "creation date",
                        "format": "date"
                    },
                    "aa_ru": {
                        "type": "number",
                        "description": "aa_ru.",
                        "format": "double"
                    },
                    "mfa_ru": {
                        "type": "number",
                        "description": "mfa_ru.",
                        "format": "double"
                    },
                    "cia_ru": {
                        "type": "number",
                        "description": "cia_ru.",
                        "format": "double"
                    },
                    "cig_ru": {
                        "type": "number",
                        "description": "cig_ru.",
                        "format": "double"
                    },
                    "sso_ru": {
                        "type": "number",
                        "description": "sso_ru.",
                        "format": "double"
                    },
                    "active_users": {
                        "type": "integer",
                        "description": "active_users.",
                        "format": "int32"
                    },
                    "total_ru": {
                        "type": "number",
                        "description": "total_ru.",
                        "format": "double"
                    },
                    "tenantName": {
                        "type": "string",
                        "description": "tenantName."
                    }
                }
            },
            "CloudantResourceUnitsRecords": {
                "type": "object",
                "properties": {
                    "records": {
                        "type": "array",
                        "description": "A list of reource unit configurations.",
                        "items": {
                            "$ref": "#/components/schemas/CloudantResourceUnitsRecord"
                        }
                    }
                }
            },
            "CSVJobStatus": {
                "required": [
                    "description",
                    "owner",
                    "size",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "description value."
                    },
                    "status": {
                        "type": "string",
                        "description": "The state of the import request.",
                        "enum": [
                            "cancelled",
                            "completed",
                            "running",
                            "failed"
                        ]
                    },
                    "size": {
                        "type": "string",
                        "description": "size value."
                    },
                    "owner": {
                        "type": "string",
                        "description": "owner of a report."
                    },
                    "jobId": {
                        "type": "string"
                    },
                    "reportName": {
                        "type": "string"
                    },
                    "startTime": {
                        "type": "string"
                    },
                    "endTime": {
                        "type": "string"
                    },
                    "expirationTime": {
                        "type": "string"
                    },
                    "createdOn": {
                        "type": "string"
                    }
                }
            },
            "ReportConfiguration": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "body": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "isPublic": {
                        "type": "boolean"
                    },
                    "parameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "formats": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ReportFormatConfiguration"
                        }
                    }
                }
            },
            "ReportFormatConfiguration": {
                "type": "object",
                "properties": {
                    "selector": {
                        "type": "string"
                    },
                    "wrapResponse": {
                        "type": "boolean"
                    },
                    "wrapResponseLabel": {
                        "type": "string"
                    },
                    "postProcessingFormating": {
                        "type": "boolean"
                    },
                    "default": {
                        "type": "boolean"
                    }
                }
            },
            "TraceLevelModel_0": {
                "required": [
                    "level"
                ],
                "type": "object",
                "properties": {
                    "microservice": {
                        "type": "string",
                        "description": "The microservice trace to set, that is the IAM_MSVC_NAME.  If not specified, the default is \"reporting\"."
                    },
                    "level": {
                        "type": "string",
                        "description": "The trace level to set.",
                        "enum": [
                            "INFO",
                            "FINE",
                            "FINER",
                            "FINEST"
                        ]
                    },
                    "tenants": {
                        "type": "array",
                        "description": "The tenant trace levels to set.",
                        "items": {
                            "$ref": "#/components/schemas/TenantTraceModel"
                        }
                    }
                }
            },
            "RequestOperation": {
                "required": [
                    "action",
                    "requestId"
                ],
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "ID of the request"
                    },
                    "justification": {
                        "type": "string",
                        "description": "Justification to add (Max length is 1024)"
                    },
                    "action": {
                        "type": "string",
                        "description": "Action to execute",
                        "enum": [
                            "approve",
                            "reject",
                            "need_action_by_requestor"
                        ]
                    }
                },
                "description": "Object that contains the information of the bulk operation"
            },
            "RequestStatistics": {
                "required": [
                    "count"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Count",
                        "format": "int32"
                    }
                },
                "description": "Statistics of the request"
            },
            "DeleteOperation": {
                "required": [
                    "requestId"
                ],
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "ID of the request"
                    },
                    "justification": {
                        "type": "string",
                        "description": "Justification to add (Max length is 1024)"
                    }
                },
                "description": "Object that contains the information of the bulk operation"
            },
            "ListResponseWorkflow": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/Workflow"
                        }
                    }
                }
            },
            "ListResponseRequestStatistics": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of objects",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/RequestStatistics"
                        }
                    }
                }
            },
            "Justification": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string"
                    },
                    "userName": {
                        "type": "string"
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "content": {
                        "type": "string"
                    }
                }
            },
            "ApplicationSearch": {
                "type": "object",
                "properties": {
                    "application": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Unique identifier of the application",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "List of applications to filter the payload response"
            },
            "ListResponseRequestStatsSummary": {
                "required": [
                    "needMyAction",
                    "needOthersAction",
                    "otherCount",
                    "totalCount"
                ],
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "description": "Total count of requests",
                        "format": "int32"
                    },
                    "needMyAction": {
                        "type": "integer",
                        "description": "Number of requests waiting for callers action",
                        "format": "int32"
                    },
                    "needOthersAction": {
                        "type": "integer",
                        "description": "Number of requests waiting for others action",
                        "format": "int32"
                    },
                    "otherCount": {
                        "type": "integer",
                        "description": "Number of requests in non-waiting state",
                        "format": "int32"
                    }
                }
            },
            "UpdateEntitlementOperation": {
                "required": [
                    "op",
                    "path"
                ],
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "description": "Operation to be performed",
                        "example": "add",
                        "enum": [
                            "add",
                            "remove",
                            "replace"
                        ]
                    },
                    "path": {
                        "type": "string",
                        "description": "The string that contains an attribute path that describes the target of the operation. The \"path\" attribute is required for all operations. Examples of valid \"path\" specification formats include: <br> <br>     \"path\":\"entitlement.name\" <br>     \"path\":\"entitlement.description\" <br>     \"path\":\"entitlement.category\" <br>     \"path\":\"entitlement.groups\" <br>",
                        "example": "entitlement.name",
                        "enum": [
                            "entitlement",
                            "entitlement.name",
                            "entitlement.description",
                            "entitlement.category",
                            "entitlement.groups"
                        ]
                    },
                    "value": {
                        "type": "string",
                        "description": "The attribute content used for the operation. The \"value\" attribute is required for the \"add\" and \"replace\" operations. The \"value\" attribute is allowed with \"remove\" operations only when the \"path\" identifies  a single object (specified by a selection filter), and the attribute path identifies an array attribute.  Currently, this usage is for removing values from a custom attribute's values array only. <br> <br> The following example shows a patch operation removing a single value from \"entitlement.description\"  and multiple values from \"entitlement.groups\": <br>  <table> <tr><td> {  \"Operations\":  [    {      \"op\":\"replace\",      \"path\":\"entitlement.description\",      \"value\":\"entitlement for required access\",    },    {      \"op\":\"remove\",      \"path\":\"entitlement.groups\",      \"value\":          [             \"Basic Access\",             \"Gues Access\"          ]    }  ]}</td></tr></table>",
                        "example": "Basic Access"
                    }
                }
            },
            "ApprovalHistory": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "givenName": {
                        "type": "string"
                    },
                    "familyName": {
                        "type": "string"
                    },
                    "formatted": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "userType": {
                        "type": "string"
                    },
                    "realm": {
                        "type": "string"
                    },
                    "approverPersona": {
                        "type": "string",
                        "enum": [
                            "UM",
                            "AM"
                        ]
                    },
                    "actionDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "action": {
                        "type": "string",
                        "enum": [
                            "NEW",
                            "PENDING",
                            "SUBMITTED",
                            "NEED_ACTION_BY_REQUESTOR",
                            "COMPLETED",
                            "APPROVED",
                            "REJECTED",
                            "EXECUTING",
                            "INVALIDATED",
                            "CANCELED",
                            "SUPERSEDED"
                        ]
                    }
                }
            },
            "AccessRequest": {
                "required": [
                    "requests"
                ],
                "type": "object",
                "properties": {
                    "justification": {
                        "type": "string",
                        "description": "Justification"
                    },
                    "requests": {
                        "type": "array",
                        "description": "List of accesses that needs to be granted",
                        "items": {
                            "$ref": "#/components/schemas/BulkAccessOperation"
                        }
                    }
                },
                "description": "Object used to create a fine grained access request"
            },
            "Workflow": {
                "type": "object",
                "properties": {
                    "applicationId": {
                        "type": "string"
                    },
                    "isAMrequired": {
                        "type": "boolean"
                    },
                    "isUMrequired": {
                        "type": "boolean"
                    }
                }
            },
            "RequestActionResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the request",
                        "readOnly": true
                    },
                    "executed": {
                        "type": "boolean",
                        "description": "Boolean value that indicates whether the request operation was performed correctly",
                        "readOnly": true
                    },
                    "errorCode": {
                        "type": "string",
                        "description": "Contains the error code",
                        "readOnly": true
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "Contains the error message ",
                        "readOnly": true
                    }
                },
                "description": "Object used to return a result for the request action"
            },
            "BulkRequestOperation": {
                "required": [
                    "applicationId",
                    "entitlement",
                    "requestType"
                ],
                "type": "object",
                "properties": {
                    "requestType": {
                        "type": "string",
                        "description": "Type of request",
                        "enum": [
                            "APPLICATION",
                            "PERMISSION",
                            "ROLE"
                        ]
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "ID of the application to request"
                    },
                    "entitlement": {
                        "type": "string",
                        "description": "ID of the entitlement to request"
                    }
                },
                "description": "Object that contains the information of the request operation"
            },
            "BulkRequestInput": {
                "required": [
                    "accessesToAdd"
                ],
                "type": "object",
                "properties": {
                    "justification": {
                        "type": "string",
                        "description": "Justification"
                    },
                    "accessesToAdd": {
                        "type": "array",
                        "description": "List of accesses that needs to be granted",
                        "items": {
                            "$ref": "#/components/schemas/BulkRequestOperation"
                        }
                    }
                },
                "description": "Object used to create a fine grained access request for self"
            },
            "CatalogApplication": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "pendingRequest": {
                        "type": "boolean"
                    },
                    "details": {
                        "$ref": "#/components/schemas/CatalogApplicationDetails"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "CatalogApplicationDetails": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "linkName": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "applicationState": {
                        "type": "string"
                    }
                }
            },
            "CountErrorMessage": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string"
                    },
                    "messageDescription": {
                        "type": "string"
                    },
                    "counter": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "RequestBulkDeleteOperation": {
                "required": [
                    "requests"
                ],
                "type": "object",
                "properties": {
                    "justification": {
                        "type": "string",
                        "description": "Common justification that is used for the BulkOperation objects that don't have a justification."
                    },
                    "requests": {
                        "type": "array",
                        "description": "List of objects that contains the information that is used for each request",
                        "items": {
                            "$ref": "#/components/schemas/DeleteOperation"
                        }
                    }
                },
                "description": "The object used to approve or reject one or more requests."
            },
            "ListResponseRequestPreview": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of objects",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/RequestPreview"
                        }
                    }
                }
            },
            "UpdateByEntitlement": {
                "required": [
                    "Operations"
                ],
                "type": "object",
                "properties": {
                    "Operations": {
                        "type": "array",
                        "description": "An array of operation objects to be performed.  Operation objects must have exactly one \"op\" member, whose value indicates the operation to perform. Its value must be one of \"add\", \"remove\", or \"replace\". Values are errors.",
                        "items": {
                            "$ref": "#/components/schemas/UpdateEntitlementOperation"
                        }
                    }
                },
                "description": "JSON object used to update all the requests filtered by entitlement."
            },
            "ProvisioningStatusInput": {
                "required": [
                    "entitlement",
                    "user"
                ],
                "type": "object",
                "properties": {
                    "user": {
                        "type": "string",
                        "description": "ID of the user"
                    },
                    "entitlement": {
                        "type": "string",
                        "description": "ID of the entitlement"
                    },
                    "fulfilled": {
                        "type": "boolean"
                    }
                },
                "description": "Object used to notify provisioning status"
            },
            "ListResponseApproverRequestPreview": {
                "type": "object",
                "properties": {
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of objects",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/ApproverRequestPreview"
                        }
                    }
                }
            },
            "ListResponseAccessStatistics.java": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/AccessStatistics"
                        }
                    }
                }
            },
            "RequestBulkRequestOperation": {
                "required": [
                    "requests"
                ],
                "type": "object",
                "properties": {
                    "justification": {
                        "type": "string",
                        "description": "Common justification that is used for the BulkOperation objects that don't have a justification."
                    },
                    "requests": {
                        "type": "array",
                        "description": "List of objects that contains the information that is used for each request",
                        "items": {
                            "$ref": "#/components/schemas/RequestOperation"
                        }
                    }
                },
                "description": "The object used to approve or reject one or more requests."
            },
            "RequestInput": {
                "required": [
                    "applicationId",
                    "justification",
                    "requestType"
                ],
                "type": "object",
                "properties": {
                    "requestType": {
                        "type": "string",
                        "description": "Type of request",
                        "enum": [
                            "application"
                        ]
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "ID of the application to request"
                    },
                    "justification": {
                        "type": "string",
                        "description": "Justification"
                    }
                },
                "description": "Object used to create a self request"
            },
            "AddJustification": {
                "required": [
                    "justification"
                ],
                "type": "object",
                "properties": {
                    "justification": {
                        "type": "string",
                        "description": "Text of the justification"
                    }
                },
                "description": "Object used to add a justification in the request"
            },
            "Reminder": {
                "type": "object",
                "properties": {
                    "enable": {
                        "type": "boolean"
                    }
                }
            },
            "Request": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "reference": {
                        "type": "string"
                    },
                    "rev": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    },
                    "requestType": {
                        "type": "string",
                        "enum": [
                            "APPLICATION",
                            "PERMISSION",
                            "ROLE",
                            "USER_REGISTRATION"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "NEW",
                            "PENDING",
                            "SUBMITTED",
                            "NEED_ACTION_BY_REQUESTOR",
                            "COMPLETED",
                            "APPROVED",
                            "REJECTED",
                            "EXECUTING",
                            "INVALIDATED",
                            "CANCELED",
                            "SUPERSEDED"
                        ]
                    },
                    "requestor": {
                        "$ref": "#/components/schemas/User_1"
                    },
                    "requestee": {
                        "$ref": "#/components/schemas/User_1"
                    },
                    "beneficiary": {
                        "$ref": "#/components/schemas/User_1"
                    },
                    "nextApproverPersona": {
                        "type": "string",
                        "enum": [
                            "UM",
                            "AM"
                        ]
                    },
                    "nextApprovers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/User_1"
                        }
                    },
                    "approvalHistory": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApprovalHistory"
                        }
                    },
                    "requestDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "workflow": {
                        "$ref": "#/components/schemas/Workflow"
                    },
                    "lastChangeDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastChangeUserId": {
                        "type": "string"
                    },
                    "application": {
                        "$ref": "#/components/schemas/Application_1"
                    },
                    "operation": {
                        "type": "string",
                        "enum": [
                            "ACCESS_ADD",
                            "USER_REGISTRATION"
                        ]
                    },
                    "entitlement": {
                        "$ref": "#/components/schemas/Entitlement_2"
                    },
                    "reminder": {
                        "$ref": "#/components/schemas/Reminder"
                    },
                    "justifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Justification"
                        }
                    },
                    "user": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "EntitlementGroupSearch": {
                "type": "object",
                "properties": {
                    "accessInfo": {
                        "$ref": "#/components/schemas/AccessInfo_0"
                    },
                    "accessType": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Type of the access",
                        "items": {
                            "type": "string"
                        }
                    },
                    "application": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Unique identifier of the application",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sort": {
                        "$ref": "#/components/schemas/Sort"
                    }
                }
            },
            "BulkAccessOperation": {
                "required": [
                    "applicationId",
                    "entitlement",
                    "requestType"
                ],
                "type": "object",
                "properties": {
                    "beneficiary": {
                        "type": "string",
                        "description": "Beneficiary of the request"
                    },
                    "requestType": {
                        "type": "string",
                        "description": "Type of request",
                        "enum": [
                            "APPLICATION",
                            "PERMISSION",
                            "ROLE"
                        ]
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "ID of the application to request"
                    },
                    "entitlement": {
                        "type": "string",
                        "description": "ID of the entitlement to request"
                    }
                },
                "description": "Object that contains the information of the request operation"
            },
            "RequestPreview": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID"
                    },
                    "reference": {
                        "type": "string",
                        "description": "Reference"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status"
                    },
                    "requestor": {
                        "$ref": "#/components/schemas/User_1"
                    },
                    "beneficiary": {
                        "$ref": "#/components/schemas/User_1"
                    },
                    "nextApproverPersona": {
                        "type": "string",
                        "description": "Indicates who the next approver is"
                    },
                    "nextApprovers": {
                        "type": "array",
                        "description": "List of approvers",
                        "items": {
                            "$ref": "#/components/schemas/User_1"
                        }
                    },
                    "requestDate": {
                        "type": "string",
                        "description": "Creation date",
                        "format": "date-time"
                    },
                    "lastChangeDate": {
                        "type": "string",
                        "description": "Last change date",
                        "format": "date-time"
                    },
                    "lastChangeUserId": {
                        "type": "string",
                        "description": "ID of the user that made the last change"
                    },
                    "application": {
                        "$ref": "#/components/schemas/Application_1"
                    },
                    "operation": {
                        "type": "string",
                        "description": "Operation"
                    },
                    "entitlement": {
                        "$ref": "#/components/schemas/Entitlement_2"
                    },
                    "reminder": {
                        "$ref": "#/components/schemas/Reminder"
                    },
                    "approvalHistory": {
                        "type": "array",
                        "description": "User that performed the operation for a step of the request",
                        "items": {
                            "$ref": "#/components/schemas/ApprovalHistory"
                        }
                    },
                    "justifications": {
                        "type": "array",
                        "description": "List of justifications",
                        "items": {
                            "$ref": "#/components/schemas/Justification"
                        }
                    },
                    "user": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "User to be registered"
                    },
                    "requestNumber": {
                        "type": "string"
                    }
                },
                "description": "Preview of the request"
            },
            "ApproverRequestPreview": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID"
                    },
                    "reference": {
                        "type": "string",
                        "description": "Reference"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status"
                    },
                    "requestor": {
                        "$ref": "#/components/schemas/User_1"
                    },
                    "beneficiary": {
                        "$ref": "#/components/schemas/User_1"
                    },
                    "nextApproverPersona": {
                        "type": "string",
                        "description": "Indicates who the next approver is"
                    },
                    "nextApprovers": {
                        "type": "array",
                        "description": "List of approvers",
                        "items": {
                            "$ref": "#/components/schemas/User_1"
                        }
                    },
                    "requestDate": {
                        "type": "string",
                        "description": "Creation date",
                        "format": "date-time"
                    },
                    "lastChangeDate": {
                        "type": "string",
                        "description": "Last change date",
                        "format": "date-time"
                    },
                    "lastChangeUserId": {
                        "type": "string",
                        "description": "ID of the user that made the last change"
                    },
                    "application": {
                        "$ref": "#/components/schemas/Application_1"
                    },
                    "operation": {
                        "type": "string",
                        "description": "Operation"
                    },
                    "entitlement": {
                        "$ref": "#/components/schemas/Entitlement_2"
                    },
                    "reminder": {
                        "$ref": "#/components/schemas/Reminder"
                    },
                    "approvalHistory": {
                        "type": "array",
                        "description": "User that performed the operation for a step of the request",
                        "items": {
                            "$ref": "#/components/schemas/ApprovalHistory"
                        }
                    },
                    "justifications": {
                        "type": "array",
                        "description": "List of justifications",
                        "items": {
                            "$ref": "#/components/schemas/Justification"
                        }
                    },
                    "user": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "User to be registered"
                    },
                    "loggedUserStatus": {
                        "type": "string",
                        "description": "Logged user status",
                        "readOnly": true
                    },
                    "requestNumber": {
                        "type": "string"
                    }
                },
                "description": "Preview of the request for an approver"
            },
            "ListResponseCatalogApplication": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of objects filtered",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number to be returned",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Max elements to be returned",
                        "format": "int32"
                    },
                    "resources": {
                        "type": "array",
                        "description": "List of objects",
                        "items": {
                            "$ref": "#/components/schemas/CatalogApplication"
                        }
                    }
                }
            },
            "UpdateByApplication_0": {
                "required": [
                    "Operations"
                ],
                "type": "object",
                "properties": {
                    "Operations": {
                        "type": "array",
                        "description": "An array of operation objects to be performed.  Operation objects must have exactly one \"op\" member, whose value indicates the operation to perform. Its value must be one of \"add\", \"remove\", or \"replace\". Values are errors.",
                        "items": {
                            "$ref": "#/components/schemas/UpdateApplicationOperation_0"
                        }
                    }
                },
                "description": "JSON object used to update all the requests filtered by the application"
            },
            "EntitlementProperties_0": {
                "type": "object",
                "properties": {
                    "rightsRef": {
                        "type": "string",
                        "description": "Rights reference to lookup rights values.",
                        "readOnly": true,
                        "example": "permissionSet"
                    },
                    "rightsLabel": {
                        "type": "string",
                        "description": "Rights label to display on UI.",
                        "readOnly": true,
                        "example": "Rights"
                    },
                    "mandatory": {
                        "type": "string",
                        "description": "Indicates whether the entitlement is mandatory.",
                        "readOnly": true,
                        "example": "false"
                    },
                    "multivalue": {
                        "type": "string",
                        "description": "Indicate if the entitlement can have one or more right values",
                        "readOnly": true,
                        "example": "true"
                    },
                    "type": {
                        "type": "string",
                        "description": "Indicate the type of the right value",
                        "readOnly": true,
                        "example": "reference"
                    },
                    "canonicalValues": {
                        "type": "array",
                        "description": "Indicate the canonical values supported by permission",
                        "example": "[admin, user]",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "Application_1": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "User_1": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "userName": {
                        "type": "string"
                    },
                    "givenName": {
                        "type": "string"
                    },
                    "familyName": {
                        "type": "string"
                    },
                    "formatted": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "userType": {
                        "type": "string"
                    },
                    "realm": {
                        "type": "string"
                    }
                }
            },
            "AccessInfo_0": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the access. It must be unique for the application.",
                        "readOnly": true,
                        "example": "Basic access"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the access",
                        "readOnly": true,
                        "example": "Provides access to the application with basic authorization"
                    }
                },
                "description": "Rest representation for AccessInfo."
            },
            "AccessResult_0": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the entitlement",
                        "readOnly": true,
                        "example": "<unique identifier>"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the entitlement. It must be unique across the application",
                        "readOnly": true,
                        "example": "Test entitlement unique name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description",
                        "readOnly": true,
                        "example": "Test entitlement description"
                    },
                    "accessType": {
                        "type": "string",
                        "description": "Type of the entitlement",
                        "readOnly": true,
                        "enum": [
                            "permission",
                            "app role"
                        ]
                    },
                    "application": {
                        "type": "string",
                        "description": "Unique identifier of the application",
                        "readOnly": true,
                        "example": "<unique identifier>"
                    },
                    "hasRights": {
                        "type": "boolean",
                        "description": "Indicate whether the entitlement has rights.",
                        "readOnly": true
                    },
                    "properties": {
                        "$ref": "#/components/schemas/EntitlementProperties_0"
                    },
                    "applicationDetails": {
                        "$ref": "#/components/schemas/ApplicationDetails"
                    },
                    "accessStatus": {
                        "type": "string",
                        "description": "Indicate whether an entitlement is granted to the user or not",
                        "readOnly": true
                    }
                }
            },
            "UpdateApplicationOperation_0": {
                "required": [
                    "op",
                    "path"
                ],
                "type": "object",
                "properties": {
                    "op": {
                        "type": "string",
                        "description": "Operation to be performed",
                        "example": "replace",
                        "enum": [
                            "remove",
                            "replace"
                        ]
                    },
                    "path": {
                        "type": "string",
                        "description": "The string that contains an attribute path that describes the target of the operation. The \"path\" attribute is required for all operations. Examples of valid \"path\" specification formats include: <br> <br>     \"path\":\"application.name\" <br>     \"path\":\"application.description\" <br>     \"path\":\"application.icon\" <br>",
                        "example": "application.name",
                        "enum": [
                            "application",
                            "application.name",
                            "application.description",
                            "application.icon"
                        ]
                    },
                    "value": {
                        "type": "string",
                        "description": "The attribute content used for the operation. The \"value\" attribute is required for the \"replace\" operations. The \"value\" attribute is allowed with \"remove\" operations only when the \"path\" identifies  a single object (specified by a selection filter). <br> <br> The following example shows a put operation replacing a single value from \"application.name\"  and removing a single value from \"application.icon\": <br>  <table> <tr><td> {  \"Operations\":  [    {      \"op\":\"replace\",      \"path\":\"application.name\",      \"value\":\"Service Now Application\",    },    {      \"op\":\"remove\",      \"path\":\"application.icon\"     }  ]}</td></tr></table>",
                        "example": "Service Now"
                    }
                }
            },
            "Entitlement_2": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                }
            },
            "AccessDetailsResult_0": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Unique identifier of the entitlement",
                        "readOnly": true,
                        "example": "<unique identifier>"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the entitlement. It must be unique across the application",
                        "readOnly": true,
                        "example": "Test entitlement unique name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description",
                        "readOnly": true,
                        "example": "Test entitlement description"
                    },
                    "accessType": {
                        "type": "string",
                        "description": "Type of the entitlement",
                        "readOnly": true,
                        "enum": [
                            "permission",
                            "app role"
                        ]
                    },
                    "application": {
                        "type": "string",
                        "description": "Unique identifier of the application",
                        "readOnly": true,
                        "example": "<unique identifier>"
                    },
                    "hasRights": {
                        "type": "boolean",
                        "description": "Indicate whether the entitlement has rights.",
                        "readOnly": true
                    },
                    "properties": {
                        "$ref": "#/components/schemas/EntitlementProperties_0"
                    },
                    "applicationDetails": {
                        "$ref": "#/components/schemas/ApplicationDetails"
                    },
                    "accessStatus": {
                        "type": "string",
                        "description": "Indicate whether an entitlement is granted to the user or not",
                        "readOnly": true
                    },
                    "fixedRights": {
                        "type": "array",
                        "description": "Fixed right values of the entitlement",
                        "items": {
                            "$ref": "#/components/schemas/EntitlementRight"
                        }
                    },
                    "countChildren": {
                        "type": "integer",
                        "description": "Indicate the number of children for the entitlement",
                        "format": "int32",
                        "readOnly": true
                    },
                    "countChildrenPermissions": {
                        "type": "integer",
                        "description": "Number of permissions contained in the role",
                        "format": "int32",
                        "readOnly": true
                    }
                }
            },
            "V4PolicyMigrationRequestBody": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "creationTime": {
                        "type": "string"
                    },
                    "author": {
                        "type": "string"
                    },
                    "lastModifiedOn": {
                        "type": "string"
                    },
                    "lastModifiedBy": {
                        "type": "string"
                    },
                    "predefined": {
                        "type": "boolean"
                    },
                    "schemaVersion": {
                        "type": "string"
                    },
                    "validations": {
                        "$ref": "#/components/schemas/Validations_0"
                    },
                    "containsFirstFactor": {
                        "type": "boolean"
                    },
                    "enforcementType": {
                        "type": "string",
                        "enum": [
                            "fedSSO",
                            "nativeApp",
                            "nativeAppMobile",
                            "nativeAppWeb",
                            "adaptiveNativeAppWeb",
                            "adaptiveNativeAppMobile"
                        ]
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AccessPolicyRule_0"
                        }
                    }
                }
            },
            "PolicyValidations": {
                "type": "object",
                "properties": {
                    "subscriptionsNeeded": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "AttributeContext": {
                "type": "object",
                "properties": {
                    "appId": {
                        "type": "boolean"
                    },
                    "ipAddress": {
                        "type": "boolean"
                    },
                    "userAgent": {
                        "type": "boolean"
                    },
                    "devicePlatform": {
                        "type": "boolean"
                    },
                    "deviceCompliance": {
                        "type": "boolean"
                    },
                    "evaluationContext": {
                        "type": "boolean"
                    },
                    "evaluationData": {
                        "type": "boolean"
                    },
                    "evaluationDataType": {
                        "type": "boolean"
                    },
                    "originalGrantType": {
                        "type": "boolean"
                    },
                    "grantType": {
                        "type": "boolean"
                    },
                    "grantId": {
                        "type": "boolean"
                    },
                    "tenantId": {
                        "type": "boolean"
                    },
                    "tenantName": {
                        "type": "boolean"
                    }
                }
            },
            "ServerSideAction": {
                "type": "object",
                "properties": {
                    "actionId": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "description": "The server side actions for the policy"
            },
            "IntegrationConfig": {
                "type": "object",
                "properties": {
                    "get_links": {
                        "$ref": "#/components/schemas/Links1"
                    },
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "webhookId": {
                        "type": "string"
                    }
                }
            },
            "Self1": {
                "type": "object",
                "properties": {
                    "href": {
                        "type": "string"
                    }
                }
            },
            "AccessPolicyRequest": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the policy",
                        "example": "my custom access policy"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the policy",
                        "example": "custom access policy"
                    },
                    "containsFirstFactor": {
                        "type": "boolean",
                        "description": "Policy contains firstFactor rules or not.",
                        "example": true
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AccessPolicyRule_0"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/Metadata_0"
                    },
                    "validations": {
                        "$ref": "#/components/schemas/PolicyValidations"
                    }
                },
                "description": "The request payload to create or update a policy"
            },
            "PolicyMetadata": {
                "required": [
                    "state"
                ],
                "type": "object",
                "properties": {
                    "state": {
                        "type": "string",
                        "description": "The state of the revision",
                        "example": "ACTIVE",
                        "enum": [
                            "IDLE",
                            "DRAFT",
                            "DRY",
                            "ACTIVE"
                        ]
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema version of this policy",
                        "example": "urn:access:policy:5.0:schema"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "The revision number for this policy",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0
                    },
                    "label": {
                        "type": "string",
                        "description": "A label for the revision",
                        "example": "Initial revision"
                    },
                    "predefined": {
                        "type": "boolean",
                        "description": "Is the policy predefined",
                        "readOnly": true,
                        "example": false
                    },
                    "created": {
                        "type": "integer",
                        "description": "The time when this revision was created",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1603939885
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The user who created this revision",
                        "readOnly": true,
                        "example": "6000000ABC"
                    },
                    "lastActive": {
                        "type": "integer",
                        "description": "When was this revision's state last 'ACTIVE'",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1603939885
                    },
                    "modified": {
                        "type": "integer",
                        "description": "The time when this revision was last modified",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1603939885
                    },
                    "modifiedBy": {
                        "type": "string",
                        "description": "The user who last modified this revision",
                        "readOnly": true,
                        "example": "6000000ABC"
                    },
                    "scope": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Which scopes are permitted to apply this policy",
                        "example": "[\"administrators\"]",
                        "items": {
                            "type": "string",
                            "enum": [
                                "administrators",
                                "developers"
                            ]
                        }
                    },
                    "enforcementType": {
                        "type": "string",
                        "enum": [
                            "fedSSO",
                            "nativeApp",
                            "nativeAppMobile",
                            "nativeAppWeb",
                            "adaptiveNativeAppWeb",
                            "adaptiveNativeAppMobile"
                        ]
                    },
                    "referencedBy": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Which policies reference this policy",
                        "example": "[123, 456]",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "references": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Which policies does this policy reference",
                        "example": "[123, 456]",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "tenantDefaultPolicy": {
                        "type": "boolean",
                        "description": "should this policy be the default",
                        "example": false
                    }
                },
                "description": "Metadata for a policy"
            },
            "IntegrationAttributes": {
                "type": "object",
                "properties": {
                    "integrations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IntegrationConfig"
                        }
                    },
                    "totalCount": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "ReferencedRule": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "Links1": {
                "type": "object",
                "properties": {
                    "self": {
                        "$ref": "#/components/schemas/Self1"
                    }
                }
            },
            "PolicyContext": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "boolean"
                    },
                    "policyName": {
                        "type": "boolean"
                    },
                    "contextPolicyId": {
                        "type": "boolean"
                    },
                    "policyEnforcementType": {
                        "type": "boolean"
                    },
                    "contextPolicyName": {
                        "type": "boolean"
                    }
                }
            },
            "NotFound1": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageDescription": {
                        "type": "string",
                        "description": "Requester locale specific descriptive message.",
                        "example": "CSIBI1234X The resource cannot be found."
                    },
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIBI1234X"
                    }
                },
                "description": "The message response to the given request"
            },
            "ReferencedPolicies": {
                "type": "object",
                "properties": {
                    "policies": {
                        "type": "array",
                        "description": "Total number of attributes that are referenced int he access polcies.",
                        "example": "\"policies\": []",
                        "items": {
                            "$ref": "#/components/schemas/ReferencedPolicy"
                        }
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of access polcies referneced by a particular custom attribute.",
                        "format": "int32",
                        "readOnly": true,
                        "example": 1
                    }
                }
            },
            "ReferencedPolicy": {
                "required": [
                    "get_links",
                    "id",
                    "name",
                    "rules"
                ],
                "type": "object",
                "properties": {
                    "get_links": {
                        "$ref": "#/components/schemas/Links"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Referenced access policy Id",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1234546
                    },
                    "name": {
                        "type": "string",
                        "description": "Referenced access policy name",
                        "readOnly": true,
                        "example": "Sample policy"
                    },
                    "rules": {
                        "type": "array",
                        "description": "List of rules containing custom attributes.",
                        "example": "\"rules\":[]",
                        "items": {
                            "$ref": "#/components/schemas/ReferencedRule"
                        }
                    }
                }
            },
            "IntegrationProcessingEndpoint": {
                "type": "object",
                "properties": {
                    "redirectUri": {
                        "type": "string"
                    }
                }
            },
            "BadRequest1": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageDescription": {
                        "type": "string",
                        "description": "Requester locale specific descriptive message.",
                        "example": "CSIBI1234X The request cannot be processed because the request body contains improperly structured JSON."
                    },
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIBI1234X"
                    }
                },
                "description": "The message response to the given request"
            },
            "AccessPolicyCondition": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    }
                }
            },
            "AdaptiveContext": {
                "type": "object",
                "properties": {
                    "riskScore": {
                        "type": "boolean"
                    },
                    "decision": {
                        "type": "boolean"
                    },
                    "reason": {
                        "type": "boolean"
                    },
                    "reasonId": {
                        "type": "boolean"
                    },
                    "recommendation": {
                        "type": "boolean"
                    },
                    "userBehavioralScore": {
                        "type": "boolean"
                    },
                    "userBehavioralScorePassed": {
                        "type": "boolean"
                    },
                    "newDevice": {
                        "type": "boolean"
                    },
                    "riskyDevice": {
                        "type": "boolean"
                    },
                    "riskyConnection": {
                        "type": "boolean"
                    },
                    "country": {
                        "type": "boolean"
                    },
                    "city": {
                        "type": "boolean"
                    },
                    "isp": {
                        "type": "boolean"
                    },
                    "newLocation": {
                        "type": "boolean"
                    },
                    "behavioralAnomaly": {
                        "type": "boolean"
                    },
                    "continent": {
                        "type": "boolean"
                    },
                    "region": {
                        "type": "boolean"
                    },
                    "browser": {
                        "type": "boolean"
                    },
                    "browserVersion": {
                        "type": "boolean"
                    },
                    "os": {
                        "type": "boolean"
                    },
                    "ruleAction": {
                        "type": "boolean"
                    },
                    "trusteerAvailable": {
                        "type": "boolean"
                    },
                    "adaptiveRiskScoreBasedDecision": {
                        "type": "boolean"
                    },
                    "snippetId": {
                        "type": "boolean"
                    },
                    "previousSuccessfulMFA": {
                        "type": "boolean"
                    },
                    "remoteAccessToolIndication": {
                        "type": "boolean"
                    },
                    "deviceAuthenticationStatus": {
                        "type": "boolean"
                    },
                    "gdId": {
                        "type": "boolean"
                    }
                }
            },
            "EvaluationOutboundAttributesV1": {
                "type": "object",
                "properties": {
                    "sessionContext": {
                        "$ref": "#/components/schemas/SessionContext"
                    },
                    "attributeContext": {
                        "$ref": "#/components/schemas/AttributeContext"
                    },
                    "policyContext": {
                        "$ref": "#/components/schemas/PolicyContext"
                    },
                    "adaptiveContext": {
                        "$ref": "#/components/schemas/AdaptiveContext"
                    },
                    "customAttributes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ServerProcessingError": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageDescription": {
                        "type": "string",
                        "description": "Requester locale specific descriptive message.",
                        "example": "CSIBI1234X Your request can't be processed because of an internal error."
                    },
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIBI1234X"
                    }
                },
                "description": "The message response to the given request"
            },
            "SessionContext": {
                "type": "object",
                "properties": {
                    "uid": {
                        "type": "boolean"
                    },
                    "sessionId": {
                        "type": "boolean"
                    },
                    "emailAddr": {
                        "type": "boolean"
                    },
                    "mobileNumber": {
                        "type": "boolean"
                    },
                    "workNumber": {
                        "type": "boolean"
                    },
                    "deviceId": {
                        "type": "boolean"
                    },
                    "preferredUsername": {
                        "type": "boolean"
                    },
                    "userType": {
                        "type": "boolean"
                    },
                    "groupIds": {
                        "type": "boolean"
                    }
                }
            },
            "Links": {
                "type": "object",
                "properties": {
                    "self": {
                        "$ref": "#/components/schemas/Self_0"
                    }
                }
            },
            "Forbidden1": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageDescription": {
                        "type": "string",
                        "description": "Requester locale specific descriptive message.",
                        "example": "CSIBI1234X The authenticated user does not have permissions to perform the requested operation."
                    },
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIBI1234X"
                    }
                },
                "description": "The message response to the given request"
            },
            "Policy_0": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The policy identifier",
                        "format": "int64",
                        "readOnly": true,
                        "example": 123456
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the policy",
                        "example": "my custom access policy"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the policy",
                        "example": "custom access policy"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AccessPolicyRule_0"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PolicyMetadata"
                    },
                    "validations": {
                        "$ref": "#/components/schemas/PolicyValidations"
                    },
                    "requiredSubscriptions": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "A policy"
            },
            "Custom_Attributes_and_Supported_Attributes_Referenced_in_Integration_Configs": {
                "type": "object",
                "properties": {
                    "get_embedded": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/IntegrationAttributes"
                        },
                        "description": "Map of custom attributes and supported attributes referenced Integration configs.",
                        "example": "{ \"id1\" : { \"integrations\": []} } "
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of attributes that are referenced in the integration configs.",
                        "format": "int32",
                        "readOnly": true,
                        "example": 1
                    }
                },
                "description": "Maps of Custom Attributes and Supported Attributes Referenced in Integration Configs."
            },
            "AccessPolicyRule_0": {
                "required": [
                    "alwaysRun",
                    "firstFactor",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The rule identifier",
                        "readOnly": true,
                        "example": "123456"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the rule",
                        "example": "My rule"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the rule",
                        "example": "My rule"
                    },
                    "alwaysRun": {
                        "type": "boolean",
                        "description": "Should this rule always run",
                        "example": true
                    },
                    "firstFactor": {
                        "type": "boolean",
                        "description": "Is this a first factor rule",
                        "example": true
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AccessPolicyCondition"
                        }
                    },
                    "result": {
                        "$ref": "#/components/schemas/AccessPolicyResult_0"
                    }
                },
                "description": "An access policy rule"
            },
            "Metadata_0": {
                "required": [
                    "state"
                ],
                "type": "object",
                "properties": {
                    "state": {
                        "type": "string",
                        "description": "The state of the revision",
                        "example": "ACTIVE",
                        "enum": [
                            "IDLE",
                            "DRAFT",
                            "DRY",
                            "ACTIVE"
                        ]
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema version of this policy",
                        "example": "urn:access:policy:5.0:schema"
                    },
                    "label": {
                        "type": "string",
                        "description": "A label for the revision",
                        "example": "Initial revision"
                    },
                    "scope": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Which scopes are permitted to apply this policy",
                        "example": "[\"administrators\"]",
                        "items": {
                            "type": "string",
                            "enum": [
                                "administrators",
                                "developers"
                            ]
                        }
                    },
                    "enforcementType": {
                        "type": "string",
                        "description": "The enforcement type of the policy",
                        "example": "fedSSO",
                        "enum": [
                            "fedSSO",
                            "nativeApp",
                            "nativeAppMobile",
                            "nativeAppWeb",
                            "adaptiveNativeAppWeb",
                            "adaptiveNativeAppMobile"
                        ]
                    },
                    "evaluationContext": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Sub-policy evaluation details",
                        "example": "{\"landing\":\"12345665\"}"
                    },
                    "tenantDefaultPolicy": {
                        "type": "boolean",
                        "description": "should this policy be the default",
                        "example": false
                    }
                },
                "description": "Metadata for a access policy"
            },
            "Forbidden_3": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageDescription": {
                        "type": "string",
                        "description": "Requester locale specific descriptive message.",
                        "example": "CSIBI1234X The authenticated user does not have permissions to perform the requested operation."
                    },
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIBI1234X"
                    }
                },
                "description": "The message response to the given request"
            },
            "Attribute1_0": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                }
            },
            "Self_0": {
                "required": [
                    "href"
                ],
                "type": "object",
                "properties": {
                    "href": {
                        "type": "string",
                        "description": "URL to get the referenced access policy.",
                        "readOnly": true,
                        "example": "/ui/admin/accesspolicy/399844"
                    }
                }
            },
            "Validations_0": {
                "type": "object",
                "properties": {
                    "subscriptionsNeeded": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "AccessPolicyResult_0": {
                "required": [
                    "authnMethods"
                ],
                "type": "object",
                "properties": {
                    "action": {
                        "type": "string",
                        "enum": [
                            "ACTION_DENY",
                            "ACTION_ALLOW",
                            "ACTION_MFA_ALWAYS",
                            "ACTION_MFA_PER_SESSION",
                            "ACTION_DENY_OVERRIDE",
                            "ACTION_MFA_OVERRIDE",
                            "ACTION_ALLOW_OVERRIDE",
                            "ACTION_DENY_AND_REDIRECT",
                            "ACTION_REDIRECT",
                            "ACTION_CONTINUE"
                        ]
                    },
                    "serverSideActions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServerSideAction"
                        }
                    },
                    "authnMethods": {
                        "type": "array",
                        "description": "The authentication methods",
                        "example": "[\"anyfactor\"]",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "The result of an access policy"
            },
            "Unauthorized_1": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageDescription": {
                        "type": "string",
                        "description": "Requester locale specific descriptive message.",
                        "example": "CSIBI1234X The access token in the request is not valid."
                    },
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIBI1234X"
                    }
                },
                "description": "The message response to the given request"
            },
            "PolicyVaultList_0": {
                "required": [
                    "count",
                    "limit",
                    "page",
                    "total"
                ],
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "description": "The total number of resources found",
                        "format": "int32",
                        "readOnly": true,
                        "example": 1
                    },
                    "count": {
                        "type": "integer",
                        "description": "The  number of resources returned",
                        "format": "int32",
                        "readOnly": true,
                        "example": 1
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The limit of the number of resources",
                        "format": "int32",
                        "readOnly": true,
                        "example": 200
                    },
                    "page": {
                        "type": "integer",
                        "description": "The current page of results",
                        "format": "int32",
                        "readOnly": true,
                        "example": 0
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Policy_0"
                        }
                    }
                },
                "description": "A paginated list of policies"
            },
            "Third_Party_Risk_Integration_Configuration": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "webhookId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "referenceId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "created": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "evaluationOutboundAttributes": {
                        "$ref": "#/components/schemas/EvaluationOutboundAttributesV1"
                    },
                    "supportedAttributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Attribute1_0"
                        }
                    },
                    "integrationProcessingEndpoint": {
                        "$ref": "#/components/schemas/IntegrationProcessingEndpoint"
                    },
                    "enabled": {
                        "type": "boolean"
                    }
                },
                "description": "A configuration to enable third party risk evaluations"
            },
            "BadRequest_3": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageDescription": {
                        "type": "string",
                        "description": "Requester locale specific descriptive message.",
                        "example": "CSIBI1234X The request cannot be processed because the request body contains improperly structured JSON."
                    },
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIBI1234X"
                    }
                },
                "description": "The message response to the given request"
            },
            "Custom_Attributes_Referenced_Policies": {
                "required": [
                    "totalCount"
                ],
                "type": "object",
                "properties": {
                    "_embedded": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ReferencedPolicies"
                        }
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Total number of attributes that are referenced int he access polcies.",
                        "format": "int32",
                        "readOnly": true,
                        "example": 1
                    }
                },
                "description": "Map of Custom Attributes Referenced Policies."
            },
            "NotFound_2": {
                "required": [
                    "messageDescription",
                    "messageId"
                ],
                "type": "object",
                "properties": {
                    "messageDescription": {
                        "type": "string",
                        "description": "Requester locale specific descriptive message.",
                        "example": "CSIBI1234X The resource cannot be found."
                    },
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier.",
                        "example": "CSIBI1234X"
                    }
                },
                "description": "The message response to the given request"
            },
            "ClientAuthentication": {
                "type": "object",
                "properties": {
                    "client_id": {
                        "description": "The OIDC client ID that is required when the basic authorization header is not set.",
                        "type": "string"
                    },
                    "client_secret": {
                        "description": "The OIDC client secret that is required when the basic authorization header is not set and the client is not a public client.",
                        "type": "string"
                    },
                    "client_assertion": {
                        "description": "The JWT assertion being used to authenticate the client.",
                        "type": "string"
                    },
                    "client_assertion_type": {
                        "description": "The format of client assertion.",
                        "type": "string",
                        "enum": [
                            "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
                        ]
                    }
                }
            },
            "CommonAuthorizeRequest": {
                "description": "The request payload for /authorize and /par endpoints.",
                "type": "object",
                "properties": {
                    "response_type": {
                        "description": "A space-delimited list of response types. Valid response types are: code, token, id_token.",
                        "type": "string"
                    },
                    "response_mode": {
                        "description": "The response mode. It defaults to query for the authorization_code flow, and to fragment for the implicit or hybrid flow.",
                        "type": "string",
                        "enum": [
                            "query",
                            "fragment",
                            "form_post",
                            "query.jwt",
                            "fragment.jwt",
                            "form_post.jwt"
                        ]
                    },
                    "redirect_uri": {
                        "description": "The redirect URI.",
                        "type": "string"
                    },
                    "state": {
                        "description": "The state. An opaque value that is used to maintain the state between the request and the callback.",
                        "type": "string"
                    },
                    "nonce": {
                        "description": "Nonce. The string value that is used to associate a client session with an ID Token to mitigate replay attacks. This attribute is required when the response type includes id_token.",
                        "type": "string"
                    },
                    "prompt": {
                        "description": "Whether the user is prompted for reauthentication. When the value is \"login\", the user is reauthenticated. When the value is \"none\", the user is not be prompted for authentication.",
                        "type": "string",
                        "enum": [
                            "none",
                            "login"
                        ]
                    },
                    "max_age": {
                        "description": "Maximum authentication age. Specifies the allowable elapsed time, in seconds, since the last time the user was authenticated.",
                        "type": "string"
                    },
                    "code_challenge": {
                        "description": "Code challenge. Required if the OIDC client is configured to require proof key for code exchange (PKCE).",
                        "type": "string"
                    },
                    "code_challenge_method": {
                        "description": "Code challenge method for PKCE. Defaults to plain if not specified.",
                        "type": "string",
                        "enum": [
                            "plain",
                            "S256"
                        ]
                    },
                    "scope": {
                        "description": "A space-delimited list of scopes that are associated with this authorization request.",
                        "type": "string"
                    },
                    "claims": {
                        "description": "The JSON that contains the claims for id_token or userinfo endpoint.",
                        "type": "string"
                    },
                    "login_hint": {
                        "description": "Login hint. Value to use when prompting the user for login. Optional for OIDC request. This value is the username as a string (e.g. john@ibm.com).",
                        "type": "string"
                    },
                    "request": {
                        "description": "The request object in the form of a signed JWT. This can be used as an alternative to sending the individual properties in the form.",
                        "type": "string"
                    },
                    "request_uri": {
                        "description": "The URI referencing the request object.",
                        "type": "string"
                    }
                }
            },
            "AuthorizeRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "required": [
                            "client_id"
                        ],
                        "properties": {
                            "client_id": {
                                "description": "The OIDC client ID.",
                                "type": "string"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/CommonAuthorizeRequest"
                    }
                ]
            },
            "PushAuthorizeRequest": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CommonAuthorizeRequest"
                    },
                    {
                        "$ref": "#/components/schemas/ClientAuthentication"
                    }
                ]
            },
            "TokenRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "required": [
                            "grant_type"
                        ],
                        "properties": {
                            "grant_type": {
                                "description": "The grant type.",
                                "type": "string",
                                "enum": [
                                    "client_credentials",
                                    "authorization_code",
                                    "refresh_token",
                                    "password",
                                    "urn:ietf:params:oauth:grant-type:token-exchange"
                                ]
                            },
                            "scope": {
                                "description": "A space-delimited list of scopes that are associated with generated access token.",
                                "type": "string"
                            },
                            "code": {
                                "description": "The authorization code. It is only required for \"authorization_code\" grant types.",
                                "type": "string"
                            },
                            "code_verifier": {
                                "description": "The code verifier. This is used to verify the code challenge that was sent at the authorize endpoint. Required if the OIDC client is configured to require proof key for code exchange (PKCE)",
                                "type": "string"
                            },
                            "redirect_uri": {
                                "description": "The redirect URI. It is only required for \"authorization_code\" grant types.",
                                "type": "string"
                            },
                            "refresh_token": {
                                "description": "The refresh token. It is only required for \"refresh_token\" grant types.",
                                "type": "string"
                            },
                            "username": {
                                "description": "The user credential of resource owner. It is only required for \"password\" grant types.",
                                "type": "string"
                            },
                            "password": {
                                "description": "The password credential of resource owner. It is only required for \"password\" grant types.",
                                "type": "string"
                            },
                            "subject_token": {
                                "description": "The token identifying the subject for a token exchange flow.",
                                "type": "string"
                            },
                            "subject_token_type": {
                                "description": "The token type of the subject_token.",
                                "type": "string"
                            },
                            "actor_token": {
                                "description": "The token identifying the acting party in a token exchange flow.",
                                "type": "string"
                            },
                            "actor_token_type": {
                                "description": "The token type of the actor_token."
                            },
                            "requested_token_type": {
                                "description": "The type of token that should be returned as part of the token exchange flow.",
                                "type": "string"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/ClientAuthentication"
                    }
                ]
            },
            "IntrospectRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "required": [
                            "token"
                        ],
                        "properties": {
                            "token": {
                                "description": "The token that is being introspected.",
                                "type": "string"
                            },
                            "token_type_hint": {
                                "description": "The token type. This attribute is an optional hint about the token that is being introspected.",
                                "type": "string"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/ClientAuthentication"
                    }
                ]
            },
            "RevokeRequest": {
                "allOf": [
                    {
                        "type": "object",
                        "required": [
                            "token"
                        ],
                        "properties": {
                            "token": {
                                "description": "The token that is being revoked.",
                                "type": "string"
                            },
                            "token_type_hint": {
                                "description": "The token type. This attribute is an optional hint about the token that is being revoked.",
                                "type": "string"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/ClientAuthentication"
                    }
                ]
            },
            "MetadataResponse": {
                "description": "ProviderMetadata defines the metadata of the provider",
                "type": "object",
                "required": [
                    "issuer",
                    "authorization_endpoint"
                ],
                "properties": {
                    "issuer": {
                        "type": "string",
                        "description": "The OpenID provider issuer identifier.",
                        "example": "https://DefaultTenant/oauth2"
                    },
                    "authorization_endpoint": {
                        "type": "string",
                        "description": "The URL of the OpenID provider authorization endpoint.",
                        "example": "https://DefaultTenant/oauth2/authorize"
                    },
                    "token_endpoint": {
                        "type": "string",
                        "description": "The URL of the OpenID provider token endpoint.",
                        "example": "https://DefaultTenant/oauth2/token"
                    },
                    "introspection_endpoint": {
                        "type": "string",
                        "description": "The URL of the OpenID provider introspect endpoint.",
                        "example": "https://DefaultTenant/oauth2/introspect"
                    },
                    "userinfo_endpoint": {
                        "type": "string",
                        "description": "The URL of the OpenID provider userinfo endpoint.",
                        "example": "https://DefaultTenant/oauth2/userinfo"
                    },
                    "revocation_endpoint": {
                        "type": "string",
                        "description": "The URL of the OpenID provider revoke endpoint.",
                        "example": "https://DefaultTenant/oauth2/revoke"
                    },
                    "device_authorization_endpoint": {
                        "type": "string",
                        "description": "The URL of the OpenID provider device authorization endpoint."
                    },
                    "user_authorization_endpoint": {
                        "type": "string",
                        "description": "The URL of the OpenID provider user authorization endpoint."
                    },
                    "pushed_authorization_request_endpoint": {
                        "type": "string",
                        "description": "The URL of the OpenID provider pushed authorization request endpoint.",
                        "example": "https://DefaultTenant/oauth2/par"
                    },
                    "registration_endpoint": {
                        "type": "string",
                        "description": "The URL of the OpenID provider dynamic client registration endpoint.",
                        "example": "https://DefaultTenant/oauth2/register"
                    },
                    "jwks_uri": {
                        "type": "string",
                        "description": "The URL of the OpenID provider JSON Web Key Set endpoint.",
                        "example": "https://DefaultTenant/oauth2/jwks"
                    },
                    "response_types_supported": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The JSON array that contains a list of the response_type values that this OpenID provider supports.",
                        "example": [
                            "none",
                            "code",
                            "token",
                            "id_token",
                            "code token",
                            "code id_token",
                            "token id_token",
                            "code token id_token"
                        ]
                    },
                    "response_modes_supported": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The JSON array that contains a list of the response_mode values that this OpenID provider supports.",
                        "example": [
                            "query",
                            "fragment",
                            "form_post",
                            "query.jwt",
                            "fragment.jwt",
                            "form_post.jwt"
                        ]
                    },
                    "grant_types_supported": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The JSON array that contains a list of the grant_type values that this OpenID provider supports.",
                        "example": [
                            "authorization_code",
                            "implicit",
                            "password",
                            "refresh_token",
                            "client_credentials"
                        ]
                    },
                    "token_endpoint_auth_methods_supported": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The JSON array that contains a list of client authentication methods that are supported by this token endpoint.",
                        "example": [
                            "client_secret_basic",
                            "client_secret_post",
                            "private_key_jwt",
                            "tls_client_auth"
                        ]
                    },
                    "id_token_signing_alg_values_supported": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The JSON array that contains a list of the JSON Web Signature (JWS) signing algorithms that are supported by the OpenID provider for the ID token to encode the claims in a JSON Web Token.",
                        "example": [
                            "RS256",
                            "RS384",
                            "RS512",
                            "PS256",
                            "PS384",
                            "PS512",
                            "ES256",
                            "ES384",
                            "ES512"
                        ]
                    },
                    "id_token_encryption_alg_values_supported": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The JSON array that contains a list of the JSON Web Encryption (JWE) algorithms that are supported by the OpenID provider for the ID token to encode the claims in a JSON Web Token.",
                        "example": [
                            "none",
                            "RSA-OAEP",
                            "RSA-OAEP-256"
                        ]
                    },
                    "id_token_encryption_enc_values_supported": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The JSON array that contains a list of the JSON Web Encryption (JWE) encryption algorithms that are supported by the OpenID provider for the ID token to encode the claims in a JSON Web Token.",
                        "example": [
                            "none",
                            "A128GCM",
                            "A192GCM",
                            "A256GCM"
                        ]
                    },
                    "userinfo_signing_alg_values_supported": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The JSON array that contains a list of the JSON Web Signature (JWS) signing algorithms that are supported by the UserInfo endpoint to encode the claims in a JSON Web Token.",
                        "example": [
                            "none"
                        ]
                    },
                    "userinfo_encryption_alg_values_supported": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The JSON array that contains a list of the JSON Web Encryption (JWE) algorithms that are supported by the UserInfo endpoint to encode the claims in a JSON Web Token.",
                        "example": [
                            "none"
                        ]
                    },
                    "userinfo_encryption_enc_values_supported": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The JSON array that contains a list of the JSON Web Encryption (JWE) encryption algorithms that are supported by the UserInfo endpoint to encode the claims in a JSON Web Token.",
                        "example": [
                            "none"
                        ]
                    },
                    "request_object_signing_alg_values_supported": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The JSON array that contains a list of the JSON Web Signature (JWS) signing algorithms that are supported by the OpenID provider for request objects.",
                        "example": [
                            "none"
                        ]
                    },
                    "request_object_encryption_alg_values_supported": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The JSON array that contains a list of the JSON Web Encryption (JWE) algorithms that are supported by the OpenID provider for request objects.",
                        "example": [
                            "none"
                        ]
                    },
                    "request_object_encryption_enc_values_supported": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The JSON array that contains a list of the JSON Web Encryption (JWE) encryption algorithms that are supported by the OpenID provider for request objects.",
                        "example": [
                            "none"
                        ]
                    },
                    "subject_types_supported": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The JSON array containing a list of the Subject Identifier types that this OP supports.",
                        "example": [
                            "public"
                        ]
                    },
                    "scopes_supported": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The JSON array that contains a list of the scope values that this server supports.",
                        "example": [
                            "openid",
                            "profile",
                            "email",
                            "phone",
                            "address"
                        ]
                    },
                    "claims_supported": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The JSON array that contains a list of the names of the claims that the OpenID provider might be able to supply values for.",
                        "example": [
                            "groupIds",
                            "uid",
                            "family_name",
                            "tenantId",
                            "employee_id",
                            "upn",
                            "preferred_username",
                            "email",
                            "given_name",
                            "mobile_number",
                            "job_title",
                            "realmName",
                            "name",
                            "department",
                            "iss"
                        ]
                    },
                    "claim_types_supported": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The JSON array that contains a list of the claim types that the OpenID provider supports.",
                        "example": [
                            "normal"
                        ]
                    },
                    "claims_parameter_supported": {
                        "type": "boolean",
                        "description": "A Boolean value that specifies whether the OpenID provider supports the use the claims parameter.",
                        "example": true
                    },
                    "request_parameter_supported": {
                        "type": "boolean",
                        "description": "A Boolean value that specifies whether the OpenID provider supports the use the request parameter.",
                        "example": true
                    },
                    "request_uri_parameter_supported": {
                        "type": "boolean",
                        "description": "A Boolean value that specifies whether the OpenID provider supports the use of the request_uri parameter.",
                        "example": false
                    },
                    "require_request_uri_registration": {
                        "type": "boolean",
                        "description": "A Boolean value that specifies whether the OpenID provider requires that all request_uri values be pre-registered before use. These values are registered by using the request_uris registration parameter.",
                        "example": false
                    },
                    "tls_client_certificate_bound_access_tokens": {
                        "type": "boolean",
                        "example": true
                    },
                    "mtls_endpoint_aliases": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "ClientMetadata": {
                "required": [
                    "redirect_uris"
                ],
                "type": "object",
                "properties": {
                    "access_policy": {
                        "type": "string",
                        "description": "Access Policy ID."
                    },
                    "all_users_entitled": {
                        "type": "boolean",
                        "description": "Set to true if all users are entitled to use this client."
                    },
                    "api_entitlements": {
                        "type": "array",
                        "description": "List of API entitlements.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "authorization_encrypted_response_alg": {
                        "type": "string",
                        "description": "JWE 'alg' algorithm required for encrypting authorization responses."
                    },
                    "authorization_encrypted_response_enc": {
                        "type": "string",
                        "description": "JWE 'enc' algorithm required for encrypting authorization responses."
                    },
                    "authorization_signed_response_alg": {
                        "type": "string",
                        "description": "JWS 'alg' required for signing authorization responses."
                    },
                    "authorize_request_mapping": {
                        "type": "array",
                        "description": "Configuration to add request parameters for authorize endpoint",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "The name of the target parameter. 'context' sets the rule for authorization context. 'scope' sets the rule for the Consent request. 'intentId' sets the rule for the Open Banking intent ID.",
                                    "enum": [
                                        "context",
                                        "scope",
                                        "intentId"
                                    ]
                                },
                                "custom": {
                                    "type": "string",
                                    "description": "The custom rule that defines the value of the target parameter to be set."
                                }
                            }
                        }
                    },
                    "authorize_response_mapping": {
                        "type": "array",
                        "description": "Configuration to add response parameters for authorize endpoint",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "The name of the target parameter."
                                },
                                "custom": {
                                    "type": "string",
                                    "description": "The custom rule that defines the value of the target parameter to be set."
                                },
                                "type": {
                                    "type": "string",
                                    "description": "The type of the target parameter. Allowed values are 'header' or 'parameter'.",
                                    "enum": [
                                        "header",
                                        "parameter"
                                    ]
                                }
                            }
                        }
                    },
                    "client_name": {
                        "type": "string",
                        "description": "Client name."
                    },
                    "consent_action": {
                        "type": "string",
                        "description": "Request for user consent.",
                        "enum": [
                            "never_prompt",
                            "always_prompt"
                        ]
                    },
                    "enforce_pkce": {
                        "type": "boolean",
                        "description": "Enforce the usage of PKCE."
                    },
                    "grant_types": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "description": "Array of grant types that the client may use. The allowed grant types are 'authorization_code', 'implicit', 'password', and 'refresh_token'."
                    },
                    "id_token_encrypted_response_alg": {
                        "type": "string",
                        "description": "JWE alg algorithm required for encrypting the ID Token assigned to this client."
                    },
                    "id_token_encrypted_response_enc": {
                        "type": "string",
                        "description": "JWE enc algorithm required for encrypting the ID Token assigned to this client."
                    },
                    "id_token_signed_response_alg": {
                        "type": "string",
                        "description": "Token signing algorithm required for signing the ID token issued for this client."
                    },
                    "identity_providers": {
                        "type": "array",
                        "description": "List of identity providers.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "initiate_login_uri": {
                        "type": "string",
                        "description": "URI that uses the https scheme that a third party can use to initiate a login by the RP."
                    },
                    "jwks_uri": {
                        "type": "string",
                        "description": "URL referencing the client's JSON Web Key Set document representing the client's public keys."
                    },
                    "redirect_uris": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "description": "Array of redirection URIs for use in redirect-based flows."
                    },
                    "request_object_check_expiry": {
                        "type": "boolean",
                        "description": "Flag to indicate whether expiry claims should be set in the request object."
                    },
                    "request_object_encryption_alg": {
                        "type": "string",
                        "description": "JWE 'alg' algorithm the RP is declaring that it can use for encrypting Request Objects sent to the OP."
                    },
                    "request_object_encryption_enc": {
                        "type": "string",
                        "description": "JWE 'enc' algorithm the RP is declaring that it can use for encrypting Request Objects sent to the OP."
                    },
                    "request_object_lifetime": {
                        "type": "integer",
                        "description": "The lifetime of the request object."
                    },
                    "request_object_parameters_only": {
                        "type": "boolean",
                        "description": "Flag to suggest whether all the request parameters should only be in the request object."
                    },
                    "request_object_signing_alg": {
                        "type": "string",
                        "description": "JWS 'alg' algorithm that MUST be used for signing Request Objects sent to the OP."
                    },
                    "require_pushed_authorization_requests": {
                        "type": "boolean",
                        "description": "Flag to indicate whether pushed authorization request (PAR) is required."
                    },
                    "request_uris": {
                        "type": "array",
                        "description": "Array of request_uri values that are pre-registered by the RP for use at the OP.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "response_types": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "description": "Array of the OAuth 2.0 response types that the client may use."
                    },
                    "restrict_api_entitlements": {
                        "type": "boolean",
                        "description": "Flag to indicate whether API entitlements should be restricted."
                    },
                    "scope": {
                        "description": "A space-delimited string of allowed scopes.",
                        "type": "string"
                    },
                    "software_id": {
                        "type": "string",
                        "description": "A unique identifier string that identifies the client software to be digitally registered."
                    },
                    "software_statement": {
                        "type": "string",
                        "description": "A signed JWT that asserts metadata values about the client software as a bundle."
                    },
                    "theme_id": {
                        "type": "string",
                        "description": "The theme ID, if any."
                    },
                    "tls_client_auth_san_dns": {
                        "type": "string",
                        "description": "The expected DNS name SAN entry in the certificate that the client will use in mutual TLS authentication."
                    },
                    "tls_client_auth_subject_dn": {
                        "type": "string",
                        "description": "The expected subject distinguished name of the certificate that the client will use in mutual TLS authentication."
                    },
                    "tls_client_auth_san_email": {
                        "type": "string",
                        "description": "The expected email address SAN entry in the certificate that the client will use in mutual TLS authentication."
                    },
                    "tls_client_auth_san_ip": {
                        "type": "string",
                        "description": "The expected IP address SAN entry in the certificate that the client will use in mutual TLS authentication."
                    },
                    "tls_client_auth_san_uri": {
                        "type": "string",
                        "description": "The expected URI SAN entry in the certificate that the client will use in mutual TLS authentication."
                    },
                    "tls_client_certificate_bound_access_tokens": {
                        "type": "boolean",
                        "description": "Indicates if certificate binding for access token is required."
                    },
                    "token_endpoint_auth_method": {
                        "type": "string",
                        "description": "The client authentication method for the token endpoint.",
                        "enum": [
                            "default",
                            "client_secret_basic",
                            "client_secret_post",
                            "private_key_jwt",
                            "tls_client_auth"
                        ]
                    },
                    "token_endpoint_auth_signing_alg": {
                        "type": "string",
                        "description": "JWS 'alg' algorithm that must be used for signing the JWT used to authenticate the client at the Token Endpoint for the 'private_key_jwt' authentication methods."
                    },
                    "token_endpoint_auth_single_use_jti": {
                        "type": "boolean",
                        "description": "Flag to indicate whether the JTI for token endpoint is single-use only."
                    },
                    "token_request_mapping": {
                        "type": "array",
                        "description": "Configuration to add request parameters for token endpoint",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "The name of the target parameter."
                                },
                                "custom": {
                                    "type": "string",
                                    "description": "The custom rule that defines the value of the target parameter to be set."
                                }
                            }
                        }
                    },
                    "token_response_mapping": {
                        "type": "array",
                        "description": "Configuration to add response parameters for token endpoint",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "The name of the target parameter."
                                },
                                "custom": {
                                    "type": "string",
                                    "description": "The custom rule that defines the value of the target parameter to be set."
                                },
                                "type": {
                                    "type": "string",
                                    "description": "The type of the target parameter. Allowed values are 'header' or 'parameter'.",
                                    "enum": [
                                        "header",
                                        "parameter"
                                    ]
                                }
                            }
                        }
                    },
                    "userinfo_encrypted_response_alg": {
                        "type": "string",
                        "description": "Userinfo response JWT encryption algorithm."
                    },
                    "userinfo_encrypted_response_enc": {
                        "type": "string",
                        "description": "Userinfo response JWT encryption content algorithm."
                    },
                    "userinfo_signed_response_alg": {
                        "type": "string",
                        "description": "Userinfo response JWT signing algorithm."
                    }
                }
            },
            "DynamicClientRequest": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ClientMetadata"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "client_id": {
                                "type": "string",
                                "description": "Client ID. Will be automatically generated if not provided."
                            },
                            "client_secret": {
                                "type": "string",
                                "description": "Client secret. Will be automatically generated if not provided."
                            },
                            "id_token_claims": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "List of claims for id_token and user information."
                            },
                            "token_claims": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "List of claims for introspect and JWT access token."
                            }
                        }
                    }
                ]
            },
            "IntrospectResponse_1": {
                "required": [
                    "active"
                ],
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "The Boolean indicator that indicates whether the presented token is currently active."
                    },
                    "client_id": {
                        "type": "string",
                        "description": "The OIDC client ID."
                    },
                    "userType": {
                        "enum": [
                            "regular",
                            "federated"
                        ],
                        "type": "string",
                        "example": "regular",
                        "description": "The user type that is associated with the subject of this token. This attribute is only available for grants other than client_credentials grants."
                    },
                    "preferred_username": {
                        "type": "string",
                        "description": "The preferred user name that is associated with the subject of this token. This attribute is only available for grants other than client_credentials grants."
                    },
                    "uniqueSecurityName": {
                        "type": "string",
                        "description": "The unique security name of the token."
                    },
                    "token_type": {
                        "enum": [
                            "access_token",
                            "refresh_token"
                        ],
                        "type": "string",
                        "example": "access_token",
                        "description": "The type of the token."
                    },
                    "realmName": {
                        "type": "string",
                        "description": "The realm name that is associated with this token."
                    },
                    "ext": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object",
                        "description": "The extension map of attributes that are associated with this token."
                    },
                    "groupIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "description": "The list of group IDs that are associated with the subject of this token. This attribute is only available for grants other than client_credentials grants."
                    },
                    "exp": {
                        "type": "integer",
                        "description": "The timestamp, in the POSIX time format, indicating when this token will expire.",
                        "format": "int32"
                    },
                    "iat": {
                        "type": "integer",
                        "description": "The time stamp, in the POSIX time format, that indicates when this token was originally issued.",
                        "format": "int32"
                    },
                    "scope": {
                        "type": "string",
                        "description": "A space-delimited list of scopes that are associated with this token."
                    },
                    "grant_type": {
                        "type": "string",
                        "description": "The grant type that is used to request this token."
                    },
                    "sub": {
                        "type": "string",
                        "description": "The subject of the token. For client_credentials grants, the subject is the client_id. For other grants, the subject is the unique user identifier."
                    }
                }
            },
            "DynamicClientResponse_0": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ClientMetadata"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "client_id": {
                                "description": "Client identifier.",
                                "type": "string"
                            },
                            "client_id_issued_at": {
                                "description": "Time at which the client identifier was assigned.",
                                "type": "string"
                            },
                            "client_secret": {
                                "description": "Client secret.",
                                "type": "string"
                            },
                            "client_secret_expires_at": {
                                "description": "Time at which the client secret expires.",
                                "type": "string"
                            },
                            "id_token_map": {
                                "type": "array",
                                "description": "The attributes that should be present in the generated ID token.",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "description": "The name of the attribute to be shown in the ID Token."
                                        },
                                        "attribute_id": {
                                            "type": "string",
                                            "description": "The ID of the attribute to retrieve the value for the ID Token from."
                                        }
                                    }
                                }
                            },
                            "registration_access_token": {
                                "type": "string",
                                "description": "Access token that is used to run subsequent operations at the client configuration endpoint."
                            },
                            "registration_client_uri": {
                                "type": "string",
                                "description": "URL of the client configuration endpoint for this client."
                            },
                            "token_map": {
                                "type": "array",
                                "description": "List of claims for introspect and JWT access token.",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "description": "The name of the attribute to be shown in the token."
                                        },
                                        "attribute_id": {
                                            "type": "string",
                                            "description": "The ID of the attribute to retrieve the value for the token from."
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            },
            "Error_0": {
                "type": "object",
                "required": [
                    "error"
                ],
                "properties": {
                    "error": {
                        "type": "string",
                        "description": "The OIDC error."
                    },
                    "error_description": {
                        "type": "string",
                        "description": "The OIDC error description."
                    }
                }
            },
            "batchCheckOp": {
                "type": "object",
                "properties": {
                    "function": {
                        "type": "string",
                        "description": "Function to check",
                        "example": "args.user.id",
                        "x-go-name": "Function"
                    }
                },
                "description": "BatchOp is the domain model describing a single operation for a batch check request",
                "x-go-name": "BatchOp",
                "x-go-package": "github.ibm.com/sec-ci/rule-service/pkg/models/api/check"
            },
            "batchCheckRequest": {
                "type": "object",
                "properties": {
                    "envType": {
                        "type": "string",
                        "description": "Environment to check the function in",
                        "example": "attribute",
                        "x-go-name": "EnvType"
                    },
                    "ops": {
                        "type": "array",
                        "description": "Array of operations",
                        "items": {
                            "$ref": "#/components/schemas/batchCheckOp"
                        },
                        "x-go-name": "Ops"
                    },
                    "sys": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "System level config parameters for the CEL rule",
                        "example": {
                            "trace": true
                        },
                        "x-go-name": "Sys"
                    }
                },
                "description": "BatchRequest is the domain model for the request payload of a batch check request",
                "x-go-name": "BatchRequest",
                "x-go-package": "github.ibm.com/sec-ci/rule-service/pkg/models/api/check"
            },
            "batchCheckResponse": {
                "type": "object",
                "properties": {
                    "error": {
                        "$ref": "#/components/schemas/error"
                    },
                    "results": {
                        "type": "array",
                        "description": "Results of the batch evaluation of supplied rules",
                        "items": {
                            "$ref": "#/components/schemas/checkResponse"
                        },
                        "x-go-name": "Results"
                    }
                },
                "description": "BatchResponse domain model for the response payload of a batch check request",
                "x-go-name": "BatchResponse",
                "x-go-package": "github.ibm.com/sec-ci/rule-service/pkg/models/api/check"
            },
            "batchOp": {
                "type": "object",
                "properties": {
                    "ctx": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "x-go-name": "Ctx"
                    },
                    "function": {
                        "type": "string",
                        "description": "Function to evaluate",
                        "example": "args.user.id",
                        "x-go-name": "Function"
                    }
                },
                "description": "BatchOp is the domain model describing a single operation for a batch run request",
                "x-go-name": "BatchOp",
                "x-go-package": "github.ibm.com/sec-ci/rule-service/pkg/models/api/run"
            },
            "batchRunRequest": {
                "type": "object",
                "properties": {
                    "args": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "Relevant arguments to help evaluate the function",
                        "example": {
                            "idsuser": {
                                "preferred_username": [
                                    "preferred_username"
                                ],
                                "realmName": [
                                    "realmname"
                                ]
                            },
                            "user": {
                                "emails": [
                                    {
                                        "type": "work",
                                        "value": "userobject@userobject.com"
                                    }
                                ],
                                "name": {
                                    "familyName": "familyName",
                                    "formatted": "formatted-name",
                                    "givenName": "givenName",
                                    "middleName": "middleName"
                                }
                            }
                        },
                        "x-go-name": "Args"
                    },
                    "envType": {
                        "type": "string",
                        "description": "Environment to evaluate the function in",
                        "example": "attribute",
                        "x-go-name": "EnvType"
                    },
                    "ops": {
                        "type": "array",
                        "description": "Array of operations",
                        "items": {
                            "$ref": "#/components/schemas/batchOp"
                        },
                        "x-go-name": "Ops"
                    },
                    "sys": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "x-go-name": "Sys"
                    }
                },
                "description": "BatchRequest is the domain model for the request payload of a batch run request",
                "x-go-name": "BatchRequest",
                "x-go-package": "github.ibm.com/sec-ci/rule-service/pkg/models/api/run"
            },
            "batchRunResponse": {
                "type": "object",
                "properties": {
                    "error": {
                        "$ref": "#/components/schemas/error"
                    },
                    "results": {
                        "type": "array",
                        "description": "Results of the batch evaluation of supplied rules",
                        "items": {
                            "$ref": "#/components/schemas/runResponse"
                        },
                        "x-go-name": "Results"
                    }
                },
                "description": "BatchResponse domain model for the response payload of a batch run request",
                "x-go-name": "BatchResponse",
                "x-go-package": "github.ibm.com/sec-ci/rule-service/pkg/models/api/run"
            },
            "checkRequest": {
                "type": "object",
                "properties": {
                    "envType": {
                        "type": "string",
                        "description": "Environment to evaluate the function in",
                        "example": "attribute",
                        "x-go-name": "EnvType"
                    },
                    "function": {
                        "type": "string",
                        "description": "Function to check",
                        "example": "args.user.id",
                        "x-go-name": "Function"
                    },
                    "sys": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "System level config parameters for the CEL rule",
                        "example": {
                            "trace": true
                        },
                        "x-go-name": "Sys"
                    }
                },
                "description": "Request is the domain model for the request payload of the POST /check API",
                "x-go-name": "Request",
                "x-go-package": "github.ibm.com/sec-ci/rule-service/pkg/models/api/check"
            },
            "checkResponse": {
                "type": "object",
                "properties": {
                    "error": {
                        "$ref": "#/components/schemas/error"
                    },
                    "result": {
                        "type": "boolean",
                        "description": "Result of the rule's syntax check",
                        "example": true,
                        "x-go-name": "Result"
                    }
                },
                "description": "Response is the domain model for the response payload of the /check API",
                "x-go-name": "Response",
                "x-go-package": "github.ibm.com/sec-ci/rule-service/pkg/models/api/check"
            },
            "error": {
                "type": "object",
                "properties": {
                    "messageDescription": {
                        "type": "string",
                        "x-go-name": "Description"
                    },
                    "messageId": {
                        "type": "string",
                        "x-go-name": "Code"
                    }
                },
                "description": "APIError is the domain model for the error response that complies with\nApollo API requirements",
                "x-go-name": "APIError",
                "x-go-package": "github.ibm.com/sec-ci/rule-service/pkg/models/api/errors"
            },
            "runRequest": {
                "type": "object",
                "properties": {
                    "args": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "Relevant arguments to help evaluate the function",
                        "example": {
                            "idsuser": {
                                "preferred_username": [
                                    "preferred_username"
                                ],
                                "realmName": [
                                    "realmname"
                                ]
                            },
                            "user": {
                                "emails": [
                                    {
                                        "type": "work",
                                        "value": "userobject@userobject.com"
                                    }
                                ],
                                "name": {
                                    "familyName": "familyName",
                                    "formatted": "formatted-name",
                                    "givenName": "givenName",
                                    "middleName": "middleName"
                                }
                            }
                        },
                        "x-go-name": "Args"
                    },
                    "envType": {
                        "type": "string",
                        "description": "Environment to evaluate the function in",
                        "example": "attribute",
                        "x-go-name": "EnvType"
                    },
                    "function": {
                        "type": "string",
                        "description": "Function to evaluate",
                        "example": "args.user.id",
                        "x-go-name": "Function"
                    },
                    "sys": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "x-go-name": "Sys"
                    }
                },
                "description": "Request is the domain model for the request payload of the POST /run API",
                "x-go-name": "Request",
                "x-go-package": "github.ibm.com/sec-ci/rule-service/pkg/models/api/run"
            },
            "runResponse": {
                "type": "object",
                "properties": {
                    "error": {
                        "$ref": "#/components/schemas/error"
                    },
                    "result": {
                        "type": "object",
                        "description": "Result of evaluating the supplied rule",
                        "example": "{\"result\":\"userobject-id\"}",
                        "x-omitempty": true,
                        "x-go-name": "Result"
                    },
                    "trace": {
                        "type": "string",
                        "description": "Trace, if any",
                        "x-omitempty": true,
                        "x-go-name": "Trace"
                    }
                },
                "description": "Response is the domain model for the response payload of the POST /run API",
                "x-go-name": "Response",
                "x-go-package": "github.ibm.com/sec-ci/rule-service/pkg/models/api/run"
            },
            "AssertionSettings": {
                "type": "object",
                "properties": {
                    "assertionValidAfter": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "assertionValidBefore": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "Federation": {
                "type": "object",
                "properties": {
                    "protocol": {
                        "type": "string"
                    },
                    "role": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "templateName": {
                        "type": "string"
                    },
                    "configuration": {
                        "$ref": "#/components/schemas/FederationConfiguration"
                    }
                },
                "description": "WS-Federation Models"
            },
            "FederationConfiguration": {
                "type": "object",
                "properties": {
                    "pointOfContactUrl": {
                        "type": "string"
                    },
                    "companyName": {
                        "type": "string"
                    },
                    "providerId": {
                        "type": "string"
                    },
                    "sessionTimeout": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "messageValidTime": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "crlEnabled": {
                        "type": "boolean"
                    },
                    "keySelectionCriteria": {
                        "type": "string"
                    },
                    "identityMapping": {
                        "$ref": "#/components/schemas/IdentityMapping_0"
                    },
                    "nameIDFormat": {
                        "$ref": "#/components/schemas/NameIdFormat"
                    },
                    "organization": {
                        "$ref": "#/components/schemas/Organization"
                    },
                    "manageNameIDService": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Saml20Service"
                        }
                    },
                    "encryptionSettings": {
                        "$ref": "#/components/schemas/EncryptionSettings"
                    },
                    "artifactLifeTime": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "artifactResolutionService": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Saml20BindingService"
                        }
                    },
                    "singleLogoutService": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Saml20Service"
                        }
                    },
                    "attributeMapping": {
                        "$ref": "#/components/schemas/Saml20AttributeMapping"
                    }
                }
            },
            "EncryptionSettings": {
                "type": "object",
                "properties": {
                    "decryptionKeyIdentifier": {
                        "$ref": "#/components/schemas/Saml20KeyIdentifier"
                    }
                }
            },
            "NameIdFormat": {
                "type": "object",
                "properties": {
                    "defaultFormat": {
                        "type": "string"
                    },
                    "supported": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "Organization": {
                "type": "object",
                "properties": {
                    "organizationName": {
                        "type": "string"
                    },
                    "organizationDisplayName": {
                        "type": "string"
                    },
                    "organizationURL": {
                        "type": "string"
                    }
                }
            },
            "Property": {
                "type": "object",
                "properties": {
                    "identityMappingRule": {
                        "type": "string"
                    },
                    "identityMappingRuleReference": {
                        "type": "string"
                    },
                    "ruleType": {
                        "type": "string"
                    },
                    "uri": {
                        "type": "string"
                    },
                    "sslKeyStore": {
                        "type": "string"
                    },
                    "authType": {
                        "type": "string"
                    },
                    "basicAuthUsername": {
                        "type": "string"
                    },
                    "basicAuthPassword": {
                        "type": "string"
                    },
                    "clientKeyStore": {
                        "type": "string"
                    },
                    "clientKeyAlias": {
                        "type": "string"
                    },
                    "messageFormat": {
                        "type": "string"
                    },
                    "issuerUri": {
                        "type": "string"
                    },
                    "appliesTo": {
                        "type": "string"
                    }
                }
            },
            "Saml20AttributeMapping": {
                "type": "object",
                "properties": {
                    "map": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttributeMapping_1"
                        }
                    }
                }
            },
            "Saml20BindingService": {
                "type": "object",
                "properties": {
                    "binding": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "index": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "default": {
                        "type": "boolean"
                    }
                }
            },
            "Saml20KeyIdentifier": {
                "type": "object",
                "properties": {
                    "keystore": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    }
                }
            },
            "Saml20Service": {
                "type": "object",
                "properties": {
                    "binding": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                }
            },
            "V2Model": {
                "type": "object",
                "properties": {
                    "protocol": {
                        "type": "string"
                    },
                    "role": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "templateName": {
                        "type": "string"
                    },
                    "configuration": {
                        "$ref": "#/components/schemas/FederationConfiguration"
                    }
                }
            },
            "ActiveProfileSettings": {
                "type": "object",
                "properties": {
                    "defaultRealm": {
                        "type": "string"
                    }
                }
            },
            "AuditTrace": {
                "required": [
                    "enabled"
                ],
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable audit logging of the Security Token Response in WS-Federation or WS-Trust response.",
                        "example": true
                    },
                    "allUsers": {
                        "type": "boolean",
                        "description": "Enable audit logging of the Security Token Response in WS-Federation or WS-Trust response for all users.",
                        "example": false
                    },
                    "users": {
                        "type": "array",
                        "description": "Specify the list of users' uids, for whom to enable audit logging of the Security Token Response in the WS-Federation or WS-Trust response. This is required when enabled is set to true and allUsers is set to false.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "expiry": {
                        "type": "string",
                        "description": "Enable audit logging of the Security Token Response in WS-Federation or WS-Trust response for the specified period. The value can be specified in seconds, minutes or hours. e.g. 120s, 10m, 1h. If the expiry is not specified or invalid format, the default expiry will be used, which is 10 minutes.The maximum expiry is 1 hour, if the expiry specified is more than 1 hour, e.g. 2h, the maximum expiry 1 hour will be used.",
                        "example": "10m"
                    }
                }
            },
            "ConfigProperty": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "PartnerConfiguration": {
                "type": "object",
                "properties": {
                    "providerId": {
                        "type": "string"
                    },
                    "callbackURL": {
                        "type": "string"
                    },
                    "appId": {
                        "type": "string"
                    },
                    "attributeMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttributeMapping_1"
                        }
                    },
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConfigProperty"
                        }
                    },
                    "multipleDomainsEnabled": {
                        "type": "boolean"
                    },
                    "idSources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "themeId": {
                        "type": "string"
                    },
                    "signingSettings": {
                        "$ref": "#/components/schemas/SigningSettings"
                    },
                    "activeProfile": {
                        "$ref": "#/components/schemas/ActiveProfileSettings"
                    },
                    "birthright": {
                        "type": "boolean"
                    },
                    "policyId": {
                        "type": "string"
                    },
                    "auditTrace": {
                        "$ref": "#/components/schemas/AuditTrace"
                    }
                }
            },
            "SigningSettings": {
                "type": "object",
                "properties": {
                    "signAssertion": {
                        "type": "boolean"
                    },
                    "keyLabel": {
                        "type": "string"
                    },
                    "signatureAlgorithm": {
                        "type": "string"
                    }
                }
            },
            "PartnerPatch": {
                "type": "object",
                "properties": {
                    "birthright": {
                        "type": "boolean"
                    },
                    "policyId": {
                        "type": "string"
                    }
                }
            },
            "PartnerEntitlement": {
                "type": "object",
                "properties": {
                    "birthright": {
                        "type": "boolean"
                    }
                }
            },
            "FederationAuditTrace": {
                "required": [
                    "enabled",
                    "providerId"
                ],
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable audit logging of the Security Token Response in WS-Federation or WS-Trust response.",
                        "example": true
                    },
                    "allUsers": {
                        "type": "boolean",
                        "description": "Enable audit logging of the Security Token Response in WS-Federation or WS-Trust response for all users.",
                        "example": false
                    },
                    "users": {
                        "type": "array",
                        "description": "Specify the list of users' uids, for whom to enable audit logging of the Security Token Response in the WS-Federation or WS-Trust response. This is required when enabled is set to true and allUsers is set to false.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "expiry": {
                        "type": "string",
                        "description": "Enable audit logging of the Security Token Response in WS-Federation or WS-Trust response for the specified period. The value can be specified in seconds, minutes or hours. e.g. 120s, 10m, 1h. If the expiry is not specified or invalid format, the default expiry will be used, which is 10 minutes.The maximum expiry is 1 hour, if the expiry specified is more than 1 hour, e.g. 2h, the maximum expiry 1 hour will be used.",
                        "example": "10m"
                    },
                    "providerId": {
                        "type": "string",
                        "description": "Enable audit logging of the Security Token Response in WS-Federation or WS-Trust response for the partner with the specified provider ID",
                        "example": "urn:federation:MicrosoftOnline"
                    }
                }
            },
            "Alias": {
                "type": "object",
                "properties": {
                    "uuid": {
                        "type": "string",
                        "description": "The alias's identifier",
                        "example": "uuidcd62e8bb-d4aa-4a6a-883e-00bc853ffae7"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user's unique ID",
                        "example": "5010XT81MV"
                    },
                    "tenantUuid": {
                        "type": "string",
                        "description": "The tenant's identifier",
                        "example": "af270768-5cd1-4c77-9c5e-dccc206ef825"
                    },
                    "partnerUuid": {
                        "type": "string",
                        "description": "The SAML partner's identifier",
                        "example": "uuida2d53c5f-438f-44ab-b93b-8d22fef6504a"
                    },
                    "appId": {
                        "type": "string",
                        "description": "The Application's identifier",
                        "example": "1832654797987322725"
                    },
                    "appName": {
                        "type": "string",
                        "description": "The Application's name",
                        "example": "Custom SAML App - Persistent"
                    }
                }
            },
            "AliasList": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "integer",
                        "format": "int32",
                        "example": 20
                    },
                    "page": {
                        "type": "integer",
                        "format": "int32",
                        "example": 1
                    },
                    "total": {
                        "type": "integer",
                        "format": "int32",
                        "example": 1
                    },
                    "aliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Alias"
                        }
                    }
                }
            },
            "Domain": {
                "type": "object",
                "properties": {
                    "capabilities": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "domainName": {
                        "type": "string"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DomainProperties"
                        }
                    },
                    "capabilitiesAsString": {
                        "type": "string"
                    }
                }
            },
            "DomainProperties": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "PartnerConfigProperty": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "PartnerEncryptionOptions": {
                "type": "object",
                "properties": {
                    "encryptNameID": {
                        "type": "boolean"
                    },
                    "encryptAssertion": {
                        "type": "boolean"
                    },
                    "encryptAssertionAttributes": {
                        "type": "boolean"
                    }
                }
            },
            "PartnerEncryptionSettings": {
                "type": "object",
                "properties": {
                    "encryptionKeyIdentifier": {
                        "$ref": "#/components/schemas/Saml20KeyIdentifier1"
                    },
                    "blockEncryptionAlgorithm": {
                        "type": "string"
                    },
                    "encryptionKeyTransportAlgorithm": {
                        "type": "string"
                    },
                    "encryptionOptions": {
                        "$ref": "#/components/schemas/PartnerEncryptionOptions"
                    },
                    "decryptionKeyIdentifier": {
                        "$ref": "#/components/schemas/Saml20KeyIdentifier1"
                    }
                }
            },
            "PartnerIdentityMapping": {
                "type": "object",
                "properties": {
                    "activeDelegateId": {
                        "type": "string"
                    },
                    "properties": {
                        "$ref": "#/components/schemas/Property1"
                    }
                }
            },
            "PartnerNameIdFormat": {
                "type": "object",
                "properties": {
                    "defaultFormat": {
                        "type": "string"
                    }
                }
            },
            "PartnerSoapClientAuthSettings": {
                "type": "object",
                "properties": {
                    "method": {
                        "type": "string"
                    },
                    "properties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "PartnerSoapSettings": {
                "type": "object",
                "properties": {
                    "serverCertValidation": {
                        "$ref": "#/components/schemas/Saml20KeyIdentifier1"
                    },
                    "clientAuth": {
                        "$ref": "#/components/schemas/PartnerSoapClientAuthSettings"
                    }
                }
            },
            "CommandInfo": {
                "type": "object",
                "properties": {
                    "commandName": {
                        "type": "string"
                    },
                    "commandClass": {
                        "type": "string"
                    }
                }
            },
            "DataFlavor": {
                "type": "object",
                "properties": {
                    "mimeType": {
                        "type": "string"
                    },
                    "humanPresentableName": {
                        "type": "string"
                    },
                    "primaryType": {
                        "type": "string"
                    },
                    "subType": {
                        "type": "string"
                    },
                    "mimeTypeSerializedObject": {
                        "type": "boolean"
                    },
                    "defaultRepresentationClassAsString": {
                        "type": "string"
                    },
                    "representationClassInputStream": {
                        "type": "boolean"
                    },
                    "representationClassReader": {
                        "type": "boolean"
                    },
                    "representationClassCharBuffer": {
                        "type": "boolean"
                    },
                    "representationClassByteBuffer": {
                        "type": "boolean"
                    },
                    "representationClassSerializable": {
                        "type": "boolean"
                    },
                    "representationClassRemote": {
                        "type": "boolean"
                    },
                    "flavorSerializedObjectType": {
                        "type": "boolean"
                    },
                    "flavorRemoteObjectType": {
                        "type": "boolean"
                    },
                    "flavorJavaFileListType": {
                        "type": "boolean"
                    },
                    "flavorTextType": {
                        "type": "boolean"
                    }
                }
            },
            "DataHandler": {
                "type": "object",
                "properties": {
                    "dataSource": {
                        "$ref": "#/components/schemas/DataSource"
                    },
                    "name": {
                        "type": "string"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "inputStream": {
                        "$ref": "#/components/schemas/InputStream"
                    },
                    "outputStream": {
                        "$ref": "#/components/schemas/OutputStream"
                    },
                    "transferDataFlavors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DataFlavor"
                        }
                    },
                    "preferredCommands": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CommandInfo"
                        }
                    },
                    "allCommands": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CommandInfo"
                        }
                    },
                    "content": {
                        "type": "object",
                        "properties": {}
                    }
                }
            },
            "DataSource": {
                "type": "object",
                "properties": {
                    "inputStream": {
                        "$ref": "#/components/schemas/InputStream"
                    },
                    "outputStream": {
                        "$ref": "#/components/schemas/OutputStream"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "IAttachment": {
                "type": "object",
                "properties": {
                    "contentId": {
                        "type": "string"
                    },
                    "contentType": {
                        "$ref": "#/components/schemas/MediaType1"
                    },
                    "dataHandler": {
                        "$ref": "#/components/schemas/DataHandler"
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "IMultipartBody": {
                "type": "object",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/MediaType1"
                    },
                    "allAttachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IAttachment"
                        }
                    },
                    "childAttachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IAttachment"
                        }
                    },
                    "rootAttachment": {
                        "$ref": "#/components/schemas/IAttachment"
                    }
                }
            },
            "OutputStream": {
                "type": "object"
            },
            "FederationIp": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Federation1"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "assertionValidBefore": {
                                "type": "integer",
                                "format": "int32",
                                "example": 300
                            },
                            "assertionValidAfter": {
                                "type": "integer",
                                "format": "int32",
                                "example": 300
                            }
                        }
                    }
                ]
            },
            "FederationSp": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Federation1"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "clockSkew": {
                                "type": "integer",
                                "format": "int32",
                                "example": 0
                            },
                            "includeAllAttributes": {
                                "type": "boolean",
                                "example": false
                            },
                            "allowedTargetUrls": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "skipTargetUrlValidation": {
                                "type": "boolean",
                                "example": false
                            },
                            "signingKeyLabel": {
                                "type": "string",
                                "example": "server"
                            },
                            "signatureAlgorithm": {
                                "type": "string",
                                "example": "RSA-SHA256",
                                "enum": [
                                    "RSA-SHA1",
                                    "RSA-SHA256",
                                    "RSA-SHA512",
                                    "ECDSA-SHA256",
                                    "ECDSA-SHA384",
                                    "ECDSA-SHA512"
                                ]
                            },
                            "decryptionKeyLabel": {
                                "type": "string",
                                "example": "server"
                            }
                        }
                    }
                ]
            },
            "Locale1": {
                "type": "object",
                "properties": {
                    "language": {
                        "type": "string"
                    },
                    "script": {
                        "type": "string"
                    },
                    "country": {
                        "type": "string"
                    },
                    "variant": {
                        "type": "string"
                    },
                    "extensionKeys": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "unicodeLocaleAttributes": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "unicodeLocaleKeys": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "iso3Language": {
                        "type": "string"
                    },
                    "iso3Country": {
                        "type": "string"
                    },
                    "displayLanguage": {
                        "type": "string"
                    },
                    "displayScript": {
                        "type": "string"
                    },
                    "displayCountry": {
                        "type": "string"
                    },
                    "displayVariant": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    }
                }
            },
            "IdentityMapping1": {
                "type": "object",
                "properties": {
                    "activeDelegateId": {
                        "type": "string"
                    },
                    "properties": {
                        "$ref": "#/components/schemas/Property1"
                    }
                }
            },
            "Organization1": {
                "type": "object",
                "properties": {
                    "organizationName": {
                        "type": "string"
                    },
                    "organizationDisplayName": {
                        "type": "string"
                    },
                    "organizationURL": {
                        "type": "string"
                    }
                }
            },
            "Saml20AttributeMapping1": {
                "type": "object",
                "properties": {
                    "map": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttributeMapping1"
                        }
                    }
                }
            },
            "NameIdFormat1": {
                "type": "object",
                "properties": {
                    "defaultFormat": {
                        "type": "string"
                    },
                    "supported": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "Saml20Service1": {
                "type": "object",
                "properties": {
                    "binding": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                }
            },
            "PartnerPatch1": {
                "type": "object",
                "properties": {
                    "birthright": {
                        "type": "boolean"
                    },
                    "policyId": {
                        "type": "string"
                    }
                }
            },
            "Federation1": {
                "required": [
                    "role"
                ],
                "type": "object",
                "properties": {
                    "role": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                            "ip",
                            "sp"
                        ]
                    },
                    "messageValidTime": {
                        "type": "integer",
                        "format": "int32",
                        "example": 300
                    },
                    "keySelectionCriteria": {
                        "type": "string",
                        "example": "only.alias",
                        "enum": [
                            "only.alias",
                            "shortest.lifetime",
                            "longest.lifetime"
                        ]
                    },
                    "crlEnabled": {
                        "type": "boolean",
                        "example": true
                    },
                    "defaultNameIDFormat": {
                        "type": "string",
                        "example": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                        "enum": [
                            "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                            "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"
                        ]
                    },
                    "organizationName": {
                        "type": "string"
                    },
                    "organizationDisplayName": {
                        "type": "string"
                    },
                    "organizationURL": {
                        "type": "string"
                    }
                },
                "discriminator": {
                    "propertyName": "role"
                }
            },
            "MediaType1": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "subtype": {
                        "type": "string"
                    },
                    "parameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "wildcardType": {
                        "type": "boolean"
                    },
                    "wildcardSubtype": {
                        "type": "boolean"
                    }
                }
            },
            "EntityTag1": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "weak": {
                        "type": "boolean"
                    }
                }
            },
            "EncryptionSettings1": {
                "type": "object",
                "properties": {
                    "decryptionKeyIdentifier": {
                        "$ref": "#/components/schemas/Saml20KeyIdentifier1"
                    }
                }
            },
            "UriBuilder1": {
                "type": "object"
            },
            "Property1": {
                "type": "object",
                "properties": {
                    "identityMappingRule": {
                        "type": "string"
                    },
                    "ruleType": {
                        "type": "string"
                    }
                }
            },
            "NewCookie1": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "path": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "maxAge": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "expiry": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "secure": {
                        "type": "boolean"
                    },
                    "httpOnly": {
                        "type": "boolean"
                    }
                }
            },
            "Saml20KeyIdentifier1": {
                "type": "object",
                "properties": {
                    "keystore": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    }
                }
            },
            "Response1": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "statusInfo": {
                        "$ref": "#/components/schemas/StatusType1"
                    },
                    "entity": {
                        "type": "object",
                        "properties": {}
                    },
                    "mediaType": {
                        "$ref": "#/components/schemas/MediaType1"
                    },
                    "language": {
                        "$ref": "#/components/schemas/Locale1"
                    },
                    "length": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "allowedMethods": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "cookies": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/NewCookie1"
                        }
                    },
                    "entityTag": {
                        "$ref": "#/components/schemas/EntityTag1"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastModified": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "location": {
                        "type": "string",
                        "format": "uri"
                    },
                    "links": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link1"
                        }
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {}
                            }
                        }
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {}
                            }
                        }
                    },
                    "stringHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "FederationConfiguration1": {
                "type": "object",
                "properties": {
                    "pointOfContactUrl": {
                        "type": "string"
                    },
                    "companyName": {
                        "type": "string"
                    },
                    "providerId": {
                        "type": "string"
                    },
                    "sessionTimeout": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "messageValidTime": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "crlEnabled": {
                        "type": "boolean"
                    },
                    "keySelectionCriteria": {
                        "type": "string"
                    },
                    "identityMapping": {
                        "$ref": "#/components/schemas/IdentityMapping1"
                    },
                    "nameIDFormat": {
                        "$ref": "#/components/schemas/NameIdFormat1"
                    },
                    "organization": {
                        "$ref": "#/components/schemas/Organization1"
                    },
                    "manageNameIDService": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Saml20Service1"
                        }
                    },
                    "encryptionSettings": {
                        "$ref": "#/components/schemas/EncryptionSettings1"
                    },
                    "artifactLifeTime": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "artifactResolutionService": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Saml20BindingService1"
                        }
                    },
                    "singleLogoutService": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Saml20Service1"
                        }
                    },
                    "attributeMapping": {
                        "$ref": "#/components/schemas/Saml20AttributeMapping1"
                    }
                }
            },
            "StatusType1": {
                "type": "object",
                "properties": {
                    "statusCode": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "family": {
                        "type": "string",
                        "enum": [
                            "INFORMATIONAL",
                            "SUCCESSFUL",
                            "REDIRECTION",
                            "CLIENT_ERROR",
                            "SERVER_ERROR",
                            "OTHER"
                        ]
                    },
                    "reasonPhrase": {
                        "type": "string"
                    }
                }
            },
            "V2Model1": {
                "type": "object",
                "properties": {
                    "protocol": {
                        "type": "string"
                    },
                    "role": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "templateName": {
                        "type": "string"
                    },
                    "configuration": {
                        "$ref": "#/components/schemas/FederationConfiguration1"
                    }
                }
            },
            "AttributeMapping1": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "format": {
                        "type": "string"
                    },
                    "source": {
                        "type": "string"
                    }
                }
            },
            "Saml20BindingService1": {
                "type": "object",
                "properties": {
                    "binding": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "index": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "default": {
                        "type": "boolean"
                    }
                }
            },
            "PartnerEntitlement1": {
                "type": "object",
                "properties": {
                    "birthright": {
                        "type": "boolean"
                    }
                }
            },
            "Link1": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    },
                    "uriBuilder": {
                        "$ref": "#/components/schemas/UriBuilder1"
                    },
                    "rel": {
                        "type": "string"
                    },
                    "rels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "title": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "params": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "AttributeMapping_1": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "format": {
                        "type": "string"
                    },
                    "attrId": {
                        "type": "string"
                    }
                }
            },
            "IdentityMapping_0": {
                "type": "object",
                "properties": {
                    "activeDelegateId": {
                        "type": "string"
                    },
                    "properties": {
                        "$ref": "#/components/schemas/Property"
                    }
                }
            },
            "Link_1": {
                "type": "object",
                "properties": {
                    "uri": {
                        "type": "string",
                        "format": "uri"
                    },
                    "uriBuilder": {
                        "$ref": "#/components/schemas/UriBuilder"
                    },
                    "rel": {
                        "type": "string"
                    },
                    "rels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "title": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "params": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "Response_0": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "statusInfo": {
                        "$ref": "#/components/schemas/StatusType"
                    },
                    "entity": {
                        "type": "object",
                        "properties": {}
                    },
                    "mediaType": {
                        "$ref": "#/components/schemas/MediaType"
                    },
                    "language": {
                        "$ref": "#/components/schemas/Locale"
                    },
                    "length": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "allowedMethods": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "cookies": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/NewCookie"
                        }
                    },
                    "entityTag": {
                        "$ref": "#/components/schemas/EntityTag"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastModified": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "location": {
                        "type": "string",
                        "format": "uri"
                    },
                    "links": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link_1"
                        }
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {}
                            }
                        }
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {}
                            }
                        }
                    },
                    "stringHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "WS-Federation_Partner_Resource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "role": {
                        "type": "string"
                    },
                    "configuration": {
                        "$ref": "#/components/schemas/PartnerConfiguration"
                    }
                }
            },
            "Federation_Partner_V2": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "role": {
                        "type": "string"
                    },
                    "templateName": {
                        "type": "string"
                    },
                    "configuration": {
                        "$ref": "#/components/schemas/Federation_Partner_V2"
                    }
                }
            },
            "TemplateError": {
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string"
                    },
                    "messageDescription": {
                        "type": "string"
                    }
                }
            },
            "PaginationParameters": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "CustomizedTemplateListModel": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "total": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "customizedTemplates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Id"
                        }
                    }
                }
            },
            "Id": {
                "type": "object",
                "properties": {
                    "component": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "locale": {
                        "type": "string"
                    },
                    "variant": {
                        "type": "string"
                    },
                    "tenant": {
                        "type": "string"
                    },
                    "adopter": {
                        "type": "string"
                    },
                    "fileName": {
                        "type": "string"
                    }
                }
            },
            "TemplateFile": {
                "type": "object",
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/Id"
                    },
                    "content": {
                        "type": "string"
                    },
                    "alias": {
                        "type": "string"
                    },
                    "aliasedFileName": {
                        "type": "string"
                    },
                    "deleted": {
                        "type": "boolean"
                    }
                }
            },
            "Template": {
                "type": "object",
                "properties": {
                    "registration": {
                        "$ref": "#/components/schemas/TemplateRegistration"
                    },
                    "files": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/TemplateFile"
                        }
                    }
                }
            },
            "TemplateRegistration": {
                "required": [
                    "description"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/TemplateRegistration.Id"
                    },
                    "description": {
                        "type": "string"
                    },
                    "parameters": {
                        "$ref": "#/components/schemas/TemplateRegistration.Parameters"
                    },
                    "contentMaxSize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "subscriptions": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string"
                    },
                    "serviceTemplate": {
                        "type": "boolean",
                        "xml": {
                            "name": "isServiceTemplate"
                        }
                    }
                }
            },
            "TemplateRegistration.Id": {
                "type": "object",
                "properties": {
                    "tenant": {
                        "type": "string"
                    },
                    "component": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "TemplateRegistration.OptionalParameter": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "default": {
                        "type": "string"
                    }
                }
            },
            "TemplateRegistration.Parameters": {
                "type": "object",
                "properties": {
                    "required": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TemplateRegistration.RequiredParameter"
                        }
                    },
                    "optional": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TemplateRegistration.OptionalParameter"
                        }
                    }
                }
            },
            "TemplateRegistration.RequiredParameter": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "TemplateRequestId": {
                "type": "object",
                "properties": {
                    "component": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "locale": {
                        "type": "string"
                    },
                    "variant": {
                        "type": "string"
                    },
                    "adopter": {
                        "type": "string"
                    },
                    "fileName": {
                        "type": "string"
                    }
                }
            },
            "TemplateResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/TemplateRequestId"
                    },
                    "content": {
                        "type": "string"
                    },
                    "status": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "messageId": {
                        "type": "string"
                    },
                    "messageDescription": {
                        "type": "string"
                    }
                }
            },
            "TemplateRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/TemplateRequestId"
                    },
                    "templateCandidates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "TenantTemplateRegistrationModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/TemplateRegistration.Id"
                    },
                    "contentMaxSize": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "ThemeRegistrationPaginatedResponseContainer": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "page": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "total": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "themeRegistrations": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {}
                        }
                    }
                }
            },
            "Configuration": {
                "type": "object",
                "properties": {
                    "tenant_id": {
                        "type": "string",
                        "description": "",
                        "example": "Tenant id, default is GLOBAL"
                    },
                    "config_id": {
                        "type": "string",
                        "description": "",
                        "example": "Configuration id, default is DEFAULT"
                    },
                    "config_name": {
                        "type": "string",
                        "description": "",
                        "example": "Configuration name"
                    },
                    "config_desc": {
                        "type": "string",
                        "description": "",
                        "example": "Configuration description"
                    },
                    "policy_id": {
                        "type": "string",
                        "description": "Policy identifier is created internally when TI configuration is created",
                        "example": "Policy identifier created for TI configuration, default value is 0"
                    },
                    "status": {
                        "type": "string",
                        "description": "This configuration status would be determined by policy_id is attached to tenant or not, will be active or inactive, Auth broker service determine status",
                        "example": "Configuration status, default is 'inactive'"
                    },
                    "ip_filter": {
                        "type": "object",
                        "properties": {
                            "allow_ip_list": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "description": "List of allow IP addresses",
                                    "example": "1.1.1.1, 2.2.2.2"
                                }
                            },
                            "deny_ip_list": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "description": "List of deny or blocked IP addresses",
                                    "example": "3.3.3.3"
                                }
                            }
                        }
                    },
                    "created": {
                        "type": "number",
                        "description": "",
                        "example": 1686552590000
                    },
                    "created_by": {
                        "type": "string",
                        "description": "",
                        "example": "Admin - username who created this threat configuration"
                    },
                    "modified": {
                        "type": "number",
                        "description": "",
                        "example": 1686552590000
                    },
                    "modified_by": {
                        "type": "string",
                        "description": "",
                        "example": "Admin - username who modified this threat configuration"
                    },
                    "notification_list": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "List of users for notification of threat alerts",
                            "example": "UID000001"
                        }
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "Id of threat rule",
                                    "example": "ibm:threat_multiple_failed_logins/ibm:threat_actionable_ips/ibm:threat_compromised_credentials/ibm:threat_login_deviations/ibm:threat_credentials_stuffing"
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of threat rule",
                                    "example": ""
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Description of threat rule",
                                    "example": ""
                                },
                                "config": {
                                    "type": "object",
                                    "properties": {
                                        "warning": {
                                            "type": "object",
                                            "properties": {
                                                "action": {
                                                    "type": "string",
                                                    "description": "Action on threat",
                                                    "example": "ACTION_ALLOW or ACTION_DENY"
                                                },
                                                "notification_alert": {
                                                    "type": "boolean",
                                                    "description": "Enable or disable notification alert for warning threat rule",
                                                    "example": false
                                                },
                                                "notification_type": {
                                                    "type": "string",
                                                    "description": "Notification type to set for warning threat rule",
                                                    "example": "Either email or none"
                                                }
                                            }
                                        },
                                        "critical": {
                                            "type": "object",
                                            "properties": {
                                                "action": {
                                                    "type": "string",
                                                    "description": "Action on threat",
                                                    "example": "ACTION_ALLOW or ACTION_DENY"
                                                },
                                                "notification_alert": {
                                                    "type": "boolean",
                                                    "description": "Enable or disable notification alert for critical threat rule"
                                                },
                                                "notification_type": {
                                                    "type": "string",
                                                    "description": "Notification type to set for critical threat rule",
                                                    "example": "Either email or none"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "Configuration_post": {
                "type": "object",
                "properties": {
                    "created_by": {
                        "type": "string",
                        "description": "",
                        "example": "Admin - username who created this configuration"
                    },
                    "notification_list": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "List of users for notification of alerts",
                            "example": "UID000001"
                        }
                    },
                    "config_name": {
                        "type": "string",
                        "description": "",
                        "example": "Threat configuration"
                    },
                    "config_desc": {
                        "type": "string",
                        "description": "",
                        "example": "Threat Configuration description"
                    },
                    "ip_filter": {
                        "type": "object",
                        "properties": {
                            "allow_ip_list": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "description": "List of allow IP addresses",
                                    "example": "1.1.1.1, 2.2.2.2"
                                }
                            },
                            "deny_ip_list": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "description": "List of deny or blocked IP addresses",
                                    "example": "3.3.3.3"
                                }
                            }
                        }
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "Id of threat rule",
                                    "example": "ibm:threat_multiple_failed_logins/ibm:threat_actionable_ips/ibm:threat_compromised_credentials/ibm:threat_login_deviations/ibm:threat_credentials_stuffing"
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of threat rule",
                                    "example": ""
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Description of threat rule",
                                    "example": ""
                                },
                                "config": {
                                    "type": "object",
                                    "properties": {
                                        "warning": {
                                            "type": "object",
                                            "properties": {
                                                "action": {
                                                    "type": "string",
                                                    "description": "Action on warning threat rule",
                                                    "example": "ACTION_ALLOW"
                                                },
                                                "notification_alert": {
                                                    "type": "boolean",
                                                    "description": "Enable or disable notification alert for warning threat rule",
                                                    "example": false
                                                },
                                                "notification_type": {
                                                    "type": "string",
                                                    "description": "Notification type to set for warning threat rule",
                                                    "example": "email"
                                                }
                                            }
                                        },
                                        "critical": {
                                            "type": "object",
                                            "properties": {
                                                "action": {
                                                    "type": "string",
                                                    "description": "Action on critical threat rule",
                                                    "example": "ACTION_DENY"
                                                },
                                                "notification_alert": {
                                                    "type": "boolean",
                                                    "description": "Enable or disable notification alert for critical threat rule",
                                                    "example": true
                                                },
                                                "notification_type": {
                                                    "type": "string",
                                                    "description": "Notification type to set for critical threat rule",
                                                    "example": "email"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "Configuration_put": {
                "type": "object",
                "properties": {
                    "modified_by": {
                        "type": "string",
                        "description": "",
                        "example": "Admin - username who created this configuration"
                    },
                    "notification_list": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "List of users for notification of alerts",
                            "example": "UID000001"
                        }
                    },
                    "config_name": {
                        "type": "string",
                        "description": "",
                        "example": "Threat configuration"
                    },
                    "config_desc": {
                        "type": "string",
                        "description": "",
                        "example": "Threat Configuration description"
                    },
                    "ip_filter": {
                        "type": "object",
                        "properties": {
                            "allow_ip_list": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "description": "List of allow IP addresses",
                                    "example": "1.1.1.1, 2.2.2.2"
                                }
                            },
                            "deny_ip_list": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "description": "List of deny or blocked IP addresses",
                                    "example": "3.3.3.3"
                                }
                            }
                        }
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "Id of threat rule",
                                    "example": "ibm:threat_multiple_failed_logins/ibm:threat_actionable_ips/ibm:threat_compromised_credentials/ibm:threat_login_deviations/ibm:threat_credentials_stuffing"
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of threat rule",
                                    "example": ""
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Description of threat rule",
                                    "example": ""
                                },
                                "config": {
                                    "type": "object",
                                    "properties": {
                                        "warning": {
                                            "type": "object",
                                            "properties": {
                                                "action": {
                                                    "type": "string",
                                                    "description": "Action on warning threat rule",
                                                    "example": "ACTION_ALLOW"
                                                },
                                                "notification_alert": {
                                                    "type": "boolean",
                                                    "description": "Enable or disable notification alert for warning threat rule",
                                                    "example": false
                                                },
                                                "notification_type": {
                                                    "type": "string",
                                                    "description": "Notification type to set for warning threat rule",
                                                    "example": "email"
                                                }
                                            }
                                        },
                                        "critical": {
                                            "type": "object",
                                            "properties": {
                                                "action": {
                                                    "type": "string",
                                                    "description": "Action on critical threat rule",
                                                    "example": "ACTION_DENY"
                                                },
                                                "notification_alert": {
                                                    "type": "boolean",
                                                    "description": "Enable or disable notification alert for critical threat rule",
                                                    "example": true
                                                },
                                                "notification_type": {
                                                    "type": "string",
                                                    "description": "Notification type to set for critical threat rule",
                                                    "example": "email"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "Configuration_put_status": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Threat status configuration, eg active or inactive",
                        "example": "active"
                    }
                }
            },
            "Created_Configuration": {
                "type": "object",
                "properties": {
                    "tenant_id": {
                        "type": "string",
                        "description": "Name of tenant id",
                        "example": "e54f5faa-d3f0-43cc-ab58-d6204d60fe3d"
                    },
                    "config_id": {
                        "type": "string",
                        "description": "Name of configuration id",
                        "example": "c64f5fac-e3f1-53cd-cb58-f6204d60fe9a"
                    },
                    "policy_id": {
                        "type": "integer",
                        "description": "Policy identifier for Threat configuration id",
                        "example": 1106607
                    }
                }
            },
            "ipAddress": {
                "type": "object",
                "properties": {
                    "ipAddress": {
                        "type": "string",
                        "format": "String",
                        "example": "10.1.0.1"
                    }
                }
            },
            "Status": {
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string",
                        "description": "",
                        "example": "v1.0"
                    },
                    "results": {
                        "type": "object",
                        "properties": {
                            "decision": {
                                "type": "string",
                                "description": "",
                                "example": "ACTION_ALLOW or ACTION_DENY"
                            },
                            "message": {
                                "type": "string",
                                "description": "",
                                "example": "reason for decision returned"
                            }
                        }
                    },
                    "attributes": {
                        "type": "object",
                        "properties": {
                            "ibm:threat_actionable_ips": {
                                "type": "string",
                                "description": "",
                                "example": "critical"
                            },
                            "ibm:threat_credentials_stuffing": {
                                "type": "string",
                                "description": "",
                                "example": "critical"
                            },
                            "ibm:threat_multiple_failed_logins": {
                                "type": "string",
                                "description": "",
                                "example": "critical"
                            },
                            "ibm:threat_compromised_credentials": {
                                "type": "string",
                                "description": "",
                                "example": "critical"
                            },
                            "ibm:threat_login_deviations": {
                                "type": "string",
                                "description": "",
                                "example": "critical"
                            },
                            "ibm:threat_all_failures": {
                                "type": "boolean",
                                "description": "",
                                "example": true
                            },
                            "ibm:threat_xfe_risk_score": {
                                "type": "number",
                                "description": "",
                                "example": 9
                            }
                        }
                    }
                }
            },
            "AuthenticationHeader": {
                "required": [
                    "key"
                ],
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Key to use in a HTTP header name"
                    },
                    "sensitive": {
                        "type": "boolean",
                        "description": "Sensitive indicates that this HTTP header is a sensitive value.\nWill make the value presented write only."
                    },
                    "value": {
                        "type": "string",
                        "description": "Value to use in a HTTP header value"
                    }
                },
                "description": "AuthenticationHeader is a config value for header authentication, contains details and whether its value is sensitive"
            },
            "BasicAuthentication": {
                "required": [
                    "password",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "password": {
                        "type": "string",
                        "description": "Password to populate the authorization header with.\nOnce populated, cannot be retrieved."
                    },
                    "username": {
                        "type": "string",
                        "description": "Username to populate the authorization header with"
                    }
                },
                "description": "BasicAuthentication is the structure that backs a basic scheme provider"
            },
            "Clause": {
                "required": [
                    "key",
                    "operation",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Key into the event data to match on.\nOnly top level and data keys are allowed.",
                        "example": "event_type, data.resource"
                    },
                    "operation": {
                        "type": "string",
                        "description": "Operation indicates what sort of clause this is. Valid values are 'include' and 'exclude'. Required.\n\nAll include clauses must be satisfied to include a event\n\nIf any exclude clause is matched, the event will not be included"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value to match against.\nFull text must match."
                    }
                },
                "description": "Clause is a particular predicate for an event to satisfy to potentially be\nsent. include clauses are chained togther with and AND. Exclude clauses are\nchained with OR."
            },
            "Clauses": {
                "title": "Clauses is a set of matches which must evaluate to true for a given\nnotification to be included.",
                "type": "array",
                "description": "\nAll clauses must be satisfied to indicate interests.",
                "items": {
                    "$ref": "#/components/schemas/Clause"
                }
            },
            "DeadLetter": {
                "type": "object",
                "properties": {
                    "eventId": {
                        "type": "string"
                    }
                }
            },
            "DeadLetterDeleteResponse": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "webhookId": {
                        "type": "string"
                    }
                }
            },
            "DeadLetterFlushBody": {
                "type": "object",
                "properties": {
                    "from": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "limit": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "to": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "DeadLetterListResponse": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeadLetter"
                        }
                    },
                    "webhookId": {
                        "type": "string"
                    }
                }
            },
            "DeadLetterResponse": {
                "type": "object",
                "properties": {
                    "eventId": {
                        "type": "string"
                    },
                    "webhookId": {
                        "type": "string"
                    }
                }
            },
            "DeadletterCount": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "webhookId": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "Failure": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "description": "Failure is a structure presented to the fail handler to identify a webhook payload failure"
            },
            "FlushState": {
                "type": "object",
                "properties": {
                    "actioned": {
                        "type": "integer",
                        "description": "Number of deadletters which are impacted by this reconciliation",
                        "format": "int64"
                    },
                    "arguments": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "The arguments included when this reconciliation was initiated."
                    },
                    "finished": {
                        "type": "string",
                        "description": "Time the recon completed. Note all reconciliations have a maxiumum runtime of two hours.",
                        "format": "date-time"
                    },
                    "runtime": {
                        "type": "string",
                        "description": "How long the reconciliation has been running/ran for"
                    },
                    "started": {
                        "type": "string",
                        "description": "Time the reconciliation started",
                        "format": "date-time"
                    },
                    "status": {
                        "$ref": "#/components/schemas/FlushStateValue"
                    }
                },
                "description": "This state represents the current state of a currently running or previously running reconciliation"
            },
            "FlushStateValue": {
                "type": "string",
                "description": "FlushStateValue indicates how a flush execution is going"
            },
            "Header": {
                "title": "A Header represents the key-value pairs in an HTTP header.",
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "additionalProperties": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": "The keys should be in canonical form, as returned by\nCanonicalHeaderKey."
            },
            "HeaderAuthentication": {
                "type": "object",
                "properties": {
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuthenticationHeader"
                        }
                    }
                },
                "description": "HeaderAuthentication contains a list of headers used to authenticate"
            },
            "HealthResponse": {
                "type": "object",
                "properties": {
                    "lastFailure": {
                        "type": "string",
                        "description": "Indicates the last failure time of this webhook across all URLs.\nMay be null if the webhook has not experienced a failure.",
                        "format": "date-time"
                    },
                    "lastSuccess": {
                        "type": "string",
                        "description": "Indicates when this webhook was last used successfully across all URLs.\nMay be null if the webhook has not been successfully.",
                        "format": "date-time"
                    },
                    "status": {
                        "$ref": "#/components/schemas/status"
                    }
                }
            },
            "JWTAuthentication": {
                "required": [
                    "alg",
                    "httpHeaderName",
                    "lifetime",
                    "sub"
                ],
                "type": "object",
                "properties": {
                    "additionalClaims": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "Additional claims to add to the JWT claims."
                    },
                    "alg": {
                        "type": "string",
                        "description": "Algorithm to sign the JWT with. Valid values are HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512, PS256, PS384, PS512."
                    },
                    "header": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "Map of values to add to the JWT header."
                    },
                    "httpHeaderName": {
                        "type": "string",
                        "description": "The HTTP header name to put the JWT value into."
                    },
                    "httpHeaderPrefix": {
                        "type": "string",
                        "description": "Optional value to add a prefix to the JWT header value. For example coulld specify \"bearer \" to identify the JWT as a bearer token."
                    },
                    "lifetime": {
                        "type": "integer",
                        "description": "How long the JWT should be valid for. Must be greater than 60 seconds.",
                        "format": "int64"
                    },
                    "personalCertificateLabel": {
                        "type": "string",
                        "description": "Personal certificate to use when signing the JWT. Required when alg is one of RS256, RS384, RS512, ES256, ES384, ES512, PS256, PS384, PS512."
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "Secret key material. Required when alg is one of HS256, HS384, HS512."
                    },
                    "sub": {
                        "type": "string",
                        "description": "Value to populate the 'sub' claim with."
                    }
                }
            },
            "Latency": {
                "type": "object",
                "properties": {
                    "average": {
                        "type": "integer",
                        "format": "uint64"
                    },
                    "count": {
                        "type": "integer",
                        "format": "uint64"
                    },
                    "max": {
                        "type": "integer",
                        "format": "uint64"
                    },
                    "min": {
                        "type": "integer",
                        "format": "uint64"
                    },
                    "total": {
                        "type": "integer",
                        "format": "uint64"
                    }
                },
                "description": "Latency captures a count of requests and request time, as well as high/low values"
            },
            "NotificationDeadletters": {
                "type": "object",
                "properties": {
                    "autoFlushEnabled": {
                        "type": "boolean",
                        "description": "autoFlushEnabled indicates whether the webhook should check a healthy\nwebhook for deadletters and attempt to reconcile them."
                    },
                    "flushIntervalMins": {
                        "type": "integer",
                        "description": "flushIntervalMins indicates how often an automated flush may be\ntriggered.",
                        "format": "int64"
                    }
                },
                "description": "NotificationDeadletters is the configuration pertaining to the deadletters\nrecorded by this webhook"
            },
            "NotificationInterest": {
                "required": [
                    "clauses",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "clauses": {
                        "$ref": "#/components/schemas/Clauses"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description helps identify this interest"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "description": "NotificationInterest is a set of notification selection criteria"
            },
            "NotificationWebhookConfig": {
                "required": [
                    "enabled",
                    "interests"
                ],
                "type": "object",
                "properties": {
                    "deadletters": {
                        "$ref": "#/components/schemas/NotificationDeadletters"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled is used to disable a notification webhook when not in use"
                    },
                    "interests": {
                        "type": "array",
                        "description": "Interests contains the selection critiera for notifications this webhooks\nshould be invoked with. If any one interests is satisfied for a given\nevent, it will be sent\n\nFor example to configure a webhook which gets both management and sso\nevents, the webhook would have two intrests. One in events where the type\nis SSO, and one where the type is management",
                        "items": {
                            "$ref": "#/components/schemas/NotificationInterest"
                        }
                    },
                    "recordDeadletters": {
                        "type": "boolean",
                        "description": "RecordDeadletters indicates whether or not failed delivery attempts\nshould be recorded for manual reconciliation."
                    }
                },
                "description": "NotificationWebhookConfig is the criteria used to select notifications for\nsending"
            },
            "OAuthAuthentication": {
                "required": [
                    "client_id",
                    "client_secret",
                    "token_endpoint",
                    "token_endpoint_auth_method"
                ],
                "type": "object",
                "properties": {
                    "client_id": {
                        "type": "string",
                        "description": "ID is the client_id to use in the request to the token endpoint"
                    },
                    "client_secret": {
                        "type": "string",
                        "description": "Secret is the client_secret to use in the request to the token endpoint"
                    },
                    "expires_in": {
                        "type": "integer",
                        "description": "DefaultExpires is a value to use as an alternative if no expires_in value\nis returned in the token endpoint response.\n\nDoes not override the value returned from the token endpoint.",
                        "format": "int64"
                    },
                    "personalCertificateLabel": {
                        "type": "string",
                        "description": "personalCertificateLabel"
                    },
                    "scope": {
                        "type": "string",
                        "description": "Scope is a space seperated list of strings to include in the the request\nfor an access token."
                    },
                    "token_endpoint": {
                        "type": "string",
                        "description": "TokenEndpoint is the URL to retrieve an oauth token from"
                    },
                    "token_endpoint_auth_method": {
                        "type": "string",
                        "description": "TokenEndpointAuthMethod how credentials should be presented to the token endpoint\nValid values are client_secret_post, client_secret_basic, tls_client_auth"
                    },
                    "window": {
                        "type": "integer",
                        "description": "Window indicates an offset to apply to access token lifetime, to prevent\ntoken from expriting while it is inflight. If not provided, defaults to\n120 seconds.",
                        "format": "int64"
                    }
                },
                "description": "OAuthAuthentication contains the oauth standard fields used to perform a client-credentials flow"
            },
            "Purpose": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "Purposes": {
                "type": "object",
                "properties": {
                    "purposes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Purpose"
                        }
                    }
                }
            },
            "Reference": {
                "type": "object",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "When this reference was created",
                        "format": "date-time"
                    },
                    "location": {
                        "type": "string",
                        "description": "Location of the API holding this reference"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "metadata contains arbitrary data about this reference"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the entity holding this reference"
                    }
                },
                "description": "A reference contains information about IBM Security Verify\ncapabilities currently using this relying party. References are read only."
            },
            "RelyingParties": {
                "type": "object",
                "properties": {
                    "relyingParties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RelyingParty"
                        }
                    }
                }
            },
            "RelyingParty": {
                "required": [
                    "configuration",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "configuration": {
                        "$ref": "#/components/schemas/RelyingPartyConfiguration"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Metadata_1"
                    },
                    "name": {
                        "type": "string",
                        "description": "Friendly name of this relying party. Must be unique."
                    },
                    "references": {
                        "type": "array",
                        "description": "References of the relying party. The relying party cannot be deleted if it has any references",
                        "items": {
                            "$ref": "#/components/schemas/Reference"
                        }
                    }
                }
            },
            "RelyingPartyConfiguration": {
                "required": [
                    "client_id",
                    "grant_type",
                    "issuer",
                    "response_type"
                ],
                "type": "object",
                "properties": {
                    "authorization_url": {
                        "type": "string",
                        "description": "authorize_url for this relying party to use. Required if metadata_url is not present."
                    },
                    "authorizeHTTPMethod": {
                        "type": "string",
                        "description": "authorizeHTTPMethod is the HTTP Method to use when contacting authorize_url. Valid values are GET and POST"
                    },
                    "client_id": {
                        "type": "string",
                        "description": "client_id issued to this relying party."
                    },
                    "client_secret": {
                        "type": "string",
                        "description": "client_secret issued to this relying party."
                    },
                    "grant_type": {
                        "type": "string",
                        "description": "Which grant type this RP will perform. Valid values are 'implicit' and 'authorization_code'"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "The 'iss' claim in the id_token recieved from the OP will be checked to match this value."
                    },
                    "jwks_uri": {
                        "type": "string",
                        "description": "jwks_url for this relying party to use."
                    },
                    "metadata_url": {
                        "type": "string",
                        "description": "metadata_url for this relying party. Will be used to source the authorize_url and token_url if specified.\nRequired if authorize_url is not present"
                    },
                    "response_mode": {
                        "type": "string",
                        "description": "response_mode to include in the request to /authorize. Vaild values are 'form_post\""
                    },
                    "response_type": {
                        "type": "array",
                        "description": "response_type values to include in the request to /authorize. Valid\nvalues to include are 'code', 'token' and 'id_token'",
                        "items": {
                            "type": "string"
                        }
                    },
                    "scopes": {
                        "type": "array",
                        "description": "scope to include in the authorization requests.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "token_endpoint_auth_method": {
                        "$ref": "#/components/schemas/TokenEndpointAuthMethod"
                    },
                    "token_url": {
                        "type": "string",
                        "description": "token_url for this relying party to use. Required if grant_type is 'authorization_code'"
                    }
                },
                "description": "Contains all of the relevent fields for an OpenID Connect Relying party to\nuse in integrations"
            },
            "RelyingPartyResponse": {
                "required": [
                    "configuration",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "configuration": {
                        "$ref": "#/components/schemas/RelyingPartyConfiguration"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the relying party"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Metadata_1"
                    },
                    "name": {
                        "type": "string",
                        "description": "Friendly name of this relying party. Must be unique."
                    },
                    "references": {
                        "type": "array",
                        "description": "References of the relying party. The relying party cannot be deleted if it has any references",
                        "items": {
                            "$ref": "#/components/schemas/Reference"
                        }
                    }
                }
            },
            "TLSAuthentication": {
                "type": "object",
                "properties": {
                    "personalCertificateLabel": {
                        "type": "string"
                    }
                }
            },
            "TokenEndpointAuthMethod": {
                "type": "string"
            },
            "TransformBody": {
                "type": "object",
                "properties": {
                    "JSON": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    },
                    "Raw": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "uint8"
                        }
                    }
                },
                "description": "TransformBody is either a valid UTF-8 string, or a valid JSON object"
            },
            "TransformObject": {
                "title": "The following fields are used to execute both incoming and outgoing transform tests.",
                "type": "object",
                "properties": {
                    "authentication_header": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "AuthenticationHeader is an outgoing transform parameter."
                    },
                    "body": {
                        "$ref": "#/components/schemas/TransformBody"
                    },
                    "header": {
                        "$ref": "#/components/schemas/Header"
                    },
                    "host": {
                        "type": "string",
                        "description": "Host is an outgoing transform parameter, and will only be populated in webhook usage when all the URLs configured have a consistent host"
                    },
                    "method": {
                        "type": "string",
                        "description": "Method is an outgoing transform parameter."
                    },
                    "path": {
                        "type": "string",
                        "description": "Path is an outgoing transform parameter."
                    },
                    "request": {
                        "$ref": "#/components/schemas/TransformObject"
                    },
                    "statusCode": {
                        "type": "integer",
                        "description": "StatusCode is an incoming transform parameter.",
                        "format": "int64"
                    }
                }
            },
            "TransformRequest": {
                "type": "object",
                "properties": {
                    "input": {
                        "$ref": "#/components/schemas/TransformObject"
                    },
                    "mode": {
                        "type": "string"
                    },
                    "transform": {
                        "type": "string"
                    }
                }
            },
            "TransformResponse": {
                "type": "object",
                "properties": {
                    "result": {
                        "$ref": "#/components/schemas/TransformObject"
                    }
                }
            },
            "WebError": {
                "type": "object",
                "properties": {
                    "messageDescription": {
                        "type": "string",
                        "description": "A requester locale-specific descriptive message."
                    },
                    "messageId": {
                        "type": "string",
                        "description": "The message key identifier."
                    }
                },
                "description": "WebError is a standard error/error description payload"
            },
            "WebhookAuthentication": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "basic": {
                        "$ref": "#/components/schemas/BasicAuthentication"
                    },
                    "header": {
                        "$ref": "#/components/schemas/HeaderAuthentication"
                    },
                    "jwt": {
                        "$ref": "#/components/schemas/JWTAuthentication"
                    },
                    "mtls": {
                        "$ref": "#/components/schemas/TLSAuthentication"
                    },
                    "oauth": {
                        "$ref": "#/components/schemas/OAuthAuthentication"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type selects the authentication method to use.\nValid values are: header, basic, oauth, mtls"
                    }
                },
                "description": "WebhookAuthentication composes all of the different supported authentication types for webhook requests"
            },
            "WebhookConfig": {
                "required": [
                    "name",
                    "purpose",
                    "type",
                    "urls"
                ],
                "type": "object",
                "properties": {
                    "authentication": {
                        "$ref": "#/components/schemas/WebhookAuthentication"
                    },
                    "expectedStatus": {
                        "type": "array",
                        "description": "ExpectedStatus is the HTTP status expected from the API invoked by this webhook.\nIf not present a status code between 200 and 299 is expected (inclusive).\nExpected status is checked prior to the incoming transform executing.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "headers": {
                        "type": "array",
                        "description": "Headers with static values to include in the requests made by this\nwebhook when invoked.\nCan be overridden using a transform.",
                        "items": {
                            "$ref": "#/components/schemas/Header"
                        }
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Metadata_1"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the webhook"
                    },
                    "notification": {
                        "$ref": "#/components/schemas/NotificationWebhookConfig"
                    },
                    "purpose": {
                        "type": "array",
                        "description": "Purpose of this webhook. What extensions or integrations is it achieving.\nValid purposes can be found using the purposes API.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "references": {
                        "type": "array",
                        "description": "References to this webhook by extensions or integrations. Readonly.\nA Webhook cannot be deleted while it has any references.",
                        "items": {
                            "$ref": "#/components/schemas/Reference"
                        }
                    },
                    "resources": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/Resource_0"
                        },
                        "description": "Resources defined by this webhook."
                    },
                    "transform": {
                        "$ref": "#/components/schemas/WebhookTransform"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of webhook. Options are 'realtime' and 'notification'"
                    },
                    "urls": {
                        "type": "array",
                        "description": "URLs this webhook should use when invoked. Accessed in round-robin\nmanner. Often failing URLs will be dropped from rotation for 5 minutes.\nAt least one URL must be provided.\n\nWhen a URL is configured with the protocol 'http://' the connection made\nto the webhook will be insecure. Use the protocol 'https://' to establish\na secure connection. The IBM Security Verify truststores will be used.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "WebhookConfig contains all of the fields needed to perform a call out to an external rest API"
            },
            "WebhookConfigResponse": {
                "allOf": [
                    {
                        "required": [
                            "name",
                            "purpose",
                            "type",
                            "urls"
                        ],
                        "type": "object",
                        "properties": {
                            "authentication": {
                                "$ref": "#/components/schemas/WebhookAuthentication"
                            },
                            "expectedStatus": {
                                "type": "array",
                                "description": "ExpectedStatus is the HTTP status expected from the API invoked by this webhook.\nIf not present a status code between 200 and 299 is expected (inclusive).\nExpected status is checked prior to the incoming transform executing.",
                                "items": {
                                    "type": "integer",
                                    "format": "int64"
                                }
                            },
                            "headers": {
                                "type": "array",
                                "description": "Headers with static values to include in the requests made by this\nwebhook when invoked.\nCan be overridden using a transform.",
                                "items": {
                                    "$ref": "#/components/schemas/Header"
                                }
                            },
                            "metadata": {
                                "$ref": "#/components/schemas/Metadata_1"
                            },
                            "name": {
                                "type": "string",
                                "description": "Name of the webhook"
                            },
                            "notification": {
                                "$ref": "#/components/schemas/NotificationWebhookConfig"
                            },
                            "purpose": {
                                "type": "array",
                                "description": "Purpose of this webhook. What extensions or integrations is it achieving.\nValid purposes can be found using the purposes API.",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "references": {
                                "type": "array",
                                "description": "References to this webhook by extensions or integrations. Readonly.\nA Webhook cannot be deleted while it has any references.",
                                "items": {
                                    "$ref": "#/components/schemas/Reference"
                                }
                            },
                            "resources": {
                                "type": "object",
                                "additionalProperties": {
                                    "$ref": "#/components/schemas/Resource_0"
                                },
                                "description": "Resources defined by this webhook."
                            },
                            "transform": {
                                "$ref": "#/components/schemas/WebhookTransform"
                            },
                            "type": {
                                "type": "string",
                                "description": "Type of webhook. Options are 'realtime' and 'notification'"
                            },
                            "urls": {
                                "type": "array",
                                "description": "URLs this webhook should use when invoked. Accessed in round-robin\nmanner. Often failing URLs will be dropped from rotation for 5 minutes.\nAt least one URL must be provided.\n\nWhen a URL is configured with the protocol 'http://' the connection made\nto the webhook will be insecure. Use the protocol 'https://' to establish\na secure connection. The IBM Security Verify truststores will be used.",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "Unique identifier of the webhook"
                            }
                        }
                    }
                ]
            },
            "WebhookListConfigResponse": {
                "type": "object",
                "properties": {
                    "webhooks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WebhookConfigResponse"
                        }
                    }
                }
            },
            "WebhookStatResponse": {
                "allOf": [
                    {
                        "type": "object",
                        "properties": {
                            "date": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "hourlyAverage": {
                                "type": "integer",
                                "format": "uint64"
                            },
                            "lastFailure": {
                                "$ref": "#/components/schemas/Failure"
                            },
                            "lastSuccess": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "max": {
                                "type": "integer",
                                "format": "uint64"
                            },
                            "min": {
                                "type": "integer",
                                "format": "uint64"
                            },
                            "totalCallsLast24Hours": {
                                "type": "integer",
                                "format": "uint64"
                            },
                            "urls": {
                                "type": "object",
                                "additionalProperties": {
                                    "$ref": "#/components/schemas/Stats_0"
                                }
                            }
                        }
                    },
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "ID of the webhook"
                            }
                        }
                    }
                ]
            },
            "WebhookTestResponse": {
                "type": "object",
                "properties": {
                    "callDurationMs": {
                        "type": "integer",
                        "format": "uint64"
                    },
                    "error": {
                        "$ref": "#/components/schemas/WebError"
                    },
                    "requestID": {
                        "type": "string"
                    },
                    "responseBody": {
                        "type": "object"
                    },
                    "responseHeaders": {
                        "$ref": "#/components/schemas/Header"
                    },
                    "statusCode": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "WebhookTransform": {
                "type": "object",
                "properties": {
                    "incoming": {
                        "type": "string",
                        "description": "IncomingTransform is CEL applied to the HTTP response from the invoked API.\nIt can be used to modify the:\nIncoming HTTP headers\nIncoming JSON/body"
                    },
                    "outgoing": {
                        "type": "string",
                        "description": "OutgoingTransform is CEL applied to the HTTP request being made by this webhook invocation.\nIt can be used to modify the:\nHTTP Method\nRequest URL\nContent-type\nOutgoing headers\nOutgoing JSON/body\nSkip applying configured authentication"
                    }
                }
            },
            "status": {
                "title": "status indicates at a glance health of the webhook.",
                "type": "string",
                "description": "Potential values are:\nno-data - No usage data available.\ndown - No URLs have a successful usage\nrecovered - at least one URL has a successful usage, but there has been an error in the last 5 minutes\nmarginal - At least one URL has no errors, but at least one other URL has errors\ngood - No errors present"
            },
            "Metadata_1": {
                "title": "Metadata contains metadata about a configuration.",
                "type": "object",
                "properties": {
                    "connector": {
                        "type": "string",
                        "description": "Connector is used by the UX to modify presentation of the configuration"
                    },
                    "contactEmail": {
                        "type": "string",
                        "description": "ContactEmail is the email address of an external entity to contact about this configuration"
                    },
                    "contactName": {
                        "type": "string",
                        "description": "ContactName is the name of an external entity to contact about this configuration."
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "CreatedBy is the userID who created the configuration\nReadonly"
                    },
                    "createdByType": {
                        "type": "string",
                        "description": "CreatedByType is the type of user who created the configuration\nReadonly"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "DateCreated will indicate when this configuration was first created\nReadonly.",
                        "format": "date-time"
                    },
                    "dateModified": {
                        "type": "string",
                        "description": "DateModified will indicate when this configuration was last modified\nReadonly",
                        "format": "date-time"
                    },
                    "modifiedBy": {
                        "type": "string",
                        "description": "CreatedBy is the userID who last modified the configuration\nReadonly"
                    },
                    "modifiedByType": {
                        "type": "string",
                        "description": "ModifiedByType is the type of user who last modified the configuration\nReadonly"
                    },
                    "properties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "Properties are aribtrary non functional properties of this configuration.\nNot used at runtime."
                    }
                }
            },
            "Resource_0": {
                "type": "object",
                "properties": {
                    "expectedStatus": {
                        "type": "array",
                        "description": "ExpectedStatus is the HTTP status expected from the API invoked by this webhook.\nIf not present a status code between 200 and 299 is expected (inclusive).\nExpected status is checked prior to the incoming transform executing.",
                        "items": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    "method": {
                        "type": "string",
                        "description": "Method modifies the outgoing HTTP method from POST to whatever is specified.\nValid values are: POST, PUT, GET, DELETE, PATCH.\nMethod can be modified with an out going transform."
                    },
                    "suffix": {
                        "type": "string",
                        "description": "Suffix to add to the base URL being used in this request. Such that the request made by invoking this webhooks resource will go to :\nselected URL + suffix.\nNo slashes are added beyond what is defined in configuration.\nThe outgoing request URL can be modified using an outgoing transform."
                    },
                    "transform": {
                        "$ref": "#/components/schemas/WebhookTransform"
                    }
                },
                "description": "Resource\nA resource identifies an API invoked by a webhook.\nUsed when a given purpose, such as external MFA needs to invoke more than one API as part of its flows"
            },
            "Stats_0": {
                "type": "object",
                "properties": {
                    "5minLatency": {
                        "$ref": "#/components/schemas/Latency"
                    },
                    "dayLatency": {
                        "$ref": "#/components/schemas/Latency"
                    },
                    "lastFailure": {
                        "$ref": "#/components/schemas/Failure"
                    },
                    "lastSuccess": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "latency": {
                        "$ref": "#/components/schemas/Latency"
                    }
                },
                "description": "Stats pertain to a particular URL, tracks the last success and latency over varied periods"
            }
        },
        "securitySchemes": {
            "api_key": {
                "type": "apiKey",
                "name": "Authorization",
                "in": "header"
            }
        },
        "responses": {
            "noContent": {
                "description": "No content",
                "content": {}
            },
            "relyingParty": {
                "description": "The relying party configuration",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/RelyingPartyResponse"
                        }
                    }
                }
            },
            "relyingPartyList": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/RelyingParties"
                        }
                    }
                }
            },
            "relyingPartyReference": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "allOf": [
                                {
                                    "type": "object",
                                    "properties": {
                                        "created": {
                                            "type": "string",
                                            "description": "When this reference was created",
                                            "format": "date-time"
                                        },
                                        "location": {
                                            "type": "string",
                                            "description": "Location of the API holding this reference"
                                        },
                                        "metadata": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "object"
                                            },
                                            "description": "metadata contains arbitrary data about this reference"
                                        },
                                        "name": {
                                            "type": "string",
                                            "description": "Name of the entity holding this reference"
                                        }
                                    }
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "relyingPartyReferences": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "allOf": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "created": {
                                                "type": "string",
                                                "description": "When this reference was created",
                                                "format": "date-time"
                                            },
                                            "location": {
                                                "type": "string",
                                                "description": "Location of the API holding this reference"
                                            },
                                            "metadata": {
                                                "type": "object",
                                                "additionalProperties": {
                                                    "type": "object"
                                                },
                                                "description": "metadata contains arbitrary data about this reference"
                                            },
                                            "name": {
                                                "type": "string",
                                                "description": "Name of the entity holding this reference"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "testWebhook": {
                "description": "Webhook Test object",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebhookTestResponse"
                        }
                    }
                }
            },
            "testWebhookTransform": {
                "description": "TransformResponse is the output of the transform test",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/TransformResponse"
                        }
                    }
                }
            },
            "weberror400": {
                "description": "The request cannot be processed because the request body contains improperly structured JSON.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebError"
                        }
                    }
                }
            },
            "weberror401": {
                "description": "The unauthenticated user does not have the permissions to perform the requested operation.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebError"
                        }
                    }
                }
            },
            "weberror403": {
                "description": "The unauthenticated user does not have the permissions to perform the requested operation.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebError"
                        }
                    }
                }
            },
            "weberror404": {
                "description": "The resource cannot be found.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebError"
                        }
                    }
                }
            },
            "weberror500": {
                "description": "Internal Server Error.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebError"
                        }
                    }
                }
            },
            "webhook": {
                "description": "The webhook configuration",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebhookConfigResponse"
                        }
                    }
                }
            },
            "webhookCheckFlushDeadletterResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/FlushState"
                        }
                    }
                }
            },
            "webhookCountDeadletterResponse": {
                "description": "The count of deadletters",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/DeadletterCount"
                        }
                    }
                }
            },
            "webhookDeadletter": {
                "description": "An undelivered notification for this webhook",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/DeadLetterResponse"
                        }
                    }
                }
            },
            "webhookDeadletters": {
                "description": "This notification webhooks undelivered messages",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/DeadLetterListResponse"
                        }
                    }
                }
            },
            "webhookDeletedDeadletters": {
                "description": "The deleted undelivered messages",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/DeadLetterDeleteResponse"
                        }
                    }
                }
            },
            "webhookExecute200": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object"
                            }
                        }
                    }
                }
            },
            "webhookHealth": {
                "description": "At a glance health information about a webhook.\nInterprets the stats API response",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/HealthResponse"
                        }
                    }
                }
            },
            "webhookPurposes": {
                "description": "The webhook configuration",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Purposes"
                        }
                    }
                }
            },
            "webhookReference": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "allOf": [
                                {
                                    "type": "object",
                                    "properties": {
                                        "created": {
                                            "type": "string",
                                            "description": "TimeCreated is when this reference was created",
                                            "format": "date-time"
                                        },
                                        "location": {
                                            "type": "string",
                                            "description": "Location of the API holding this reference"
                                        },
                                        "metadata": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "object"
                                            },
                                            "description": "Metadata contains additional data about this reference"
                                        },
                                        "name": {
                                            "type": "string",
                                            "description": "Name of the entity holding this reference"
                                        }
                                    }
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "webhookReferences": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "allOf": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "created": {
                                                "type": "string",
                                                "description": "TimeCreated is when this reference was created",
                                                "format": "date-time"
                                            },
                                            "location": {
                                                "type": "string",
                                                "description": "Location of the API holding this reference"
                                            },
                                            "metadata": {
                                                "type": "object",
                                                "additionalProperties": {
                                                    "type": "object"
                                                },
                                                "description": "Metadata contains additional data about this reference"
                                            },
                                            "name": {
                                                "type": "string",
                                                "description": "Name of the entity holding this reference"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "webhooksList": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebhookListConfigResponse"
                        }
                    }
                }
            },
            "webhookstat": {
                "description": "Webhook Statistics object",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebhookStatResponse"
                        }
                    }
                }
            }
        }
    },
    "x-original-swagger-version": "2.0",
    "x-explorer-enabled": false
}