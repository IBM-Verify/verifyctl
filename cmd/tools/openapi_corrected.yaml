---
openapi: 3.0.3
info:
  version: 1.0.0
  description: Use these API definitions to develop and integrate applications with
    the IBM Security Verify services such as authentication, customization, users
    and groups management, and others. A new version of the API will be released if
    there are attributes that are removed or renamed. New resources, parameters, or
    attributes can be added without advance notice. When you use these APIs, ignore
    the unrecognized response parameters. </br></br>[API compatibility policy](https://www.ibm.com/support/knowledgecenter/SSCT62/com.ibm.iamservice.doc/references/r_api_compatibility_policy.html)
    </br>[Deprecated APIs](https://www.ibm.com/support/knowledgecenter/SSCT62/com.ibm.iamservice.doc/references/r_deprecated_apis.html)
  title: IBM Security Verify API
servers:
- url: https://{tenanturl}
  variables:
    tenanturl:
      default: "{tenant_url}"
      description: URL of your IBM Security Verify tenant
security:
- BasicAuth: []
tags:
- name: Adapter Management
- name: Agent Bridge Support Service
- name: API Clients
- name: Application Access
- name: Attributes
- name: 'Deprecated - Attribute Evaluation. Replaced by /v2.0/attributequery. '
- name: Account expiration configuration
- name: Tenant policy configuration
- name: Identity Provider Attribute Mappings
- name: Session Exchange Configuration
- name: Identity Sources V1 - Deprecated
- name: Partner Reseller Identity Providers Management
- name: Identity Source Types
- name: Identity Sources V2
- name: Authentication Token Exchange
- name: Authentication Manage User Sessions
- name: Social JWT Exchange
- name: Access Policy Management v3.0 (deprecated)
- name: Certification Campaign statistics
- name: Certification Campaign assignments
- name: Certification Campaign configurations
- name: Certification Campaign instances
- name: Password Policy Management 2.0
- name: Dictionary Policy Management 3.0
- name: Password Dictionary Management 3.0
- name: Password Policy Management 3.0
- name: Users Management Version 2.0
- name: Groups Management Version 2.0
- name: Data Privacy and Consent
- name: Data Privacy and Consent Management
- name: Password Vault Configuration
- name: Email One-time Password Configuration 2.0
- name: FIDO Configuration
- name: FIDO MDS Configuration
- name: One-time Password Configuration 2.0
- name: QR Code Login Configuration
- name: Knowledge Questions Configuration
- name: SMS One-time Password Configuration 2.0
- name: Time-based One-time Password Configuration 2.0
- name: Voice One-time Password Configuration
- name: External MFA Providers
- name: reCAPTCHA
- name: Password Vault
- name: Well-Known Uniform Resource Identifiers
- name: Authentication Factors 2.0
- name: Email One-time Password 2.0
- name: FIDO
- name: One-time Password
- name: QR Code Login
- name: Knowledge Questions
- name: SMS One-time Password 2.0
- name: Time-based One-time Password 2.0
- name: Voice One-time Password
- name: Authenticator Clients
- name: Signature Authentication Configuration
- name: Authenticators
- name: Password Authentication
- name: Signature Authentication
- name: User Self Care API
- name: Tenant Properties API 2.0
- name: Access Management
- name: Admin Entitlement Management
- name: Entitlement Management
- name: Provisioning Management
- name: Certificates
- name: Device manager configuration
- name: Smartcard and other X.509 certificate provider configuration
- name: Smartcard or certificate provider operations
- name: Push Credentials Management
- name: OpenID Connect Consent Management (deprecated)
- name: OpenID Connect Grant Management
- name: OpenID Connect Dynamic Client Profile
- name: OpenID Connect Federation
- name: OpenID Connect Token Types
- name: OpenID Connect
- name: Events
- name: Reports
- name: Access Request Management V1.0
- name: Access Policy Management V5.0
- name: OpenID Connect API v2
- name: SAML 2.0 Alias Management
- name: SAML 2.0 Federations Management
- name: WS Federation Management
- name: Customization - Themes
- name: Threat Insights Configurations API
- name: Webhook-Configuration
paths:
  "/config/v1.0/profiles":
    get:
      tags:
      - Adapter Management
      summary: Get all custom profiles in system.
      description: 'Entitlements required: manageAppAccessAdmin (Manage application
        lifecycle)'
      operationId: getProfiles
      parameters:
      - name: state
        in: query
        description: State filter.For multiple state search,comma separated profile
          states are allowed like Draft,Published
        schema:
          type: string
      - name: search
        in: query
        description: A string that is searched for in the profile records.
        schema:
          type: string
      - name: sortBy
        in: query
        description: Sort the results by the specified criteria when the profiles
          are returned.
        schema:
          type: string
      - name: sortOrder
        in: query
        description: The sorting order when the number of profiles are returned.
        schema:
          type: string
          enum:
          - Desc
          - Asc
      - name: page
        in: query
        description: Number of pages to fetch.
        schema:
          type: integer
      - name: limit
        in: query
        description: Total number of profiles to return in each page.
        schema:
          type: integer
      responses:
        '200':
          description: All available custom profiles
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetProfileListResponse"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponseMessage"
        '401':
          description: User not Authorised
          content: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponseMessage"
      x-publicAPI: 'true'
    post:
      tags:
      - Adapter Management
      summary: Create draft in system.
      description: 'Entitlements required: manageAppAccessAdmin (Manage application
        lifecycle)'
      operationId: createDraft
      requestBody:
        description: Attribute ID from attribute service
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/CreateProfileBodyDataForPost"
        required: true
      responses:
        '200':
          description: All available custom profiles
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreateProfileResponseData"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponseMessage"
        '401':
          description: User not Authorised
          content: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponseMessage"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/config/v1.0/attribute/profiles":
    get:
      tags:
      - Adapter Management
      summary: List all profiles using the attribute.
      description: 'Entitlements required: manageAppAccessAdmin (Manage application
        lifecycle)'
      operationId: getAttributeProfileUsage
      parameters:
      - name: state
        in: query
        description: State filter.Value can be Draft or Published
        schema:
          type: string
      - name: attributeid
        in: query
        description: Unique UUID of the attribute
        required: true
        schema:
          type: string
      responses:
        '200':
          description: All available custom profiles
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetProfileAttributeUsageResponse"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponseMessage"
        '401':
          description: User not Authorised
          content: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponseMessage"
      x-publicAPI: 'true'
  "/config/v1.0/profiles/{profileId}":
    get:
      tags:
      - Adapter Management
      summary: Get details of the specified profile
      description: 'Entitlements required: manageAppAccessAdmin (Manage application
        lifecycle)'
      operationId: getProfile
      parameters:
      - name: profileId
        in: path
        description: ID of the profile to get
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific profile.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DetailProfile"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponseMessage"
        '401':
          description: User not Authorised
          content: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponseMessage"
      x-publicAPI: 'true'
    put:
      tags:
      - Adapter Management
      summary: Update draft in system.
      description: 'Entitlements required: manageAppAccessAdmin (Manage application
        lifecycle)'
      operationId: updateDraft
      parameters:
      - name: profileId
        in: path
        description: ID of the profile to get
        required: true
        schema:
          type: string
      requestBody:
        description: Attribute ID from attribute service
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/CreateProfileBodyData"
        required: true
      responses:
        '200':
          description: All available custom profiles
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreateProfileResponseData"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponseMessage"
        '401':
          description: User not Authorised
          content: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponseMessage"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Adapter Management
      summary: Delete specified profile
      description: 'Entitlements required: manageAppAccessAdmin (Manage application
        lifecycle)'
      operationId: deleteProfile
      parameters:
      - name: profileId
        in: path
        description: ID of the profile to delete
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Profile deleted successfully
          content: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponseMessage"
        '401':
          description: User not Authorised
          content: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponseMessage"
      x-publicAPI: 'true'
  "/config/v1.0/templates/{templateId}/profiles":
    get:
      tags:
      - Adapter Management
      summary: Get all profiles in system for a tenant with a given template id.
      operationId: getProfileForTemplate
      parameters:
      - name: templateId
        in: path
        description: Template id for which profiles needs to be fetched
        required: true
        schema:
          type: string
      responses:
        '200':
          description: All available tenant specific profiles for a given template
            id.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetProfileListForTemplateResponse"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponseMessage"
        '401':
          description: User not Authorised
          content: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponseMessage"
      x-publicAPI: 'true'
  "/config/v1.0/templates/{templateId}/profiles/{profileId}":
    get:
      tags:
      - Adapter Management
      summary: Get webui template in the system for a given profile id and template
        id.
      description: 'Entitlements required: manageAppAccessAdmin (Manage application
        lifecycle)'
      operationId: getWebUiTemplateForProfile
      parameters:
      - name: templateId
        in: path
        description: Template id for which webui template needs to be fetched
        required: true
        schema:
          type: string
      - name: profileId
        in: path
        description: Profile id for which webui template needs to be fetched
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The webui template for a given template id.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetWebUiTemplateResponse"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponseMessage"
        '401':
          description: User not Authorised
          content: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponseMessage"
      x-publicAPI: 'true'
  "/config/v1.0/profiles/{profileId}/publish":
    post:
      tags:
      - Adapter Management
      summary: Publish the profile
      description: 'Entitlements required: manageAppAccessAdmin (Manage application
        lifecycle)'
      operationId: publishProfile
      parameters:
      - name: profileId
        in: path
        description: ID of the profile to publish
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Profile published successfully
          content: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponseMessage"
        '401':
          description: User not Authorised
          content: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponseMessage"
      x-publicAPI: 'true'
  "/config/v1.0/profiles/upload":
    post:
      tags:
      - Adapter Management
      summary: Upload the identity adapter profile JAR file.
      description: 'Entitlements required: manageAppAccessAdmin (Manage application
        lifecycle)'
      operationId: validateUploadedFileSize
      responses:
        '200':
          description: JAR file uploaded successfully
          content: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponseMessage"
        '401':
          description: User not Authorised
          content: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponseMessage"
      x-publicAPI: 'true'
  "/config/v1.0/profiles/upload/{profileId}":
    put:
      tags:
      - Adapter Management
      summary: Update the identity adapter profile.
      description: 'Entitlements required: manageAppAccessAdmin (Manage application
        lifecycle)'
      operationId: validateUploadedFileSize1
      parameters:
      - name: profileId
        in: path
        description: ID of the profile to update
        required: true
        schema:
          type: string
      responses:
        '200':
          description: profile modified successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetProfileUpdateResponse"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponseMessage"
        '401':
          description: User not Authorised
          content: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponseMessage"
      x-publicAPI: 'true'
  "/config/v1.0/onpremagents":
    get:
      tags:
      - Agent Bridge Support Service
      summary: Retrieve agent configurations.
      description: Retrieve a list of the agent configurations. <br><br>'readExternalAgents',
        'manageExternalAgents' are permitted to view all configurations whereas 'runExternalAgent'
        is only permitted to view a single configuration associated with the access
        token.<br><br><b>Entitlements:</b><br> - manageExternalAgents (Manage external
        Agent configurations)<br> - readExternalAgents (Read external Agent configurations)<br>
        - runExternalAgent (Perform functions of an external agent)
      operationId: listOnpremAgents
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>You
          can use the following query parameters:<br><br><b>count</b> - Optional.
          Use to define the total number of results that are returned from the data
          store. The maximum allowed value is 1000. If excluded will be set to limit.<br><br><b>page</b>
          - Use to identify the requested page, or the offset.<br><br><b>limit</b>
          - Use to define the total number of results that are returned per page.
          The maximum allowed value is 1000.<br><br>A maximum of 200 results are returned
          if no pagination query parameters are passed.<br><br><b>Note</b>: The pagination
          parameter value must be HTML encoded. Use the prefix "pagination=" in the
          query parameter.<br><br><b>Example</b>: Paginate on count=10&page=1&limit=5<br>pagination=count%3D10%26page%3D1%26limit%3D5'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for Strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for Booleans are = and !=<br>Valid operators
          for Numbers are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>: The search
          parameter value must be HTML encoded. Use the prefix "search=" in the query
          parameter.<br><br><b>Example</b>: Search on id contains "fd45"&enabled=true<br>search=id%20contains%20%22fd45%22%26enabled%3Dtrue'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values to be inclusive or exclusive only. It cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          The filter parameter value must be HTML encoded. Use the prefix "filter="
          in the query parameter.<br><br><b>Examples</b><br>Filter to return only
          id : filter=id<br>Filter to exclude id and enabled : filter=%21id,enabled'
        schema:
          type: string
      responses:
        '200':
          description: The list of agent configurations.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OnpremAgentConfiguration"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Agent Bridge Support Service
      summary: Create an agent configuration.
      description: Creates a new agent configuration.<br><br><b>Entitlements:</b><br>
        - manageExternalAgents (Manage external Agent configurations)<br> - readExternalAgents
        (Read external Agent configurations)<br> - runExternalAgent must be disabled/unchecked
      operationId: createOnpremAgent
      requestBody:
        description: A JSON payload that specifies the configuration data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateOnpremAgentConfiguration"
        required: true
      responses:
        '201':
          description: The agent configuration was created.
          headers:
            Location:
              description: The URL of the newly created configuration.
              schema:
                type: string
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OnpremAgentConfiguration"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '406':
          description: The server cannot produce a response matching the list of acceptable
            values
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/NotAcceptable"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/config/v1.0/onpremagents/corruptedconfigs":
    get:
      tags:
      - Agent Bridge Support Service
      summary: Retrieve corrupted agent configuration(s) which can't be decrypted
        due to missing certificate
      description: Retrieve a list of the corrupted agent configurations.<br><br>'readExternalAgents',
        'manageExternalAgents' are permitted to view all configurations whereas 'runExternalAgent'
        is only permitted to view a single configuration associated with the access
        token.<br><br><b>Entitlements:</b><br> - manageExternalAgents (Manage external
        Agent configurations)<br> - readExternalAgents (Read external Agent configurations)
      operationId: listCorruptedOnpremAgents
      responses:
        '200':
          description: The list of corrupted agent configurations.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OnpremAgentCorruptConfiguration"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/config/v1.0/onpremagents/{id}":
    get:
      tags:
      - Agent Bridge Support Service
      summary: Retrieve a specific agent's configuration.
      description: Retrieves a specific agent configuration.<br><br><b>Entitlements:</b><br>
        - manageExternalAgents (Manage external Agent configurations)<br> - readExternalAgents
        (Read external Agent configurations)<br> - runExternalAgent (Perform functions
        of an external agent)
      operationId: getOnpremAgent
      parameters:
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values to be inclusive or exclusive only. It cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          The filter parameter value must be HTML encoded. Use the prefix "filter="
          in the query parameter.<br><br><b>Examples</b><br>Filter to return only
          id : filter=id<br>Filter to exclude id and enabled : filter=%21id,enabled'
        schema:
          type: string
      - name: id
        in: path
        description: The agent identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific configuration.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OnpremAgentConfiguration"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Agent Bridge Support Service
      summary: Update a specific agent configuration.
      description: Updates the specified agent configuration.<br><br><b>NB:</b> modifications
        may take several minutes to take effect.<br><br><b>Entitlements:</b><br> -
        manageExternalAgents (Manage external Agent configurations)<br> - runExternalAgent
        must be disabled/unchecked
      operationId: updateOnpremAgent
      parameters:
      - name: id
        in: path
        description: The agent identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: The updated configuration.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/OnpremAgentConfiguration"
        required: true
      responses:
        '204':
          description: The configuration was updated.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Agent Bridge Support Service
      summary: Delete an agent configuration.
      description: Deletes the specified agent configuration.<br><br><b>NB:</b> deletion
        may take several minutes to take effect.<br><br><b>Entitlements:</b><br> -
        manageExternalAgents (Manage external Agent configurations)<br> - runExternalAgent
        must be disabled/unchecked
      operationId: deleteOnpremAgent
      parameters:
      - name: id
        in: path
        description: The agent identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The agent configuration was removed.
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '406':
          description: The server cannot produce a response matching the list of acceptable
            values
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/NotAcceptable"
      x-publicAPI: 'true'
  "/config/v1.0/onpremagents/{id}/apicreds":
    get:
      tags:
      - Agent Bridge Support Service
      summary: Retrieve the API Client credentials.
      description: Retrieve the API Client credentials for the associated API Clients.<br><br><b>Entitlements:</b><br>
        - manageExternalAgents (Manage external Agent configurations)<br> - readExternalAgents
        (Read external Agent configurations)
      operationId: listOnpremAgentApiCreds
      parameters:
      - name: id
        in: path
        description: The agent identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The list of API credentials.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OnpremAgentApiCred"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/apiclients":
    get:
      tags:
      - API Clients
      summary: Lists the API Clients
      description: 'Gets a list of the configured API clients. Note: The response
        contains the API client ID and secret for each API client. The API client
        secret is privileged information.<br><br>Entitlements required: manageAPIClients
        (Manage API clients) or readAPIClients (Read API clients)'
      operationId: getAPIClients
      parameters:
      - name: pagination
        in: query
        description: 'The prefix for the paging parameter is "pagination=". If no
          pagination parameters are passed in, all results are returned. The maximum
          allowed value for limit or count is 1000. <br><b>count</b> is the total
          number of results to be returned from the data store.<br><b>page</b> is
          which page we are requesting, or the offset. <br><b>limit</b> is the total
          number of results to return in one page.<br><br>The pagination parameter
          value <b>must</b> be HTML encoded.<br>Note: This is not required when using
          the Swagger UI.<br><br><b>Example:</b> Paginate on count=10&page=1&limit=5<br>pagination=count%3D10%26page%3D1%26limit%3D5'
        schema:
          type: string
      - name: sort
        in: query
        description: 'The prefix for the sort parameter is "sort=". Each attribute
          must be prefixed with either + or - (+ ascending, - descending). Multiple
          attributes must be separated by a comma (,).<br><br>The valid fields for
          sorting are: clientId, clientName, and enabled.<br><br>The sort parameter
          value <b>must</b> be HTML encoded.<br>Note: This is not required when using
          the Swagger UI.<br><br><b>Example:</b> Sort on -enabled,+clientId<br>sort=-enabled%2C%2BclientId'
        schema:
          type: string
      - name: search
        in: query
        description: 'The prefix for all search operations is "search=".<br>Valid
          operators for strings are = , !=  and contains <br>Valid operators for booleans
          are = and !=<br>Valid operators for numbers are >=, >, &lt=, &lt, = and
          !=<br>String search values must be double quoted, numbers and booleans must
          not.<br><br>The valid fields for sorting are: clientId, clientName, and
          enabled.<br><br>The search parameter value <b>must</b> be HTML encoded.<br>Note:
          This is not required when using the Swagger UI.<br><br><b>Example:</b> Search
          on clientId contains "ABCDEF"&enabled=true<br>search=clientId%20contains%20%22ABCDEF%22%26enabled%3Dtrue'
        schema:
          type: string
      - name: filter
        in: query
        description: 'The prefix for the filter parameter is "filter="<br>Valid formats
          are either inclusive only or exclusive only. These must not be intermingled.
          Multiple filter parameters must be separated by a comma (,).<br><br>The
          valid fields for filtering are: id, clientId, clientName, clientSecret,
          entitlements, and enabled.<br><br>The filter parameter value <b>must</b>
          be HTML encoded.<br>Note: This is not required when using the Swagger UI.<br><br><b>Examples</b><br>Filter
          to only return clientId:<br>filter=clientId<br><br>Filter to exclude clientSecret
          and enabled:<br>filter=%21clientSecret,enabled'
        schema:
          type: string
      responses:
        '200':
          description: The operation was successful.
          content: {}
        '400':
          description: The query parameters contained invalid values.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The access token does not allow access to the requested resource.
          content: {}
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - API Clients
      summary: Create an API Client
      description: "Creates an API client with a random client ID and secret and assigns
        the given entitlements. The client is configured with the client_credentials
        grant type. You must perform a GET operation on the returned location header
        to get the generated client ID and secret.<br><br>The entitlements array can
        contain any combination of entitlements.<br><br><details><summary>List of
        API Client entitlements:</summary><br><table><tr><th>Entitlement</th><th>Description</th><th>Offering</th></tr><tr><td>manageDeployment</td><td>Manage
        deployment</td><td>any</td></tr><tr><td>manageCerts</td><td>Manage certificates</td><td>any</td></tr><tr><td>readCerts</td><td>Read
        certificates</td><td>any</td></tr><tr><td>manageAPIClients</td><td>Manage
        API clients</td><td>any</td></tr><tr><td>readAPIClients</td><td>Read API clients</td><td>any</td></tr><tr><td>manageIdentitySources</td><td>Manage
        identity providers</td><td>any</td></tr><tr><td>readIdentitySources</td><td>Read
        identity providers</td><td>any</td></tr><tr><td>manageMFAMethods</td><td>Manage
        second-factor authentication method configuration</td><td>CIC</td></tr><tr><td>readMFAMethods</td><td>Read
        second-factor authentication method configuration</td><td>CIC</td></tr><tr><td>manageEnrollMFAMethodAnyUser</td><td>Manage
        second-factor authentication enrollment for all users</td><td>CIV</td></tr><tr><td>readEnrollMFAMethodAnyUser</td><td>Read
        second-factor authentication enrollment for all users</td><td>CIV</td></tr><tr><td>authnAnyUser</td><td>Authenticate
        any user</td><td>CIV</td></tr><tr><td>manageAuthenticatorsConfig</td><td>Manage
        authenticator configuration</td><td>CIV</td></tr><tr><td>readAuthenticatorsConfig</td><td>Read
        authenticator configuration</td><td>CIV</td></tr><tr><td>manageAuthenticatorsAnyUser</td><td>Manage
        authenticator registrations for all users</td><td>CIV</td></tr><tr><td>readAuthenticatorsAnyUser</td><td>Read
        authenticator registrations for all users</td><td>CIV</td></tr><tr><td>manageUserGroups</td><td>Manage
        users and groups</td><td>any</td></tr><tr><td>readUserGroups</td><td>Read
        users and groups</td><td>any</td></tr><tr><td>manageAllUserGroups</td><td>Synchronize
        users and groups</td><td>any</td></tr><tr><td>manageUsersPwdReset</td><td>Manage
        users and their pwdReset attribute</td><td>any</td></tr><tr><td>manageUserStandardGroups</td><td>Manage
        users and standard groups</td><td>any</td></tr><tr><td>manageAdminGroup</td><td>Manage
        administrator group</td><td>any</td></tr><tr><td>readAdminGroup</td><td>Read
        administrator group</td><td>any</td></tr><tr><td>managePwdPolicy</td><td>Manage
        password policy</td><td>any</td></tr><tr><td>readPwdPolicy</td><td>Read password
        policy</td><td>any</td></tr><tr><td>AnalyticsDataSyncToCloud</td><td></td><td>CIA</td></tr><tr><td>AnalyticsSatelliteOnBoard</td><td></td><td>CIA</td></tr><tr><td>manageOIDCGrants</td><td>Manage
        OAuth tokens</td><td>any</td></tr><tr><td>readOIDCGrants</td><td>Read OAuth
        tokens</td><td>any</td></tr><tr><td>recoverUsername</td><td>Recover user name</td><td>any</td></tr><tr><td>manageFederations</td><td>Manage
        federations\t</td><td>any</td></tr><tr><td>readFederations</td><td>Read federations\t</td><td>any</td></tr><tr><td>resetPassword</td><td>Reset
        password\t</td><td>any</td></tr><tr><td>manageAppAccessAdmin</td><td>Manage
        application lifecycle</td><td>any</td></tr><tr><td>manageAppAccessOwner</td><td>Manage
        application entitlements</td><td>any</td></tr><tr><td>manageSubscriptions</td><td>Manage
        subscriptions</td><td>ISC</td></tr><tr><td>manageAccessPolicies</td><td>Manage
        access policies</td><td>any</td></tr><tr><td>readAccessPolicies</td><td>Read
        access policies</td><td>any</td></tr><tr><td>managePushCreds</td><td>Manage
        Push notification credentials</td><td>any</td></tr><tr><td>readPushCreds</td><td>Read
        Push notification credentials</td><td>any</td></tr><tr><td>manageAccessRequest</td><td>Manage
        access request</td><td>CIG</td></tr><tr><td>manageAccessWorkflow</td><td>Manage
        access request work flows</td><td>CIG</td></tr><tr><td>manageOIDCConsents</td><td>Manage
        OAuth consents</td><td>any</td></tr><tr><td>readOIDCConsents</td><td>Read
        OAuth consents</td><td>any</td></tr><tr><td>manageReports</td><td>Manage reports</td><td>any.
        Exception: application usage reports can only be exported by CIC.</td></tr><tr><td>readReports</td><td>Read
        reports</td><td>any. Exception: application usage reports can only be accessed
        by CIC.</td></tr><tr><td>updateAnyUser</td><td>Update any user</td><td>any</td></tr><tr><td>resetPasswordAnyUser</td><td>Reset
        password of any user</td><td>any</td></tr><tr><td>readTenantProperties</td><td>Read
        tenant properties</td><td>any</td></tr><tr><td>manageTenantProperties</td><td>Manage
        tenant properties</td><td>any</td></tr><tr><td>manageAttributes</td><td>Manage
        attribute sources</td><td>any</td></tr><tr><td>readAttributes</td><td>Read
        attribute sources</td><td>any</td></tr><tr><td>generateOTP</td><td>Generate
        OTP</td><td>CIV</td></tr><tr><td>readAppConfig</td><td>Read application configuration</td><td>any</td></tr><tr><td>manageTemplates</td><td>Manage
        templates and themes</td><td>any</td></tr><tr><td>readTemplates</td><td>Read
        templates and themes</td><td>any</td></tr><tr><td>reviewCertRecords</td><td>Review
        certification records</td><td>CIG</td></tr><tr><td>readEntitlements</td><td>Read
        configurable entitlements</td><td>any</td></tr><tr><td>manageNotificationProviders</td><td>Manage
        notification providers</td><td>any</td></tr><tr><td>readNotificationProviders</td><td>Read
        notification providers</td><td>any</td></tr><tr><td>manageCertifications</td><td>Manage
        certifications</td><td>CIG</td></tr><tr><td>readExternalAgents</td><td>Read
        external agents</td><td>any</td></tr><tr><td>manageExternalAgents</td><td>Manage
        external agents</td><td>any</td></tr><tr><td>runExternalAgent</td><td>Enable
        external agent runtime functions</td><td>any</td></tr><tr><td>manageOidcDynamicClient</td><td>Manage
        OIDC client registration dynamically</td><td>any</td></tr><tr><td>readPurpose</td><td>Read
        privacy purposes and EULA</td><td>any</td></tr><tr><td>managePurpose</td><td>Manage
        privacy purposes and EULA</td><td>any</td></tr><tr><td>manageAppPurpose</td><td>Manage
        application privacy purposes</td><td>any</td></tr><tr><td>readPrivacyConsent</td><td>Read
        privacy consents</td><td>any</td></tr><tr><td>managePrivacyConsent</td><td>Manage
        privacy consents</td><td>any</td></tr><tr><td>readPrivacyPolicy</td><td>Read
        privacy rules and policy</td><td>any</td></tr><tr><td>managePrivacyPolicy</td><td>Manage
        privacy rules and policy</td><td>any</td></tr><tr><td>createPrivacyConsent</td><td>Create
        privacy consent records</td><td>any</td></tr><tr><td>performDSP</td><td>Retrieve
        privacy purposes and associated user's consent</td><td>any</td></tr><tr><td>performDUA</td><td>Check
        for data usage approval</td><td>any</td></tr><tr><td>certCampaignSupervisor</td><td>Monitor
        certification campaigns</td><td>CIG</td></tr><tr><td>managePwdVaultAnyUser</td><td>Manage
        password vault for all users</td><td>CIC, CIV</td></tr><tr><td>managePwdVault</td><td>Manage
        own password vault</td><td>CIC, CIV</td></tr><tr><td>readPwdVaultAnyUser</td><td>Read
        password vault for all users</td><td>CIC, CIV</td></tr><tr><td>readPwdVault</td><td>Read
        own password vault</td><td>CIC, CIV</td></tr><tr><td>managePwdVaultConfig</td><td>Manage
        password vault configuration</td><td>CIC, CIV</td></tr><tr><td>readPwdVaultConfig</td><td>Read
        password vault configuration</td><td>CIC, CIV</td></tr><tr><td>mfaPush</td><td>Send
        second-factor push notifications</td><td>CIV</td></tr><tr><td>readPrivacyProfile</td><td>Read
        privacy profiles</td><td>any</td></tr><tr><td>managePrivacyProfile</td><td>Manage
        privacy profiles</td><td>any</td></tr><tr><td>manageEntitlements</td><td>Manage
        entitlements</td><td>any</td></tr><tr><td>manageDevicesAnyUser</td><td>Manage
        devices for all users</td><td>any</td></tr><tr><td>readDevicesAnyUser</td><td>Read
        devices for all users</td><td>any</td></tr><tr><td>manageDevices</td><td>Manage
        only your devices</td><td>any</td></tr><tr><td>readDevices</td><td>Read only
        your devices</td><td>any</td></tr><tr><td>manageRecaptcha</td><td>Manage reCAPTCHA
        configuration</td><td>any</td></tr><tr><td>readRecaptcha</td><td>Read reCAPTCHA
        configuration</td><td>any</td></tr><tr><td>manageLoginSessions</td><td>Manage
        login sessions</td><td>any</td></tr><tr><td>manageRelyingParty</td><td>Manage
        relying party configuration</td><td>any</td></tr><tr><td>readRelyingParty</td><td>Read
        relying party configuration</td><td>any</td></tr><tr><td>manageWebhooks</td><td>Manage
        webhooks <td>any</td></tr><tr><td>readWebhooks</td><td>Read webhooks </td><td>any</td></tr><tr><td>readSTSClients</td><td>Read
        STS clients and token types</td><td>any</td></tr><tr><td>manageSTSClients</td><td>Manage
        STS clients and token types</td><td>any</td></tr><tr><td>manageVerifiableLinks</td><td>Manage
        verifiable links configuration</td><td>any</td></tr><tr><td>readSelfOidcGrants</td><td>Read
        your OIDC and OAuth grants</td><td>any</td></tr><tr><td>manageSelfOidcGrants</td><td>Manage
        your OIDC and OAuth grants</td><td>any</td></tr><tr><td>diManageAgency</td><td>Manage
        Decentralized Identity Agency Configuration</td><td>any</td></tr><tr><td>diReadAgency</td><td>Read
        Decentralized Identity Agency Configuration</td><td>any</td></tr><tr><td>diManageAgentsAny</td><td>Manage
        Decentralized Identity Agents</td><td>any</td></tr><tr><td>diReadAgentsAny</td><td>Read
        Decentralized Identity Agents</td><td>any</td></tr><tr><td>manageMyOrg</td><td>Manage
        my organization</td><td>CIG</td></tr><tr><td>diIssueCredentials</td><td>Issue
        Decentralized Identity Verifiable Credentials</td><td>CIV</td></tr><tr><td>diVerifyCredentials</td><td>Verify
        Decentralized Identity Verifiable Credentials</td><td>CIV</td></tr></table></details><br><br>Entitlements
        required: manageAPIClients (Manage API clients)"
      operationId: createAPIClient
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/APIClientConfigRequest"
        required: false
      responses:
        '201':
          description: The API client was created successfully.
          content: {}
        '400':
          description: The JSON input was invalid.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The access token does not allow access to the requested resource.
          content: {}
        '500':
          description: Internal server error.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    patch:
      tags:
      - API Clients
      summary: Bulk deletes the API clients
      description: 'Deletes all of the specified API clients. A successful response
        is returned even if the object does not exist.<br><br>Entitlements required:
        manageAPIClients (Manage API clients)'
      operationId: bulkDeleteAPIClient
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/BulkOperation"
        required: false
      responses:
        '204':
          description: All operations were successful
          content: {}
        '207':
          description: Not all operations were successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BulkResponse"
        '400':
          description: One or more invalid input parameters.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The access token does not allow access to the requested resource.
          content: {}
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/apiclients/{clientId}":
    get:
      tags:
      - API Clients
      summary: Gets a specific API client
      description: 'Gets the API client with the specified ID. Note: The response
        contains the API client ID and secret. The API client secret is privileged
        information.<br><br>Entitlements required: manageAPIClients (Manage API clients)
        or readAPIClients (Read API clients)'
      operationId: getAPIClient
      parameters:
      - name: clientId
        in: path
        description: The unique ID of a client.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The API client was retrieved successfully.
          content: {}
        '400':
          description: One or more invalid input parameters.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The access token does not allow access to the requested resource.
          content: {}
        '404':
          description: The requested API client does not exist.
          content: {}
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - API Clients
      summary: Updates a specific API client
      description: "Updates the specified API client properties except for the ID
        and the client ID which cannot be modified. If the client secret is not specified,
        then a new client secret will be generated.<br><br>The entitlements array
        can contain any combination of entitlements.<br><br><details><summary>List
        of API Client entitlements:</summary><br><table><tr><th>Entitlement</th><th>Description</th><th>Offering</th></tr><tr><td>manageDeployment</td><td>Manage
        deployment</td><td>any</td></tr><tr><td>manageCerts</td><td>Manage certificates</td><td>any</td></tr><tr><td>readCerts</td><td>Read
        certificates</td><td>any</td></tr><tr><td>manageAPIClients</td><td>Manage
        API clients</td><td>any</td></tr><tr><td>readAPIClients</td><td>Read API clients</td><td>any</td></tr><tr><td>manageIdentitySources</td><td>Manage
        identity providers</td><td>any</td></tr><tr><td>readIdentitySources</td><td>Read
        identity providers</td><td>any</td></tr><tr><td>manageMFAMethods</td><td>Manage
        second-factor authentication method configuration</td><td>CIC</td></tr><tr><td>readMFAMethods</td><td>Read
        second-factor authentication method configuration</td><td>CIC</td></tr><tr><td>manageEnrollMFAMethodAnyUser</td><td>Manage
        second-factor authentication enrollment for all users</td><td>CIV</td></tr><tr><td>readEnrollMFAMethodAnyUser</td><td>Read
        second-factor authentication enrollment for all users</td><td>CIV</td></tr><tr><td>authnAnyUser</td><td>Authenticate
        any user</td><td>CIV</td></tr><tr><td>manageAuthenticatorsConfig</td><td>Manage
        authenticator configuration</td><td>CIV</td></tr><tr><td>readAuthenticatorsConfig</td><td>Read
        authenticator configuration</td><td>CIV</td></tr><tr><td>manageAuthenticatorsAnyUser</td><td>Manage
        authenticator registrations for all users</td><td>CIV</td></tr><tr><td>readAuthenticatorsAnyUser</td><td>Read
        authenticator registrations for all users</td><td>CIV</td></tr><tr><td>manageUserGroups</td><td>Manage
        users and groups</td><td>any</td></tr><tr><td>readUserGroups</td><td>Read
        users and groups</td><td>any</td></tr><tr><td>manageAllUserGroups</td><td>Synchronize
        users and groups</td><td>any</td></tr><tr><td>manageUsersPwdReset</td><td>Manage
        users and their pwdReset attribute</td><td>any</td></tr><tr><td>manageUserStandardGroups</td><td>Manage
        users and standard groups</td><td>any</td></tr><tr><td>manageAdminGroup</td><td>Manage
        administrator group</td><td>any</td></tr><tr><td>readAdminGroup</td><td>Read
        administrator group</td><td>any</td></tr><tr><td>managePwdPolicy</td><td>Manage
        password policy</td><td>any</td></tr><tr><td>readPwdPolicy</td><td>Read password
        policy</td><td>any</td></tr><tr><td>AnalyticsDataSyncToCloud</td><td></td><td>CIA</td></tr><tr><td>AnalyticsSatelliteOnBoard</td><td></td><td>CIA</td></tr><tr><td>manageOIDCGrants</td><td>Manage
        OAuth tokens</td><td>any</td></tr><tr><td>readOIDCGrants</td><td>Read OAuth
        tokens</td><td>any</td></tr><tr><td>recoverUsername</td><td>Recover user name</td><td>any</td></tr><tr><td>manageFederations</td><td>Manage
        federations\t</td><td>any</td></tr><tr><td>readFederations</td><td>Read federations\t</td><td>any</td></tr><tr><td>resetPassword</td><td>Reset
        password\t</td><td>any</td></tr><tr><td>manageAppAccessAdmin</td><td>Manage
        application lifecycle</td><td>any</td></tr><tr><td>manageAppAccessOwner</td><td>Manage
        application entitlements</td><td>any</td></tr><tr><td>manageSubscriptions</td><td>Manage
        subscriptions</td><td>ISC</td></tr><tr><td>manageAccessPolicies</td><td>Manage
        access policies</td><td>any</td></tr><tr><td>readAccessPolicies</td><td>Read
        access policies</td><td>any</td></tr><tr><td>managePushCreds</td><td>Manage
        Push notification credentials</td><td>any</td></tr><tr><td>readPushCreds</td><td>Read
        Push notification credentials</td><td>any</td></tr><tr><td>manageAccessRequest</td><td>Manage
        access request</td><td>CIG</td></tr><tr><td>manageAccessWorkflow</td><td>Manage
        access request work flows</td><td>CIG</td></tr><tr><td>manageOIDCConsents</td><td>Manage
        OAuth consents</td><td>any</td></tr><tr><td>readOIDCConsents</td><td>Read
        OAuth consents</td><td>any</td></tr><tr><td>manageReports</td><td>Manage reports</td><td>any.
        Exception: application usage reports can only be exported by CIC.</td></tr><tr><td>readReports</td><td>Read
        reports</td><td>any. Exception: application usage reports can only be accessed
        by CIC.</td></tr><tr><td>updateAnyUser</td><td>Update any user</td><td>any</td></tr><tr><td>resetPasswordAnyUser</td><td>Reset
        password of any user</td><td>any</td></tr><tr><td>readTenantProperties</td><td>Read
        tenant properties</td><td>any</td></tr><tr><td>manageTenantProperties</td><td>Manage
        tenant properties</td><td>any</td></tr><tr><td>manageAttributes</td><td>Manage
        attribute sources</td><td>any</td></tr><tr><td>readAttributes</td><td>Read
        attribute sources</td><td>any</td></tr><tr><td>generateOTP</td><td>Generate
        OTP</td><td>CIV</td></tr><tr><td>readAppConfig</td><td>Read application configuration</td><td>any</td></tr><tr><td>manageTemplates</td><td>Manage
        templates and themes</td><td>any</td></tr><tr><td>readTemplates</td><td>Read
        templates and themes</td><td>any</td></tr><tr><td>reviewCertRecords</td><td>Review
        certification records</td><td>CIG</td></tr><tr><td>readEntitlements</td><td>Read
        configurable entitlements</td><td>any</td></tr><tr><td>manageNotificationProviders</td><td>Manage
        notification providers</td><td>any</td></tr><tr><td>readNotificationProviders</td><td>Read
        notification providers</td><td>any</td></tr><tr><td>manageCertifications</td><td>Manage
        certifications</td><td>CIG</td></tr><tr><td>readExternalAgents</td><td>Read
        external agents</td><td>any</td></tr><tr><td>manageExternalAgents</td><td>Manage
        external agents</td><td>any</td></tr><tr><td>runExternalAgent</td><td>Enable
        external agent runtime functions</td><td>any</td></tr><tr><td>manageOidcDynamicClient</td><td>Manage
        OIDC client registration dynamically</td><td>any</td></tr><tr><td>readPurpose</td><td>Read
        privacy purposes and EULA</td><td>any</td></tr><tr><td>managePurpose</td><td>Manage
        privacy purposes and EULA</td><td>any</td></tr><tr><td>manageAppPurpose</td><td>Manage
        application privacy purposes</td><td>any</td></tr><tr><td>readPrivacyConsent</td><td>Read
        privacy consents</td><td>any</td></tr><tr><td>managePrivacyConsent</td><td>Manage
        privacy consents</td><td>any</td></tr><tr><td>readPrivacyPolicy</td><td>Read
        privacy rules and policy</td><td>any</td></tr><tr><td>managePrivacyPolicy</td><td>Manage
        privacy rules and policy</td><td>any</td></tr><tr><td>createPrivacyConsent</td><td>Create
        privacy consent records</td><td>any</td></tr><tr><td>performDSP</td><td>Retrieve
        privacy purposes and associated user's consent</td><td>any</td></tr><tr><td>performDUA</td><td>Check
        for data usage approval</td><td>any</td></tr><tr><td>certCampaignSupervisor</td><td>Monitor
        certification campaigns</td><td>CIG</td></tr><tr><td>managePwdVaultAnyUser</td><td>Manage
        password vault for all users</td><td>CIC, CIV</td></tr><tr><td>managePwdVault</td><td>Manage
        own password vault</td><td>CIC, CIV</td></tr><tr><td>readPwdVaultAnyUser</td><td>Read
        password vault for all users</td><td>CIC, CIV</td></tr><tr><td>readPwdVault</td><td>Read
        own password vault</td><td>CIC, CIV</td></tr><tr><td>managePwdVaultConfig</td><td>Manage
        password vault configuration</td><td>CIC, CIV</td></tr><tr><td>readPwdVaultConfig</td><td>Read
        password vault configuration</td><td>CIC, CIV</td></tr><tr><td>mfaPush</td><td>Send
        second-factor push notifications</td><td>CIV</td></tr><tr><td>readPrivacyProfile</td><td>Read
        privacy profiles</td><td>any</td></tr><tr><td>managePrivacyProfile</td><td>Manage
        privacy profiles</td><td>any</td></tr><tr><td>manageEntitlements</td><td>Manage
        entitlements</td><td>any</td></tr><tr><td>manageDevicesAnyUser</td><td>Manage
        devices for all users</td><td>any</td></tr><tr><td>readDevicesAnyUser</td><td>Read
        devices for all users</td><td>any</td></tr><tr><td>manageDevices</td><td>Manage
        only your devices</td><td>any</td></tr><tr><td>readDevices</td><td>Read only
        your devices</td><td>any</td></tr><tr><td>manageRecaptcha</td><td>Manage reCAPTCHA
        configuration</td><td>any</td></tr><tr><td>readRecaptcha</td><td>Read reCAPTCHA
        configuration</td><td>any</td></tr><tr><td>manageLoginSessions</td><td>Manage
        login sessions</td><td>any</td></tr><tr><td>manageRelyingParty</td><td>Manage
        relying party configuration</td><td>any</td></tr><tr><td>readRelyingParty</td><td>Read
        relying party configuration</td><td>any</td></tr><tr><td>manageWebhooks</td><td>Manage
        webhooks <td>any</td></tr><tr><td>readWebhooks</td><td>Read webhooks </td><td>any</td></tr><tr><td>readSTSClients</td><td>Read
        STS clients and token types</td><td>any</td></tr><tr><td>manageSTSClients</td><td>Manage
        STS clients and token types</td><td>any</td></tr><tr><td>manageVerifiableLinks</td><td>Manage
        verifiable links configuration</td><td>any</td></tr><tr><td>readSelfOidcGrants</td><td>Read
        your OIDC and OAuth grants</td><td>any</td></tr><tr><td>manageSelfOidcGrants</td><td>Manage
        your OIDC and OAuth grants</td><td>any</td></tr><tr><td>diManageAgency</td><td>Manage
        Decentralized Identity Agency Configuration</td><td>any</td></tr><tr><td>diReadAgency</td><td>Read
        Decentralized Identity Agency Configuration</td><td>any</td></tr><tr><td>diManageAgentsAny</td><td>Manage
        Decentralized Identity Agents</td><td>any</td></tr><tr><td>diReadAgentsAny</td><td>Read
        Decentralized Identity Agents</td><td>any</td></tr><tr><td>manageMyOrg</td><td>Manage
        my organization</td><td>CIG</td></tr><tr><td>diIssueCredentials</td><td>Issue
        Decentralized Identity Verifiable Credentials</td><td>CIV</td></tr><tr><td>diVerifyCredentials</td><td>Verify
        Decentralized Identity Verifiable Credentials</td><td>CIV</td></tr></table></details><br><br>Entitlements
        required: manageAPIClients (Manage API clients)"
      operationId: updateAPIClient
      parameters:
      - name: clientId
        in: path
        description: The unique ID of a client.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/APIClientConfig"
        required: false
      responses:
        '204':
          description: The API client was updated.
          content: {}
        '400':
          description: One or more invalid input parameters.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The access token does not allow access to the requested resource.
          content: {}
        '404':
          description: The requested API client does not exist
          content: {}
        '500':
          description: Internal server error.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - API Clients
      summary: Deletes an API client
      description: 'Deletes the specified API client. A successful response is returned
        even if the object does not exist.<br><br>Entitlements required: manageAPIClients
        (Manage API clients)'
      operationId: deleteAPIClient
      parameters:
      - name: clientId
        in: path
        description: The unique ID of a client
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The API client was removed.
          content: {}
        '400':
          description: One or more invalid input parameters.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The access token does not allow access to the requested resource.
          content: {}
        '500':
          description: Internal server error.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/apiclients/{clientId}/credentials":
    get:
      tags:
      - API Clients
      summary: Gets a YAML response that contains the credentials for a specific client.
      description: 'Gets the YAML response that contains the credentials for a specific
        client including the client ID, client secret, and discovery endpoint. All
        protected information will be encoded.<br><br>Entitlements required: manageAPIClients
        (Manage API clients) or readAPIClients (Read API clients)'
      operationId: getAPIClientYAML
      parameters:
      - name: clientId
        in: path
        description: The unique ID of a client.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The YAML response was retrieved successfully.
          content: {}
        '400':
          description: One or more invalid input parameters.
          content:
            application/yaml:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The privileges to access the requested client are invalid.
          content:
            application/yaml:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The requested client does not exist.
          content:
            application/yaml:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal server error.
          content:
            application/yaml:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/accounts/operations":
    get:
      tags:
      - Application Access
      summary: Gets the list of all the operations that are performed on accounts
        of this tenant.
      description: 'Entitlements required:  manageAppAccessAdmin  (Manage application
        lifecycle), manageAppAccessOwner (Manage application entitlements), readAppConfig
        (Read Application Configuration)'
      operationId: searchOperations
      parameters:
      - name: search
        in: query
        description: |-
          Search query to filter the operation records. It can be based on `type` and `status` fields. Free text search is also supported.

           Examples:

           1. "type=AP" - Get all operations of type account provisioning

           2. "status=FAILED" - Get all failed operations

           3. "type=AR&status=SUCCESS" - Get all successful account restore operations.

           4. "q=John" - Get all operation entries with text matching John in the application name or account username filed.
        schema:
          type: string
      - name: sort
        in: query
        description: |-
          Attribute to sort the results. Supported attributes are:

           1. lastUpdatedTime: Timestamp when operation record was last updated

           2. account userName: account username (Default).

           Specify `-` before the attribute for descending results
        schema:
          type: string
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SearchOperationBean"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/accounts/operations/retry":
    post:
      tags:
      - Application Access
      summary: Retry a list of failed operations.
      description: 'Entitlements required:  manageAppAccessAdmin  (Manage application
        lifecycle). Supported operation types for retry are ''AP'', ''AD'', ''AGA'',
        ''RGA'',''AM'',''AR'', ''AS''. Operation states supported for retry is ''FAILED''
        only. List of operations can be obtained using operation list API(''https://docs.verify.ibm.com/verify/reference/getoperation'').'
      operationId: retryOperations
      requestBody:
        description: Object with list of operations IDs
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/RetryOperationsBean"
        required: true
      responses:
        '202':
          description: Request accepted but not completed.
          content: {}
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/accounts/operations/{operationId}":
    get:
      tags:
      - Application Access
      summary: Gets details of the specified operation
      description: 'Entitlements required:  manageAppAccessAdmin  (Manage application
        lifecycle), manageAppAccessOwner (Manage application entitlements)'
      operationId: getOperation
      parameters:
      - name: operationId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OperationBean"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
        '404':
          description: Invalid operation id specified in the URI.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/accounts/operations/{operationId}/retry":
    post:
      tags:
      - Application Access
      summary: Retry a failed operation
      description: 'Entitlements required:  manageAppAccessAdmin  (Manage application
        lifecycle). Supported operation types for retry are ''AP'',''AD''. Operation
        states supported for retry is ''FAILED'' only. Operation ID of failed operation
        can be obtained using operation list API(''https://docs.verify.ibm.com/verify/reference/getoperation'').'
      operationId: retryOperation
      parameters:
      - name: operationId
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Request is Successful.
          content: {}
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
        '404':
          description: Invalid operation id specified in the URI.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/applications":
    get:
      tags:
      - Application Access
      summary: Gets the list of all applications that were onboarded  by tenant administrator.
        A maximum of 500 applications are returned. Use pagination to fetch the next
        set of applications.
      description: 'Entitlements required:  manageAppAccessAdmin  (Manage application
        lifecycle). Under the provisioning section the attributeMappings, reverseAttributeMappings
        and extension sections will always be an empty object.'
      operationId: searchApplications
      parameters:
      - name: page
        in: query
        description: Ordinality of the page to fetch. Required for paginated queries.
        schema:
          type: string
      - name: limit
        in: query
        description: Total number of applications to return in each page. Cannot be
          greater than count. Required for paginated queries.
        schema:
          type: string
      - name: search
        in: query
        description: 'Search query to return matching applications e.g search="q={searchString}".
          The query returns list of application which has {searchString} as a sub-string
          in application name. Examples: 1. If a tenant has Applications with name
          App1, App12, App123 and Query is search="q=pp12" then the applications returned
          will be App12 & App123. If search="q=pp1", then all the applications which
          contains App1 in it will be returned i.e. App1, App12, App123.'
        schema:
          type: string
      - name: sort
        in: query
        description: Attributes to sort results on, supported values are 'name' and
          'entityid'. Prepend the attribute with '+' or '-' sign for ascending and
          descending sorted order respectively. If not specified, sorted in ascending
          order on entityid. The entity id corresponds to application id.
        schema:
          type: string
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SearchAdminApplicationWithoutProvResponseBean"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
      x-publicAPI: 'true'
    post:
      tags:
      - Application Access
      summary: 'Creates an instance of an application for a tenant. '
      description: 'Entitlements required:  manageAppAccessAdmin  (Manage application
        lifecycle). If Application is enabled for Account Lifecycle or Account Sync,
        ensure the credentials specified for target endpoint are correct. This can
        be verified by performing Test Connection in Account Lifecycle section of
        Application settings.'
      operationId: createApplication
      requestBody:
        description: Created Application object
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ApplicationRequestBean"
        required: true
      responses:
        '201':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PostApplicationResponseBean"
        '401':
          description: User not Authorised.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/applications/identitySources/{identitySourceId}/applications":
    get:
      tags:
      - Application Access
      summary: Checks if the identity source is configured with an application.
      description: 'Entitlements required: manageAppAccessAdmin  (Manage application
        lifecycle).  Under the provisioning section the attributeMappings, reverseAttributeMappings,
        policies and extension sections will always be an empty object. Even though
        swagger mentions the provisioningState attribute in the example, the same
        is not returned in the response.'
      operationId: searchAppsByIdentitySource
      parameters:
      - name: identitySourceId
        in: path
        description: The identiy source ID for which details are being requested.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SearchAppsByIdentitySrcResponseBean"
        '401':
          description: User not Authorised.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/applications/rules":
    post:
      tags:
      - Application Access
      summary: Create custom rule.
      description: 'Entitlements required:  manageAppAccessAdmin  (Manage application
        lifecycle)'
      operationId: createRule
      requestBody:
        description: Rule creation object
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/CustomRuleBean"
        required: true
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PostCustomRuleResponseBean"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/applications/rules/{ruleId}":
    get:
      tags:
      - Application Access
      summary: Get  rule definition.
      description: 'Entitlements required:  manageAppAccessAdmin  (Manage application
        lifecycle)'
      operationId: getRule
      parameters:
      - name: ruleId
        in: path
        description: Id of the rule to be updated.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CustomRuleBean"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
        '404':
          description: Invalid rule id specified in the URI.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Application Access
      summary: Update custom rule.
      description: 'Entitlements required:  manageAppAccessAdmin  (Manage application
        lifecycle)'
      operationId: updateRule
      parameters:
      - name: ruleId
        in: path
        description: Id of the rule to be updated.
        required: true
        schema:
          type: string
      requestBody:
        description: Rule script to be updated
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/CustomRuleBean"
        required: true
      responses:
        '204':
          description: Request is Successful.
          content: {}
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/applications/stats":
    get:
      tags:
      - Application Access
      summary: Gets the summary stats of all applications for a given tenant.
      description: 'Entitlements required:  manageAppAccessAdmin  (Manage application
        lifecycle)'
      operationId: getApplicationSummarystats
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetAppsSummaryStatsResponseBean"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/applications/{applicationId}":
    get:
      tags:
      - Application Access
      summary: Gets the details of an application.
      description: 'Entitlements required:  manageAppAccessAdmin  (Manage application
        lifecycle)'
      operationId: getApplication
      parameters:
      - name: applicationId
        in: path
        description: The application ID for which details are being requested.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApplicationDetailsResponseBean"
        '401':
          description: User not Authorised.
          content: {}
        '404':
          description: Invalid Application ID.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Application Access
      summary: Updates an application.
      description: 'Rest interface to update the specified application. Entitlements
        required: manageAppAccessAdmin  (Manage application lifecycle)'
      operationId: updateApplication
      parameters:
      - name: applicationId
        in: path
        description: ID of the application to be updated.
        required: true
        schema:
          type: string
      requestBody:
        description: Updated Application object
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/ApplicationRequestBean"
        required: true
      responses:
        '200':
          description: Request is successful.
          content: {}
        '401':
          description: User not Authorised.
          content: {}
        '404':
          description: Invalid Application ID.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Application Access
      summary: Deletes the application that is specified by the application ID.
      description: 'Entitlements required:  manageAppAccessAdmin  (Manage application
        lifecycle)'
      operationId: deleteApplication
      parameters:
      - name: applicationId
        in: path
        description: The application ID for which deletion requested.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Deletion is Successful.
          content: {}
        '401':
          description: User not Authorised.
          content: {}
        '404':
          description: Invalid App Id.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/applications/{applicationId}/accounts":
    get:
      tags:
      - Application Access
      summary: Gets the list of accounts for the specified application.
      description: "Entitlements required:  manageAppAccessAdmin or manageappaccessowner
        or readappconfig. \n\nGet the list or statistics of accounts for the specified
        application."
      operationId: getAccountsList
      parameters:
      - name: applicationId
        in: path
        description: Unique identifier of an application
        required: true
        schema:
          type: string
      - name: accountStats
        in: query
        description: If set to true, returns the statistics of accounts as per Compliance
          status. Default value is false.
        schema:
          type: boolean
      - name: page
        in: query
        description: Ordinality of the page to fetch
        schema:
          type: string
      - name: limit
        in: query
        description: Total number of accounts to return in each page. It cannot be
          greater than count
        schema:
          type: string
      - name: search
        in: query
        description: "Search query to filter the accounts. It can be based on `status`
          and `finerStatus` fields. Free text search is also supported. \n\nExamples:\n\n1.
          \"finerStatus=NON_COMPLIANT\" - Get all Non-Compliant accounts\n\n2. \"finerStatus=COMPLIANT\"
          - Get all Compliant accounts\n\n3. \"finerStatus=UNMATCHED\" - Get all Unmatched
          accounts\n\n4. \"status=ACTIVE&finerStatus=COMPLIANT\" - Get all Active
          and Compliant Accounts\n\n5. \"q=John\" - Get all account entries with text
          matching John\n\n6. \"status=ACTIVE&q=Jessica\" - Get all Active accounts
          matching Jessica"
        schema:
          type: string
      - name: sort
        in: query
        description: "Attribute to sort the results. Supported attributes are:\n\n1.
          creationTime: Timestamp for account creation \n\n2. userName: account username
          (Default) \n\n3. finerStatus: account compliance status\n\nSpecify `-` before
          the attribute for descending results"
        schema:
          type: string
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetAccountListResponseBean"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/applications/{applicationId}/accounts/remediate":
    post:
      tags:
      - Application Access
      summary: Remediate Non-Compliant accounts for an application.
      description: "Entitlements required:  manageAppAccessAdmin  (Manage application
        lifecycle) \n\nRemediate given Non-Compliant accounts of an application and
        update the accounts on Target or Users on ISV."
      operationId: remediateAccounts
      parameters:
      - name: applicationId
        in: path
        description: Unique identifier of an application
        required: true
        schema:
          type: string
      requestBody:
        description: Created Remediation Action object
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RemediateAccountRequestBean"
        required: true
      responses:
        '202':
          description: Request accepted but not completed.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RemediationAccountStatusDetails"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/applications/{applicationId}/accounts/{accountId}":
    get:
      tags:
      - Application Access
      summary: Get the account attributes of given account associated with an application.
      description: "Entitlements required:  manageAppAccessAdmin  (Manage application
        lifecycle), manageappaccessowner (Manage application entitlements) \n\nList
        all the attributes of the given account associated with the application."
      operationId: getAccount_0
      parameters:
      - name: accountId
        in: path
        description: Unique identifier of the account. Value can be obtained from
          Get Account List (Gets the list of accounts for the specified application.
          ) API
        required: true
        schema:
          type: string
      - name: applicationId
        in: path
        description: Unique identifier of an application. Value can be obtained from
          Get Application List (Gets the list of all applications that were onboarded  by
          tenant administrator. ) API
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AccountBean"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/applications/{applicationId}/accounts/{accountId}/delta":
    get:
      tags:
      - Application Access
      summary: Get attribute values delta for an account for the application.
      description: 'Entitlements required:  manageAppAccessAdmin  (Manage application
        lifecycle), manageAppAccessOwner (Manage application entitlements). When attribute
        is type permissionset, the oldValue and newValue will be array of string.'
      operationId: getReconciliationDelta
      parameters:
      - name: applicationId
        in: path
        description: Unique identifier of an application.
        required: true
        schema:
          type: string
      - name: accountId
        in: path
        description: Unique identifier of the account.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetReconciliationDeltaResponseBean"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/applications/{applicationId}/accounts/{accountId}/{action}":
    post:
      tags:
      - Application Access
      summary: Suspend/Restore/Orphan/Unmanage/deprovision an Account identified by
        this applicationId, userId.
      description: 'Entitlements required:  manageAppAccessAdmin (Manage application
        lifecycle), manageappaccessowner (Manage application entitlements).'
      operationId: modifyAccount
      parameters:
      - name: applicationId
        in: path
        description: Unique identifier of an application
        required: true
        schema:
          type: string
      - name: accountId
        in: path
        description: Unique identifier of an account
        required: true
        schema:
          type: string
      - name: action
        in: path
        description: Action to be performed on account. e.g. SUSPEND, RESTORE, ORPHAN,
          UNMANAGE, DEPROVISION or UNMATCH
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Request is Successful.
          content: {}
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/applications/{applicationId}/reconciliation":
    post:
      tags:
      - Application Access
      summary: Start / Stop Account Synchronization.
      description: |-
        Entitlements required:  manageAppAccessAdmin  (Manage application lifecycle), manageappaccessowner (Manage application entitlements).

        Start or stop Account Synchronization operation for the given application as per the configured Adoption and Remediation policies.
      operationId: startReconciliation
      parameters:
      - name: applicationId
        in: path
        description: Unique identifier of an application. Value can be obtained from
          Get Application List (Gets the list of all applications that were onboarded  by
          tenant administrator. ) API
        required: true
        schema:
          type: string
      requestBody:
        description: Created Application object
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/ReconciliationBean"
        required: true
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PostReconciliationResponseBean"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/applications/{applicationId}/reconciliation/status":
    get:
      tags:
      - Application Access
      summary: Get Last run reconciliation status for an application.
      description: "Entitlements required:  manageAppAccessAdmin  (Manage application
        lifecycle), manageappaccessowner (Manage application entitlements) \n\nGets
        the status of last account sync operation run for the application"
      operationId: getLastReconciliationStatus
      parameters:
      - name: applicationId
        in: path
        description: Unique identifier of an application
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetLastReconStatusResponseBean"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/applications/{applicationId}/reconciliation/{reconciliationId}":
    get:
      tags:
      - Application Access
      summary: Gets adoption stats details of account synchronization for an application.
      description: 'Entitlements required:  manageAppAccessAdmin (Manage application
        lifecycle), manageappaccessowner (Manage application entitlements).'
      operationId: getReconciliationDetails
      parameters:
      - name: applicationId
        in: path
        description: Unique identifier of an application
        required: true
        schema:
          type: string
      - name: reconciliationId
        in: path
        description: Reconciliation identifier
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetAdoptionStatsResponseBean"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
        '404':
          description: Invalid reconciliationId specified in the URI.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Application Access
      summary: Stop given account synchronization of an application.
      description: 'Entitlements required:  manageAppAccessAdmin  (Manage application
        lifecycle), manageappaccessowner (Manage application entitlements).'
      operationId: stopReconciliation
      parameters:
      - name: applicationId
        in: path
        description: Unique identifier of an application
        required: true
        schema:
          type: string
      - name: reconciliationId
        in: path
        description: Unique identifier of the running recon operation
        required: true
        schema:
          type: string
      requestBody:
        description: Stop Reconciliation object
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/ReconciliationStopBean"
        required: true
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PostStopReconciliationResponseBean"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
        '404':
          description: Invalid reconciliationId specified in the URI.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/applications/{applicationId}/reconciliation/{reconciliationId}/accounts":
    get:
      tags:
      - Application Access
      summary: Gets the Application account list details for specified account synchronization
        id.
      description: 'Entitlements required:  manageAppAccessAdmin (Manage application
        lifecycle), manageappaccessowner (Manage application entitlements).'
      operationId: getAccountDetailsForReconciliation
      parameters:
      - name: applicationId
        in: path
        description: Unique identifier of an application
        required: true
        schema:
          type: string
      - name: reconciliationId
        in: path
        description: Reconciliation identifier
        required: true
        schema:
          type: string
      - name: page
        in: query
        description: Ordinality of the page to fetch. Required for pagination.
        schema:
          type: string
      - name: limit
        in: query
        description: Total number of accounts to return in each page. Cannot be greater
          than count. Required for pagination.
        schema:
          type: string
      - name: search
        in: query
        description: Search query to return matching accounts e.g search="q={searchString}"
        schema:
          type: string
      - name: sort
        in: query
        description: Attributes to sort results on.
        schema:
          type: string
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetReconAccountDetailsResponseBean"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/applications/{applicationId}/supportingdata":
    get:
      tags:
      - Application Access
      summary: Retrieves all supporting data for a given application.
      description: manageAppAccessAdmin (Manage application lifecycle) or manageAppAccessOwner
        (Manage application entitlements)
      operationId: getReconSupportingData
      parameters:
      - name: applicationId
        in: path
        description: Unique identifier of an application
        required: true
        schema:
          type: string
      - name: referenceType
        in: query
        description: Type of objects to be returned in the supporting data response.
          This can take any value returned in the 'type' attribute of response e.g.
          'profile', 'permissionSet', 'account' etc
        schema:
          type: string
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IBSupportingData"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/applications/{applicationId}/users/{userId}/adopt":
    post:
      tags:
      - Application Access
      summary: Provides mechanism to adopt an Orphan account
      description: 'Entitlements required:  manageAppAccessAdmin  (Manage application
        lifecycle)'
      operationId: adoptAccount_0
      parameters:
      - name: userId
        in: path
        description: Unique identifier of user
        required: true
        schema:
          type: string
      - name: applicationId
        in: path
        description: Unique identifier of application
        required: true
        schema:
          type: string
      requestBody:
        description: Payload containing unique identifier of an orphan account to
          be adopted
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/AdoptionAccountBean"
        required: true
      responses:
        '204':
          description: Request is Successful.
          content: {}
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/authpolicy/{authpolicyid}/applications":
    get:
      tags:
      - Application Access
      summary: Retrieves a list of application ids that have the specified auth policy
        id attached.
      description: 'Entitlements required: tenantAdmin ( Tenant Administrator ) or
        manageAppAccessAdmin  (Manage application lifecycle) or readAccessPolicies
        ( Read access policies ). '
      operationId: searchAppsByAuthPolicyId
      parameters:
      - name: authpolicyid
        in: path
        description: Sepcify the auth policy id. A list of application ids associated
          to this auth policy id will be returned.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PolicyApplicationsListBean"
        '401':
          description: User not Authorised.
          content: {}
        '404':
          description: Invalid Application ID.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/owner/applications":
    get:
      tags:
      - Application Access
      summary: Searches for the applications of an owner.
      description: 'Entitlements required: manageAppAccessAdmin (Manage application
        lifecycle) or manageAppAccessOwner(Manage application entitlements)'
      operationId: search
      parameters:
      - name: page
        in: query
        description: Ordinality of the page to fetch. Required for paginated queries.
        schema:
          type: string
      - name: limit
        in: query
        description: Total number of applications to return in each page. It cannot
          be greater than count. Required for paginated queries.
        schema:
          type: string
      - name: count
        in: query
        description: Total number of applications to return to client. Client can
          use the returned applications to perform client side pagination before making
          a remote call again. Assumed same as limit if not specified. Optional for
          paginated queries.
        schema:
          type: string
      - name: search
        in: query
        description: Search query to return matching applications, e.g search="q={searchString}"
        schema:
          type: string
      - name: sort
        in: query
        description: Attributes to sort results on, supported values are 'name' and
          'entityid'. Prepend the attribute with '+' or '-' sign for ascending and
          descending sorted order respectively. If not specified, sorted in ascending
          order on entityid. The entity id corresponds to application id.
        schema:
          type: string
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SearchOwnerApplicationResponseBean"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User is not Authorised.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/owner/applications/{applicationId}":
    get:
      tags:
      - Application Access
      summary: Fetches the details of an application accessible to owner.
      description: 'Entitlements required: manageAppAccessAdmin (Manage application
        lifecycle) or manageAppAccessOwner (Manage application entitlements)'
      operationId: getApplication_0
      parameters:
      - name: applicationId
        in: path
        description: Unique identifier of an application
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetApplicationForOwnerResponseBean"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User is not Authorised.
          content: {}
        '404':
          description: Invalid Application ID.
          content: {}
      x-publicAPI: 'true'
    put:
      tags:
      - Application Access
      summary: Updates the attributes of an application accessible to the owner.
      description: 'Entitlements required: manageAppAccessAdmin (Manage application
        lifecycle) or manageAppAccessOwner (Manage application entitlements)'
      operationId: updateApplication_0
      parameters:
      - name: applicationId
        in: path
        description: Application Identifier
        required: true
        schema:
          type: string
      requestBody:
        description: Updated Application Attributes' Object
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/OwnerProvisioningApplicationUpdateBean"
        required: true
      responses:
        '200':
          description: Request is Successful.
          content: {}
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User is not Authorised.
          content: {}
        '404':
          description: Invalid Application ID.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/owner/applications/{applicationId}/entitlements":
    get:
      tags:
      - Application Access
      summary: Fetches the entitlements of an application.
      description: 'Entitlements required: manageAppAccessAdmin (Manage application
        lifecycle) or manageAppAccessOwner (Manage application entitlements)'
      operationId: getEntitlements
      parameters:
      - name: applicationId
        in: path
        description: Unique identifier of an application
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetEntitlementsForOwnerResponseBean"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User is not Authorised.
          content: {}
        '404':
          description: Invalid Application ID.
          content: {}
      x-publicAPI: 'true'
    post:
      tags:
      - Application Access
      summary: Updates entitlements to an application.
      description: 'Entitlements required: manageAppAccessAdmin (Manage application
        lifecycle) or manageAppAccessOwner (Manage application entitlements)'
      operationId: updateEntitlements
      parameters:
      - name: applicationId
        in: path
        description: Application Identifier
        required: true
        schema:
          type: string
      requestBody:
        description: Updated Entitlement Object
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/EntitlementBean"
        required: true
      responses:
        '200':
          description: Request is Successful.
          content: {}
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User is not Authorised.
          content: {}
        '404':
          description: Invalid Application ID.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/reconciliation":
    get:
      tags:
      - Application Access
      summary: Get All account synchronization status for all applications of given
        tenant.
      description: 'Entitlements required:  manageAppAccessAdmin (Manage application
        lifecycle) or manageAppAccessOwner (Manage application entitlements)'
      operationId: getAllApplicationReconciliationDetails
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ReconStatusBean"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/reconciliation/operations":
    get:
      tags:
      - Application Access
      summary: Gets all operations performed in an Account Sync operation
      description: "Entitlements required:  manageAppAccessAdmin (Manage application
        lifecycle) or manageAppAccessOwner (Manage application entitlements) \n\nReturns
        a list of all operations performed in account synchronization for the tenant."
      operationId: getAllReconOperationDetails
      parameters:
      - name: search
        in: query
        description: "Specify the search param to filter the operations to be fetched.
          Search can be specified for \n\n1. Application: \"applicationId=<application_id>\"
          Application Id value can be obtained from Get Application List \n\n2. Account
          Sync operation: \"reconId=<account_sync_id>\" Account Sync Id value can
          be obtained from Get All account synchronization status for all applications
          of given tenant \n\n3. Specific account sync for an application: \"applicationId=<application_id>|reconId=<account_sync_id>\"
          \n\n4. Account: \"accountId=<account_id>\" Account Id value can be obtained
          from Get Account List"
        schema:
          type: string
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OperationRecordResultsBean"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User not Authorised.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/user/applications":
    get:
      tags:
      - Application Access
      summary: Fetches the applications that are entitled to a user.
      description: 'Note: If the requestid and requestorid parameters are specified,
        the API checks the validity of the request ID  and returns a list of entitled
        applications for the specified requestor ID. Entitlements required: Any authenticated
        user'
      operationId: searchUserApplication
      parameters:
      - name: page
        in: query
        description: Ordinality of the page to fetch
        schema:
          type: string
      - name: limit
        in: query
        description: Total number of applications to return in each page. Cannot be
          greater than count
        schema:
          type: string
      - name: count
        in: query
        description: Total number of applications to return to client. Client can
          use the returned applications to perform client side pagination before making
          a remote call again. Assumed same as limit if not specified
        schema:
          type: string
      - name: search
        in: query
        description: Search query to return matching applications e.g search="q={searchString}".
          Search is carried out against the application name attribute.
        schema:
          type: string
      - name: sort
        in: query
        description: Attributes to sort results on, supported values are 'name' and
          'entityid'. Prepend the attribute with '+' or '-' sign for ascending and
          descending sorted order respectively. If not specified, sorted in ascending
          order on entityid. The entity id corresponds to application id.
        schema:
          type: string
      - name: requestid
        in: query
        description: The request id used to grant access for an application.
        schema:
          type: string
      - name: requestorid
        in: query
        description: The userid whose entitled applications are to be returned.
        schema:
          type: string
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SearchUserApplicationResponseBean"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: User is not Authorised.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/user/applications/{applicationId}/entitlement":
    post:
      tags:
      - Application Access
      summary: API to determine if a user is entitled to an application.
      description: 'Entitlements required: Any authenticated user'
      operationId: getUserEntitlementForApplication
      parameters:
      - name: applicationId
        in: path
        description: The application ID for which entitlement is requested.
        required: true
        schema:
          type: string
      requestBody:
        description: Token object representing the user for which the request is made
          and the corresponding groups to which the user is a member of.
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/TokenBean"
        required: true
      responses:
        '200':
          description: Request is Successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserAuthorizationResponseBean"
        '401':
          description: User is not Authorised.
          content: {}
        '404':
          description: Invalid Application ID.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/attributefunctions":
    get:
      tags:
      - Attributes
      summary: Retrieves the list of attribute functions that are configured for the
        specified tenant
      description: 'Retrieves the list of attribute functions that are configured
        for the specified tenant.<br><br>Entitlements required: readAttributes, manageAttributes.'
      operationId: getAllAttributeFunctions
      parameters:
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful query
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/AttributeFunction"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/attributes":
    get:
      tags:
      - Attributes
      summary: Lists all attributes
      description: 'Retrieves the list of attributes for this tenant.<br><br>Entitlements
        required: readAttributes, manageAttributes.'
      operationId: getAllAttributes
      parameters:
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>The format
          to use the search query parameter is ''search={parameter}{operator}{value}<br><br>The
          following search parameters are allowed: name, credname, tags, sourcetype,
          id, scope.<br><br>Parameters name, credname, tags, sourcetype, id, scope
          only support search by string values.<br><br>Valid operators for string
          values are =, !=, contains, startswith, endswith, and exists.<br> Only for
          the ''exists'' operator, there is no need to specify search value. <br>
          And for all rest operators, use double quotation marks for the search values.<br><br>Multiple
          search conditions can be combined using either the & (AND) or | (OR) operators.<br><br>Conditions
          in parentheses () have a higher priority and are evaluated first. Without
          parentheses, & (AND) is evaluated first.<br><b>Example</b>: (tags="sso"|name="email")&id="10"<br><b>Note</b>:
          Nested parentheses are not supported.<br><br><b>Example</b>: Search for
          attributes with ''sso'' tag: search=tags="sso"<br><b>Example</b>: Search
          for attributes with name startwith ''pre'': search=name%20startswith%20"pre"<br><b>Example</b>:
          Search for attributes with tag: search=tags%20exists<br>'
        schema:
          type: string
      - name: sort
        in: query
        description: 'Returns sorted results.<br>The following sort parameters are
          allowed: name, credname, tags, sourcetype, scope.<br>Each sort parameter
          must be prefixed with either + or -.<br><br><b>Example</b>: Sort attributes
          by ascending ''name'': sort=+name<br>'
        schema:
          type: string
      - name: pagination
        in: query
        description: 'Returns results based on the requested limit and page.<br>The
          following pagination parameters are allowed: limit, page.<br><br><b>Example</b>:
          Get only 5 results at the second page: pagination=limit=5%26page=2<br>'
        schema:
          type: string
      responses:
        '200':
          description: Successful Query
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Attribute_0"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: No resource found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Attributes
      summary: Creates an attribute
      description: 'Creates a custom attribute for this tenant.<br><br>Entitlements
        required: manageAttributes.'
      operationId: createAttribute
      parameters:
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      requestBody:
        description: Attribute Payload
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/Attribute_0"
        required: true
      responses:
        '201':
          description: Created
          content: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: Payload
    patch:
      tags:
      - Attributes
      summary: Bulk management operations of attributes
      description: 'Deletes or updates the attributes with the specified ID for this
        tenant.<br><br>Entitlements required: manageAttributes.'
      operationId: patchAttributes
      parameters:
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      requestBody:
        description: List of Patch Operations
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/PatchOperation"
        required: true
      responses:
        '204':
          description: No content
          content: {}
        '207':
          description: Multi-Status
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PatchOperationResponse"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PatchOperationResponse"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: Payload
  "/v1.0/attributes/tags":
    get:
      tags:
      - Attributes
      summary: Gets the list of existing attribute tags
      description: 'Retrieves the list of existing attribute tags for this tenant.<br><br>Entitlements
        required: readAttributes.'
      operationId: getAttribute
      parameters:
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Query
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: No resource found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/attributes/{attrId}":
    get:
      tags:
      - Attributes
      summary: Gets an attribute
      description: 'Retrieves the attribute with the specified ID for this tenant.<br><br>Entitlements
        required: readAttributes, manageAttributes.'
      operationId: getAttribute_0
      parameters:
      - name: attrId
        in: path
        description: attribute identifier
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Query
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Attribute_0"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: No resource found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Attributes
      summary: Modifies an attribute
      description: 'Modifies the attribute with the specified ID for this tenant.<br><br>Entitlements
        required: manageAttributes.'
      operationId: updateAttribute
      parameters:
      - name: attrId
        in: path
        description: attribute identifier
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      requestBody:
        description: Attribute Payload
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/Attribute_0"
        required: true
      responses:
        '204':
          description: No content
          content: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: No resource found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: Payload
    delete:
      tags:
      - Attributes
      summary: Deletes an attribute
      description: 'Deletes the attribute with the specified ID for this tenant.<br><br>Entitlements
        required: manageAttributes.'
      operationId: deleteAttribute
      parameters:
      - name: attrId
        in: path
        description: attribute identifier
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No content
          content: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: No resource found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    patch:
      tags:
      - Attributes
      summary: Modifies selected properties of an attribute
      description: 'Modifies the attribute with the specified ID for this tenant.<br>Unlike
        the PUT API, the request body for PATCH does not need to be the full attribute
        model but instead should only contain the properties of the attribute that
        need to be updated.<br><br>Entitlements required: manageAttributes.'
      operationId: patchSingleAttribute
      parameters:
      - name: attrId
        in: path
        description: attribute identifier
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      requestBody:
        description: Attribute Payload
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/PatchSingleAttributeReqModel"
        required: true
      responses:
        '204':
          description: No content
          content: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: No resource found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: Payload
  "/v1.0/attributes/{attrId}/revert":
    put:
      tags:
      - Attributes
      summary: Reverts a global attribute to the default configuration
      description: 'Reverts a global attribute to the default configuration.<br><br>Entitlements
        required: manageAttributes.'
      operationId: revertGlobalAttribute
      parameters:
      - name: attrId
        in: path
        description: attribute identifier
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Modified
          content: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/attributequery/preview":
    post:
      tags:
      - 'Deprecated - Attribute Evaluation. Replaced by /v2.0/attributequery. '
      summary: Deprecated - Preview the value that would be computed for this attribute.
      description: 'Preview the value that would be computed for this attribute.<br><br>Entitlements
        required: manageAttributes.<br>'
      operationId: preview
      parameters:
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      requestBody:
        description: Mappings payload
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PreviewInputBean"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/QueryResultBean"
        '400':
          description: Bad Request Exception
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: payload
  "/v1.0/config/accountexpiration":
    get:
      tags:
      - Account expiration configuration
      summary: Retrieve the global configuration for attribute mapping that can be
        overridden in individual identity providers.
      description: 'The REST interface to retrieve all the configuration for attribute
        mapping. <br><br>Entitlements required: <b>tenantadmin or readIdentitySources</b>'
      operationId: getAccountExpirationGlobalConfig
      responses:
        '200':
          description: Success. Configuration was reterived.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AccountExpirationConfig"
        '403':
          description: You are not authorized to access this resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: The update failed because of an unexpected internal service
            error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Account expiration configuration
      summary: Set the account expiration config.
      description: 'The REST interface to set the account expiration policy.<br><br>Entitlements
        required: <b>tenantadmin or manageIdentitySources</b>'
      operationId: setAccountExpirationGlobalConfig
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/AccountExpirationConfig"
        required: false
      responses:
        '204':
          description: Success. Global account expiration policies configurations
            were updated.
          content: {}
        '400':
          description: The request json was malformed or failed validation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: You are not authorized to access this resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: The update failed because of an unexpected internal service
            error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/config/firstfactorpolicy":
    get:
      tags:
      - Tenant policy configuration
      summary: Retrieve the configuration for first factor policy. This is a list
        of policy Id, but only one policy is currently supported
      description: 'The REST interface to retrieve all the configuration for poliy.
        <br><br>Entitlements required: <b>tenantadmin or readIdentitySources</b>'
      operationId: getFirstFactorPolicyConfig
      responses:
        '200':
          description: Success. Configuration was retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FirstFactorPolicyConfig"
        '403':
          description: You are not authorized to access this resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: The request failed because of an unexpected internal service
            error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Tenant policy configuration
      summary: Set the configuration for first factor policy. This is a list of policy
        Id, but only one policy is currently supported
      description: 'The REST interface to set the first factor policy.<br><br>Entitlements
        required: <b>tenantadmin or manageIdentitySources</b>'
      operationId: setFirstFactorPolicyConfig
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/FirstFactorPolicyConfig"
        required: false
      responses:
        '204':
          description: Success. tenant policy configuration was updated.
          content: {}
        '400':
          description: The request json was malformed or failed validation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: You are not authorized to access this resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: The update failed because of an unexpected internal service
            error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/config/identitysources/attributemappings":
    get:
      tags:
      - Identity Provider Attribute Mappings
      summary: Retrieve the global configuration for attribute mapping that can be
        overridden in individual identity providers.
      description: 'The REST interface to retrieve all the configuration for attribute
        mapping. <br><br>Entitlements required: <b>tenantadmin or readIdentitySources</b>'
      operationId: getAttributeMappingsGlobalConfig
      responses:
        '200':
          description: Success. Configuration was reterived.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IdentitySourceAttributeMappings"
        '403':
          description: You are not authorized to access this resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: The update failed because of an unexpected internal service
            error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Identity Provider Attribute Mappings
      summary: Set the global attribute mappings for identity sources.
      description: 'The REST interface to set the attribute mappings.<br><br>Entitlements
        required: <b>tenantadmin or manageIdentitySources</b>'
      operationId: setAttributeMappingsGlobalConfig
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/IdentitySourceAttributeMappings"
        required: false
      responses:
        '204':
          description: Success. Global attribute mapping configurations were updated.
          content: {}
        '400':
          description: The request json was malformed or failed validation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: You are not authorized to access this resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: The update failed because of an unexpected internal service
            error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/config/sessionexchange":
    get:
      tags:
      - Session Exchange Configuration
      summary: Retrieve the configuration for session exchange.
      description: 'The REST interface to retrieve the configuration for session exchange.
        This is the list of allowed redirect_url that can be used in the TokenExchange
        API for a tenant.<br/>{ "redirectUrls": [ "https://url_regex_1", "https://url_reg_ex2"
        ] }<br/>''redirectUrls'' The entries in the list are treated as regular expressions.<br/>When
        calling the TokenExchange API, the redirect_url parameter must match one of
        these conditions:<br/>- URL paths that start with the tenant domain are allowed
        by default, "https://tenantname.com".<br/>- Relative paths, that start with
        "/", are allowed by default.<br/>- Else, it must match one of the regular
        expressions in this list.'
      operationId: getSessionExchangeConfig
      responses:
        '200':
          description: Success. Configuration was reterived.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SessionExchangeConfigModel"
        '403':
          description: You are not authorized to access this resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Session Exchange Configuration
      summary: Set the session exchange config.
      description: 'The REST interface to set the configuration for session exchange.
        This is the list of allowed redirect_url that can be used in the TokenExchange
        API for a tenant.<br/>{ "redirectUrls": [ "https://url_regex_1", "https://url_reg_ex2"
        ] }<br/>''redirectUrls'' The entries in the list are treated as regular expressions.<br/>When
        calling the TokenExchange API, the redirect_url parameter must match one of
        these conditions:<br/>- URL paths that start with the tenant domain are allowed
        by default, "https://tenantname.com".<br/>- Relative paths, that start with
        "/", are allowed by default.<br/>- Else, it must match one of the regular
        expressions in this list.'
      operationId: setSessionExchangeConfig
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SessionExchangeConfigModel"
        required: false
      responses:
        '204':
          description: Success. Session exchange config was updated.
          content: {}
        '403':
          description: You are not authorized to access this resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/identitysources":
    get:
      tags:
      - Identity Sources V1 - Deprecated
      summary: Deprecated - Retrieve all the identity source instances of the tenant.
      description: 'This API is deprecated and will be removed after June 1 2025.
        Use the Version 2.0 API: /v2.0/identitysources<br><br>The REST interface that
        retrieves all the identity source instances of the tenant. <br><br>Entitlements
        required: <b>readIdentitySources</b>, <b>manageIdentitySources</b>'
      operationId: getInstancesV1
      parameters:
      - name: filter
        in: query
        description: 'You can use following filters to fetch the identity source instances
          with specific properties. <br><br><b>enduser</b>: Returns all the identity
          source instances that are enabled for end users, i.e. the instances with
          <b>show_end_user</b> property value set as <b>true</b>.<br><br><b>appscope</b>:
          Returns all the social identity sources, excluding the IBMid identity source,
          that are associated with custom applications.<br>    Regardless of this
          filter, Cloud Directory is included as the default provider.'
        schema:
          type: string
          enum:
          - enduser
          - appscope
      - name: search
        in: query
        description: 'The prefix for all search operations is <b>search=</b>. <br>You
          can search on following fields: id, sourceTypeId, instanceName, enabled<br>Specifying
          any other field than the allowed search fields in the criteria will result
          in an error.<br><br>Valid operators for strings are =, != and contains <br>Valid
          operators for booleans are = and !=<br>Valid operators for numbers are =,
          !=, >=, >, &lt=, and &lt<br>String search values must be double quoted;
          the numbers and booleans must be without quotes. More than one search criteria
          can be specified using <b>"and"</b> and <b>"or"</b> operators.<br><br>The
          search parameter value <b>MUST</b> be URL encoded.<br><b>Notes:</b> Only
          value should be encoded; not the parameter name. Encoding is not required
          when using Swagger UI.<br><br><b>Examples:</b><br>a. To search on instanceName,
          provide the search criteria as follows: <br><pre>   instanceName = "Baidu"
          </pre><br>or in URL encoded form as follows: <br><pre>   search=instanceName%20%3D%20%22Baidu%22
          </pre><br>b. To search on instanceName containing "SAML" in it, provide
          the search criteria as follows: <br><pre>   instanceName contains "SAML"
          </pre><br>or in URL encoded form as follows: <br><pre>   search=instanceName%20contains%20%22SAML%22
          </pre><br>c. To search the SAML Enterprise instances that have "ABC" in
          their names, provide the search criteria as follows: <br><pre>   instanceName
          contains "ABC" and sourceTypeId = 4 </pre><br>or in URL encoded form as
          follows: <br><pre>   search=instanceName%20contains%20%22ABC%22%20and%20sourceTypeId%20%3D%204
          </pre><br>'
        schema:
          type: string
      - name: pagination
        in: query
        description: 'The prefix for the paging parameter is <b>pagination=</b>. <br><br>If
          pagination parameters are not specified, then all the results will be returned.
          <br><br>If pagination parameters are specified, then the results will be
          paginated. Following are the parameters that can be specified; these parameters
          will be included in the response reflecting the actual results. <br><br><b>page</b>:
          The page being requested, or the offset that defines the starting resource
          number. <br><b>limit</b>: It is a page size; it defines the total number
          of resources that can be included in one page. It is the maximum number
          of resources that will be returned in the response.<b>count</b>: The total
          number of resources to be returned in the response. It is an optional parameter,
          and it MUST be less than or equal to the limit. If not specified, then count
          = limit.<br><br><br>The pagination parameter value <b>MUST</b> be URL encoded.<br><b>Note:</b>
          Only value should be encoded; not the parameter name. Encoding is not required
          when using Swagger UI.<br><br><b>Note:</b> The maximum value allowed for
          the <b>limit</b> or <b>count</b> fields is 1000. <br><br><b>Examples:</b><br>a.
          To retrieve first 5 or less resources from page 1, provide pagination parameters
          as follows: <br><pre>   count=5&page=1&limit=10 </pre><br>or in URL encoded
          form as follows: <br><pre>   pagination=count%3D5%26page%3D1%26limit%3D10
          </pre><br>b. To retrieve first 3 or less resources from page 2, provide
          pagination parameters as follows: <br><pre>   count=3&page=2&limit=10 </pre><br>or
          in URL encoded form as follows: <br><pre>   pagination=count%3D3%26page%3D2%26limit%3D10
          </pre><br>'
        schema:
          type: string
      - name: sort
        in: query
        description: 'The prefix for the sort parameter is <b>sort=</b>. <br>You can
          sort on following fields: id, sourceTypeId, instanceName, enabled<br>Specifying
          any other field than the allowed sort fields will result in an error.<br><br>Each
          sort attribute must be prefixed with either + or - (+ ascending, - descending).
          A list of attributes separated by a comma (,) can be specified for the second
          or third order of sorting. <br><br>The sort parameter value <b>MUST</b>
          be URL encoded.<br><b>Note:</b> Only value should be encoded; not the parameter
          name. Encoding is not required when using Swagger UI.<br><br><b>Examples:</b><br>a.
          To sort on sourceTypeId in ascending order, provide the sort parameter as
          follows: <br><pre>   +sourceTypeId </pre><br>or in URL encoded form as follows:
          <br><pre>   sort=%2BsourceTypeId </pre><br>b. To sort on sourceTypeId in
          ascending order and for second order sort on instanceName in descending
          order, provide the sort parameter as follows: <br><pre>   +sourceTypeId,-instanceName
          </pre><br>or in URL encoded form as follows: <br><pre>   sort=%2BsourceTypeId%2C-instanceName
          </pre><br>'
        schema:
          type: string
      responses:
        '200':
          description: Success. The identity sources were retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IdentitySourceIntancesDataList"
        '400':
          description: The response JSON was malformed.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: You are not authorized to access this resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The search failed. The system couldn't retrieve the identity
            sources.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      deprecated: true
      x-publicAPI: 'true'
    post:
      tags:
      - Identity Sources V1 - Deprecated
      summary: Deprecated - API to create an identity source instance for a tenant.
      description: 'This API is deprecated and will be removed after June 1 2025.
        Use the Version 2.0 API: /v2.0/identitysources<br><br>The REST interface that
        creates an instance of particular type of identity source. <br><br>Entitlements
        required: <b>manageIdentitySources</b><br><br><b>Note:</b> The properties
        and the number of properties differ with the identity source type. More information
        about the payloads and properties associated with various identity source
        types can be found in the knowledge center <a href="https://www.ibm.com/support/knowledgecenter/en/SSCT62/com.ibm.iamservice.doc/references/r_idp_payloads.html">here</a>.'
      operationId: createIdentitySourceV1
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/IdentitySourceInstancesData"
        required: false
      responses:
        '201':
          description: Success. The identity source was created.
          content: {}
        '400':
          description: The request json was malformed.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: You are not authorized to access this resource.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: A conflict exists.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      deprecated: true
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/identitysources/passwordPolicies":
    get:
      tags:
      - Identity Sources V1 - Deprecated
      summary: Deprecated - Retrieve all the identity source instances of the tenant
        that use the passord policy ID's specified in the 'search' query parameter.
      description: 'This API is deprecated and will be removed after June 1 2025.
        Use the Version 2.0 API: /v2.0/identitysources/passwordPolicies<br><br>The
        REST interface that retrieves all the identity source instances of the tenant
        that use the password policies that are in the search query parameter. <br><br>Entitlements
        required: <b>readIdentitySources</b>, <b>manageIdentitySources</b>'
      operationId: getPasswordPoliciesByIdsV1
      parameters:
      - name: search
        in: query
        description: The ID of the password policies you'd like to search. Should
          be in the URL encoded format 'search=id=54dd128b-82b5-479f-b669-9b5a508cf7e3'
          or for searching multiple password policy ID's, 'search=id=54dd128b-82b5-479f-b669-9b5a508cf7e3|45dd128b-82b5-479f-b669-9b5a508c7b9'
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success. The identity sources were retrieved with the matching
            specified search ID's. An empty set will return as success as well.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IdentitySourceIntancesDataList"
        '400':
          description: The response JSON was malformed.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: You are not authorized to access this resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The search failed. The system couldn't retrieve the identity
            sources with the specified password policy id's.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      deprecated: true
      x-publicAPI: 'true'
  "/v1.0/identitysources/property/{propertyName}/{propertyValue}":
    get:
      tags:
      - Identity Sources V1 - Deprecated
      summary: Deprecated - Retrieve all the identity source instances of the tenant
        that have this property name and value.
      description: 'This API is deprecated and will be removed after June 1 2025.
        Use the Version 2.0 API: /v2.0/identitysources/property/{propertyName}/{propertyValue}<br><br>The
        REST interface that retrieves all the identity source instances of the tenant.
        <br><br>Entitlements required: <b>readIdentitySources</b>, <b>manageIdentitySources</b>'
      operationId: getInstancesByPropertyV1
      parameters:
      - name: propertyName
        in: path
        description: The property name to search for in the identity source instances.
        required: true
        schema:
          type: string
      - name: propertyValue
        in: path
        description: The property value to search for in the identity source instances.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success. The identity sources were retrieved with a matching
            property name and value.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IdentitySourceIntancesDataList"
        '400':
          description: The response JSON was malformed.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: You are not authorized to access this resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The search failed. The system couldn't retrieve the identity
            sources with the specified property name and value combination.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      deprecated: true
      x-publicAPI: 'true'
  "/v1.0/identitysources/subtenants":
    get:
      tags:
      - Partner Reseller Identity Providers Management
      summary: Retrieve all the available identity source provider types.
      description: 'The REST interface to retrieve all the available identity source
        provider types. <br><br>Entitlements required: <b>tenantadmin or readIdentitySources</b>'
      operationId: getAllAvailableIdentityProviderTypes
      responses:
        '200':
          description: Success. Configuration was retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SubTenantIdentityProvidersConfig"
        '403':
          description: You are not authorized to access this resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '405':
          description: You are not allowed to access this resource because this tenant
            do not have a reseller offering enabled.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: The update failed because of an unexpected internal service
            error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/identitysources/subtenants/{subtenantUuid}":
    get:
      tags:
      - Partner Reseller Identity Providers Management
      summary: Retrieve the specified sub-tenants identity source provider configuration.
      description: 'The REST interface to retrieve the specified sub-tenant''s identity
        source provider configuration. <br><br>Entitlements required: <b>readIdentitySources
        or tenantadmin</b>'
      operationId: getSubTenantIdentityProviders
      parameters:
      - name: subtenantUuid
        in: path
        description: The unique ID of subtenant.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success. Configuration was retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SubTenantIdentityProvidersConfig"
        '403':
          description: You are not authorized to access this resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '405':
          description: You are not allowed to access this resource because this tenant
            do not have a reseller offering enabled.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: The update failed because of an unexpected internal service
            error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Partner Reseller Identity Providers Management
      summary: Set the list of allowed identity provider sources.
      description: 'The REST interface to set tthe list of allowed identity provider
        sources.<br><br>Entitlements required: <b>manageIdentitySources or tenantadmin</b>'
      operationId: setSubTenantIdentityProviders
      parameters:
      - name: subtenantUuid
        in: path
        description: The unique ID of subtenant.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SubTenantIdentityProvidersConfig"
        required: false
      responses:
        '204':
          description: Success. Subtenant configurations were updated.
          content: {}
        '400':
          description: The request json was malformed or failed validation.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: You are not authorized to access this resource.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '405':
          description: You are not allowed to access this resource because this tenant
            do not have a reseller offering enabled.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request had a conflict with current configuration.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: The update failed because of an unexpected internal service
            error.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/identitysources/{instanceId}":
    get:
      tags:
      - Identity Sources V1 - Deprecated
      summary: Deprecated - Retrieve the details of a particular identity source instance
        of the tenant with the specified instance ID.
      description: 'This API is deprecated and will be removed after June 1 2025.
        Use the Version 2.0 API: /v2.0/identitysources/{instanceId}<br><br>The REST
        interface that retrieves the details of a particular identity source instance
        of the tenant. <br><br>Entitlements required: <b>readIdentitySources</b>,
        <b>manageIdentitySources</b>'
      operationId: getInstanceV1
      parameters:
      - name: instanceId
        in: path
        description: The unique ID of identity source instance.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success. The identity source was retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IdentitySourceInstancesData"
        '403':
          description: You are not authorized to access this resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The retrieval failed because the resource wasn't found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      deprecated: true
      x-publicAPI: 'true'
    put:
      tags:
      - Identity Sources V1 - Deprecated
      summary: Deprecated - Update an identity source instance of the tenant with
        the specified instance ID.
      description: 'This API is deprecated and will be removed after June 1 2025.
        Use the Version 2.0 API: /v2.0/identitysources/{instanceId}<br><br>NOTE: The
        V1 PUT API will return an error if the existing identity source was created
        or modified with the V2 API.<br><br>The REST interface that updates a particular
        instance of identity source. <br><br>Entitlements required: <b>manageIdentitySources</b><br><br><b>Note:</b>
        The properties and the number of properties differ with the identity source
        type. More information about the properties associated with various identity
        source types can be found in the knowledge center <a href="https://www.ibm.com/support/knowledgecenter/en/SSCT62/com.ibm.iamservice.doc/references/r_idp_payloads.html">here</a>.'
      operationId: updateIdentitySourceV1
      parameters:
      - name: instanceId
        in: path
        description: The unique ID of identity source instance.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/IdentitySourceInstancesData"
        required: false
      responses:
        '204':
          description: Success. Identity source was updated.
          content: {}
        '403':
          description: You are not authorized to access this resource.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The update failed because resource wasn't found.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      deprecated: true
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Identity Sources V1 - Deprecated
      summary: Deprecated - Delete an identity source instance of the tenant with
        the specified instance ID.
      description: 'This API is deprecated and will be removed after June 1 2025.
        Use the Version 2.0 API: /v2.0/identitysources/{instanceId}<br><br>The REST
        interface that deletes a particular instance of identity source. <br><br>Entitlements
        required: <b>manageIdentitySources</b>'
      operationId: deleteIdentitySourceV1
      parameters:
      - name: instanceId
        in: path
        description: The unique ID of identity source instance.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Success. Identity source instance was deleted.
          content: {}
        '403':
          description: You are not authorized to access this resource.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The delete failed because the resource wasn't found.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The delete failed because the resource is in use.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      deprecated: true
      x-publicAPI: 'true'
  "/v1.0/identitysourcetypes":
    get:
      tags:
      - Identity Source Types
      summary: Retrieve the details of all the identity source types.
      description: 'The REST interface that retrieves the details of all the identity
        source types. <br><br>Entitlements required: <b>readIdentitySources</b>, <b>manageIdentitySources</b><br><br><b>Note:
        </b>The properties and the number of properties differ with the identity source
        type. More information about the payloads and properties associated with various
        identity source types can be found in the knowledge center <a href="https://www.ibm.com/support/knowledgecenter/en/SSCT62/com.ibm.iamservice.doc/references/r_idp_payloads.html">here</a>.'
      operationId: getTenantSourceTypes
      parameters:
      - name: minimal
        in: query
        description: A flag indicating whether send back only a small number of details.
        schema:
          type: boolean
          default: false
      - name: excludemetadata
        in: query
        description: A flag indicating whether to include metadata of SAML Enterprise.
        schema:
          type: boolean
          default: false
      responses:
        '200':
          description: Success. The details of identity source types were retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IdentitySourceTypesDataList"
        '403':
          description: You are not authorized to access this resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/identitysourcetypes/{sourceTypeId}":
    get:
      tags:
      - Identity Source Types
      summary: Retrieve the details of a particular identity source types.
      description: 'The REST interface that retrieves the details of particular identity
        source type. <br><br>Entitlements required: <b>readIdentitySources</b>, <b>manageIdentitySources</b>'
      operationId: getTenantSourceType
      parameters:
      - name: sourceTypeId
        in: path
        description: The numeric identifier of identity provider type.
        required: true
        schema:
          maximum: 17
          minimum: 1
          type: integer
          format: int32
      - name: excludemetadata
        in: query
        description: A flag indicating whether to include metadata of SAML Enterprise.
        schema:
          type: boolean
          default: false
      responses:
        '200':
          description: Success. The details of identity source type was retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IdentitySourceTypesData"
        '403':
          description: You are not authorized to access this resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The retrieval failed because the resource wasn't found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/identitysourcetypes/{sourceTypeId}/metadata":
    get:
      tags:
      - Identity Source Types
      summary: Retrieve the metadata of a particular SAML Enterprise.
      description: 'The REST interface that retrieves the metadata of a particular
        SAML Enterprise. <br><br>Entitlements required: <b>readIdentitySources</b>,
        <b>manageIdentitySources</b><br><br><b>Note:</b> This endpoint is applicable
        for the SAML Enterprise type only, i.e. sourceTypeId = 4.'
      operationId: exportMetadata
      parameters:
      - name: sourceTypeId
        in: path
        description: The numeric identifier of identity provider type.
        required: true
        schema:
          type: integer
          format: int32
          default: 4
      responses:
        '200':
          description: Success. The metadata XML of SAML Enterprise was retrieved.
          content:
            application/octet-stream:
              schema:
                "$ref": "#/components/schemas/MetaData"
            application/xml:
              schema:
                "$ref": "#/components/schemas/MetaData"
        '403':
          description: You are not authorized to access this resource.
          content:
            application/octet-stream:
              schema:
                "$ref": "#/components/schemas/VerifyError"
            application/xml:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The retrieval failed because the resource wasn't found.
          content:
            application/octet-stream:
              schema:
                "$ref": "#/components/schemas/VerifyError"
            application/xml:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/identitysources":
    get:
      tags:
      - Identity Sources V2
      summary: V2 Retrieve all the identity source instances of the tenant.
      description: 'The REST interface that retrieves all the identity source instances
        of the tenant. <br><br>NOTE: If the identity source has V1 properties, they
        are translated to V2 equivalents. See the table in the V2 PUT and POST descriptions<br><br>Entitlements
        required: <b>readIdentitySources</b>, <b>manageIdentitySources</b>'
      operationId: getInstancesV2
      parameters:
      - name: filter
        in: query
        description: 'You can use following filters to fetch the identity source instances
          with specific properties. <br><br><b>enduser</b>: Returns all the identity
          source instances that are enabled for end users, i.e. the instances with
          <b>show_end_user</b> property value set as <b>true</b>.<br><br><b>appscope</b>:
          Returns all the social identity sources, excluding the IBMid identity source,
          that are associated with custom applications.<br>    Regardless of this
          filter, Cloud Directory is included as the default provider.'
        schema:
          type: string
          enum:
          - enduser
          - appscope
      - name: search
        in: query
        description: 'The prefix for all search operations is <b>search=</b>. <br>You
          can search on following fields: id, sourceTypeId, instanceName, enabled<br>Specifying
          any other field than the allowed search fields in the criteria will result
          in an error.<br><br>Valid operators for strings are =, != and contains <br>Valid
          operators for booleans are = and !=<br>Valid operators for numbers are =,
          !=, >=, >, &lt=, and &lt<br>String search values must be double quoted;
          the numbers and booleans must be without quotes. More than one search criteria
          can be specified using <b>"and"</b> and <b>"or"</b> operators.<br><br>The
          search parameter value <b>MUST</b> be URL encoded.<br><b>Notes:</b> Only
          value should be encoded; not the parameter name. Encoding is not required
          when using Swagger UI.<br><br><b>Examples:</b><br>a. To search on instanceName,
          provide the search criteria as follows: <br><pre>   instanceName = "Baidu"
          </pre><br>or in URL encoded form as follows: <br><pre>   search=instanceName%20%3D%20%22Baidu%22
          </pre><br>b. To search on instanceName containing "SAML" in it, provide
          the search criteria as follows: <br><pre>   instanceName contains "SAML"
          </pre><br>or in URL encoded form as follows: <br><pre>   search=instanceName%20contains%20%22SAML%22
          </pre><br>c. To search the SAML Enterprise instances that have "ABC" in
          their names, provide the search criteria as follows: <br><pre>   instanceName
          contains "ABC" and sourceTypeId = 4 </pre><br>or in URL encoded form as
          follows: <br><pre>   search=instanceName%20contains%20%22ABC%22%20and%20sourceTypeId%20%3D%204
          </pre><br>'
        schema:
          type: string
      - name: pagination
        in: query
        description: 'The prefix for the paging parameter is <b>pagination=</b>. <br><br>If
          pagination parameters are not specified, then all the results will be returned.
          <br><br>If pagination parameters are specified, then the results will be
          paginated. Following are the parameters that can be specified; these parameters
          will be included in the response reflecting the actual results. <br><br><b>page</b>:
          The page being requested, or the offset that defines the starting resource
          number. <br><b>limit</b>: It is a page size; it defines the total number
          of resources that can be included in one page. It is the maximum number
          of resources that will be returned in the response.<b>count</b>: The total
          number of resources to be returned in the response. It is an optional parameter,
          and it MUST be less than or equal to the limit. If not specified, then count
          = limit.<br><br><br>The pagination parameter value <b>MUST</b> be URL encoded.<br><b>Note:</b>
          Only value should be encoded; not the parameter name. Encoding is not required
          when using Swagger UI.<br><br><b>Note:</b> The maximum value allowed for
          the <b>limit</b> or <b>count</b> fields is 1000. <br><br><b>Examples:</b><br>a.
          To retrieve first 5 or less resources from page 1, provide pagination parameters
          as follows: <br><pre>   count=5&page=1&limit=10 </pre><br>or in URL encoded
          form as follows: <br><pre>   pagination=count%3D5%26page%3D1%26limit%3D10
          </pre><br>b. To retrieve first 3 or less resources from page 2, provide
          pagination parameters as follows: <br><pre>   count=3&page=2&limit=10 </pre><br>or
          in URL encoded form as follows: <br><pre>   pagination=count%3D3%26page%3D2%26limit%3D10
          </pre><br>'
        schema:
          type: string
      - name: sort
        in: query
        description: 'The prefix for the sort parameter is <b>sort=</b>. <br>You can
          sort on following fields: id, sourceTypeId, instanceName, enabled<br>Specifying
          any other field than the allowed sort fields will result in an error.<br><br>Each
          sort attribute must be prefixed with either + or - (+ ascending, - descending).
          A list of attributes separated by a comma (,) can be specified for the second
          or third order of sorting. <br><br>The sort parameter value <b>MUST</b>
          be URL encoded.<br><b>Note:</b> Only value should be encoded; not the parameter
          name. Encoding is not required when using Swagger UI.<br><br><b>Examples:</b><br>a.
          To sort on sourceTypeId in ascending order, provide the sort parameter as
          follows: <br><pre>   +sourceTypeId </pre><br>or in URL encoded form as follows:
          <br><pre>   sort=%2BsourceTypeId </pre><br>b. To sort on sourceTypeId in
          ascending order and for second order sort on instanceName in descending
          order, provide the sort parameter as follows: <br><pre>   +sourceTypeId,-instanceName
          </pre><br>or in URL encoded form as follows: <br><pre>   sort=%2BsourceTypeId%2C-instanceName
          </pre><br>'
        schema:
          type: string
      responses:
        '200':
          description: Success. The identity sources were retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IdentitySourceIntancesDataList"
        '400':
          description: The response JSON was malformed.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: You are not authorized to access this resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The search failed. The system couldn't retrieve the identity
            sources.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Identity Sources V2
      summary: V2 API to create an identity source instance for a tenant.
      description: 'The REST interface that creates an instance of particular type
        of identity source. <br><br>Entitlements required: <b>manageIdentitySources</b><br><br><b>Note:</b>
        The properties and the number of properties differ with the identity source
        type. More information about the payloads and properties associated with various
        identity source types can be found in the knowledge center <a href="https://www.ibm.com/support/knowledgecenter/en/SSCT62/com.ibm.iamservice.doc/references/r_idp_payloads.html">here</a>.<br><br><b>Note:</b>
        V1 to V2 property changes. For identity sources types that support identity
        linking:<table><tr><th>V1 Property</th><th>V2 Migrated Property</th><th>Notes</th></tr><tr><td><b>identityLinkingEnabled</b></td><td><b>identityLinkingEnabled</b></td><td>No
        change. Enable/disable identity linking</td></tr><tr><td><b>externalId</b>
        (SAML only) <br> <b>external_id_attribute</b> (EnterpriseOIDC only) <br> <b>identityLinkingExternalId</b>
        (WeChat only) </td><td><b>identityLinkingExternalId</b></td><td>Requires identityLinkingEnable==true</td></tr><tr><td><b>externalIdTransform</b>
        (SAML only)</td><td><b>identityLinkingExternalIdTransform</b></td><td>Requires
        identityLinkingExternalId to be set</td></tr><tr><td><b>identityLinkingJitEnabled</b></td><td><b>jitEnabled</b></td><td>Does
        not depend on identityLinkingEnabled</td></tr><tr><td><b>identityLinkingPrincipalAttribute</b></td><td><b>principalAttribute</b></td><td>Does
        not depend on identityLinkingEnabled</td></tr><tr><td>--</td><td><b>principalAttributeTransform</b></td><td>Requires
        principalAttribute to be set</td></tr></table>'
      operationId: createIdentitySourceV2
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/IdentitySourceInstancesData"
        required: false
      responses:
        '201':
          description: Success. The identity source was created.
          content: {}
        '400':
          description: The request json was malformed.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: You are not authorized to access this resource.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: A conflict exists.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/identitysources/passwordPolicies":
    get:
      tags:
      - Identity Sources V2
      summary: V2 Retrieve all the identity source instances of the tenant that use
        the passord policy ID's specified in the 'search' query parameter.
      description: 'The REST interface that retrieves all the identity source instances
        of the tenant that use the password policies that are in the search query
        parameter. <br><br>NOTE: If the identity source has V1 properties, they are
        translated to V2 equivalents. See the table in the V2 PUT and POST descriptions<br><br>Entitlements
        required: <b>readIdentitySources</b>, <b>manageIdentitySources</b>'
      operationId: getPasswordPoliciesByIdsV2
      parameters:
      - name: search
        in: query
        description: The ID of the password policies you'd like to search. Should
          be in the URL encoded format 'search=id=54dd128b-82b5-479f-b669-9b5a508cf7e3'
          or for searching multiple password policy ID's, 'search=id=54dd128b-82b5-479f-b669-9b5a508cf7e3|45dd128b-82b5-479f-b669-9b5a508c7b9'
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success. The identity sources were retrieved with the matching
            specified search ID's. An empty set will return as success as well.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IdentitySourceIntancesDataList"
        '400':
          description: The response JSON was malformed.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: You are not authorized to access this resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The search failed. The system couldn't retrieve the identity
            sources with the specified password policy id's.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/identitysources/property/{propertyName}/{propertyValue}":
    get:
      tags:
      - Identity Sources V2
      summary: V2 Retrieve all the identity source instances of the tenant that have
        this property name and value.
      description: 'The REST interface that retrieves all the identity source instances
        of the tenant. <br><br>NOTE: If the identity source has V1 properties, they
        are translated to V2 equivalents. See the table in the V2 PUT and POST descriptions<br><br>Entitlements
        required: <b>readIdentitySources</b>, <b>manageIdentitySources</b>'
      operationId: getInstancesByPropertyV2
      parameters:
      - name: propertyName
        in: path
        description: The property name to search for in the identity source instances.
        required: true
        schema:
          type: string
      - name: propertyValue
        in: path
        description: The property value to search for in the identity source instances.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success. The identity sources were retrieved with a matching
            property name and value.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IdentitySourceIntancesDataList"
        '400':
          description: The response JSON was malformed.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: You are not authorized to access this resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The search failed. The system couldn't retrieve the identity
            sources with the specified property name and value combination.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/identitysources/{instanceId}":
    get:
      tags:
      - Identity Sources V2
      summary: V2 Retrieve the details of a particular identity source instance of
        the tenant with the specified instance ID.
      description: 'The REST interface that retrieves the details of a particular
        identity source instance of the tenant. <br><br>NOTE: If the identity source
        has V1 properties, they are translated to V2 equivalents. See the table in
        the V2 PUT and POST descriptions<br><br>Entitlements required: <b>readIdentitySources</b>,
        <b>manageIdentitySources</b>'
      operationId: getInstanceV2
      parameters:
      - name: instanceId
        in: path
        description: The unique ID of identity source instance.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success. The identity source was retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IdentitySourceInstancesData"
        '403':
          description: You are not authorized to access this resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The retrieval failed because the resource wasn't found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Identity Sources V2
      summary: V2 Update an identity source instance of the tenant with the specified
        instance ID.
      description: 'The REST interface that updates a particular instance of identity
        source. <br><br>Entitlements required: <b>manageIdentitySources</b><br><br><b>Note:</b>
        The properties and the number of properties differ with the identity source
        type. More information about the properties associated with various identity
        source types can be found in the knowledge center <a href="https://www.ibm.com/support/knowledgecenter/en/SSCT62/com.ibm.iamservice.doc/references/r_idp_payloads.html">here</a>.<br><br><b>Note:</b>
        V1 to V2 property changes. For identity sources types that support identity
        linking:<table><tr><th>V1 Property</th><th>V2 Migrated Property</th><th>Notes</th></tr><tr><td><b>identityLinkingEnabled</b></td><td><b>identityLinkingEnabled</b></td><td>No
        change. Enable/disable identity linking</td></tr><tr><td><b>externalId</b>
        (SAML only) <br> <b>external_id_attribute</b> (EnterpriseOIDC only) <br> <b>identityLinkingExternalId</b>
        (WeChat only) </td><td><b>identityLinkingExternalId</b></td><td>Requires identityLinkingEnable==true</td></tr><tr><td><b>externalIdTransform</b>
        (SAML only)</td><td><b>identityLinkingExternalIdTransform</b></td><td>Requires
        identityLinkingExternalId to be set</td></tr><tr><td><b>identityLinkingJitEnabled</b></td><td><b>jitEnabled</b></td><td>Does
        not depend on identityLinkingEnabled</td></tr><tr><td><b>identityLinkingPrincipalAttribute</b></td><td><b>principalAttribute</b></td><td>Does
        not depend on identityLinkingEnabled</td></tr><tr><td>--</td><td><b>principalAttributeTransform</b></td><td>Requires
        principalAttribute to be set</td></tr></table>'
      operationId: updateIdentitySourceV2
      parameters:
      - name: instanceId
        in: path
        description: The unique ID of identity source instance.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/IdentitySourceInstancesData"
        required: false
      responses:
        '204':
          description: Success. Identity source was updated.
          content: {}
        '403':
          description: You are not authorized to access this resource.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The update failed because resource wasn't found.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Identity Sources V2
      summary: V2 Delete an identity source instance of the tenant with the specified
        instance ID.
      description: 'The REST interface that deletes a particular instance of identity
        source. <br><br>Entitlements required: <b>manageIdentitySources</b>'
      operationId: deleteIdentitySourceV2
      parameters:
      - name: instanceId
        in: path
        description: The unique ID of identity source instance.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Success. Identity source instance was deleted.
          content: {}
        '403':
          description: You are not authorized to access this resource.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The delete failed because the resource wasn't found.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The delete failed because the resource is in use.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/auth/session":
    get:
      tags:
      - Authentication Token Exchange
      summary: Exchange a valid bearer token for an authenticated browser session
      description: |
        This endpoint takes an authentication bearer token in the header, or as the query parameter “access_token”. However, for security purposes, it is recommended that the token is passed in by using the POST API call.
        <br>It uses “scoped=true” as a query parameter optionally. When “scoped=true” is given, the cookie created is be used to login to app scoped application. If “scoped=true” is not given, the cookie created is used to login to non-app scoped application.
        <br>It uses “redirect_url” as a query parameter as optionally. When “redirect_url” is given, the call will redirect to the redirect URL with the authenticated session.
      operationId: exchangeToken1
      parameters:
      - name: scoped
        in: query
        description: If true, it creates a session for app scoped application login.
          If false, it creates a session for non app scoped application login
        schema:
          type: boolean
      - name: access_token
        in: query
        description: The access token used to create the authenticated browser session.
          Useful for testing, but it is recommended that the token be passed in the
          Authorization header, as URL parameters can be intercepted.
        schema:
          type: string
      - name: redirect_url
        in: query
        description: The URL where the request will be redirected after the session
          is created. The URL should be URL encoded or the authenticated redirect
          may fail. An error is returned if the URL is not allowed.<br>A valid URL
          must match one of these conditions:<br>- Starts with the tenant name, "https://tenantname.com"<br>-
          Is a relative path, it starts with "/"<br>- It matches one of the URLs in
          the list of allowed URL in the Session Exchange management API
        schema:
          type: string
      responses:
        '201':
          description: An access token was successfully exchanged for an IBM Security
            Verify session credential.
          content: {}
        '302':
          description: Returned when the "redirect_url" parameter is passed in. After
            a successful token exchange the browser will be redirected to the redirect_url
          content: {}
        '400':
          description: The system cannot process the request because no access token
            was found in the request. An access token must be present in either the
            'Authorization' HTTP header or in the query parameter 'access_token'.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The request either provided no authentication or the authentication
            was unsuccessful.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The access token used does not allow access to the requested
            resource.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An unexpected error occurred while trying to acquire necessary
            user data.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Authentication Token Exchange
      summary: Exchange a valid bearer token for an authenticated browser session
      description: "This endpoint takes an authentication bearer token that is provided
        in the body of \"x-www-form-urlencoded\" POST request”. \n<br>It uses “scoped=true”
        as a query parameter optionally. When “scoped=true” is given, the cookie that
        is created is used to login to an app-scoped application. If “scoped=true”
        is not given, the cookie that created is used to log in to a nonapp-scoped
        application.\n<br>It uses “redirect_url” as an optional query parameter. When
        “redirect_url” is given, the call redirects to the redirect URL with the authenticated
        session.\n"
      operationId: exchangeTokenViaPost
      parameters:
      - name: scoped
        in: query
        description: If true, it creates a session for app-scoped application login.
          If false, it creates a session for nonapp-scoped application login.
        schema:
          type: boolean
      - name: redirect_url
        in: query
        description: The URL where the request is redirected after the session is
          created. The URL must be URL encoded or the authenticated redirect might
          fail. An error is returned if the URL is not allowed.<br>A valid URL must
          match one of these conditions:<br>- Starts with the tenant name, "https://tenantname.com"<br>-
          Is a relative path, it starts with "/"<br>- It matches one of the URLs in
          the list of allowed URL in the Session Exchange management API
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                access_token:
                  type: string
                  description: The access token that is used to create the authenticated
                    browser session that is sent as "x-www-form-urlencoded" form parameter
      responses:
        '201':
          description: An access token was successfully exchanged for an IBM Security
            Verify session credential.
          content: {}
        '302':
          description: Returned when the "redirect_url" parameter is passed in. After
            a successful token exchange the browser is redirected to the redirect_url.
          content: {}
        '400':
          description: The system cannot process the request because no access token
            was found in the request. An access token must be present in the request
            body.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The request either provided no authentication or the authentication
            was unsuccessful.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The access token that is used does not allow access to the
            requested resource.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An unexpected error occurred while trying to acquire necessary
            user data.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/auth/sessions":
    delete:
      tags:
      - Authentication Manage User Sessions
      summary: Delete random session for the user.
      description: 'This endpoint takes a userId parameter. Entitlements required:
        <b>manageLoginSessions or resetPasswordAnyUser</b>'
      operationId: evictSessions
      parameters:
      - name: userId
        in: query
        description: The userid to remove sessions for
        required: true
        schema:
          type: string
      responses:
        '200':
          description: 'Success, JSONObject is returned indicating the result: { "result":
            true|false }. True - One of the user''s sessions was deleted. False -
            User session was not deleted because the session count is not above the
            max sesssion limit, or error'
          content: {}
        '500':
          description: An unexpected error occured.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/auth/sessions/{userId}":
    get:
      tags:
      - Authentication Manage User Sessions
      summary: Get the sessions for the user.
      description: 'This endpoint takes a userId in the path. Entitlements required:
        <b>listSessions</b>'
      operationId: getSessions
      parameters:
      - name: userId
        in: path
        description: The userid to get sessions for
        required: true
        schema:
          type: string
      responses:
        '200':
          description: 'Success. A list of session identifiers with context information. '
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SuccessSessionInfo"
        '400':
          description: The specified userId was not found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An unexpected error occured.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    delete:
      tags:
      - Authentication Manage User Sessions
      summary: Revoke all sessions for the user.
      description: 'This endpoint takes a userId in the path of the user to have all
        their sessions revoked. Entitlements required: <b>manageLoginSessions OR revokeAllSessions</b>'
      operationId: deleteAllSessions
      parameters:
      - name: userId
        in: path
        description: The userid to revoke sessions for
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Success. All sessions for the user were revoked.
          content: {}
        '400':
          description: The specified userId was not found.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An unexpected error occured.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    patch:
      tags:
      - Authentication Manage User Sessions
      summary: Revoke or take some other action on specific sessions for the user
        ID that is specified in the request path.
      description: 'This endpoint takes a userId in the path and a JSON payload in
        the body that specifies the user session ID as well as the operation to perform.  Supported
        operations are ''DELETE''. Entitlements required: <b>manageLoginSessions,
        revokeSession OR revokeAllSessions</b>'
      operationId: deleteSpecifiedSessions
      parameters:
      - name: userId
        in: path
        description: The userid to remove sessions for
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SessionsPatchObject"
        required: false
      responses:
        '204':
          description: 'Success. All sessions were revoked or were not found. '
          content: {}
        '207':
          description: Success. The operation failed on some of the sessions.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FailedSessionsPatchObject"
        '400':
          description: The specified userId was not found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An unexpected error occured.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/socialjwt/exchange":
    post:
      tags:
      - Social JWT Exchange
      summary: Exchange a valid social JWT for an IBM Security Verify access token.
      description: 'This API allows IBM Security Verify access token to be generated
        by sending an access token from a social identity provider. The token must
        be included in a JWT containing the following claims.<br>If the access token
        is not available, a "userinfo" claim may be passed in instead of a token.
        The signed JWT is proof of valid login. The claims should be similar to the
        id\_token claims.<br><table><tr><th>Name</th><th>Description</th><th>Optional</th><th>Valid
        Values</th></tr><tr><td>plat</td><td>Social network platform that issed the
        token</td><td>false</td><td>wechat</td></tr><tr><td>sub</td><td>Principal
        subject identifier at the social network</td><td>false</td><td>user unique
        identifier on the social platform</td></tr><tr><td>token</td><td>The access
        token issued by the platform</td><td>false</td><td>valid access token issued
        by the social platform</td></tr><tr><td>iss</td><td>issuer of the JWT token
        used to invoke the token exchange API</td><td>false</td><td>any uri</td></tr><tr><td>typ</td><td>Type
        of the JWT token</td><td>false</td><td>urn:com:ibm:cloudidentity:social</td></tr><tr><td>exp</td><td>The
        expiration time after which the JWT will not be accepted. Format is seconds
        since epoch</td><td>true</td><td>1594123601</td></tr><tr><td>userinfo</td><td>A
        JSON object that contains the user info claims. These are the claims used
        to search for the user and optionally create. The only required claim is the
        attribute configured to be the user unique identifier. If this claim is included
        the "token" claim is ignored.</td><td>true</td><td>{"plat": "_plat_", ...,
        "userinfo": { "email": "user_email@plat.com"}}</td></tr><tr><td>&lt;attribute
        name&gt;</td><td>A user claim that will be added to the resulting credential.
        The attribute name must be configured in the attribute mappings in the identity
        source.</td><td>true</td><td>The value to be added to the cred attribute</td></tr></table><br>These
        are the claims expected when the previous call returned a 400 requesting a
        missing attribute<br><table><tr><th>Name</th><th>Description</th><th>Optional</th><th>Valid
        Values</th></tr><tr><td>plat</td><td>Social network platform that issed the
        token</td><td>false</td><td>wechat</td></tr><tr><td>state_id</td><td>The state_id
        returned from the previous request</td><td>false</td><td>1231424525</td></tr><tr><td>eg:
        phone_number</td><td>Should be the name of the missing attribute returned
        from the previous call.<br>Ex: the first call returned a 400 with missingAttrName
        = <b>phone_number</b>. The Name would be phone number.</td><td>false</td><td>The
        value of the missing attribute, ex: the phone number</td></tr></table>'
      operationId: exchangeToken
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                jwt:
                  type: string
                  description: a base64-encoded JWT containing the social access token
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OIDCTokenResponse"
        '400':
          description: The JWT was incorrectly formatted, or there is a missing attribute
            in the JWT claims
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/JwtErrorResponse"
        '403':
          description: The access token was invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/JwtErrorResponse"
      x-publicAPI: 'true'
  "/v3.0/policyvault/accesspolicy":
    get:
      tags:
      - Access Policy Management v3.0 (deprecated)
      summary: Deprecated - Retrieve list of tenant policies.
      description: |-
        <b>Deprecated:</b> This API is deprecated and will be removed after 23 December 2023. Use the Version 5.0<br/>The REST interface that retrieves all the predefined and tenant specific policies based on tenant subscription.
         The REST interface supports search, sort and pagination.
        <br/><br/>Entitlements required: readAccessPolicies (Read Access Policies)<br/><b>OR</b><br/>Entitlements required: manageAccessPolicies (Manage Access Policies)
      operationId: getAllV3Policies
      parameters:
      - name: search
        in: query
        description: 'The prefix for all search operations is "search=".<br> Valid
          operators for strings are = , !=  and contains <br>Valid operators for booleans
          are = and !=<br>Valid operators for numbers are >=, >, &lt=, &lt, = and
          !=<br>String search values must be double quoted, numbers and booleans must
          not.<br><br>The search parameter value <b>must</b> be HTML encoded.<br>Note:
          This is not required when using Swagger UI.<br><br><b>Supported attributes:</b>
          id, name, description, predefined, schemaVersion.<br><b>Example:</b>If you
          want to search on name contains "ABCDEF"&id>300, then specify as below:<br>search=name%20contains%20%22ABCDEF%22%26id%3E300'
        schema:
          type: string
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>Use
          the following query parameters:<br><br><b>count</b> - Defines the total
          number of results that are returned from the data store. The maximum value
          is 1000.<br><br><b>page</b> - Identifies the requested page, or the offset.<br><br><b>limit</b>
          - Defines the total number of results that are returned per page. The maximum
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: If you are not using the
          Swagger UI, the pagination parameter value must be HTML encoded. Use the
          prefix "pagination=" in the query parameter.<br><br><b>Example</b>: Paginate
          on count=10&page=1&limit=5<br>pagination=count%3D10%26page%3D1%26limit%3D5'
        schema:
          type: string
      - name: sort
        in: query
        description: 'The prefix for the sort parameter is "sort=". Each attribute
          must be prefixed with either + or - (+ ascending, - descending). Multiple
          attributes must be separated by a comma (,).<br><br>The sort parameter value
          <b>must</b> be HTML encoded.<br>Note: This is not required when using Swagger
          UI.<br><br><b>Supported attributes:</b> id, name, description, predefined,
          schemaVersion.<b>Example:</b> If you want to sort on -predefined,+id, then
          specify as below:<br>sort=-predefined%2C%2Bid'
        schema:
          type: string
      responses:
        '200':
          description: Success. Policies were retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PolicyVaultList"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: You are not authorized to access this resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The search failed. The system could not retrieve the policies.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      deprecated: true
      x-publicAPI: 'true'
    post:
      tags:
      - Access Policy Management v3.0 (deprecated)
      summary: Deprecated - Create a custom policy for tenant.
      description: |-
        <b>Deprecated:</b> This API is deprecated and will be removed after 23 December 2023. Use the Version 5.0<br/>REST interface to create a custom policy.
        <br/><br/>Entitlements required: manageAccessPolicies (Manage Access Policies)<br/><br/>To know more about Access-policy-rules click <a href='https://www.ibm.com/support/knowledgecenter/en/SSCT62/com.ibm.iamservice.doc/tasks/t_manage_access_policies.html' target='_blank'> here </a>
      operationId: createV3Policy
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PolicyObjectModel"
        required: false
      responses:
        '201':
          description: Success. The policy was created.
          content: {}
        '400':
          description: The request json was malformed.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: You are not authorized to access this resource.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      deprecated: true
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v3.0/policyvault/accesspolicy/{id}":
    get:
      tags:
      - Access Policy Management v3.0 (deprecated)
      summary: "Deprecated - Retrieve the details of a particular policy specified
        with id. \n"
      description: |-
        <b>Deprecated:</b> This API is deprecated and will be removed after 23 December 2023. Use the Version 5.0<br/>The REST interface to retrieve the policy for a specified ID.
        <br/><br/> Entitlements required: readAccessPolicies (Read Access Policies) <br/><b>OR</b><br/>Entitlements required: manageAccessPolicies (Manage Access Policies)
      operationId: getV3PolicyByID
      parameters:
      - name: id
        in: path
        description: 'The policy identifier.

          '
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Success. The details policy was retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PolicyVaultResponse"
        '403':
          description: You are not authorized to access this resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The retrieval failed because the resource wasn't found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      deprecated: true
      x-publicAPI: 'true'
    put:
      tags:
      - Access Policy Management v3.0 (deprecated)
      summary: Deprecated - Update the policy instance of tenant with specified id.
      description: "<b>Deprecated:</b> This API is deprecated and will be removed
        after 23 December 2023. Use the Version 5.0<br/>REST interface to update the
        specified policy. \n<br/><br/>Entitlements required: manageAccessPolicies
        (Manage Access Policies)<br/><br/>To know more about Access-policy-rules click
        <a href='https://www.ibm.com/support/knowledgecenter/en/SSCT62/com.ibm.iamservice.doc/tasks/t_manage_access_policies.html'
        target='_blank'> here </a>"
      operationId: updateV3PolicyByID
      parameters:
      - name: id
        in: path
        description: The policy identifier.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PolicyObjectModel"
        required: false
      responses:
        '204':
          description: Success. Policy updated successfully.
          content: {}
        '400':
          description: The request json was malformed.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: You are not authorized to access this resource.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The update failed because resource wasn't found.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      deprecated: true
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Access Policy Management v3.0 (deprecated)
      summary: Deprecated - Delete custom policy of tenant with specified id.
      description: "<b>Deprecated:</b> This API is deprecated and will be removed
        after 23 December 2023. Use the Version 5.0<br/>REST interface that deletes
        a policy of specified id. \n<br/><br/>Entitlements required: manageAccessPolicies
        (Manage Access Policies)"
      operationId: deleteV3PolicyByID
      parameters:
      - name: id
        in: path
        description: 'The policy identifier.

          '
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Success. Policy was deleted.
          content: {}
        '403':
          description: You are not authorized to access this resource.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The delete failed because the resource wasn't found.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The delete failed because the policy is attached one or more
            application.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      deprecated: true
      x-publicAPI: 'true'
  "/v1.0/admin/assignments/stats":
    get:
      tags:
      - Certification Campaign statistics
      summary: Retrieve statistics of specific assignments.
      description: 'Get aggregated statistics about assignments in a given campaign
        instance. Filters can be applied to refine the entities to use for generating
        statistics.If called by an application owner, the API returns statistics across
        all instances that the owner created or that contain at least one application
        that the owner owns.<br/>Entitlements required: manageAccessCertification
        [Manage Access Certification].'
      operationId: adminAssignmentsStats
      parameters:
      - name: filterType
        in: query
        description: Define the filter type to apply
        schema:
          type: string
          default: all
          enum:
          - reviewer
          - last_action
          - assignee
          - application
          - ent_type
          - ent_name
          - account_status
          - all
      - name: instanceId
        in: query
        description: Instance ID
        required: true
        schema:
          type: string
      - name: sort
        in: query
        description: Attribute of the request that is used to sort results
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseCampaignStatsOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
  "/v1.0/admin/assignments/{id}":
    get:
      tags:
      - Certification Campaign assignments
      summary: Retrieve a specific assignment.
      description: 'Get a specific assignment. If called by an application owner,
        the API can retrieve assignments only for the campaigns that the owner created
        or that contain at least one application that the owner owns.<br/>Entitlements
        required: manageAccessCertification [Manage Access Certification].'
      operationId: adminGetAssignmentById
      parameters:
      - name: id
        in: path
        description: Campaign assignment ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AssignmentOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
    put:
      tags:
      - Certification Campaign assignments
      summary: Modify a given assignment.
      description: 'Modify a specific assignment. If called by an application owner,
        the API can modify assignments only for campaigns that the owner created or
        that contain at least one application that the owner owns.<br/>Entitlements
        required: manageAccessWorkflow [Manage Access Work Flows].'
      operationId: adminReplace
      parameters:
      - name: id
        in: path
        description: Campaign assignment ID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AssignmentInput"
        required: false
      responses:
        '200':
          description: The operation was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AssignmentOutput"
        '400':
          description: A client-side status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: A conflict occurred during the replace operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your operation can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/admin/campaign/{id}/assignments":
    post:
      tags:
      - Certification Campaign assignments
      summary: Add new assignments to a continuous campaign.
      description: 'API for adding new assignments in a continuous campaign. If called
        by an application owner, the API can add only assignments for campaigns that
        the owner created or that contain at least one application that the owner
        owns.<br/>Entitlements required: manageAccessWorkflow [Manage Access Work
        Flows].'
      operationId: adminBulkAdditionByConfig
      parameters:
      - name: id
        in: path
        description: Campaign configuration ID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/AssignmentInput"
        required: false
      responses:
        '202':
          description: The request was succesfully accepted.
          content: {}
        '400':
          description: A client-side status error occurred. The error code and description
            are available in the payload.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: A conflict occurred during the post operation.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/admin/campaigns":
    get:
      tags:
      - Certification Campaign configurations
      summary: Retrieve the campaign configurations.
      description: 'Get campaign configurations and manage them. Tenant administrator
        can see all the campaign configurations for the specified tenant. The application
        owner can see only the campaigns that the owner created or that contain at
        least one application that the owner owns.<br/>Entitlements required: manageAccessCertification
        [Manage Access Certification].'
      operationId: adminCampaignConfigurationFind
      parameters:
      - name: type
        in: query
        description: 'Filter for campaign type: User, Account, or Group assignments'
        schema:
          type: string
          default: all
          enum:
          - all
          - userassignment
          - groupassignment
          - account
      - name: priority
        in: query
        description: 'Filter for campaign priority: High, Medium, or Low'
        schema:
          type: string
          default: all
          enum:
          - all
          - high
          - medium
          - low
      - name: preview
        in: query
        description: 'Filter for getting preview campaigns: Yes, No, or All'
        schema:
          type: string
          default: all
          enum:
          - all
          - 'yes'
          - 'no'
      - name: continuous
        in: query
        description: 'Filter for getting continuous campaigns: Yes, No, or All'
        schema:
          type: string
          default: all
          enum:
          - all
          - 'yes'
          - 'no'
      - name: filter
        in: query
        description: 'Generic filter for returning campaigns that contain the passed
          string in one of the following attributes: name or owner.'
        schema:
          type: string
      - name: sort
        in: query
        description: Attribute of the campaign that is used to sort results
        schema:
          type: string
      - name: sortDesc
        in: query
        schema:
          type: boolean
          default: true
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseCampaignConfigurationOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
    post:
      tags:
      - Certification Campaign configurations
      summary: Create a campaign configuration.
      description: 'Create a campaign configuration. The optional reviewer, if specified,
        can be any existing userId. For an account campaign, blocklist contains default
        "unmatched" account statuses. If you want to retrieve unmatched accounts as
        well, you must explicitly add them into the allowlist.<br/>Entitlements required:
        manageAccessCertification [Manage Access Certification].'
      operationId: adminCreateCampaignConfiguration
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CampaignConfigurationInput"
        required: false
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CampaignConfigurationOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    patch:
      tags:
      - Certification Campaign configurations
      summary: Edit campaign configurations.
      description: 'Modify a set of campaign configurations. If called by an application
        owner, the API can modify only campaigns that the owner created or that the
        associated applications are all owned by the owner.<br/>Entitlements required:
        tenantadmin [Tenant Administrator].'
      operationId: bulkReplace
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/BulkOperationJsonNode"
        required: false
      responses:
        '204':
          description: The operation was successful.
          content: {}
        '207':
          description: Partial success. The results are mixed.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/BulkResult_0"
        '400':
          description: A client-side status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessageForBulk"
        '409':
          description: A conflict occurred during the replace operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessageForBulk"
        '500':
          description: Your operation can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/admin/campaigns/stats":
    get:
      tags:
      - Certification Campaign statistics
      summary: Retrieve campaign statistics.
      description: 'Get campaign statistics. If called by an application owner, the
        API returns the details for campaigns that the owner created or that contain
        at least one application that the owner owns.<br/>Entitlements required: manageAccessCertification
        [Manage Access Certification].'
      operationId: adminCampaignStats
      parameters:
      - name: filterType
        in: query
        description: Define the filter type to apply
        schema:
          type: string
          default: all
          enum:
          - createdby
          - type
          - reviewer
          - state
          - priority
          - application
          - all
      - name: sort
        in: query
        description: Attribute of the request that is used to sort results
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseCampaignStatsOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
  "/v1.0/admin/campaigns/{id}":
    get:
      tags:
      - Certification Campaign configurations
      summary: Retrieve a specific campaign configuration.
      description: 'Get a specific campaign configuration and manage it. If called
        by an application owner, the API can retrieve only configurations that the
        owner created or that contain at least one application that the owner owns.<br/>Entitlements
        required: manageAccessCertification [Manage Access Certification].'
      operationId: adminGetCampaignById
      parameters:
      - name: id
        in: path
        description: Campaign configuration ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CampaignConfigurationOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
    put:
      tags:
      - Certification Campaign configurations
      summary: Edit specific campaign configuration.
      description: 'Modify a specific campaign configuration. If called by an application
        owner, the API can modify only campaigns that the owner created or that the
        associated applications are all owned by the owner.<br/>Entitlements required:
        tenantadmin [Tenant Administrator].'
      operationId: replace_0
      parameters:
      - name: id
        in: path
        description: Campaign configuration ID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CampaignConfigurationInput"
        required: false
      responses:
        '200':
          description: The operation was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CampaignConfigurationOutput"
        '400':
          description: A client-side status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: A conflict occurred during the replace operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your operation can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Certification Campaign configurations
      summary: Delete specific campaign configuration.
      description: 'Delete a specific campaign configuration. If called by an application
        owner, the API can delete only campaigns that the owner created or that the
        associated applications are all owned by the owner.<br/>Entitlements required:
        tenantadmin [Tenant Administrator].'
      operationId: delete
      parameters:
      - name: id
        in: path
        description: Campaign configuration ID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Campaign configuration is deleted.
          content: {}
        '400':
          description: Generic application error status. The error code and description
            are available in the payload.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
  "/v1.0/admin/campaigns/{id}/instances":
    get:
      tags:
      - Certification Campaign instances
      summary: Retrieve instances corresponding to a specific campaign configuration.
      description: 'Get campaign instances corresponding to a given campaign configuration.
        If called by an application owner, the API can only get instances that the
        owner created or that contain at least one application that the owner owns.<br/>Entitlements
        required: manageAccessCertification [Manage Access Certification].'
      operationId: adminCampaignInstanceFindByCampaignID
      parameters:
      - name: id
        in: path
        description: Campaign ID
        required: true
        schema:
          type: string
      - name: state
        in: query
        description: Filter for campaign state
        schema:
          type: string
          default: all
          enum:
          - all
          - noinstance
          - aborted
          - closed
          - completed
          - created
          - deleted
          - failed
          - paused
          - running
          - starting
          - success
      - name: filter
        in: query
        description: 'Generic filter for returning campaigns that contain the passed
          string in one of the following attributes: campaign.name or campaign.reviewer '
        schema:
          type: string
      - name: sort
        in: query
        description: Attribute of the campaign instance that is used to sort results
        schema:
          type: string
      - name: sortDesc
        in: query
        schema:
          type: boolean
          default: true
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseCampaignInstanceOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
  "/v1.0/admin/instance/{id}/assignments":
    post:
      tags:
      - Certification Campaign assignments
      summary: Add new assignments to a continuous campaign instance.
      description: 'API for adding new assignments in a specific instance of a continuous
        campaign. If called by an application owner, the API can add assignments only
        for campaigns that the owner created or that contain at least one application
        that the owner owns.<br/>Entitlements required: manageAccessWorkflow [Manage
        Access Work Flows].'
      operationId: adminBulkAddition
      parameters:
      - name: id
        in: path
        description: Campaign instance ID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/AssignmentInput"
        required: false
      responses:
        '202':
          description: The request was succesfully accepted.
          content: {}
        '400':
          description: A client-side status error occurred. The error code and description
            are available in the payload.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: A conflict occurred during the post operation.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    patch:
      tags:
      - Certification Campaign assignments
      summary: Modify a given set of assignments.
      description: 'API to make bulk update of the specified assignments. If called
        by an application owner, the API can modify only assignments for campaigns
        that the owner created or that the associated applications are all owned by
        the owner.<br/>Entitlements required: manageAccessWorkflow [Manage Access
        Work Flows].'
      operationId: adminBulkReplace
      parameters:
      - name: id
        in: path
        description: Campaign instance ID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/AssignmentInput"
        required: false
      responses:
        '200':
          description: The operation was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/AssignmentOutput"
        '400':
          description: A client-side status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: A conflict occurred during the replace operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your operation can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/admin/instance/{id}/assignments/refresh":
    post:
      tags:
      - Certification Campaign assignments
      summary: Refresh assignments in a continuous campaign.
      description: 'API for refreshing assignments in a continuous campaign.<br/>Entitlements
        required: manageAccessWorkflow [Manage Access  Work Flows].'
      operationId: refreshAssignments
      parameters:
      - name: id
        in: path
        description: Campaign instance ID
        required: true
        schema:
          type: string
      responses:
        '202':
          description: The request was succesfully accepted.
          content: {}
        '400':
          description: A client-side status error occurred. The error code and description
            are available in the payload.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: A conflict occurred during the post operation.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/admin/instances":
    get:
      tags:
      - Certification Campaign instances
      summary: Retrieve campaign instances.
      description: 'Get a list of campaign instances. If called by an application
        owner, the API can get only instances associated to configurations that the
        owner created or that contain at least one application that the owner owns.<br/>Entitlements
        required: manageAccessCertification [Manage Access Certification].'
      operationId: adminCampaignInstanceFind
      parameters:
      - name: type
        in: query
        description: 'Filter for campaign type: User, Account, or Group assignments'
        schema:
          type: string
          default: all
          enum:
          - all
          - userassignment
          - groupassignment
          - account
      - name: state
        in: query
        description: Filter for campaign state
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: all
            enum:
            - all
            - noinstance
            - aborted
            - closed
            - completed
            - created
            - deleted
            - failed
            - paused
            - running
            - starting
            - success
      - name: priority
        in: query
        description: 'Filter for campaign priority: High, Medium, or Low'
        schema:
          type: string
          default: all
          enum:
          - all
          - high
          - medium
          - low
      - name: preview
        in: query
        description: 'Filter for getting preview campaigns: Yes, No, or All'
        schema:
          type: string
          default: all
          enum:
          - all
          - 'yes'
          - 'no'
      - name: continuous
        in: query
        description: 'Filter for getting continuous campaigns: Yes,No, or All'
        schema:
          type: string
          default: all
          enum:
          - all
          - 'yes'
          - 'no'
      - name: reviewersId
        in: query
        description: Campaign reviewer IDs
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: supervisorsId
        in: query
        description: Campaign supervisors IDs
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: ownersId
        in: query
        description: Campaign owner IDs
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: appsId
        in: query
        description: Application IDs
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: overallState
        in: query
        description: Filter for overall campaign state. This filter is to logically
          'group' the possible campaign states.
        schema:
          type: string
          default: all
          enum:
          - all
          - active
          - inactive
      - name: filter
        in: query
        description: 'Generic filter for returning campaigns containing the passed
          string in one of the following attributes: campaign.name or campaign.reviewer '
        schema:
          type: string
      - name: sort
        in: query
        description: Attribute of the campaign instance that is used to sort results
        schema:
          type: string
      - name: sortDesc
        in: query
        schema:
          type: boolean
          default: true
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseCampaignInstanceOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
    patch:
      tags:
      - Certification Campaign instances
      summary: Modify campaign instances.
      description: 'Modify a set of campaign instances. If called by an application
        owner, the API can modify only instances that the owner created or that contain
        at least one application that the owner owns.<br/>Entitlements required: manageAccessWorkflow
        [Manage Access Request Work Flows]'
      operationId: bulkReplace_0
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/CampaignInstanceInput"
        required: false
      responses:
        '204':
          description: The operation was successful.
          content: {}
        '207':
          description: Partial success. The results are mixed.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/BulkResult_0"
        '400':
          description: A client-side status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessageForBulk"
        '409':
          description: A conflict occurred during the replace operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessageForBulk"
        '500':
          description: Your operation can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/admin/instances/stats":
    get:
      tags:
      - Certification Campaign statistics
      summary: Retrieve statistics of specific campaign instances.
      description: 'Get aggregated statistics about campaign instances depending on
        the specified filter. If called by an application owner, the API returns statistics
        of the instances that the owner created or that contain at least one application
        that the owner owns.<br/>Entitlements required: manageAccessCertification
        [Manage Access Certification].'
      operationId: adminInstancesStats
      parameters:
      - name: filterType
        in: query
        description: Define the filter type to apply
        schema:
          type: string
          default: all
          enum:
          - createdby
          - type
          - reviewer
          - state
          - priority
          - application
          - all
      - name: state
        in: query
        description: Filter for campaign state
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: all
            enum:
            - all
            - noinstance
            - aborted
            - closed
            - completed
            - created
            - deleted
            - failed
            - paused
            - running
            - starting
            - success
      - name: overallState
        in: query
        description: Define the overall state of the instance to include in the filter
        schema:
          type: string
          default: all
          enum:
          - active
          - inactive
          - all
      - name: filter
        in: query
        description: 'Generic filter for returning campaigns that contain the passed
          string in one of the following attributes: campaign.name or campaign.reviewer '
        schema:
          type: string
      - name: sort
        in: query
        description: Attribute of the request that is used to sort results
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseCampaignStatsOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
  "/v1.0/admin/instances/{id}":
    get:
      tags:
      - Certification Campaign instances
      summary: Retrieve a specific campaign instance.
      description: 'Get a specific campaign instance.<br/>Entitlements required: manageAccessCertification
        [Manage Access Certification].'
      operationId: adminGetCampaignInstanceById
      parameters:
      - name: id
        in: path
        description: Campaign instance ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CampaignInstanceOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
    put:
      tags:
      - Certification Campaign instances
      summary: Modify specific campaign instance.
      description: 'Modify a specific campaign instance. If called by an application
        owner, the API can modify only instances that the owner created or that the
        associated applications are all owned by the owner.<br/>Entitlements required:
        manageAccessWorkflow [Manage Access Request Work Flows].'
      operationId: replace_1
      parameters:
      - name: id
        in: path
        description: Campaign instance ID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CampaignInstanceInput"
        required: false
      responses:
        '200':
          description: The operation was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CampaignInstanceOutput"
        '400':
          description: A client-side status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: A conflict occurred during the replace operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your operation can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/admin/instances/{id}/assignments":
    get:
      tags:
      - Certification Campaign assignments
      summary: Retrieve all assignments in a given campaign instance
      description: 'Get all the assignments for a given campaign instance. If called
        by an application owner, the API can get assignments only for campaigns that
        the owner created or that contain at least one application that the owner
        owns.<br/>Entitlements required: manageAccessCertification [Manage Access
        Certification].'
      operationId: adminCampaignAssignmentFindByInstanceID
      parameters:
      - name: id
        in: path
        description: Campaign instance ID
        required: true
        schema:
          type: string
      - name: assigneesId
        in: query
        description: Assignee IDs
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: actions
        in: query
        description: Reviewer action IDs
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: reviewersId
        in: query
        description: Reviewer IDs
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: appsId
        in: query
        description: Application IDs
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: assignmentType
        in: query
        description: Assignment types
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - role
            - permission
            - account
      - name: assignmentName
        in: query
        description: Assignment names
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: assignmentStatus
        in: query
        description: Assignment value type
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - compliant
            - non_compliant
            - orphan
            - unmanaged
            - unmatched
      - name: groupsId
        in: query
        description: Discretionary groups
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: filter
        in: query
        description: Filter for results
        schema:
          type: string
      - name: sort
        in: query
        description: Attribute that is used to sort results
        schema:
          type: string
      - name: sortDesc
        in: query
        schema:
          type: boolean
          default: true
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/AssignmentOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
    post:
      tags:
      - Certification Campaign assignments
      summary: Retrieve all assignments in a given campaign instance.
      description: 'Get all the assignments for a given campaign instance. If called
        by an application owner, the API can get assignments only for campaigns that
        the owner created or that contain at least one application that the owner
        owns.<br/>Entitlements required: manageAccessCertification [Manage Access
        Certification].'
      operationId: adminCampaignAssignmentFindByInstanceID_0
      parameters:
      - name: id
        in: path
        description: Campaign instance ID
        required: true
        schema:
          type: string
      - name: sort
        in: query
        description: Attribute that is used to sort results
        schema:
          type: string
      - name: sortDesc
        in: query
        schema:
          type: boolean
          default: true
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        schema:
          type: integer
          format: int32
          default: 1
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AssignmentFilter"
        required: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/AssignmentOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/admin/instances/{id}/preview":
    post:
      tags:
      - Certification Campaign instances
      summary: Create a preview campaign.
      description: 'Create a preview campaign from the specified campaign instance.<br/>Entitlements
        required: manageAccessCertification [Manage Access Certification].'
      operationId: adminGeneratePreviewCampaignInstanceById
      parameters:
      - name: id
        in: path
        description: Campaign instance ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CampaignInstanceOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
  "/v1.0/admin/instances/{instanceId}/assignments/resources":
    get:
      tags:
      - Certification Campaign statistics
      summary: Retrieve statistics of specific assignments within a given instance.
      description: 'Get statistics about assignment resources, for a specific campaign
        instance, depending on the specified filter. If called by an application owner,
        the API returns statistics for the instance, that the owner created or that
        contain at least one application that the owner owns.<br/>Entitlements required:
        manageAccessCertification [Manage Access Certification].'
      operationId: adminAssignmentsResourceStats
      parameters:
      - name: instanceId
        in: path
        description: Instance ID
        required: true
        schema:
          type: string
      - name: resourceType
        in: query
        description: Define the resource type to query statistics
        schema:
          type: string
          default: assignee
          enum:
          - assignee
          - reviewer
          - application
          - assignmentType
          - assignmentName
          - assignmentSource
          - accountStatus
          - accountName
          - entitledAs
      - name: reviewerId
        in: query
        description: Reviewer ID to filter
        schema:
          type: string
      - name: actions
        in: query
        description: Reviewer action IDs
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: filter
        in: query
        description: Define the filter type to apply
        schema:
          type: string
      - name: sort
        in: query
        description: Attribute of the campaign instance that is used to sort results
        schema:
          type: string
      - name: sortDesc
        in: query
        schema:
          type: boolean
          default: true
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseCampaignStatsOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
  "/v1.0/self/assignments/stats":
    get:
      tags:
      - Certification Campaign statistics
      summary: Retrieve statistics of specific assignments.
      description: 'Get aggregated statistics about assignments in a given campaign
        instance for a reviewer or supervisor. Filters can be applied to refine the
        entities that are used for generating statistics.<br/>Entitlements required:
        manageAccessCertification [Manage Access Certification].'
      operationId: selfAssignmentsStats
      parameters:
      - name: filterType
        in: query
        description: Define the filter type to apply
        schema:
          type: string
          default: all
          enum:
          - last_action
          - assignee
          - application
          - ent_type
          - ent_name
          - account_status
          - all
      - name: instanceId
        in: query
        description: Instance ID
        required: true
        schema:
          type: string
      - name: asSupervisor
        in: query
        description: Consider the calling user as a supervisor of the campaign when
          calling this API.
        schema:
          type: boolean
      - name: assignmentSource
        in: query
        description: Filter by how the campaigns were assigned to the calling user
        schema:
          type: string
          default: assigned
          enum:
          - all
          - assigned
          - delegated
      - name: sort
        in: query
        description: Attribute of the request that is used to sort results
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseCampaignStatsOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
  "/v1.0/self/assignments/{id}":
    get:
      tags:
      - Certification Campaign assignments
      summary: Retrieve a specific assignment.
      description: 'Get a specific assignment for a campaign reviewer or supervisor.<br/>Entitlements
        required: manageAccessCertification [Manage Access Certification].'
      operationId: selfGetAssignmentById
      parameters:
      - name: id
        in: path
        description: Campaign assignment ID
        required: true
        schema:
          type: string
      - name: asSupervisor
        in: query
        description: Consider the calling user as a supervisor of the campaign when
          calling this API
        schema:
          type: boolean
      - name: assignmentSource
        in: query
        description: Filter by how the campaigns were assigned to the calling user
        schema:
          type: string
          default: assigned
          enum:
          - all
          - assigned
          - delegated
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AssignmentOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
    put:
      tags:
      - Certification Campaign assignments
      summary: Modify a given assignment.
      description: 'API for a reviewer to modify a specific assignment.<br/>Entitlements
        required: manageAccessWorkflow [Manage Access Work Flows].'
      operationId: selfReplace
      parameters:
      - name: id
        in: path
        description: Campaign assignment ID
        required: true
        schema:
          type: string
      - name: asSupervisor
        in: query
        description: Consider the calling user as a supervisor of the campaign when
          calling this API
        schema:
          type: boolean
      - name: assignmentSource
        in: query
        description: Filter by how the campaigns were assigned to the calling user
        schema:
          type: string
          default: assigned
          enum:
          - all
          - assigned
          - delegated
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AssignmentInput"
        required: false
      responses:
        '200':
          description: The operation was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AssignmentOutput"
        '400':
          description: A client-side status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: A conflict occurred during the replace operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your operation can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/self/campaigns/{id}/instances":
    get:
      tags:
      - Certification Campaign instances
      summary: Retrieve instances corresponding to a specific campaign configuration.
      description: 'Get campaign instances corresponding to a specific campaign configuration
        for a reviewer or supervisor. At least one record must be associated with
        the reviewer or supervisor.<br/>Entitlements required: manageAccessCertification
        [Manage Access Certification].'
      operationId: selfCampaignInstanceFindByCampaignID
      parameters:
      - name: id
        in: path
        description: Instance ID
        required: true
        schema:
          type: string
      - name: state
        in: query
        description: Filter for campaign state
        schema:
          type: string
          default: all
          enum:
          - all
          - noinstance
          - aborted
          - closed
          - completed
          - created
          - deleted
          - failed
          - paused
          - running
          - starting
          - success
      - name: asSupervisor
        in: query
        description: Consider the calling user as a supervisor of the campaign when
          calling this API
        schema:
          type: boolean
      - name: assignmentSource
        in: query
        description: Filter by how the campaigns were assigned to the calling user
        schema:
          type: string
          default: assigned
          enum:
          - all
          - assigned
          - delegated
      - name: filter
        in: query
        description: 'Generic filter returning campaigns that contain the passed string
          in one of the following attributes: campaign.name or campaign.reviewer '
        schema:
          type: string
      - name: sort
        in: query
        description: Attribute of the request that will be used to sort results
        schema:
          type: string
      - name: sortDesc
        in: query
        schema:
          type: boolean
          default: true
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseCampaignInstanceOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
  "/v1.0/self/instance/{id}/assignments":
    patch:
      tags:
      - Certification Campaign assignments
      summary: Modify a given set of assignments.
      description: 'API for a reviewer to make a bulk update of the specified assignments.<br/>Entitlements
        required: manageAccessWorkflow [Manage Access Work Flows].'
      operationId: selfBulkReplace
      parameters:
      - name: id
        in: path
        description: Campaign instance ID
        required: true
        schema:
          type: string
      - name: asSupervisor
        in: query
        description: Consider the calling user as a supervisor of the campaign when
          calling this API
        schema:
          type: boolean
      - name: assignmentSource
        in: query
        description: Filter by how the campaigns were assigned to the calling user
        schema:
          type: string
          default: assigned
          enum:
          - all
          - assigned
          - delegated
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/AssignmentInput"
        required: false
      responses:
        '200':
          description: The operation was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/AssignmentOutput"
        '400':
          description: A client-side status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: A conflict occurred during the replace operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your operation can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/self/instances":
    get:
      tags:
      - Certification Campaign instances
      summary: Retrieve campaign instances.
      description: 'Get campaign instances with at least one record associated with
        a reviewer or supervisor.<br/>Entitlements required: manageAccessCertification
        [Manage Access Certification].'
      operationId: selfCampaignInstanceFind
      parameters:
      - name: type
        in: query
        description: 'Filter for campaign type: User, Account, or Group assignments'
        schema:
          type: string
          default: all
          enum:
          - all
          - userassignment
          - account
          - groupassignment
      - name: state
        in: query
        description: Filter for campaign state
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: all
            enum:
            - all
            - noinstance
            - aborted
            - closed
            - completed
            - created
            - deleted
            - failed
            - paused
            - running
            - starting
            - success
      - name: priority
        in: query
        description: 'Filter for campaign priority: High, Medium, or Low'
        schema:
          type: string
          default: all
          enum:
          - all
          - high
          - medium
          - low
      - name: preview
        in: query
        description: 'Filter for getting preview campaigns: Yes, No, or All'
        schema:
          type: string
          default: all
          enum:
          - all
          - 'yes'
          - 'no'
      - name: continuous
        in: query
        description: 'Filter for getting continuous campaigns: Yes, No, or All'
        schema:
          type: string
          default: all
          enum:
          - all
          - 'yes'
          - 'no'
      - name: ownersId
        in: query
        description: Campaign owner IDs
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: appsId
        in: query
        description: Application IDs
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: overallState
        in: query
        description: Filter for overall campaign state. This filter is to logically
          'group' the possible campaign states.
        schema:
          type: string
          default: all
          enum:
          - all
          - active
          - inactive
      - name: asSupervisor
        in: query
        description: Consider the calling user as a supervisor of the campaign when
          calling this API
        schema:
          type: boolean
      - name: assignmentSource
        in: query
        description: Filter by how the campaigns were assigned to the calling user
        schema:
          type: string
          default: assigned
          enum:
          - all
          - assigned
          - delegated
      - name: skipStatistics
        in: query
        description: 'Filter for including aggregated data (such as statistics or
          progress) to the instance objects: Yes, No, or OnlyData'
        schema:
          type: string
          default: 'no'
          enum:
          - dataonly
          - 'yes'
          - 'no'
      - name: filter
        in: query
        description: 'Generic filter returning campaigns that contain the passed string
          in one of the following attributes: campaign.name or campaign.reviewer '
        schema:
          type: string
      - name: sort
        in: query
        description: Attribute of the instance that is used to sort results
        schema:
          type: string
      - name: sortDesc
        in: query
        schema:
          type: boolean
          default: true
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseCampaignInstanceOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
  "/v1.0/self/instances/stats":
    get:
      tags:
      - Certification Campaign statistics
      summary: Retrieve statistics of specific campaign instances.
      description: 'Get aggregated statistics about campaign instances depending on
        the specified filter. If called by a user manager, the API returns statistics
        of instances, for which the manager has at least one item to review.<br/>Entitlements
        required: manageAccessCertification [Manage Access Certification].'
      operationId: selfInstancesStats
      parameters:
      - name: filterType
        in: query
        description: Define the filter type to apply
        schema:
          type: string
          default: all
          enum:
          - createdby
          - type
          - reviewer
          - state
          - priority
          - application
          - all
      - name: state
        in: query
        description: Filter for campaign state
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: all
            enum:
            - all
            - noinstance
            - aborted
            - closed
            - completed
            - created
            - deleted
            - failed
            - paused
            - running
            - starting
            - success
      - name: overallState
        in: query
        description: Define the overall state of the instance to include in the filter
        schema:
          type: string
          default: all
          enum:
          - active
          - inactive
          - all
      - name: asSupervisor
        in: query
        description: Consider the calling user as a supervisor of the campaign when
          calling this API
        schema:
          type: boolean
      - name: assignmentSource
        in: query
        description: Filter by how the campaigns were assigned to the calling user
        schema:
          type: string
          default: assigned
          enum:
          - all
          - assigned
          - delegated
      - name: filter
        in: query
        description: 'Generic filter returning campaigns that contain the passed string
          in one of the following attributes: campaign.name or campaign.reviewer '
        schema:
          type: string
      - name: sort
        in: query
        description: Attribute of the request that is used to sort results
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseCampaignStatsOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
  "/v1.0/self/instances/{id}":
    get:
      tags:
      - Certification Campaign instances
      summary: Retrieve specific campaign instance.
      description: 'Get a specific campaign instance with at least one record associated
        with a reviewer or supervisor.<br/>Entitlements required: manageAccessCertification
        [Manage Access Certification].'
      operationId: selfGetCampaignInstanceById
      parameters:
      - name: id
        in: path
        description: Campaign instance ID
        required: true
        schema:
          type: string
      - name: asSupervisor
        in: query
        description: Consider the calling user as a supervisor of the campaign when
          calling this API
        schema:
          type: boolean
      - name: assignmentSource
        in: query
        description: Filter by how the campaigns were assigned to the calling user
        schema:
          type: string
          default: assigned
          enum:
          - all
          - assigned
          - delegated
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CampaignInstanceOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
  "/v1.0/self/instances/{id}/assignments":
    get:
      tags:
      - Certification Campaign assignments
      summary: Retrieve all assignments, in a given campaign instance.
      description: 'Get all the assignments for a specific campaign instance for a
        reviewer or supervisor.<br/>Entitlements required: manageAccessCertification
        [Manage Access Certification].'
      operationId: selfCampaignAssignmentFindByInstanceID
      parameters:
      - name: id
        in: path
        description: Campaign instance ID
        required: true
        schema:
          type: string
      - name: assigneesId
        in: query
        description: Assignee IDs
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: reviewersId
        in: query
        description: Reviewer IDs
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: actions
        in: query
        description: Reviewer action IDs
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: appsId
        in: query
        description: Application IDs
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: assignmentType
        in: query
        description: Assignment types
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - role
            - permission
            - account
      - name: assignmentName
        in: query
        description: Assignment names
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: assignmentStatus
        in: query
        description: Assignment value types
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - compliant
            - non_compliant
            - orphan
            - unmanaged
            - unmatched
      - name: groupsId
        in: query
        description: Discretionary groups
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: asSupervisor
        in: query
        description: Allow user to access this endpoint as a supervisor
        schema:
          type: boolean
          default: false
      - name: assignmentSource
        in: query
        description: Filter by how the campaigns were assigned to the calling user
        schema:
          type: string
          default: assigned
          enum:
          - all
          - assigned
          - delegated
      - name: filter
        in: query
        description: Filter for results
        schema:
          type: string
      - name: sort
        in: query
        description: Attribute that is used to sort results
        schema:
          type: string
      - name: sortDesc
        in: query
        schema:
          type: boolean
          default: true
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/AssignmentOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
    post:
      tags:
      - Certification Campaign assignments
      summary: Retrieve all assignments in a given campaign instance.
      description: 'Get all the assignments for a specific campaign instance for a
        reviewer or supervisor.<br/>Entitlements required: manageAccessCertification
        [Manage Access Certification].'
      operationId: selfCampaignAssignmentFindByInstanceID_0
      parameters:
      - name: id
        in: path
        description: Campaign instance ID
        required: true
        schema:
          type: string
      - name: asSupervisor
        in: query
        description: Allow user to access this endpoint as a supervisor
        schema:
          type: boolean
          default: false
      - name: assignmentSource
        in: query
        description: Filter by how the campaigns were assigned to the calling user
        schema:
          type: string
          default: assigned
          enum:
          - all
          - assigned
          - delegated
      - name: sort
        in: query
        description: Attribute that is used to sort results
        schema:
          type: string
      - name: sortDesc
        in: query
        schema:
          type: boolean
          default: true
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        schema:
          type: integer
          format: int32
          default: 1
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AssignmentFilter"
        required: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/AssignmentOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/self/instances/{instanceId}/assignments/resources":
    get:
      tags:
      - Certification Campaign statistics
      summary: Retrieve statistics of specific assignments within a given instance.
      description: 'Get aggregated statistics about assignments in a specific campaign
        instance for a reviewer or supervisor.Filters can be applied against the assignments.
        <br/>Entitlements required: manageAccessCertification [Manage Access Certification].'
      operationId: selfAssignmentsResourceStats
      parameters:
      - name: instanceId
        in: path
        description: Instance ID
        required: true
        schema:
          type: string
      - name: resourceType
        in: query
        description: Define the resource type to query statistics
        schema:
          type: string
          default: assignee
          enum:
          - assignee
          - reviewer
          - application
          - assignmentType
          - assignmentName
          - assignmentSource
          - accountStatus
          - accountName
          - entitledAs
      - name: reviewerId
        in: query
        description: Reviewer ID to filter
        schema:
          type: string
      - name: actions
        in: query
        description: Reviewer action IDs
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: asSupervisor
        in: query
        description: Consider the calling user as a supervisor of the campaign when
          calling this API
        schema:
          type: boolean
      - name: assignmentSource
        in: query
        description: Filter by how the campaigns were assigned to the calling user
        schema:
          type: string
          default: assigned
          enum:
          - all
          - assigned
          - delegated
      - name: filter
        in: query
        description: Define the filter type to apply
        schema:
          type: string
      - name: sort
        in: query
        description: Attribute of the campaign instance that is used to sort results
        schema:
          type: string
      - name: sortDesc
        in: query
        schema:
          type: boolean
          default: true
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseCampaignStatsOutput"
        '400':
          description: Generic application error status. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Server error
          content: {}
      x-publicAPI: 'true'
  "/v2.0/PasswordPolicies":
    get:
      tags:
      - Password Policy Management 2.0
      summary: Get the password policy for a specified tenant.
      description: "Entitlement required: readPwdPolicy (Read password policy) or
        managePwdPolicy (Manage password policy). \n<br>Note: You only need one entitlement,
        but you can have more than one."
      operationId: getPasswordPolicy
      responses:
        '200':
          description: The operation was successful.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/PasswordPolicyResponse"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
      x-publicAPI: 'true'
    put:
      tags:
      - Password Policy Management 2.0
      summary: Update the password policy for a specified tenant.
      description: "Entitlement required: managePwdPolicy (Manage password policy).
        \n"
      operationId: updatePasswordPolicies
      requestBody:
        description: The password policy object that contains the attributes for the
          password policy that is to be updated.
        content:
          application/scim+json:
            schema:
              "$ref": "#/components/schemas/PasswordPolicy"
        required: true
      responses:
        '200':
          description: The operation was successful.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/PasswordPolicyResponse"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v3.0/DictionaryPolicy":
    get:
      tags:
      - Dictionary Policy Management 3.0
      summary: Fetches the password dictionary policy in Cloud Directory.
      description: 'Entitlement required: managePwdPolicy (Manage password policy).'
      operationId: getDictPolicy
      responses:
        '200':
          description: Success
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/DictPolicyResponseV3"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
      x-publicAPI: 'true'
    patch:
      tags:
      - Dictionary Policy Management 3.0
      summary: Modifies the password dictionary policy in Cloud Directory.
      description: 'Entitlement required: managePwdPolicy (Manage password policy).'
      operationId: patchDictPolicy
      requestBody:
        description: The body for the password dictionary patch operation.
        content:
          application/scim+json:
            schema:
              "$ref": "#/components/schemas/DictPolicyPatchRequestV3"
        required: true
      responses:
        '204':
          description: No Content.
          content: {}
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v3.0/PasswordDictionary":
    delete:
      tags:
      - Password Dictionary Management 3.0
      summary: Deletes all passwords from a specified tenant dictionary.
      description: 'Entitlement required: managePwdPolicy (Manage password policy).'
      operationId: deletePasswordDictionary
      responses:
        '204':
          description: No Content.
          content: {}
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
      x-publicAPI: 'true'
    patch:
      tags:
      - Password Dictionary Management 3.0
      summary: Add or remove passwords from the tenant password dictionary in Cloud
        Directory.
      description: 'Entitlement required: managePwdPolicy (Manage password policy).'
      operationId: patchPasswordDictionary
      requestBody:
        description: The body for the password dictionary patch operation.
        content:
          application/scim+json:
            schema:
              "$ref": "#/components/schemas/PasswordDictionaryPatchRequestV3"
        required: true
      responses:
        '204':
          description: No Content.
          content: {}
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v3.0/PasswordDictionary/CSV/export":
    get:
      tags:
      - Password Dictionary Management 3.0
      summary: Export the password dictionary from the specified tenant as a comma
        separated value (CSV) file.
      description: 'See https://tools.ietf.org/html/rfc4180, Common Format and MIME
        Type for Comma-Separated Values (CSV) Files, in a spreadsheet safe form.<br>The
        first line in the CSV file will contain the names as the column headers.<br>The
        CSV file uses the UTF-8 character set.<br>Use the /v3.0/PasswordDictionary/CSV/headerNames
        API to get the list of header names.<br><br>Entitlement required: managePwdPolicy
        (Manage password policy).'
      operationId: exportDictionary
      parameters:
      - name: format
        in: query
        description: The exported CSV format, either regular RFC4180, or RFC4180 modified
          to be spreadsheet safe (default).
        schema:
          type: string
          enum:
          - rfc4180
          - spreadsheet
      responses:
        '200':
          description: The request has succeeded.
          content:
            text/csv:
              schema:
                type: string
                format: binary
            application/scim+json:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: string
                format: binary
        '400':
          description: The request is invalid.
          content:
            text/csv:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '500':
          description: An internal server error occurred.
          content:
            text/csv:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
      x-publicAPI: 'true'
  "/v3.0/PasswordDictionary/CSV/headerNames":
    get:
      tags:
      - Password Dictionary Management 3.0
      summary: Get the list of supported header names.
      description: 'The names that are returned can be used as the headers for the
        CSV file.<br><br>Entitlement required: managePwdPolicy (Manage password policy).'
      operationId: getHeaderNames
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/CSVImportSCIMNames"
            application/json:
              schema:
                "$ref": "#/components/schemas/CSVImportSCIMNames"
        '400':
          description: The request is invalid.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
      x-publicAPI: 'true'
  "/v3.0/PasswordDictionary/CSV/import":
    post:
      tags:
      - Password Dictionary Management 3.0
      summary: Import password dictionary for the specified tenant from a comma separated
        value (CSV) file.
      description: 'See https://tools.ietf.org/html/rfc4180, Common Format and MIME
        Type for Comma-Separated Values (CSV) Files, in a spreadsheet safe form.<br>The
        first line in the CSV file must contain the names as the column headers. Use
        the /v3.0/PasswordDictionary/CSV/headerNames API to get the list of header
        names.<br>The CSV file must use the UTF-8 character set.<br>Only one CSV import
        request can be running for the specified tenant. This includes the user and
        group import requests<br>The maximum file size is 20 MB.<br>Values that contain
        a special character (i.e. comma) must be enclosed in double quotes.<br><br>Entitlement
        required: managePwdPolicy (Manage password policy).'
      operationId: importDictionary
      parameters:
      - name: format
        in: query
        description: The incoming CSV format, either regular RFC4180, or RFC4180 modified
          to be spreadsheet safe (default).
        schema:
          type: string
          enum:
          - rfc4180
          - spreadsheet
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              type: object
              properties:
                file:
                  type: string
                  description: The CSV file to upload
                  format: binary
                description:
                  type: string
                  description: A description for this import request.
        required: true
      responses:
        '202':
          description: The request was accepted for processing, but the processing
            has not been completed.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/CSVImportJob"
            application/json:
              schema:
                "$ref": "#/components/schemas/CSVImportJob"
        '400':
          description: The request is invalid.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '413':
          description: The payload is too large.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
      x-publicAPI: 'true'
  "/v3.0/PasswordDictionary/CSV/jobs":
    get:
      tags:
      - Password Dictionary Management 3.0
      summary: Retrieves a list of CSV import requests that belong to the specified
        tenant.
      description: 'The filter query parameter supports the options:<table><tr><td>cancelled</td><td>just
        shows the cancelled requests.</td></tr><tr><td>completed</td><td>just shows
        the completed requests.</td></tr><tr><td>running</td><td>just shows the running
        requests.</td></tr><tr><td>abandoned</td><td>just shows the abandoned requests.</td></tr></table><br>No
        filter shows all the requests.<br><br>Entitlement required: managePwdPolicy
        (Manage password policy).'
      operationId: getJobs
      parameters:
      - name: filter
        in: query
        description: Filter the requests
        schema:
          type: string
          enum:
          - cancelled
          - completed
          - running
          - abandoned
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/CSVImportRecords"
            application/json:
              schema:
                "$ref": "#/components/schemas/CSVImportRecords"
        '400':
          description: The request is invalid.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
      x-publicAPI: 'true'
  "/v3.0/PasswordDictionary/CSV/jobs/{id}":
    get:
      tags:
      - Password Dictionary Management 3.0
      summary: Retrieves the details of a CSV import request that belong to the specified
        tenant.
      description: 'The details that are returned include the request ID, state, and
        statistics.<br><br>Entitlement required: managePwdPolicy (Manage password
        policy).'
      operationId: getJob
      parameters:
      - name: id
        in: path
        description: The identifier of the import request whose details are being
          retrieved.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/CSVImportRecord"
            application/json:
              schema:
                "$ref": "#/components/schemas/CSVImportRecord"
        '400':
          description: The request is invalid.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '404':
          description: The request does not exist.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
      x-publicAPI: 'true'
    put:
      tags:
      - Password Dictionary Management 3.0
      summary: Cancels a CSV import request for the specified tenant.
      description: 'Entitlement required: managePwdPolicy (Manage password policy).'
      operationId: cancelJob
      parameters:
      - name: id
        in: path
        description: The identifier of the import request to cancel
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/CSVImportRecord"
            application/json:
              schema:
                "$ref": "#/components/schemas/CSVImportRecord"
        '400':
          description: The request is invalid.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '404':
          description: The request does not exist.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
      x-publicAPI: 'true'
    delete:
      tags:
      - Password Dictionary Management 3.0
      summary: Deletes a CSV import request from the specified tenant.
      description: 'A running request cannot be deleted. The request must be canceled
        first.<br><br>Entitlement required: managePwdPolicy (Manage password policy).'
      operationId: deleteJob
      parameters:
      - name: id
        in: path
        description: The identifier of the import request to delete
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No content.
          content: {}
        '400':
          description: The request is invalid.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '404':
          description: The request does not exist.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
      x-publicAPI: 'true'
  "/v3.0/PasswordPolicies":
    get:
      tags:
      - Password Policy Management 3.0
      summary: Get all password policies for a specified tenant.
      description: "Entitlement required: readPwdPolicy (Read password policy) or
        managePwdPolicy (Manage password policy). \n<br>Note: You only need one entitlement,
        but you can have more than one."
      operationId: getPasswordPolicies
      responses:
        '200':
          description: The operation was successful.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/PasswordPoliciesResponseV3"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
      x-publicAPI: 'true'
    post:
      tags:
      - Password Policy Management 3.0
      summary: Create a password policy on the given tenant
      description: 'Entitlement required: managePwdPolicy (Manage password policy).'
      operationId: createPasswordPolicy
      requestBody:
        description: The password policy attributes.
        content:
          application/scim+json:
            schema:
              "$ref": "#/components/schemas/PasswordPolicyCreateRequestV3"
        required: true
      responses:
        '201':
          description: Created.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/PasswordPolicyResponseV3"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v3.0/PasswordPolicies/{id}":
    get:
      tags:
      - Password Policy Management 3.0
      summary: Get a password policy with a given id for a specified tenant.
      description: "Entitlement required: readPwdPolicy (Read password policy) or
        managePwdPolicy (Manage password policy). \n<br>Note: You only need one entitlement,
        but you can have more than one."
      operationId: getPasswordPolicy_0
      parameters:
      - name: id
        in: path
        description: The identifier of the password policy whose details are being
          retrieved.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The operation was successful.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/PasswordPolicyResponseV3"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
      x-publicAPI: 'true'
    delete:
      tags:
      - Password Policy Management 3.0
      summary: Deletes a password policy from a specified tenant in Cloud Directory.  Can
        only delete a password policy that is not predefined.
      description: 'Entitlement required: managePwdPolicy (Manage password policy).'
      operationId: deletePasswordPolicy
      parameters:
      - name: id
        in: path
        description: The identifier of the password policy that is being deleted.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content.
          content: {}
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '404':
          description: Not found.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
      x-publicAPI: 'true'
    patch:
      tags:
      - Password Policy Management 3.0
      summary: Modify a password policy's attributes in Cloud Directory.  It can be
        used to update one or more attributes.
      description: 'Entitlement required: managePwdPolicy (Manage password policy).'
      operationId: patchPasswordPolicy
      parameters:
      - name: id
        in: path
        description: The ID of the password policy to be patched.
        required: true
        schema:
          type: string
      requestBody:
        description: The body for the password policy's patch operation.
        content:
          application/scim+json:
            schema:
              "$ref": "#/components/schemas/PasswordPolicyPatchRequestV3"
        required: true
      responses:
        '204':
          description: No Content.
          content: {}
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '404':
          description: Not found.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v3.0/PasswordPolicies/{id}/labels":
    get:
      tags:
      - Password Policy Management 3.0
      summary: This API is used to get the password policy labels for a specified
        password policy on a given tenant using the specified locale.
      operationId: getLabels_0
      parameters:
      - name: id
        in: path
        description: The identifier of the password policy that the labels will be
          returned for.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The operation was successful.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/PasswordPolicyLabelsResponse3"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '404':
          description: Not found.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
      x-publicAPI: 'true'
  "/v3.0/PasswordPolicies/{id}/password":
    get:
      tags:
      - Password Policy Management 3.0
      summary: Generate a password that satisfies the passwordStrength attributes
        in the given password policy.
      description: "Entitlement required: readPwdPolicy (Read password policy) or
        managePwdPolicy (Manage password policy). \n<br>Note: You only need one entitlement,
        but you can have more than one."
      operationId: generatePasswordPolicyPassword
      parameters:
      - name: id
        in: path
        description: The identifier of the password policy against which the password
          is generated.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The operation was successful.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/GeneratePasswordPolicyPasswordResponse"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
      x-publicAPI: 'true'
  "/v3.0/PasswordPolicies/{id}/validate":
    post:
      tags:
      - Password Policy Management 3.0
      summary: Validate a password against a specific policy ID on a specific tenant.
      description: 'Entitlement required: anyone (Anyone that has a valid access token).<br><br>If
        the password was found in a bad password dictionary, but the dictionary policy
        level is set to warning then the header "isv-dictionary-policy" will be returned
        set to one of "WARNLOCAL" or "WARNGLOBAL"<br>The password is validated against
        the password policy and checked whether it is present in the bad password
        dictionary policy.<br>Note: Only the passwordStrength elements of the password
        policy are enforced. However, the passwordStrength passwordMinDiffChars element
        is not enforced.<br><br>If custom password intelligence warning is enabled
        and a password is provided that is listed in it, the 204 response includes
        the header ''isv-dictionary-policy'' with the value: ''WARNLOCAL''.<br>If
        X-Force password intelligence warning is enabled and a password is provided
        that is listed in it, the 204 response includes the header ''isv-dictionary-policy''
        with the value: ''WARNGLOBAL''.<br>If custom password intelligence prevention
        is enabled and a password is provided that is listed in it, the 400 response
        can include the header ''isv-dictionary-policy'' with the value: ''ENFORCELOCAL''.
        The corresponding error status is ''PWD_IN_DICTIONARY''.<br>If X-Force password
        intelligence prevention is enabled and a password is provided that is listed
        in it, the 400 response can include the header ''isv-dictionary-policy'' with
        the value: ''ENFORCEGLOBAL''. The corresponding error status is ''PWD_IN_GLOBAL_DICTIONARY''.'
      operationId: validatePassword
      parameters:
      - name: id
        in: path
        description: The identifier of the password policy to validate the password
          against.
        required: true
        schema:
          type: string
      - name: usedictauth
        in: query
        description: If set to true then use password authentication dictionary check.
          If false, or not present, password change dictionary check is used.
        schema:
          type: string
      requestBody:
        description: The request payload which includes the password to be validated.
        content:
          application/scim+json:
            schema:
              "$ref": "#/components/schemas/PasswordPolicyValidatePasswordRequest"
        required: true
      responses:
        '204':
          description: No Content.
          content: {}
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/Bulk":
    post:
      tags:
      - Users Management Version 2.0
      summary: The bulk request that clients use to send a potentially large collection
        of resource operations in a single request.  For a PUT, PATCH, or POST, the
        data in the operation is the resource data as for a single SCIM request.
      description: 'Entitlement required: manageUserGroups (Manage users and groups)
        or manageAllUserGroups (Synchronize users and groups) or manageUserStandardGroups
        (Manage users and standard groups).<br>Note: You only need one entitlement,
        but you can have more than one.<br><br>The maximum number of operations is
        1000 and the maximum payload size is 1048576.<br><br>By default, an email
        is sent to the users that are created, modified, deleted, and added or removed
        as a member of a group. The email templates for branding are at "notifications/user_management/profile/"
        and "notifications/user_management/group/".<br> Pass in the themeId query
        parameter to brand the email template for notifications.<br> To turn off email
        notifications, send notifyType=NONE as a query parameter.<br><br>An example
        bulk request payload:<br> <table><tr><td>{ "schemas":["urn:ietf:params:scim:api:messages:2.0:BulkRequest"],"Operations":[
        {    "method":"POST",    "bulkId":"qwerty0",    "path":"/Users",    "data":{       "schemas":["urn:ietf:params:scim:schemas:core:2.0:User"],       "userName":"tim_mo",           "emails":[{           "type":"work",           "value":"tim_mo@mailinator.com"        }]     }  },  {    "method":"POST",    "bulkId":"qwerty1",    "path":"/Users",    "data":{       "schemas":["urn:ietf:params:scim:schemas:core:2.0:User","urn:ietf:params:scim:schemas:extension:ibm:2.0:User"],       "userName":"bulkUser2@www.realm.com",       "urn:ietf:params:scim:schemas:extension:ibm:2.0:User":{           "userCategory":"federated"        }     }  },  {    "method":"POST",    "path":"/Groups",    "bulkId":"qwerty2",    "data":
        {        "schemas":["urn:ietf:params:scim:schemas:core:2.0:Group"],        "displayName":"mygroup",        "members":[            {"type":"user",
        "value":"bulkId:qwerty0"},            {"type":"user", "value":"bulkId:qwerty1"},            {"type":"user",
        "value":"501X123JRS"}         ]     }  },  {     "method":"DELETE",     "path":"/Users/500EPPJQCS"  }]}</td></tr></table>'
      operationId: bulkRequest
      parameters:
      - name: notifyType
        in: query
        description: An optional query parameter that denotes the notification type.  If
          not present, the EMAIL notification is used. Specify NONE if no notification
          to the user is required.
        schema:
          type: string
          enum:
          - EMAIL
          - NONE
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      - name: usershouldnotneedtoresetpassword
        in: header
        description: If set to true, the user is not required to change the password
          after login.<br>Only honored if the user's password is provided in the bulk
          request.
        schema:
          type: string
          default: 'false'
          enum:
          - 'true'
          - 'false'
      requestBody:
        description: The bulk request payload.
        content:
          application/scim+json:
            schema:
              "$ref": "#/components/schemas/Bulk"
        required: true
      responses:
        '200':
          description: The operation was successful.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/BulkResponse_0"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '413':
          description: The payload is too large.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/CSV/deleteUsers":
    post:
      tags:
      - Users Management Version 2.0
      summary: Delete users for the specified tenant from a (CSV) file.
      description: 'See https://tools.ietf.org/html/rfc4180, Common Format and MIME
        Type for Comma-Separated Values (CSV) Files.<br>The first line in the CSV
        file must contain the column header named id. The subsequent lines must have
        the SCIM ID of the users to delete.<br><br>For example:<br>id<br>60P7273T7P<br>60A7471A9Q<br><br>By
        default, an email is sent to regular users that the account was deleted. Federated
        users do not get an email notification. The email template for branding is
        at "notifications/user_management/profile/{locale}/account_deleted_email.xml".
        Pass in the themeId query parameter to brand the email template for notifications.<br><br>To
        turn off email notifications, send notifyType=NONE as a query parameter.<br>The
        maximum file size is 10MB.<br><br>Entitlement required: manageUserGroups (Manage
        users and groups), or manageAllUserGroups (Synchronize users and groups),
        or manageUserStandardGroups (Manage users and standard groups).<br>Note: You
        only need one entitlement, but you can have more than one.'
      operationId: deleteUsers
      parameters:
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      - name: notifyType
        in: query
        description: An optional query parameter that denotes the notification type.  If
          not present, the EMAIL notification is used. Specify NONE if no notification
          to the user is required.
        schema:
          type: string
          enum:
          - EMAIL
          - NONE
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              type: object
              properties:
                file:
                  type: string
                  description: The CSV file to upload.
                  format: binary
                description:
                  type: string
                  description: A description for this import request.
        required: true
      responses:
        '202':
          description: The request was accepted for processing, but the processing
            is not completed.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CSVImportJob1"
        '400':
          description: The request is invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '413':
          description: The payload is too large.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
  "/v2.0/CSV/headerNames":
    get:
      tags:
      - Users Management Version 2.0
      - Groups Management Version 2.0
      summary: Get the list of supported header names.
      description: 'The names that are returned can be used as the headers for the
        CSV file.<br>The filter query parameter supports the options: <br><table><tr><td>
        "user" - the filter shows the user header names. </td></tr><tr><td> "group"
        - the filter shows the group header names. </td></tr></table><br>No filter
        shows the user header names.<br><br>Entitlement required: manageUserGroups
        (Manage users and groups) or manageAllUserGroups (Synchronize users and groups)
        or manageUserStandardGroups (Manage users and standard groups).<br>Note: You
        only need one entitlement, but you can have more than one.'
      operationId: getHeaderNames1
      parameters:
      - name: filter
        in: query
        description: Filter the header names.
        schema:
          type: string
          enum:
          - user
          - group
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CSVImportSCIMNames1"
        '400':
          description: The request is invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
  "/v2.0/CSV/importGroups":
    post:
      tags:
      - Groups Management Version 2.0
      summary: Import groups for the specified tenant from a comma separated value
        (CSV) file.
      description: 'See https://tools.ietf.org/html/rfc4180, Common Format and MIME
        Type for Comma-Separated Values (CSV) Files.<br>The first line in the CSV
        file must contain the names as the column headers. Use the /cdprofilemgmt/v2.0/CSV/headerNames
        API to get the list of header names.<br>Only one CSV import request can be
        running for the specified tenant.<br>The maximum file size is 10MB.<br>Multiple
        group members are specified with a ''|'' delimiter which may be overridden
        with the optional <b>multiValueDelimiter</b> query parameter. The members
        may be specified by name or ID. For example, testuser or 50GSYHD4C3. Federated
        users cannot be members.<br>Attribute values that contain a special character
        (i.e. comma) must be enclosed in double quotes.<br><br>Entitlement required:
        manageUserGroups (Manage users and groups) or manageAllUserGroups (Synchronize
        users and groups) or manageUserStandardGroups (Manage users and standard groups).<br>Note:
        You only need one entitlement, but you can have more than one.'
      operationId: importGroups
      parameters:
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      - name: notifyType
        in: query
        description: An optional query parameter that denotes the notification type.  If
          not present, the EMAIL notification is used. Specify NONE if no notification
          to the user is required.
        schema:
          type: string
          enum:
          - EMAIL
          - NONE
      - name: failOnError
        in: query
        description: "An optional query parameter that specifies the maximum number
          of errors allowed before stopping the import request. A negative value is
          interpreted as 0.  A value of 0 indicates that the import request will not
          \ be stopped on error. \n"
        schema:
          type: string
      - name: multiValueDelimiter
        in: query
        description: "An optional query parameter that overrides the multiple-value
          attribute values delimiter. \n"
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              type: object
              properties:
                description:
                  type: string
                  description: A description for this import request.
                file:
                  type: string
                  description: The CSV file to upload
                  format: binary
        required: true
      responses:
        '202':
          description: The request was accepted for processing, but the processing
            has not been completed.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CSVImportJob1"
        '400':
          description: The request is invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '413':
          description: The payload is too large.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
  "/v2.0/CSV/importUsers":
    post:
      tags:
      - Users Management Version 2.0
      summary: Import users for the specified tenant from a comma separated value
        (CSV) file.
      description: 'See https://tools.ietf.org/html/rfc4180, Common Format and MIME
        Type for Comma-Separated Values (CSV) Files.<br>The first line in the CSV
        file must contain the names as the column headers. Use the /CSV/headerNames
        API to get the list of header names.<br>Only one CSV import request can be
        running for the specified tenant.<br>If the default password is not specified,
        a random password will be generated and an email is sent with their password.<br>The
        maximum file size is 10MB.<br>When setting a value for the <b>urn:ietf:params:scim:schemas:extension:ibm:2.0:User:linkedAccounts</b>
        column, the value should be as follows: &lt;externalId&gt;<b>@</b>&lt;realm&gt;<br>When
        setting a value for the <b>urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:manager.value</b>
        or <b>urn:ietf:params:scim:schemas:extension:ibm:2.0:User:delegate</b> columns,
        the value may be specified by name or ID. For example, testuser or 50GSYHD4C3.<br>Multiple-value
        attribute values are specified with a ''|'' delimiter which may be overridden
        with the optional <b>multiValueDelimiter</b> query parameter.<br>Attribute
        values that contain a special character (i.e. comma) must be enclosed in double
        quotes.<br><br>Entitlement required: manageUserGroups (Manage users and groups)
        or manageAllUserGroups (Synchronize users and groups) or manageUserStandardGroups
        (Manage users and standard groups).<br>Note: You only need one entitlement,
        but you can have more than one.'
      operationId: importUsers
      parameters:
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      - name: notifyType
        in: query
        description: An optional query parameter that denotes the notification type.  If
          not present, the EMAIL notification is used. Specify NONE if no notification
          to the user is required. If no default password is specified, then the EMAIL
          notification is used since a random password will be generated.
        schema:
          type: string
          enum:
          - EMAIL
          - NONE
      - name: failOnError
        in: query
        description: "An optional query parameter that specifies the maximum number
          of errors allowed before stopping the import request. A negative value is
          interpreted as 0.  A value of 0 indicates that the import request will not
          \ be stopped on error. \n"
        schema:
          type: string
      - name: multiValueDelimiter
        in: query
        description: "An optional query parameter that overrides the multiple-value
          attribute values delimiter. \n"
        schema:
          type: string
      - name: usershouldnotneedtoresetpassword
        in: header
        description: If set to true, the user is not required to change the password
          after login.<br>Only honored if the user's password is provided.
        schema:
          type: string
          default: 'false'
          enum:
          - 'true'
          - 'false'
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              type: object
              properties:
                defaultPassword:
                  type: string
                  description: The default password that is set for the users that
                    are being imported.
                description:
                  type: string
                  description: A description for this import request.
                file:
                  type: string
                  description: The CSV file to upload
                  format: binary
        required: true
      responses:
        '202':
          description: The request was accepted for processing, but the processing
            has not been completed.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CSVImportJob1"
        '400':
          description: The request is invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '413':
          description: The payload is too large.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
  "/v2.0/CSV/jobs":
    get:
      tags:
      - Users Management Version 2.0
      - Groups Management Version 2.0
      summary: Retrieves a list of CSV import requests that belong to the specified
        tenant.
      description: 'The filter query parameter supports the options: "abandoned",
        "cancelled", "completed" and "running".<br><table><tr><td> "abandoned" - the
        filter shows the abandoned requests. </td></tr><tr><td> "cancelled" - the
        filter shows the cancelled requests. </td></tr><tr><td> "completed" - the
        filter shows the completed requests. </td></tr><tr><td> "running"   - the
        filter shows the running requests. </td></tr></table><br>No filter shows all
        the requests.<br><br>The job type query parameter supports the options: "csvimportgroup"
        and "csvimportuser".<br><table><tr><td> "csvimportgroup"      - the filter
        shows the group import requests. </td></tr><tr><td> "csvimportuser"       -
        the filter shows the user import requests. </td></tr><tr><td> "csvdeleteuser"       -
        the filter shows the user delete requests. </td></tr></table><br>No job type
        filter shows all the requests.<br><br>Entitlement required: manageUserGroups
        (Manage users and groups) or manageAllUserGroups (Synchronize users and groups)
        or manageUserStandardGroups (Manage users and standard groups).<br>Note: You
        only need one entitlement, but you can have more than one.'
      operationId: getJobs1
      parameters:
      - name: filter
        in: query
        description: Filter the requests.
        schema:
          type: string
          enum:
          - abandoned
          - cancelled
          - completed
          - running
      - name: jobType
        in: query
        description: An optional query parameter that filters the requests by request
          type.
        schema:
          type: string
          enum:
          - csvimportuser
          - csvimportgroup
          - csvdeleteuser
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CSVImportRecords1"
        '400':
          description: The request is invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
  "/v2.0/CSV/jobs/{id}":
    get:
      tags:
      - Users Management Version 2.0
      - Groups Management Version 2.0
      summary: Retrieves the details of a CSV import request that belong to the specified
        tenant.
      description: 'The details that are returned include the request ID, state, and
        statistics.<br><br>Entitlement required: manageUserGroups (Manage users and
        groups) or manageAllUserGroups (Synchronize users and groups) or manageUserStandardGroups
        (Manage users and standard groups).<br>Note: You only need one entitlement,
        but you can have more than one.'
      operationId: getJob1
      parameters:
      - name: id
        in: path
        description: The identifier of the import request whose details are being
          retrieved.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CSVImportRecord1"
        '400':
          description: The request is invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '404':
          description: The request does not exist.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
    put:
      tags:
      - Users Management Version 2.0
      - Groups Management Version 2.0
      summary: Cancels a CSV import request for the specified tenant.
      description: 'Entitlement required: manageUserGroups (Manage users and groups)
        or manageAllUserGroups (Synchronize users and groups) or manageUserStandardGroups
        (Manage users and standard groups).<br>Note: You only need one entitlement,
        but you can have more than one.'
      operationId: cancelJob1
      parameters:
      - name: id
        in: path
        description: The identifier of the import request to cancel.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CSVImportRecord1"
        '400':
          description: The request is invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '404':
          description: The request does not exist.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
    delete:
      tags:
      - Users Management Version 2.0
      - Groups Management Version 2.0
      summary: Deletes a CSV import request from the specified tenant.
      description: 'A running request cannot be deleted. The request must be canceled
        first.<br><br>Entitlement required: manageUserGroups (Manage users and groups)
        or manageAllUserGroups (Synchronize users and groups) or manageUserStandardGroups
        (Manage users and standard groups).<br>Note: You only need one entitlement,
        but you can have more than one.'
      operationId: deleteJob1
      parameters:
      - name: id
        in: path
        description: The identifier of the import request to delete.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No content found.
          content: {}
        '400':
          description: The request is invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '404':
          description: The request does not exist.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
  "/v2.0/Groups":
    get:
      tags:
      - Groups Management Version 2.0
      summary: Retrieves a list of groups that belong to the specified tenant and
        match the search criteria.
      description: 'Entitlement required: readUserGroups (Read users and groups),
        or manageUserGroups (Manage users and groups), or manageAllUserGroups (Synchronize
        users and groups), or manageUserStandardGroups (Manage users and standard
        groups).<br>Note: You only need one entitlement, but you can have more than
        one.<br><br>The members attribute is not returned in the response.<br><br>Searching,
        sorting, paging, and filtering are supported.<br>'
      operationId: getGroups
      parameters:
      - name: filter
        in: query
        description: The SCIM compliant search filter.  For example, displayName eq
          "admin". The filter should be no longer than 4096 characters in length.
        schema:
          type: string
      - name: attributes
        in: query
        description: The list of attributes that are passed in as comma-separated
          values that are used when passing the result back to the caller. To improve
          performance, specify in the list only the attributes that you want returned.
          If no list is provided, the default action is to return all attributes.
        schema:
          type: string
      - name: count
        in: query
        description: " Specifies the maximum number of query results per page. A negative
          value is interpreted as 0.  A value of 0 indicates that no resource results
          are to be returned, except for totalResults."
        schema:
          type: string
      - name: startIndex
        in: query
        description: A 1-based index that indicates the start index that is used when
          the number of groups is returned. A value less than 1 is interpreted as
          1.
        schema:
          type: string
      - name: sortBy
        in: query
        description: Sort the results by the specified criteria when the groups are
          returned.
        schema:
          type: string
      - name: sortOrder
        in: query
        description: The sorting order when the number of groups is returned.
        schema:
          type: string
          enum:
          - ascending
          - descending
      - name: fullText
        in: query
        description: A string that is searched for in the group records.
        schema:
          type: string
      responses:
        '200':
          description: The operation was successful.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/GetGroupsResponseV2"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '529':
          description: The request timed out.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
    post:
      tags:
      - Groups Management Version 2.0
      summary: 'Creates a group for a specified tenant. '
      description: 'Entitlement required: manageUserGroups (Manage users and groups),
        or manageAllUserGroups (Synchronize users and groups), or manageUserStandardGroups
        (Manage users and standard groups).<br>Note: You only need one entitlement,
        but you can have more than one.<br><br>To create a group, a displayName is
        required. An optional Description attribute can be set to describe the group.  A
        group can be created with or without members. When a group is created with
        members,  a list of members needs to be passed in.<br><br>By default, an email
        is sent to each regular user member added to the group. Federated user members
        do not get an email notification. The email template for branding is at "notifications/user_management/group/{locale}/group_added_email.xml".
        Pass in the themeId query parameter to brand the email template for notifications.
        To turn off email notifications, send the notifications option  "urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification":
        {"notifyType":"NONE"} in the payload.<br><br>Limitations for tenants that
        support large groups:<table>  <tr><td>- A maximum of 256 first-level, nested
        group members is allowed.</td></tr>  <tr><td>- A maximum of 2,500 users members
        is allowed in the input payload.  To add more members, use PATCH.</td></tr></table><br><br>To
        check whether the tenant supports large groups, run the GET /v2.0/SCIM/capabilities
        API.'
      operationId: createGroup
      parameters:
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      requestBody:
        description: The group object that contains the attributes for the group that
          is to be created.
        content:
          application/scim+json:
            schema:
              "$ref": "#/components/schemas/GroupV2"
        required: true
      responses:
        '201':
          description: Created.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/GroupResponseV2"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '409':
          description: The group exists.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/Groups/cardinality":
    get:
      tags:
      - Groups Management Version 2.0
      summary: Retrieves the total number of groups under a tenant in the Cloud Directory.
      description: 'Entitlement required: readUserGroups (Read users and groups),
        or manageUserGroups (Manage users and groups), or manageAllUserGroups (Synchronize
        users and groups), or manageUserStandardGroups (Manage users and standard
        groups).<br>Note: You only need one entitlement, but you can have more than
        one.'
      operationId: getCardinality
      responses:
        '200':
          description: The operation was successful.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/GroupsCardinalityResponse"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
  "/v2.0/Groups/{id}":
    get:
      tags:
      - Groups Management Version 2.0
      summary: Retrieves the details of a group for a specified tenant.
      description: 'Entitlement required: readUserGroups (Read users and groups),
        or manageUserGroups (Manage users and groups), or manageAllUserGroups (Synchronize
        users and groups), or manageUserStandardGroups (Manage users and standard
        groups).<br>Note: You only need one entitlement, but you can have more than
        one.<br><br>On Success, the returned response contains the members and details
        of the group.<br><br>Limitations for tenants that do not support large groups:  <br>When
        specifying the allNestedUsers membershipType, if the number of nested users
        exceeds 10,000 then the LargeGroupResponse (HTTP Status Code 207) is returned.  If
        the total number of nested users cannot be determined, the totalMembers value
        is set to -1.  When specifying a membershipType other than allNestedUsers,
        if the group has more than 10,000 members, then the LargeGroupResponse (HTTP
        Status Code 207) is returned.  When the LargeGroupResponse is returned, the
        memberAttributes, memberCount, and memberStartIndex parameters are ignored.<br><br>Tenants
        that support large groups can page through all the members of a group for
        all membershipType queries.  Each call to the endpoint returns at most 2,500
        members of the group.  If more members of the group exist that were not returned,
        an additional element called "bookmark" is returned in the response payload.  To
        get the next set of members, the caller makes an additional call to the same
        endpoint, and passes the bookmark value as a query parameter named "nextPage".
        For example ?nextPage=XASDGAJDGKAWHGI=. The caller continues to make calls
        to the endpoint until no bookmark element are returned in the response payload,
        which indicates that all group members were returned.  The memberStartIndex
        and memberCount are supported within the 2,500 members returned.<br><br>To
        check whether the tenant supports large groups, run the GET /v2.0/SCIM/capabilities
        API.'
      operationId: getGroup
      parameters:
      - name: id
        in: path
        description: The unique identifier of the group whose details are to be retrieved.
          This identifier is passed in the path of the URL.
        required: true
        schema:
          type: string
      - name: membershipType
        in: query
        description: |-
          Type of members of the group to retrieve:
          "firstLevelUsersAndGroups" (default) returns the users and groups directly contained in the group."allNestedUsers" returns all the users (including nested users) contained in the group."firstLevelUsers" returns the users directly contained in the group."firstLevelGroups" returns the groups directly contained in the group.
        schema:
          type: string
          default: firstLevelUsersAndGroups
          enum:
          - firstLevelUsersAndGroups
          - allNestedUsers
          - firstLevelUsers
          - firstLevelGroups
      - name: memberAttributes
        in: query
        description: The list of attributes that are passed in as comma-separated
          values for returning the members of the groups when passing the result back
          to the caller. To improve performance, specify in the list only the attributes
          that you want returned. If no list is provided, the default action is to
          return all attributes.
        schema:
          type: string
      - name: memberCount
        in: query
        description: The count that indicates the number of members from this group
          that will be returned. A negative value is interpreted as 0.  A value of
          0 indicates that no member results are to be returned, except for totalMembers.
        schema:
          type: string
      - name: memberStartIndex
        in: query
        description: A 1-based index that indicates the start index that is used when
          the members in the group are returned. A value less than 1 is interpreted
          as 1.
        schema:
          type: string
      - name: nextPage
        in: query
        description: The bookmark that indicates the next page of members to be returned.
        schema:
          type: string
      responses:
        '200':
          description: The operation was successful.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/GroupResponseV2"
        '207':
          description: The group has more than 10000 members.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/LargeGroupResponse"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '404':
          description: The group that was requested was not found.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '529':
          description: The request timed out.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
    put:
      tags:
      - Groups Management Version 2.0
      summary: 'Updates the group''s attributes for a specified tenant. '
      description: 'Entitlement required: manageUserGroups (Manage users and groups),
        or manageAllUserGroups (Synchronize users and groups), or manageUserStandardGroups
        (Manage users and standard groups).<br>Note: You only need one entitlement,
        but you can have more than one.<br><br>On Success, the return response contains
        the members and details of the group. The HTTP PUT method is used to replace
        the resource''s attributes.  For example, clients that previously retrieved
        the entire resource and revised it, can replace the resource by using an HTTP
        PUT.<br><br>By default, an email is sent to each regular user member added
        and removed from the group. Federated user members do not get an email notification.
        The email templates for branding are at "notifications/user_management/group/{locale}/user_added_to_group_email.xml"
        and "notifications/user_management/group/{locale}/user_removed_from_group_email.xml".
        Pass in the themeId query parameter to brand the email templates for notifications.
        To turn off email notifications, send the notifications option  "urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification":
        {"notifyType":"NONE"} in the payload.<br><br>Limitations for tenants that
        do not support large groups:<br>  - A group with more than 10,000 members
        cannot be modified. Use PATCH instead.<br><br>Limitations for tenants that
        support large groups:<table>  <tr><td>- A group with over 2,500 group members
        cannot be modified.  Use PATCH instead. </td></tr>  <tr><td>- The "size" of
        the changes to a group cannot exceed 2,500 member modifications.</td></tr>  <tr><td>-
        A maximum of 256 first-level, nested group members are allowed.</td></tr></table><br>To
        check whether the tenant supports large groups, run the GET /v2.0/SCIM/capabilities
        API.'
      operationId: putGroup
      parameters:
      - name: id
        in: path
        description: The unique identifier of the group to be modified. This identifier
          is passed in the path of the URL.
        required: true
        schema:
          type: string
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      requestBody:
        description: The group object that contains attributes for the group that
          is to be modified.
        content:
          application/scim+json:
            schema:
              "$ref": "#/components/schemas/GroupV2"
        required: true
      responses:
        '200':
          description: The operation was successful.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/GroupResponseV2"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '404':
          description: The group that was requested was not found.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '409':
          description: A conflict exists.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Groups Management Version 2.0
      summary: Delete a group from a specified tenant.
      description: 'Entitlement required: manageUserGroups (Manage users and groups),
        or manageAllUserGroups (Synchronize users and groups), or manageUserStandardGroups
        (Manage users and standard groups).<br>Note: You only need one entitlement,
        but you can have more than one.<br><br>An email is sent to each regular user
        member of the group. Federated user members do not get an email notification.
        The email template for branding is at "notifications/user_management/group/{locale}/group_deleted_email.xml".
        Pass in the themeId query parameter to brand the email template for notifications.
        <br><br>To turn off email notifications, send notifyType=NONE as a query parameter.<br><br>A
        group with more than 10,000 members cannot be deleted.<br><br>Reserved groups
        cannot be deleted.'
      operationId: deleteGroup
      parameters:
      - name: id
        in: path
        description: The unique identifier of the group to be deleted. This identifier
          is passed in the path of the URL.
        required: true
        schema:
          type: string
      - name: notifyType
        in: query
        description: An optional query parameter that denotes the notification type.  If
          not present, the EMAIL notification is used. Specify NONE if no notification
          to the user is required.
        schema:
          type: string
          enum:
          - EMAIL
          - NONE
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      responses:
        '204':
          description: Success. No content.
          content: {}
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '404':
          description: The group does not exist.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
    patch:
      tags:
      - Groups Management Version 2.0
      summary: This API is used to modify a group's attributes. It can be used to
        update one or more attributes.
      description: 'Entitlement required: manageUserGroups (Manage users and groups),
        or manageAllUserGroups (Synchronize users and groups), or manageUserStandardGroups
        (Manage users and standard groups). <br>Note: You only need one entitlement,
        but you can have more than one.<br><br>Restrictions per request: Up to 1,000
        patch operations are allowed. The total number of "values" specified cannot
        exceed 1,000.<br><br>Limitations: If the group being patched has over 9,000
        members, the "replace" operation on the "members" attribute is not supported
        and only the "eq" operator is allowed in the selection filter.<br><br>By default,
        an email is sent to each regular user member added and removed from the group.
        Federated user members do not get an email notification. The email templates
        for branding are at "notifications/user_management/group/{locale}/user_added_to_group_email.xml"
        and "notifications/user_management/group/{locale}/user_removed_from_group_email.xml".
        Pass in the themeId query parameter to brand the email templates for notifications.<br><br>The
        following example is a patch request to replace the group''s displayName,
        remove a member, and add new members. Notice also that the example shows how
        you can specify the notifyType if you want to.<br>NotifyType is an optional
        attribute that denotes the notification type.  If not present, the EMAIL notification
        is used.Specify NONE if no notification to affected users is required.<br>
        <table><tr><td>{ "schemas":["urn:ietf:params:scim:api:messages:2.0:PatchOp"],"Operations":  [    {      "op":
        "replace",      "path": "displayName",      "value": "New Group Name"    },    {      "op":
        "remove",      "path": "members[value eq \"50JFP28VS4\"]"    },    {      "op":
        "add",      "path": "members",      "value":        [          {            "type":
        "user",            "value": "50RJ493GRW"          },          {            "type":
        "user",            "value": "50G6E672MU"          }        ]    },    {      "op":
        "add",      "path": "urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification:notifyType",      "value":
        "EMAIL"    }  ]}</td></tr></table>'
      operationId: patchGroup
      parameters:
      - name: id
        in: path
        description: The ID of the group to be patched.
        required: true
        schema:
          type: string
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      requestBody:
        description: The body for the group's patch operation.
        content:
          application/scim+json:
            schema:
              "$ref": "#/components/schemas/PatchBody"
        required: true
      responses:
        '204':
          description: No Content.
          content: {}
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '404':
          description: Not found.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '409':
          description: A conflict exists.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/Me":
    get:
      tags:
      - Users Management Version 2.0
      summary: Retrieves the account details of the authenticated user in Cloud Directory.
      description: 'Entitlement required: anyone (any authenticated user).<br><br>On
        Success, the returned response includes the user and group membership details.
        The group membership that is returned includes the group ID and displayName
        attributes.<br><br>This API requires an authenticated user''s access token
        that is generated from an application client during sign-on. This API does
        not support the use of an API client-generated access token. <br>Send a valid
        user access token in the authorization header, by using the bearer authentication
        scheme.'
      operationId: getUser
      responses:
        '200':
          description: The operation was successful.The operation was successful.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/UserResponseV2"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '404':
          description: Not found.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '529':
          description: The request timed out.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
    put:
      tags:
      - Users Management Version 2.0
      summary: 'Replaces the authenticated user''s attributes in Cloud Directory.  '
      description: 'Entitlement required: anyone (Any authenticated user).<br><br>On
        Success, the returned response includes the user and group membership details.  The
        HTTP PUT method is used to replace the resource''s attributes.  For example,  clients
        that previously retrieved the entire resource and revised it,  can replace
        the resource by using an HTTP PUT.<br>The user''s groups cannot be modified
        and are ignored in the payload. Group membership is managed by using the PUT
        /v2.0/Groups/{id} and PATCH /v2.0/Groups/{id} API.<br><br>By default, an email
        is sent to the user that includes the changed attributes. The email template
        for branding is at "notifications/user_management/profile/{locale}/user_profile_modified_email.xml".
        Pass in the themeId query parameter to brand the email template for notifications.
        To turn off email notifications, send the notifications option  "urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification":
        {"notifyType":"NONE"} in the payload.<br><br>This API requires an authenticated
        user''s access token that is generated from an application client during sign-on.
        This API does not support the use of an API client-generated access token.  <br>Send
        a valid user access token in the authorization header, by using the bearer
        authentication scheme.<br><br>If custom password intelligence warning is enabled
        and a password is provided that is listed in it, the 200 response includes
        the header ''isv-dictionary-policy'' with the value: ''WARNLOCAL''.<br>If
        X-Force password intelligence warning is enabled and a password is provided
        that is listed in it, the 200 response includes the header ''isv-dictionary-policy''
        with the value: ''WARNGLOBAL''.<br>If custom password intelligence prevention
        is enabled and a password is provided that is listed in it, the 400 response
        can include the header ''isv-dictionary-policy'' with the value: ''ENFORCELOCAL''.
        The corresponding error status is ''PWD_IN_DICTIONARY''.<br>If X-Force password
        intelligence prevention is enabled and a password is provided that is listed
        in it, the 400 response can include the header ''isv-dictionary-policy'' with
        the value: ''ENFORCEGLOBAL''. The corresponding error status is ''PWD_IN_GLOBAL_DICTIONARY''.'
      operationId: putUser
      parameters:
      - name: hashed
        in: query
        description: A comma-separated list of attributes whose values are to be hashed.
        schema:
          type: string
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      - name: usershouldnotneedtoresetpassword
        in: header
        description: If set to true for a password change, the user is not required
          to change the password after login.<br>Only honored if the user's password
          is provided.
        schema:
          type: string
          default: 'false'
          enum:
          - 'true'
          - 'false'
      requestBody:
        description: The user object that contains the attributes for the user that
          is to be modified.
        content:
          application/scim+json:
            schema:
              "$ref": "#/components/schemas/UserV2"
        required: true
      responses:
        '200':
          description: The operation was successful.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/UserResponseV2"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '404':
          description: Not found.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '409':
          description: A conflict exists.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Users Management Version 2.0
      summary: Delete the authenticated user's Cloud Directory account.
      description: 'Entitlement required: anyone (Any authenticated user).<br><br>By
        default, an email is sent to the user that the account was deleted. The email
        template for branding is at "notifications/user_management/profile/{locale}/account_deleted_email.xml".
        Pass in the themeId query parameter to brand the email template for notifications.<br>To
        turn off email notifications, send notifyType=NONE as a query parameter.<br><br>This
        API requires an authenticated user''s access token that is generated from
        an application client during sign-on. This API does not support the use of
        an API client-generated access token.  <br>Send a valid user access token
        in the authorization header, by using the bearer authentication scheme.'
      operationId: deleteUser
      parameters:
      - name: notifyType
        in: query
        description: An optional query parameter that denotes the notification type.  If
          not present, the EMAIL notification is used. Specify NONE if no notification
          to the user that their account has been deleted is required.
        schema:
          type: string
          enum:
          - EMAIL
          - NONE
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      responses:
        '204':
          description: No Content.
          content: {}
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '404':
          description: Not found.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
  "/v2.0/Me/effectivePasswordPolicy":
    get:
      tags:
      - Users Management Version 2.0
      summary: Retrieves the authenticated user's effective password policy.
      description: 'Entitlement required: anyone (Any authenticated user).<br><br>This
        API requires an authenticated user''s access token that is generated from
        an application client during sign-on. This API does not support the use of
        an API client-generated access token.'
      operationId: getEffectivePasswordPolicy
      responses:
        '200':
          description: The operation was successful.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/PasswordPolicyResponseV31"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '404':
          description: Not found.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '529':
          description: The request timed out.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
  "/v2.0/Me/labels":
    get:
      tags:
      - Users Management Version 2.0
      summary: Retrieves the authenticated user's translated labels for their effective
        password policy.
      description: 'Entitlement required: anyone (Any authenticated user).<br><br>This
        API requires an authenticated user''s access token that is generated from
        an application client during sign-on. This API does not support the use of
        an API client-generated access token.'
      operationId: getLabels1
      responses:
        '200':
          description: The operation was successful.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/PasswordPolicyLabelsResponse31"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '404':
          description: Not found.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
  "/v2.0/Me/password":
    post:
      tags:
      - Users Management Version 2.0
      summary: Change the authenticated user's password.
      description: 'Entitlement required: anyone (Any authenticated user).<br><br>When
        the password is changed, a notification is optionally sent to the user to
        indicate that a password change was performed. By default, the notification
        is sent by email, but this can be overridden by the notifyType value in the
        Notifications object. See Model under Data Type. The email templates for branding
        are at "notifications/user_management/login/{locale}/user_password_change_show_email.xml"
        and "notifications/user_management/login/{locale}/user_password_change_not_show_email.xml".
        Pass in the themeId query parameter to brand the email template for notifications.
        To turn off email notifications, send the notifications option  "urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification":
        {"notifyType":"NONE"} in the payload.<br><br> Passwords cannot be changed
        for federated users.<br><br>This API requires an authenticated user''s access
        token that is generated from an application client during sign-on. This API
        does not support the use of an API client-generated access token.  <br>Send
        a valid user access token in the authorization header, by using the bearer
        authentication scheme.<br>This API requires an authenticated user''s access
        token that is generated from an application client during sign-on. This API
        does not support the use of an API client-generated access token.  <br>Send
        a valid user access token in the authorization header, by using the bearer
        authentication scheme.<br><br>If custom password intelligence warning is enabled
        and a password is provided that is listed in it, the 204 response includes
        the header ''isv-dictionary-policy'' with the value: ''WARNLOCAL''.<br>If
        X-Force password intelligence warning is enabled and a password is provided
        that is listed in it, the 204 response includes the header ''isv-dictionary-policy''
        with the value: ''WARNGLOBAL''.<br>If custom password intelligence prevention
        is enabled and a password is provided that is listed in it, the 400 response
        can include the header ''isv-dictionary-policy'' with the value: ''ENFORCELOCAL''.
        The corresponding error status is ''PWD_IN_DICTIONARY''.<br>If X-Force password
        intelligence prevention is enabled and a password is provided that is listed
        in it, the 400 response can include the header ''isv-dictionary-policy'' with
        the value: ''ENFORCEGLOBAL''. The corresponding error status is ''PWD_IN_GLOBAL_DICTIONARY''.'
      operationId: changeUserPassword
      parameters:
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      requestBody:
        description: The body for the change password operation.
        content:
          application/scim+json:
            schema:
              "$ref": "#/components/schemas/ChangePasswordV2"
        required: true
      responses:
        '204':
          description: No Content.
          content: {}
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ChangePwdFailureErrorMessage"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '404':
          description: Not found.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/Me/reportees":
    get:
      tags:
      - Users Management Version 2.0
      summary: Retrieves a list of a manager's reportees that belong to a specified
        tenant and match the search filter criteria.
      description: 'Entitlement required: manageMyOrg (Manage my organization)<br><br>This
        API requires an authenticated user''s access token that is generated from
        an application client during sign-on. This API does not support the use of
        an API client-generated access token. <br>Send a valid user access token in
        the authorization header, by using the bearer authentication scheme.<br><br>To
        improve performance, specify the list of the attributes that you want returned
        by using the attributes query parameter.<br><br>Searching, sorting, paging,
        and filtering are supported. A maximum of 2500 records are returned for a
        search query.<br><br>Each call to the endpoint returns at most 2,500 reportees.
        If more reportees exist that were not returned, an additional element called
        "bookmark" is returned in the response payload.  To get the next set of reportees,
        the caller makes an additional call to the same endpoint, and passes the bookmark
        value as a query parameter named "nextPage".  For example ?nextPage=XASDGAJDGKAWHGI=.  The
        caller continues to make calls to the endpoint until no bookmark element are
        returned in the response payload,  which indicates that all reportees were
        returned. To use bookmarks, specify useBookmark=true as a query parameter.<br>'
      operationId: getReportees
      parameters:
      - name: filter
        in: query
        description: The SCIM compliant search filter. For example, userName eq "john".
          The filter should be no longer than 4096 characters in length.
        schema:
          type: string
      - name: attributes
        in: query
        description: The list of attributes that are passed in as comma-separated
          values that are used when passing the result back to the caller. To improve
          performance, specify in the list only the attributes that you want returned.
          If no list is provided, the default action is to return all attributes.
        schema:
          type: string
      - name: count
        in: query
        description: Specifies the maximum number of query results per page. A negative
          value is interpreted as 0.  A value of 0 indicates that no resource results
          are to be returned, except for totalResults.
        schema:
          type: string
      - name: startIndex
        in: query
        description: A 1-based index that indicates the start index that is used when
          the number of users is returned. A value less than 1 is interpreted as 1.
        schema:
          type: string
      - name: sortBy
        in: query
        description: Sort the results by the specified criteria when the users are
          returned.
        schema:
          type: string
      - name: sortOrder
        in: query
        description: The sorting order when the number of users is returned.
        schema:
          type: string
          enum:
          - ascending
          - descending
      - name: useBookmark
        in: query
        description: Return a bookmark in the response if there are more users to
          be returned.
        schema:
          type: string
          enum:
          - 'true'
          - 'false'
      - name: nextPage
        in: query
        description: The bookmark that indicates the next page of users to be returned.
        schema:
          type: string
      responses:
        '200':
          description: The operation was successful.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/GetUsersResponseV2"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '529':
          description: The request timed out.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
  "/v2.0/SCIM/capabilities":
    get:
      tags:
      - Users Management Version 2.0
      - Groups Management Version 2.0
      summary: Retrieves the SCIM capabilities enabled for the tenant.
      description: 'Entitlement required: readUserGroups (Read users and groups) or
        manageUserGroups (Manage users and groups) or manageAllUserGroups (Synchronize
        users and groups) or manageUserStandardGroups (Manage users and standard groups)
        or anyone (Any authenticated user).<br>Note: You only need one entitlement,
        but you can have more than one.<br><br>Large group support features are identified
        in the swagger documentation for the /v2.0/Users and /v2.0/Groups API.<br><br>The
        "largeGroupSupport" flag enabled means that the tenant supports the retrieval
        of the members of groups that have greater than 10,000 members.<br>Additional
        features include the ability to:<table>  <tr><td>- Search for users in a specific
        group by using the "membersOf" SCIM attribute.  For example.  GET /v2.0/Users?filter=userName
        sw "patel" AND memberOf eq "{group ID}"</td></tr>  <tr><td>- Page through
        all the members of a large group by using a bookmark query parameter.  For
        example:  GET /v2.0/Groups?nextPage={bookmark} </td></tr>  <tr><td>- View
        the total number of members for the groups that are returned in the reponse.
        </td></tr>  <tr><td>- Restrict HelpDesk administrators to manage specific
        groups of users by using Admin Roles. </td></tr></table><br>Large group support
        imposes some API limitations.  They are:<br><br><table>  <tr><td>POST /v2.0/Groups</td></tr>  <tr><td>-
        A maximum of 256 first-level, nested group members is allowed</td></tr>  <tr><td>-
        A maximum of 2,500 users members is allowed in the input payload.  To add
        additional members, use PATCH.</td></tr></table><br><table>  <tr><td>PUT /v2.0/Groups/{id}</td></tr>  <tr><td>-
        A group with over 2,500 group members cannot be modified.  Use PATCH instead.
        </td></tr>  <tr><td>- The "size" of the changes to a group cannot exceed 2,500
        member modifications.</td></tr>  <tr><td>- A maximum of 256 first-level, nested
        group members are allowed.</td></tr></table><br><table>  <tr><td>PATCH /v2.0/Groups/{id}</td></tr>  <tr><td>-
        The "size" of the changes to a group cannot exceed 2,500 member modifications.</td></tr>  <tr><td>-
        A maximum of 256 first-level, nested group members are allowed.</td></tr></table>'
      operationId: getCapabilities
      responses:
        '200':
          description: The operation was successful.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/CapabilitiesResponse"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
  "/v2.0/Users":
    get:
      tags:
      - Users Management Version 2.0
      summary: Retrieves a list of users that belong to a specified tenant and match
        the search filter criteria.
      description: 'Entitlement required: readUserGroups (Read users and groups),
        or manageUserGroups (Manage users and groups), or manageAllUserGroups (Synchronize
        users and groups), or manageUserStandardGroups (Manage users and standard
        groups).<br>Note: You only need one entitlement, but you can have more than
        one.<br><br>Searching, sorting, paging, and filtering are supported. A maximum
        of 2500 records are returned for a search query.<br><br>To improve performance,
        specify the list of the attributes that you want returned by using the attributes
        query parameter.<br><br>Search operators supported:<table><tr><td>eq</td><td>The
        attribute and operator values must be identical for a match.</td></tr><tr><td>ne</td><td>The
        attribute and operator values are not identical.</td></tr><tr><td>co</td><td>The
        entire operator value must be a substring of the attribute value for a match.  For
        performance reasons, use sw or ew operators instead of co.</td></tr><tr><td>sw</td><td>The
        entire operator value must be a substring of the attribute value, starting
        at the beginning of the attribute value.</td></tr><tr><td>ew</td><td>The entire
        operator value must be a substring of the attribute value, matching at the
        end of the attribute value.</td></tr><tr><td>pr</td><td>If the attribute has
        a value, there is a match.</td></tr><tr><td>npr</td><td>If the attribute does
        not have a value, there is a match.</td></tr><tr><td>gt</td><td>If the attribute
        value is greater than the operator value, there is a match.  The actual comparison
        is dependent on the attribute type.</td></tr><tr><td>ge</td><td>If the attribute
        value is greater than or equal to the operator value, there is a match.  The
        actual comparison is dependent on the attribute type.</td></tr><tr><td>lt</td><td>If
        the attribute value is less than the operator value, there is a match.  The
        actual comparison is dependent on the attribute type.</td></tr><tr><td>le</td><td>If
        the attribute value is less than or equal to the operator value, there is
        a match.  The actual comparison is dependent on the attribute type.</td></tr></table><br><br>Example
        search queries:<table><tr><td>filter=userName eq "bob"&attributes=userName</td></tr><tr><td>filter=name.familyName
        eq "Marley"&attributes=name</td></tr><tr><td>filter=meta.created ge "2011-09-20T00:00:00Z"
        and meta.created le "2021-09-21T00:00:00Z"&attributes=userName,meta.created,emails&sortBy=userName&count=2500</td></tr><tr><td>filter=urn:ietf:params:scim:schemas:extension:ibm:2.0:User:customAttributes.favoriteColor
        eq "blue"&attributes=userName,urn:ietf:params:scim:schemas:extension:ibm:2.0:User:customAttributes.favoriteColor&count=2500</td></tr><tr><td>filter=urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:department
        eq "2A"&attributes=userName,emails,urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:manager</td></tr><tr><td>filter=emails
        ew "@example.com" and (phoneNumbers eq "15551212" or phoneNumbers eq "1(555)1212")&attributes=userName,phoneNumbers,emails</td></tr><tr><td>Note:
        There are some special syntax for "phoneNumbers" to allow filtering using
        the type, such as GET /v2.0/Users?filter=phoneNumbers.work eq "{value}"&attributes=phoneNumbers.work</td></tr></table><br><br>For
        tenants that support large groups, additional feature are available.  They
        are:<table><tr><td>- Search for users in a specific group by using the "memberOf"
        SCIM attribute.  For example.  GET /v2.0/Users?filter=userName sw "patel"
        and memberOf eq "{group ID}"</td></tr><tr><td>- Restrict HelpDesk administrators
        to manage specific groups of users by using Admin Roles.</td></tr></table><br>To
        check whether the tenant supports large groups, run the GET /v2.0/SCIM/capabilities
        API.'
      operationId: getUsers
      parameters:
      - name: filter
        in: query
        description: The SCIM compliant search filter. For example, userName eq "john".
          The filter should be no longer than 4096 characters in length.
        schema:
          type: string
      - name: attributes
        in: query
        description: The list of attributes that are passed in as comma-separated
          values that are used when passing the result back to the caller. To improve
          performance, specify in the list only the attributes that you want returned.
          If no list is provided, the default action is to return all attributes.
        schema:
          type: string
      - name: count
        in: query
        description: Specifies the maximum number of query results per page. A negative
          value is interpreted as 0.  A value of 0 indicates that no resource results
          are to be returned, except for totalResults.
        schema:
          type: string
      - name: startIndex
        in: query
        description: A 1-based index that indicates the start index that is used when
          the number of users is returned. A value less than 1 is interpreted as 1.
        schema:
          type: string
      - name: sortBy
        in: query
        description: Sort the results by the specified criteria when the users are
          returned.
        schema:
          type: string
      - name: sortOrder
        in: query
        description: The sorting order when the number of users is returned.
        schema:
          type: string
          enum:
          - ascending
          - descending
      - name: hashed
        in: query
        description: The comma-separated list of attributes whose values are to be
          hashed.
        schema:
          type: string
      - name: fullText
        in: query
        description: A string that is searched for in the user records.
        schema:
          type: string
      - name: includeGroups
        in: query
        description: Include group information in the response.
        schema:
          type: string
      responses:
        '200':
          description: The operation was successful.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/GetUsersResponseV2"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '529':
          description: The request timed out.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
    post:
      tags:
      - Users Management Version 2.0
      summary: Creates a user in Cloud Directory.
      description: 'Entitlement required: manageUserGroups (Manage users and groups),
        or manageAllUserGroups (Synchronize users and groups), or manageUserStandardGroups
        (Manage users and standard groups).<br>Note: You only need one entitlement,
        but you can have more than one.<br><br>The users are created for a specific
        tenant that is specified in the request.  Users are either created to use
        Cloud Directory as an identity source or as a just-in-time provisioning sequence
        when the user is authenticated at a remote identity source such as an enterprise
        authentication.<br><br>By default, an email is sent with the password to the
        user that was created, unless its a federated user. Federated users do not
        get an email notification. The email templates for branding are at "notifications/user_management/profile/{locale}/account_created_email.xml"
        and "notifications/user_management/profile/{locale}/account_created_email_with_no_password.xml".
        Pass in the themeId query parameter to brand the email templates for notifications.
        To turn off email notifications, send the notifications option  "urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification":
        {"notifyType":"NONE"} in the payload.<br><br>If custom password intelligence
        warning is enabled and a password is provided that is listed in it, the 201
        response includes the header ''isv-dictionary-policy'' with the value: ''WARNLOCAL''.<br>If
        X-Force password intelligence warning is enabled and a password is provided
        that is listed in it, the 201 response includes the header ''isv-dictionary-policy''
        with the value: ''WARNGLOBAL''.<br>If custom password intelligence prevention
        is enabled and a password is provided that is listed in it, the 400 response
        can include the header ''isv-dictionary-policy'' with the value: ''ENFORCELOCAL''.
        The corresponding error status is ''PWD_IN_DICTIONARY''.<br>If X-Force password
        intelligence prevention is enabled and a password is provided that is listed
        in it, the 400 response can include the header ''isv-dictionary-policy'' with
        the value: ''ENFORCEGLOBAL''. The corresponding error status is ''PWD_IN_GLOBAL_DICTIONARY''.'
      operationId: createUser
      parameters:
      - name: hashed
        in: query
        description: The comma-separated list of attributes whose values are to be
          hashed.
        schema:
          type: string
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      - name: usershouldnotneedtoresetpassword
        in: header
        description: If set to true, the user is not required to change the password
          after login.<br>Only honored when the password element of UserV2 is set.
        schema:
          type: string
          default: 'false'
          enum:
          - 'true'
          - 'false'
      requestBody:
        description: The user object that contains the attributes for the user that
          is to be created.
        content:
          application/scim+json:
            schema:
              "$ref": "#/components/schemas/UserV2"
        required: true
      responses:
        '201':
          description: Created.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/UserResponseV2"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '409':
          description: The user exists.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/Users/authentication":
    post:
      tags:
      - Users Management Version 2.0
      summary: Authenticate a user name and password.
      description: |-
        Entitlement required: manageUserGroups (Manage users and groups), or manageAllUserGroups (Synchronize users and groups), or manageUserStandardGroups (Manage users and standard groups), or authn (Authenticate yourself), or authnAnyUser (Authenticate any user).<br>Note: You only need one entitlement, but you can have more than one.<br><br>
        The email template for branding is at "notifications/user_management/login/{locale}/user_account_locked_email.xml". Pass in the themeId query parameter to brand the email template for notifications.<br><br>* Versions of this API before September 2021 returned a scimType of LOCKED_PWD_FAILURES when a user was locked out because of invalid credentials. The API now returns a scimType of INVALID_CREDS and a notification is sent to the user, stating that the account was locked. Use the urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification element in the POST body to determine the type of notification.<br><br>If custom password intelligence warning is enabled and a password is provided that is listed in it, the 200 response includes the header 'isv-dictionary-policy' with the value: 'WARNLOCAL'.<br>If X-Force password intelligence warning is enabled and a password is provided that is listed in it, the 200 response includes the header 'isv-dictionary-policy' with the value: 'WARNGLOBAL'.<br>If custom password intelligence prevention is enabled and a password is provided that is listed in it, the 400 response can include the header 'isv-dictionary-policy' with the value: 'ENFORCELOCAL'. The corresponding error status is 'PWD_IN_DICTIONARY'.<br>If X-Force password intelligence prevention is enabled and a password is provided that is listed in it, the 400 response can include the header 'isv-dictionary-policy' with the value: 'ENFORCEGLOBAL'. The corresponding error status is 'PWD_IN_GLOBAL_DICTIONARY'.
      operationId: authenticateUser
      parameters:
      - name: method
        in: query
        description: Method to use for authentication.  Valid value is "compare".  If
          not present "bind" is used.
        schema:
          type: string
      - name: returnUserRecord
        in: query
        description: Set the value to true to return the complete user record if the
          user is authenticated.  If not present or present and not true, only the
          user's idattribute is returned if the user is authenticated.
        schema:
          type: string
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      requestBody:
        description: The body for the authentication operation.
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/AuthenticateUserV2"
        required: true
      responses:
        '200':
          description: The operation was successful.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/AuthenticateUserResponseV2"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/AuthenticationExternalErrorMessage"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '409':
          description: A conflict exists.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/Users/cardinality":
    get:
      tags:
      - Users Management Version 2.0
      summary: Retrieves the total number of users under a tenant in the Cloud Directory.
      description: 'Entitlement required: readUserGroups (Read users and groups),
        or manageUserGroups (Manage users and groups), or manageAllUserGroups (Synchronize
        users and groups), or manageUserStandardGroups (Manage users and standard
        groups).<br>Note: You only need one entitlement, but you can have more than
        one.'
      operationId: getCardinality_0
      parameters:
      - name: attributes
        in: query
        description: The list of attributes that are passed in as comma-separated
          values that are used when passing the result back to the caller. The only
          attribute currently supported is totalUsers.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The operation was successful.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/UsersCardinalityResponse"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
  "/v2.0/Users/{id}":
    get:
      tags:
      - Users Management Version 2.0
      summary: Retrieves the details of a user in Cloud Directory for a tenant.
      description: 'Entitlement required: readUserGroups (Read users and groups),
        or manageUserGroups (Manage users and groups), or manageAllUserGroups (Synchronize
        users and groups), or manageUserStandardGroups (Manage users and standard
        groups).<br>Note: You only need one entitlement, but you can have more than
        one.<br><br>To improve performance, specify the list of the attributes that
        you want returned by using the attributes query parameter.<br><br>On Success,
        the returned response includes the user and group membership details. The
        group membership that is returned includes the group ID and displayName attributes.<br><br>The
        memberAttributes, memberCount, and memberStartIndex query parameters are currently
        ignored.'
      operationId: getUser_0
      parameters:
      - name: id
        in: path
        description: The identifier of the user whose details are being retrieved.
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        description: The list of attributes that are passed in as comma-separated
          values that are used when passing the result back to the caller. To improve
          performance, specify in the list only the attributes that you want returned.
          If no list is provided, the default action is to return all attributes.
        schema:
          type: string
      - name: memberAttributes
        in: query
        description: The list of group attributes that are passed in as comma separated
          values that are used when passing the result back to the caller. For example,
          the ID and displayName attributes.
        schema:
          type: string
      - name: memberCount
        in: query
        description: Specifies the maximum number of query results per page. A negative
          value is interpreted as 0.  A value of 0 indicates that no member resource
          results are to be returned, except for totalResults.
        schema:
          type: string
      - name: memberStartIndex
        in: query
        description: The starting index of the search.
        schema:
          type: string
      responses:
        '200':
          description: The operation was successful.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/UserResponseV2"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '404':
          description: Not found.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '529':
          description: The request timed out.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
    put:
      tags:
      - Users Management Version 2.0
      summary: Replaces the user's attributes in Cloud Directory.
      description: 'Entitlement required: manageUserGroups (Manage users and groups),
        or manageAllUserGroups (Synchronize users and groups), or manageUserStandardGroups
        (Manage users and standard groups), or updateAnyUser (Update any user).<br>Note:
        You only need one entitlement, but you can have more than one.<br><br> On
        Success, the return response contains the user and group membership details.
        The HTTP PUT method is used to replace the resource''s attributes.  For example,
        clients that previously retrieved the entire resource and revised it, can
        replace the resource by using an HTTP PUT.<br><br>Only certain attributes
        for federated users can be modified unless you have the manageAllUserGroups
        entitlement.  The user''s groups cannot be modified and are ignored in the
        payload. Group membership is managed by using the PUT /v2.0/Groups/{id} and
        PATCH /v2.0/Groups/{id} API.<br><br>By default, an email is sent to regular
        users that includes the changed attributes. Federated users do not get an
        email notification. The email template for branding is at "notifications/user_management/profile/{locale}/user_profile_modified_email.xml".
        Pass in the themeId query parameter to brand the email template for notifications.
        To turn off email notifications, send the notifications option  "urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification":
        {"notifyType":"NONE"} in the payload.<br><br>If custom password intelligence
        warning is enabled and a password is provided that is listed in it, the 200
        response includes the header ''isv-dictionary-policy'' with the value: ''WARNLOCAL''.<br>If
        X-Force password intelligence warning is enabled and a password is provided
        that is listed in it, the 200 response includes the header ''isv-dictionary-policy''
        with the value: ''WARNGLOBAL''.<br>If custom password intelligence prevention
        is enabled and a password is provided that is listed in it, the 400 response
        can include the header ''isv-dictionary-policy'' with the value: ''ENFORCELOCAL''.
        The corresponding error status is ''PWD_IN_DICTIONARY''.<br>If X-Force password
        intelligence prevention is enabled and a password is provided that is listed
        in it, the 400 response can include the header ''isv-dictionary-policy'' with
        the value: ''ENFORCEGLOBAL''. The corresponding error status is ''PWD_IN_GLOBAL_DICTIONARY''.'
      operationId: putUser_0
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: hashed
        in: query
        description: The comma separated list of attributes whose values are to be
          hashed.
        schema:
          type: string
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      - name: usershouldnotneedtoresetpassword
        in: header
        description: If set to true for a password change, the user is not required
          to change the password after login.<br>Only honored when the password element
          of UserV2 is set.
        schema:
          type: string
          default: 'false'
          enum:
          - 'true'
          - 'false'
      requestBody:
        description: The user object that contains attributes for the user that is
          to be modified.
        content:
          application/scim+json:
            schema:
              "$ref": "#/components/schemas/UserV2"
        required: true
      responses:
        '200':
          description: The operation was successful.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/UserResponseV2"
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '404':
          description: Not found.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '409':
          description: A conflict exists.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Users Management Version 2.0
      summary: Deletes a user from a specified tenant in Cloud Directory.
      description: 'Entitlement required: manageUserGroups (Manage users and groups),
        or manageAllUserGroups (Synchronize users and groups), or manageUserStandardGroups
        (Manage users and standard groups).<br>Note: You only need one entitlement,
        but you can have more than one.<br><br>By default, an email is sent to regular
        users that the account was deleted. Federated users do not get an email notification.
        The email template for branding is at "notifications/user_management/profile/{locale}/account_deleted_email.xml".
        Pass in the themeId query parameter to brand the email template for notifications.<br><br>To
        turn off email notifications, send notifyType=NONE as a query parameter.'
      operationId: deleteUser_0
      parameters:
      - name: id
        in: path
        description: The identifier of the user that is being deleted.
        required: true
        schema:
          type: string
      - name: notifyType
        in: query
        description: An optional query parameter that denotes the notification type.  If
          not present, the EMAIL notification is used. Specify NONE if no notification
          to the user that their account has been deleted is required.
        schema:
          type: string
          enum:
          - EMAIL
          - NONE
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      responses:
        '204':
          description: No Content.
          content: {}
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '404':
          description: Not found.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
    patch:
      tags:
      - Users Management Version 2.0
      summary: Modify a user's attributes in Cloud Directory.  It can be used to update
        one or more attributes.
      description: 'Entitlement required: manageUserGroups (Manage users and groups),
        or manageAllUserGroups (Synchronize users and groups), or manageUserStandardGroups
        (Manage users and standard groups), or updateAnyUser (Update any user). <br>Note:
        You only need one entitlement, but you can have more than one.<br><br>Only
        certain attributes for federated users can be modified unless you have the
        manageAllUserGroups entitlement.  The user''s groups cannot be modified and
        are ignored in the payload. Group membership is managed by using the PUT /v2.0/Groups/{id}
        and PATCH /v2.0/Groups/{id} API.<br><br>By default, an email is sent to regular
        users that includes the changed attributes. Federated users do not get an
        email notification. The email template for branding is at "notifications/user_management/profile/{locale}/user_profile_modified_email.xml".
        Pass in the themeId query parameter to brand the email template for notifications.
        <br><br>The following is an example of a patch request that adds a title,
        replaces the formatted name, and removes any custom attributes which name
        contains "customA" from the user. Notice also that the example shows how you
        can specify the notifyType if you want to.<br>NotifyType is an optional attribute
        that denotes the notification type.  If not present, the EMAIL notification
        is used.Specify NONE if no notification is required.<br><br> `{ "schemas":["urn:ietf:params:scim:api:messages:2.0:PatchOp"],"Operations":  [    {      "op":"add",      "path":"title",      "value":"Vice
        President"    },    {      "op":"replace",      "path":"name.formatted",      "value":"James
        Smith-Miller"    },    {      "op":"remove",      "path":"urn:ietf:params:scim:schemas:extension:ibm:2.0:User:customAttributes[name
        co \"customA\"]"    },    {      "op": "add",      "path": "urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification:notifyType",      "value":
        "EMAIL"    }  ]}` <br><br>If custom password intelligence warning is enabled
        and a password is provided that is listed in it, the 204 response includes
        the header ''isv-dictionary-policy'' with the value: ''WARNLOCAL''.<br>If
        X-Force password intelligence warning is enabled and a password is provided
        that is listed in it, the 204 response includes the header ''isv-dictionary-policy''
        with the value: ''WARNGLOBAL''.<br>If custom password intelligence prevention
        is enabled and a password is provided that is listed in it, the 400 response
        can include the header ''isv-dictionary-policy'' with the value: ''ENFORCELOCAL''.
        The corresponding error status is ''PWD_IN_DICTIONARY''.<br>If X-Force password
        intelligence prevention is enabled and a password is provided that is listed
        in it, the 400 response can include the header ''isv-dictionary-policy'' with
        the value: ''ENFORCEGLOBAL''. The corresponding error status is ''PWD_IN_GLOBAL_DICTIONARY''.'
      operationId: patchUser
      parameters:
      - name: id
        in: path
        description: The ID of the user to be patched.
        required: true
        schema:
          type: string
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      - name: usershouldnotneedtoresetpassword
        in: header
        description: If set to true for a password change, the user is not required
          to change the password after login.
        schema:
          type: string
          default: 'false'
          enum:
          - 'true'
          - 'false'
      requestBody:
        description: The body for the user's patch operation.
        content:
          application/scim+json:
            schema:
              "$ref": "#/components/schemas/PatchBody"
        required: true
      responses:
        '204':
          description: No Content.
          content: {}
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '404':
          description: Not found.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '409':
          description: A conflict exists.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/Users/{id}/compare":
    post:
      tags:
      - Users Management Version 2.0
      summary: Compare a clear text value to a custom hashed attribute value for a
        user.
      description: 'Entitlement required: manageUserGroups (Manage users and groups),
        or manageAllUserGroups (Synchronize users and groups), or manageUserStandardGroups
        (Manage users and standard groups).<br>Note: You only need one entitlement,
        but you can have more than one.<br><br>'
      operationId: compare
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The name of the hashed attribute and the clear text value to
          compare.
        content:
          application/scim+json:
            schema:
              "$ref": "#/components/schemas/CompareModel"
        required: true
      responses:
        '204':
          description: No Content.
          content: {}
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '404':
          description: Not found.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/Users/{id}/passwordResetter":
    patch:
      tags:
      - Users Management Version 2.0
      summary: Reset a user's password.
      description: 'Entitlement required: manageUserGroups (Manage users and groups),
        or manageAllUserGroups (Synchronize users and groups), or manageUserStandardGroups
        (Manage users and standard groups), or updateAnyUser (Update any user), or
        resetPasswordAnyUser (Reset password of any user).<br>Note: You only need
        one entitlement, but you can have more than one.<br><br>When the password
        is reset, a notification is optionally sent to the user to indicate that a
        password reset was performed. The notification also includes the new temporary
        password for the user to log in to the system. When the user logs in, the
        user is prompted to change the password.<br><br>Passwords cannot be reset
        for federated users.<br><br>By default, the notification is sent by email,
        but this delivery selection can be overridden by the notifyType value in the
        notifications object.The email templates for branding are at "notifications/user_management/login/{locale}/user_password_reset_email.xml"
        and "notifications/user_management/login/{locale}/user_password_reset_not_show_email.xml".
        Pass in the themeId query parameter to brand the email templates for notifications.
        To turn off email notifications, send the notifications option "urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification":
        {"notifyType":"NONE"} in the payload.<br><br> The password can be specified
        or auto-generated. For an auto-generated password, a notification is sent
        by email and cannot be overridden by the notifyType attribute. The notifyPassword
        value in the ResetPasswordOperationValue is ignored and the user''s reset
        password is always included in a notification.<br><br>If custom password intelligence
        warning is enabled and a password is provided that is listed in it, the 204
        response includes the header ''isv-dictionary-policy'' with the value: ''WARNLOCAL''.<br>If
        X-Force password intelligence warning is enabled and a password is provided
        that is listed in it, the 204 response includes the header ''isv-dictionary-policy''
        with the value: ''WARNGLOBAL''.<br>If custom password intelligence prevention
        is enabled and a password is provided that is listed in it, the 400 response
        can include the header ''isv-dictionary-policy'' with the value: ''ENFORCELOCAL''.
        The corresponding error status is ''PWD_IN_DICTIONARY''.<br>If X-Force password
        intelligence prevention is enabled and a password is provided that is listed
        in it, the 400 response can include the header ''isv-dictionary-policy'' with
        the value: ''ENFORCEGLOBAL''. The corresponding error status is ''PWD_IN_GLOBAL_DICTIONARY''.'
      operationId: resetUserPassword
      parameters:
      - name: id
        in: path
        description: The identifier of the user.
        required: true
        schema:
          type: string
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      - name: usershouldnotneedtoresetpassword
        in: header
        description: If set to true for a password change, the user is not required
          to change the password after login.<br>Only honored when the operation.value.password
          element in the ResetPasswordPatchBody has a value that is not "auto-generate".
        schema:
          type: string
          default: 'false'
          enum:
          - 'true'
          - 'false'
      requestBody:
        description: The body for the reset password patch operation.
        content:
          application/scim+json:
            schema:
              "$ref": "#/components/schemas/ResetPasswordPatchBody"
        required: true
      responses:
        '204':
          description: No Content.
          content: {}
        '400':
          description: The request was incorrect.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '403':
          description: Forbidden.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '404':
          description: Not found.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
        '500':
          description: An internal server error occurred.
          content:
            application/scim+json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage1"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/privacy/consents":
    post:
      tags:
      - Data Privacy and Consent
      summary: Create or update a consent record.
      description: Use this API to create or update a consent record at runtime.                       <br/><br/><b>Entitlements
        required:</b>                       <ul><li>createPrivacyConsent (Create privacy
        consent records)</li></ul>
      operationId: postConsent
      requestBody:
        description: Consent information
        content:
          application/json:
            schema:
              title: Consent
              required:
              - purposeId
              - state
              type: object
              properties:
                subjectId:
                  maxLength: 256
                  type: string
                  description: The unique identifier of the user. It is the Cloud
                    Directory user ID if isExternalSubject is false.
                purposeId:
                  maxLength: 64
                  type: string
                  description: The unique identifier of the purpose that the consent
                    had been provided for.
                isExternalSubject:
                  type: boolean
                  description: Indicates if the subjectId is a Cloud Directory user.
                isGlobal:
                  type: boolean
                  description: Indicates if the consent applies across all applications.
                attributeId:
                  maxLength: 1024
                  type: string
                  description: The unique identifier of an attribute that the consent
                    had been provided for. (required when data value provided)
                attributeValue:
                  maxLength: 2048
                  type: string
                  description: The value corresponding to the attributeId that the
                    consent had been provided for.
                  example: john.doe@mail.com
                accessTypeId:
                  maxLength: 64
                  type: string
                  description: The unique identifier of the AccessType that the consent
                    had been provided for. It is either for the purpose or the attribute.
                geoIP:
                  maxLength: 256
                  type: string
                  description: The IP address where the consent was provided.
                state:
                  type: integer
                  description: "The type of consent that the user provided: \n* 1
                    - Consent allow,\n* 2 - Consent deny,\n* 3 - Opt in,\n* 4 - Opt
                    out,\n* 5 - Transparency"
                startTime:
                  type: integer
                  description: Consent start time in epoch format. If not supplied
                    a default value is set to the current timestamp
                  example: 1589178082
                endTime:
                  type: integer
                  description: Consent end time in epoch format. If not supplied a
                    default value is set to the startTime + the purpose’s defaultConsentDuration
                    value or null
                  example: 1590178082
                customAttributes:
                  type: array
                  description: ''
                  items:
                    title: Custom Attribute
                    required:
                    - name
                    type: object
                    properties:
                      name:
                        maxLength: 64
                        type: string
                        description: Name of the custom attribute of the consent.
                      value:
                        maxLength: 2048
                        type: string
                        description: Value of the custom attribute of the consent.
        required: true
      responses:
        '400':
          description: Invalid Input Type OR Parse Error OR Missing Parameter  OR
            Integer Value is out of Range
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An internal server error occured.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    patch:
      tags:
      - Data Privacy and Consent
      summary: Bulk create or patch consent records.
      description: Use this API to create new or update existing consent records in
        bulk at runtime.                       op="add" is the only supported operation
        and "value" is a consent record.                       <br/><br/><b>Entitlements
        required:</b>                       <ul><li>createPrivacyConsent (Create privacy
        consent records)</li></ul>
      operationId: patchBulkConsent
      requestBody:
        content:
          application/json:
            schema:
              title: Bulk create payload
              type: array
              items:
                required:
                - op
                - value
                type: object
                properties:
                  op:
                    type: string
                    description: Patch Operation, 'add' and 'replace' are the only
                      allowed values
                  path:
                    type: string
                    description: Path of the resource, allowed values are null, '',
                      OR '/' OR '/:id/endTime
                  value:
                    title: Consent
                    required:
                    - purposeId
                    - state
                    type: object
                    properties:
                      subjectId:
                        maxLength: 256
                        type: string
                        description: The unique identifier of the user. It is the
                          Cloud Directory user ID if isExternalSubject is false.
                      purposeId:
                        maxLength: 64
                        type: string
                        description: The unique identifier of the purpose that the
                          consent had been provided for.
                      isExternalSubject:
                        type: boolean
                        description: Indicates if the subjectId is a Cloud Directory
                          user.
                      isGlobal:
                        type: boolean
                        description: Indicates if the consent applies across all applications.
                      attributeId:
                        maxLength: 1024
                        type: string
                        description: The unique identifier of an attribute that the
                          consent had been provided for. (required when data value
                          provided)
                      attributeValue:
                        maxLength: 2048
                        type: string
                        description: The value corresponding to the attributeId that
                          the consent had been provided for.
                        example: john.doe@mail.com
                      accessTypeId:
                        maxLength: 64
                        type: string
                        description: The unique identifier of the AccessType that
                          the consent had been provided for. It is either for the
                          purpose or the attribute.
                      geoIP:
                        maxLength: 256
                        type: string
                        description: The IP address where the consent was provided.
                      state:
                        type: integer
                        description: "The type of consent that the user provided:
                          \n* 1 - Consent allow,\n* 2 - Consent deny,\n* 3 - Opt in,\n*
                          4 - Opt out,\n* 5 - Transparency"
                      startTime:
                        type: integer
                        description: Consent start time in epoch format. If not supplied
                          a default value is set to the current timestamp
                        example: 1589178082
                      endTime:
                        type: integer
                        description: Consent end time in epoch format. If not supplied
                          a default value is set to the startTime + the purpose’s
                          defaultConsentDuration value or null
                        example: 1590178082
                      customAttributes:
                        type: array
                        description: ''
                        items:
                          title: Custom Attribute
                          required:
                          - name
                          type: object
                          properties:
                            name:
                              maxLength: 64
                              type: string
                              description: Name of the custom attribute of the consent.
                            value:
                              maxLength: 2048
                              type: string
                              description: Value of the custom attribute of the consent.
        required: true
      responses:
        '207':
          description: Response upon one or more failures
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageId:
                    type: string
                  messageDescription:
                    type: string
                  results:
                    type: array
                    items:
                      required:
                      - op
                      - value
                      type: object
                      properties:
                        op:
                          type: string
                          description: Patch Operation, 'add' and 'replace' are the
                            only allowed values
                        path:
                          type: string
                          description: Path of the resource, allowed values are null,
                            '', OR '/' OR '/:id/endTime
                        value:
                          title: Consent
                          required:
                          - purposeId
                          - state
                          type: object
                          properties:
                            subjectId:
                              maxLength: 256
                              type: string
                              description: The unique identifier of the user. It is
                                the Cloud Directory user ID if isExternalSubject is
                                false.
                            purposeId:
                              maxLength: 64
                              type: string
                              description: The unique identifier of the purpose that
                                the consent had been provided for.
                            isExternalSubject:
                              type: boolean
                              description: Indicates if the subjectId is a Cloud Directory
                                user.
                            isGlobal:
                              type: boolean
                              description: Indicates if the consent applies across
                                all applications.
                            attributeId:
                              maxLength: 1024
                              type: string
                              description: The unique identifier of an attribute that
                                the consent had been provided for. (required when
                                data value provided)
                            attributeValue:
                              maxLength: 2048
                              type: string
                              description: The value corresponding to the attributeId
                                that the consent had been provided for.
                              example: john.doe@mail.com
                            accessTypeId:
                              maxLength: 64
                              type: string
                              description: The unique identifier of the AccessType
                                that the consent had been provided for. It is either
                                for the purpose or the attribute.
                            geoIP:
                              maxLength: 256
                              type: string
                              description: The IP address where the consent was provided.
                            state:
                              type: integer
                              description: "The type of consent that the user provided:
                                \n* 1 - Consent allow,\n* 2 - Consent deny,\n* 3 -
                                Opt in,\n* 4 - Opt out,\n* 5 - Transparency"
                            startTime:
                              type: integer
                              description: Consent start time in epoch format. If
                                not supplied a default value is set to the current
                                timestamp
                              example: 1589178082
                            endTime:
                              type: integer
                              description: Consent end time in epoch format. If not
                                supplied a default value is set to the startTime +
                                the purpose’s defaultConsentDuration value or null
                              example: 1590178082
                            customAttributes:
                              type: array
                              description: ''
                              items:
                                title: Custom Attribute
                                required:
                                - name
                                type: object
                                properties:
                                  name:
                                    maxLength: 64
                                    type: string
                                    description: Name of the custom attribute of the
                                      consent.
                                  value:
                                    maxLength: 2048
                                    type: string
                                    description: Value of the custom attribute of
                                      the consent.
                        result:
                          type: string
                          description: "'success' or 'failure'"
                        error:
                          type: string
                          description: error message if the operation failed
        '400':
          description: The request contains invalid value(s). OR Invalid Input Type
            OR Parse Error OR Missing Parameter  OR Integer Value is out of Range
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An internal server error occured.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/privacy/data-subject-presentation":
    post:
      tags:
      - Data Privacy and Consent
      summary: Presents the data subject information to the user.
      description: Use this API to present the data subject information to the user
        at runtime.                      <br/><br/><b>Entitlements required:</b>                       <ul><li>performDSP
        (Retrieve privacy purposes and associated user's consent)</li></ul>
      operationId: postDSP
      requestBody:
        description: Data Subject Presentation request information.
        content:
          application/json:
            schema:
              title: DataSubjectPresentationRequest
              type: object
              properties:
                purposeId:
                  type: array
                  description: An array of purpose IDs. If an application is requesting
                    this array, the purposes need to be associated with that application.
                  items:
                    maxLength: 64
                    type: string
                subjectId:
                  maxLength: 256
                  type: string
                  description: The ID of the user that needs to be verified.
                geoIP:
                  maxLength: 256
                  type: string
                  description: IP address of the request.
                isExternalSubject:
                  type: boolean
                  description: A boolean flag to indicate if the user is an external
                    user or a Cloud Directory User
                  default: false
        required: true
      responses:
        '200':
          description: Data Subject Presentation response information.
          content:
            application/json:
              schema:
                title: DataSubjectPresentationResponse
                type: object
                properties:
                  access_types:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        name:
                          type: string
                    description: Access types associated with this DSP request.
                    example:
                      '1':
                        name: Name of the access type.
                      '2':
                        name: Name of the access type.
                      '3':
                        name: Name of the access type.
                  attributes:
                    type: object
                    additionalProperties:
                      title: Attribute
                      type: object
                      properties:
                        id:
                          maxLength: 32
                          type: string
                          description: Attribute id, not nullable, a reference to
                            the attribute service id
                    description: Attributes associated with this DSP request.
                  purposes:
                    type: object
                    additionalProperties:
                      title: Purpose
                      required:
                      - accessTypes
                      - name
                      type: object
                      properties:
                        id:
                          maxLength: 64
                          type: string
                          description: Purpose identifier. This fields needs to be
                            provided, it accepts a alphanumeric characters and -,_.
                            Purpose starting with id "ibm-" or with id "default" are
                            reserved.
                        name:
                          maxLength: 100
                          type: string
                          description: Name of the purpose.
                        tags:
                          type: array
                          description: Tags to indicate what the purpose is going
                            to be collected
                          items:
                            maxLength: 64
                            type: string
                        version:
                          maximum: 2147483647
                          type: integer
                          description: The version of this purpose.
                        similarToVersion:
                          maximum: 2147483647
                          type: integer
                          description: The earliest version of the purpose for which
                            consents will still be valid for.
                        defaultConsentDuration:
                          maximum: 3650
                          minimum: 1
                          type: integer
                          description: The default validity (in days) of user consents
                            created for this purpose.
                        description:
                          maxLength: 512
                          type: string
                          description: Description of the purpose.
                        state:
                          maximum: 2147483647
                          type: integer
                          description: 'Purpose state: 0=draft, 1=active, 2=canceled,
                            3=expired.'
                        previousConsentApply:
                          type: boolean
                          description: A boolean flag that indicates whether attributes
                            can continue to be accessed under consent to previous
                            version.
                          default: true
                        dataCount:
                          type: integer
                          description: The number of attributes assocaiated with this
                            purpose.
                        accessTypes:
                          type: array
                          description: Access types associated with this purpose.
                          items:
                            title: AccessType
                            type: object
                            properties:
                              id:
                                maxLength: 64
                                type: string
                        lastModifiedTime:
                          type: integer
                          description: The last time this purpose was modified.
                        category:
                          maxLength: 256
                          type: string
                          description: 'The purpose category: "eula" or "default".'
                          default: default
                        customAttributes:
                          type: array
                          description: A list of custom attributes for this purpose.
                          items:
                            title: Custom Attribute
                            type: object
                            properties:
                              name:
                                maxLength: 64
                                type: string
                                description: Name of the custom attribute.
                              value:
                                maxLength: 2048
                                type: string
                                description: Value of the custom attribute.
                        termsOfUse:
                          type: object
                          properties:
                            ref:
                              maxLength: 2000
                              type: string
                              description: The URI reference of the terms of use document.
                            external:
                              type: boolean
                              description: Flag that indicates whether termsOfUse
                                is externally hosted.
                          description: The terms of use documentation associated with
                            this purpose.
                        attributes:
                          type: array
                          items:
                            title: Attribute
                            type: object
                            properties:
                              id:
                                maxLength: 1024
                                type: string
                                description: Attribute ID, this field is required.
                              accessTypes:
                                type: array
                                description: A reference to the access type, this
                                  field is required.
                                items:
                                  title: AccessType
                                  type: object
                                  properties:
                                    id:
                                      maxLength: 64
                                      type: string
                              mandatory:
                                type: boolean
                                description: Indication if an attribute is mandatory
                                  for a specific purpose.
                                default: true
                              retentionPeriod:
                                maximum: 3650
                                minimum: 1
                                type: integer
                                description: A limit (in days) on the validity of
                                  user consent for this purpose. Is used to set the
                                  default end_date of a user's consent (if not supplied).
                                  Nullable, positive
                        legal_category:
                          type: integer
                          description: "The most restrictive consent type for this
                            purpose. The possible values are: \n* 1 - Do not show,\n*
                            2 - Transparency ,\n* 3 - Opt in/out,\n* 4 - Consent.:
                            \n* 1 - Do not show,\n* 2 - Transparency ,\n* 3 - Opt
                            in/out,\n* 4 - Consent"
                    description: Purposes associated with this DSP request.
                  consents:
                    type: object
                    additionalProperties:
                      title: Consent
                      type: object
                      properties:
                        version:
                          type: integer
                          description: The version of the consent (Any update to the
                            consent will increment the version).
                        subjectId:
                          maxLength: 256
                          type: string
                          description: The unique identifier of the user. It is the
                            Cloud Directory user ID if isExternalSubject is false.
                        purposeId:
                          maxLength: 64
                          type: string
                          description: The unique identifier of the purpose that the
                            consent had been provided for.
                        purposeVersion:
                          type: integer
                          description: The version of the purpose that the consent
                            had been provided for.
                        isExternalSubject:
                          type: boolean
                          description: Indicates if the subjectId is a Cloud Directory
                            user.
                        isGlobal:
                          type: boolean
                          description: Indicates if the consent applies across all
                            applications.
                        attributeId:
                          maxLength: 1024
                          type: string
                          description: The unique identifier of an attribute that
                            the consent had been provided for.
                        attributeValue:
                          maxLength: 2048
                          type: string
                          description: The value corresponding to the attributeId
                            that the consent had been provided for.
                          example: john.doe@mail.com
                        accessTypeId:
                          maxLength: 64
                          type: string
                          description: The unique identifier of the AccessType that
                            the consent had been provided for. It is either for the
                            purpose or the attribute.
                        geoIP:
                          maxLength: 256
                          type: string
                          description: The IP address where the consent was provided.
                        state:
                          type: integer
                          description: "The type of consent that the user provided:
                            \n* 1 - Consent allow,\n* 2 - Consent deny,\n* 3 - Opt
                            in,\n* 4 - Opt out,\n* 5 - Transparency"
                        createdTime:
                          type: integer
                          description: The epoch timestamp when the consent was created.
                          example: 1589178082
                        lastModifiedTime:
                          type: integer
                          description: The epoch timestamp when the consent was last
                            modified.
                        startTime:
                          type: integer
                          description: The epoch timestamp when the consent validity
                            starts.
                          example: 1589178082
                        endTime:
                          type: integer
                          description: The epoch timestamp when the consent validity
                            ends.
                          example: 1590178082
                        customAttributes:
                          type: array
                          description: ''
                          items:
                            title: Custom Attribute
                            type: object
                            properties:
                              name:
                                maxLength: 64
                                type: string
                                description: Name of the custom attribute of the consent.
                              value:
                                maxLength: 2048
                                type: string
                                description: Value of the custom attribute of the
                                  consent.
                        applicationId:
                          maxLength: 64
                          type: string
                          description: The unique identifier of the application that
                            the consent had been provided for.
                        status:
                          type: integer
                    description: "Relevant consents. \nWhen consenter is provided
                      and the consenter didn't consent to the relevant purposes, empty
                      object will be returned. \n When consenter is not provided,
                      this object won't be returned."
        '400':
          description: The request contains invalid value(s).
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An internal server error occured.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/privacy/data-usage-approval":
    post:
      tags:
      - Data Privacy and Consent
      summary: Provides the data usage approval.
      description: Use this API to provide the data usage approval (rule, purpose
        and attribute level) at runtime.                     <br/><br/><b>Entitlements
        required:</b>                      <ul><li>performDUA (Check for data usage
        approval)</li></ul>
      requestBody:
        description: Access approval information.
        content:
          application/json:
            schema:
              title: ApprovalRequest
              type: object
              properties:
                items:
                  title: items
                  type: array
                  items:
                    type: object
                    properties:
                      purposeId:
                        maxLength: 256
                        type: string
                        description: Purpose ID
                      profileId:
                        maxLength: 256
                        type: string
                        description: Privacy Profile ID
                      accessTypeId:
                        maxLength: 256
                        type: string
                        description: AccessType ID
                      attributeId:
                        maxLength: 256
                        type: string
                        description: This field is required for attribute level approval
                      attributeValue:
                        maxLength: 256
                        type: string
                        description: This field is required for attribute level approval
                          for a specific value of attribute.
                subjectId:
                  maxLength: 256
                  type: string
                  description: Subject ID
                isExternalSubject:
                  type: boolean
                  description: Flag to indicate whether the subject is a Cloud Directory
                    user or an external user.
                  default: false
                geoIP:
                  maxLength: 256
                  type: string
                  description: Reference to IP address of the client, if not given
                    the HTTP headers are used to determine the IP address. If there
                    are active privacy rules that have geography conditions, this
                    API should be called from a backend component and sending the
                    appropriate IP address for evaluation.
                trace:
                  type: boolean
                  description: Reference to indicate if details of rules information
                    and consent information needs to be present in the response, false
                    by default.
                  default: false
        required: true
      responses:
        '207':
          description: Multi-status response for data usage approval.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DUAResultArray"
        '400':
          description: Missing Parameter  OR Invalid Input Type
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An internal server error occured.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/config/v1.0/privacy/consents":
    get:
      tags:
      - Data Privacy and Consent Management
      summary: Retrieve a list of consent records.
      description: Use this API to retrieve a list of consent records.                      <br/><br/><b>Entitlements
        required(One of the following):</b>                       <ul><li>readSelfPrivacyConsent
        (Read your own privacy consents)</li>                       <ul><li>manageSelfPrivacyConsent
        (Manage your own privacy consents)</li>                       <ul><li>readPrivacyConsent
        (Read privacy consents)</li>                       <li>managePrivacyConsent
        (Manage privacy consents)</li></ul>
      operationId: getConsents
      parameters:
      - name: sort
        in: query
        description: 'Specify how the results are to be sorted. </br></br>The results
          are sorted by lastModifiedTime if the sort query parameter is not specified.</br></br>Each
          attribute must be prefixed with either + for ascending or - for descending.</br></br>Use
          a comma (,) to separate multiple attributes. </br></br>Supported values
          are: createdTime, lastModifiedTime, startTime and endTime. </br></br>**Note**:
          If you are not using the Swagger UI, the sort parameter value must be HTML-encoded.
          Use the prefix "sort=" in the query parameter. </br></br>**Example**: Sort
          on -lastModified,+endTime.</br>sort=-lastModifiedTime%2C%2BendTime'
        schema:
          maxLength: 32
          type: string
      - name: pagination
        in: query
        description: "Controls the results that are returned in a page. <br/><br/>
          \    A maximum of 50 results are returned if no pagination query parameters
          are specified. <br/> <br/>     Specify the following parameters: <br/> <br/>
          \    **count** - Defines the total number of results that will be returned.
          The maximum value is 1000. <br/> <br/>    **page** - Identifies the requested
          page, or the offset.  <br/> <br/>     **limit** - Defines the total number
          of results that are returned per page. The maximum value is 1000. <br/>
          <br/>      **Note**: If you are not using the Swagger UI, the pagination
          parameter value must be HTML-encoded. Use the prefix \"pagination=\" in
          the query parameter. <br/>     **Example**: Paginate on count=10&page=1&limit=5
          \n     <br/>**pagination**=count%3D10%26page%3D1%26limit%3D5"
        schema:
          type: string
      - name: search
        in: query
        description: 'Specify the search criteria for the results.   <br/> <br/> Suppported
          values are: subjectId, purposeId, applicationId, attributeId, accessTypeId,
          geoIP and state.<br></br>Supported operators are: =. Use double quotation
          marks while searching for string values. <br/><br/>**Note**: If you are
          not using the Swagger UI, the search parameter value must be HTML-encoded.
          Use the prefix "search=" in the query parameter. <br/><br/>**Example**:
          Search on state=1&accessTypeId="read"</br>search=state%3D1%26accessTypeId%3D%22read%22'
        schema:
          type: string
      responses:
        '200':
          description: The operation was successful.
          content:
            application/json:
              schema:
                title: Response
                type: object
                properties:
                  consents:
                    type: array
                    items:
                      title: Consent
                      type: object
                      properties:
                        id:
                          type: string
                          description: The unique identifier of the consent.
                        version:
                          type: integer
                          description: The version of the consent (Any update to the
                            consent will increment the version).
                        subjectId:
                          type: string
                          description: The unique identifier of the user. It is the
                            Cloud Directory user ID if isExternalSubject is false.
                        purposeId:
                          type: string
                          description: The unique identifier of the purpose that the
                            consent had been provided for.
                        purposeVersion:
                          type: integer
                          description: The version of the purpose that the consent
                            had been provided for.
                        isExternalSubject:
                          type: boolean
                          description: Indicates if the subjectId is a Cloud Directory
                            user.
                        isGlobal:
                          type: boolean
                          description: Indicates if the consent applies across all
                            applications.
                        attributeId:
                          type: string
                          description: The unique identifier of an attribute that
                            the consent had been provided for.
                        attributeValue:
                          type: string
                          description: The value corresponding to the attributeId
                            that the consent had been provided for.
                          example: john.doe@mail.com
                        accessTypeId:
                          type: string
                          description: The unique identifier of the AccessType that
                            the consent had been provided for. It is either for the
                            purpose or the attribute.
                        geoIP:
                          type: string
                          description: The IP address where the consent was provided.
                        state:
                          type: integer
                          description: "The type of consent that the user provided:
                            \n* 1 - Consent allow,\n* 2 - Consent deny,\n* 3 - Opt
                            in,\n* 4 - Opt out,\n* 5 - Transparency"
                        createdTime:
                          type: integer
                          description: The epoch timestamp when the consent was created.
                          example: 1589178082
                        lastModifiedTime:
                          type: integer
                          description: The epoch timestamp when the consent was last
                            modified.
                        startTime:
                          type: integer
                          description: The epoch timestamp when the consent validity
                            starts.
                          example: 1589178082
                        endTime:
                          type: integer
                          description: The epoch timestamp when the consent validity
                            ends.
                          example: 1590178082
                        customAttributes:
                          type: array
                          description: ''
                          items:
                            title: Custom Attribute
                            type: object
                            properties:
                              name:
                                type: string
                                description: Name of the custom attribute of the consent.
                              value:
                                type: string
                                description: Value of the custom attribute of the
                                  consent.
                        applicationId:
                          type: string
                          description: The unique identifier of the application that
                            the consent had been provided for.
                        applicationName:
                          type: string
                          description: The name of the application corresponding to
                            the applicationId.
                        purposeName:
                          type: string
                          description: The name of the purpose corresponding to the
                            purposeId.
                        accessTypeName:
                          type: string
                          description: The name of the AccessType.
                        attributeName:
                          type: string
                          description: The name of the attribute corresponding to
                            the attributeId.
                  page:
                    type: integer
                    description: Page number, as specified in the request.
                  limit:
                    type: integer
                    description: Page size, as specified in the request.
                  count:
                    type: integer
                    description: The total number of records to be returned, as specified
                      in the request. The maximum value is 1000.
                  total:
                    type: integer
                    description: The total number of matching records found.
        '400':
          description: The request contains invalid value(s).
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Insufficient privileges to perform the request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An internal server error occured.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    patch:
      tags:
      - Data Privacy and Consent Management
      summary: Bulk delete consent records.
      description: Use this API to delete a list of consent records. A maximum of
        10 consents can be specified for deletion.                      <br/><br/><b>Entitlements
        required:</b>                       <ul><li>manageSelfPrivacyConsent (Manage
        your own privacy consents)</li>                       <ul><li>managePrivacyConsent
        (Manage privacy consents)</li></ul>
      operationId: patchConsent
      requestBody:
        content:
          application/json:
            schema:
              title: Bulk management payload
              type: array
              items:
                required:
                - op
                - path
                type: object
                properties:
                  op:
                    type: string
                    description: Patch operation. "remove" is the only allowed value.
                  path:
                    type: string
                    description: Path of the resource. Allowed values are '/{consentId}'.
        required: true
      responses:
        '204':
          description: The operation(s) were successful (No Content).
          content: {}
        '207':
          description: The patch operation partially succeeded.
          content:
            application/json:
              schema:
                required:
                - messageDescription
                - messageId
                - results
                type: object
                properties:
                  messageId:
                    type: string
                    description: The message key identifier
                    example: CSIBTXXXXE
                  messageDescription:
                    type: string
                    description: A requestor locale specific descriptive message
                    example: String message
                  results:
                    type: array
                    items:
                      required:
                      - op
                      - path
                      - result
                      type: object
                      properties:
                        op:
                          type: string
                          description: Patch operation in the request.
                        path:
                          type: string
                          description: Path of the resource in the request.
                        result:
                          type: string
                          description: "'success' or 'failure'."
                        error:
                          type: string
                          description: Error message if the operation failed.
        '400':
          description: The request contains invalid value(s).
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Insufficient privileges to perform the request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An internal server error occured.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/config/v1.0/privacy/consents/{id}":
    get:
      tags:
      - Data Privacy and Consent Management
      summary: Retrieve a specific consent record.
      description: Use this API to retrieve a consent record specified by id.                      <br/><br/><b>Entitlements
        required(One of the following):</b>                       <ul><li>readSelfPrivacyConsent
        (Read your own privacy consents)</li>                       <ul><li>manageSelfPrivacyConsent
        (Manage your own privacy consents)</li>                       <ul><li>readPrivacyConsent
        (Read privacy consents)</li>                       <li>managePrivacyConsent
        (Manage privacy consents)</li></ul>
      operationId: getConsent
      parameters:
      - name: id
        in: path
        description: The unique ID of a consent.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The operation was successful.
          content:
            application/json:
              schema:
                title: Consent
                type: object
                properties:
                  id:
                    type: string
                    description: The unique identifier of the consent.
                  version:
                    type: integer
                    description: The version of the consent (Any update to the consent
                      will increment the version).
                  subjectId:
                    type: string
                    description: The unique identifier of the user. It is the Cloud
                      Directory user ID if isExternalSubject is false.
                  purposeId:
                    type: string
                    description: The unique identifier of the purpose that the consent
                      had been provided for.
                  purposeVersion:
                    type: integer
                    description: The version of the purpose that the consent had been
                      provided for.
                  isExternalSubject:
                    type: boolean
                    description: Indicates if the subjectId is a Cloud Directory user.
                  isGlobal:
                    type: boolean
                    description: Indicates if the consent applies across all applications.
                  attributeId:
                    type: string
                    description: The unique identifier of an attribute that the consent
                      had been provided for.
                  attributeValue:
                    type: string
                    description: The value corresponding to the attributeId that the
                      consent had been provided for.
                    example: john.doe@mail.com
                  accessTypeId:
                    type: string
                    description: The unique identifier of the AccessType that the
                      consent had been provided for. It is either for the purpose
                      or the attribute.
                  geoIP:
                    type: string
                    description: The IP address where the consent was provided.
                  state:
                    type: integer
                    description: "The type of consent that the user provided: \n*
                      1 - Consent allow,\n* 2 - Consent deny,\n* 3 - Opt in,\n* 4
                      - Opt out,\n* 5 - Transparency"
                  createdTime:
                    type: integer
                    description: The epoch timestamp when the consent was created.
                    example: 1589178082
                  lastModifiedTime:
                    type: integer
                    description: The epoch timestamp when the consent was last modified.
                  startTime:
                    type: integer
                    description: The epoch timestamp when the consent validity starts.
                    example: 1589178082
                  endTime:
                    type: integer
                    description: The epoch timestamp when the consent validity ends.
                    example: 1590178082
                  customAttributes:
                    type: array
                    description: ''
                    items:
                      title: Custom Attribute
                      type: object
                      properties:
                        name:
                          type: string
                          description: Name of the custom attribute of the consent.
                        value:
                          type: string
                          description: Value of the custom attribute of the consent.
                  applicationId:
                    type: string
                    description: The unique identifier of the application that the
                      consent had been provided for.
                  applicationName:
                    type: string
                    description: The name of the application corresponding to the
                      applicationId.
                  purposeName:
                    type: string
                    description: The name of the purpose corresponding to the purposeId.
                  accessTypeName:
                    type: string
                    description: The name of the AccessType.
                  attributeName:
                    type: string
                    description: The name of the attribute corresponding to the attributeId.
        '403':
          description: Insufficient privileges to perform the request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The requested resource does not exist.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An internal server error occured.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    delete:
      tags:
      - Data Privacy and Consent Management
      summary: Delete a specific consent record from a tenant.
      description: Use this API to delete a consent record specified by ID.                      <br/><br/><b>Entitlements
        required:</b>                       <ul><li>manageSelfPrivacyConsent (Manage
        your own privacy consents)</li>                       <ul><li>managePrivacyConsent
        (Manage privacy consents)</li></ul>
      operationId: deleteConsent
      parameters:
      - name: id
        in: path
        description: The unique ID of a consent.
        required: true
        schema:
          type: string
      responses:
        '403':
          description: Insufficient privileges to perform the request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An internal server error occured.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/config/v1.0/pwdvault":
    get:
      tags:
      - Password Vault Configuration
      summary: Retrieve the password vault configuration.
      description: Retrieve the password vault configuration.<br><br><b>Entitlements:</b><br>
        - managePwdvaultConfig (Manage password vault configuration)<br> - readPwdvaultConfig
        (Read password vault configuration)
      operationId: getPwdvaultConfiguration
      responses:
        '200':
          description: The specific configuration.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PwdvaultConfiguration"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Password Vault Configuration
      summary: Update the password vault configuration.
      description: Update the password vault configuration.<br><br><b>Entitlements:</b><br>
        - managePwdvaultConfig (Manage password vault configuration)
      operationId: updatePwdvaultConfiguration
      requestBody:
        description: The updated configuration.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PwdvaultConfiguration"
        required: true
      responses:
        '204':
          description: The configuration was updated.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/config/v2.0/factors/emailotp":
    get:
      tags:
      - Email One-time Password Configuration 2.0
      summary: Retrieve the email one-time password configuration.
      description: Retrieve the email one-time password configuration.<br><br><b>Entitlements:</b><br>
        - manageMFAMethods (Manage second-factor authentication method configuration)<br>
        - readMFAMethods (Read second-factor authentication method configuration)
      operationId: getEmailotpConfiguration_2.0
      responses:
        '200':
          description: The specific configuration.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EmailotpConfiguration_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Email One-time Password Configuration 2.0
      summary: Update the email one-time password configuration.
      description: Update the email one-time password configuration.<br><br><b>Entitlements:</b><br>
        - manageMFAMethods (Manage second-factor authentication method configuration)
      operationId: updateEmailotpConfiguration_2.0
      requestBody:
        description: The updated configuration.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/EmailotpConfiguration_2.0"
        required: true
      responses:
        '204':
          description: The configuration was updated.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/config/v2.0/factors/fido2/metadata":
    get:
      tags:
      - FIDO Configuration
      summary: Retrieve the list of metadata entries.
      description: Retrieve the list of metadata entries.<br><br><b>Entitlements:</b><br>  -
        manageMFAMethods (Manage second-factor authentication method configuration)<br>
        - readMFAMethods (Read second-factor authentication method configuration)
      operationId: list_3
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>You
          can use the following query parameters:<br><br><b>page</b> - Use to identify
          the requested page, or the offset.<br><br><b>limit</b> - Use to define the
          total number of results that are returned per page. The maximum allowed
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: The pagination parameter
          value must be HTML encoded. Use the prefix "pagination=" in the query parameter.<br><br><b>Example</b>:
          Paginate on page=1&limit=5<br>pagination=page%3D1%26limit%3D5'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for Strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for Booleans are = and !=<br>Valid operators
          for Numbers are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>: The search
          parameter value must be HTML encoded. Use the prefix "search=" in the query
          parameter.<br><br><b>Example</b>: Search on id contains "fd45"&enabled=true<br>search=id%20contains%20%22fd45%22%26enabled%3Dtrue'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values to be inclusive or exclusive only. It cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          The filter parameter value must be HTML encoded. Use the prefix "filter="
          in the query parameter.<br><br><b>Examples</b><br>Filter to return only
          id : filter=id<br>Filter to exclude id and enabled : filter=%21id,enabled'
        schema:
          type: string
      responses:
        '200':
          description: The list of metadata entries.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FidoAllMetadata_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - FIDO Configuration
      summary: Create a metadata entry.
      description: Create a metadata entry.<br><br><b>Entitlements:</b><br>  - manageMFAMethods
        (Manage second-factor authentication method configuration)
      operationId: create_3
      requestBody:
        description: A JSON payload that specifies the metadata entry data
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateFidoMetadata_2.0"
        required: true
      responses:
        '201':
          description: The metadata entry was created.
          headers:
            Location:
              description: The URL of the newly created metadata entry.
              schema:
                type: string
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FidoMetadata_2.0"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/config/v2.0/factors/fido2/metadata/mds":
    get:
      tags:
      - FIDO MDS Configuration
      summary: Retrieve the list of metadata service entries.
      description: Retrieve the list of metadata service entries.<br><br><b>Entitlements:</b><br>  -
        manageMFAMethods (Manage second-factor authentication method configuration)<br>
        - readMFAMethods (Read second-factor authentication method configuration)
      operationId: list_2
      responses:
        '200':
          description: The list of metadata service entries.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FidoAllMetadataServices_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - FIDO MDS Configuration
      summary: Create a metadata service entry.
      description: Create a metadata service entry.<br><br><b>Entitlements:</b><br>  -
        manageMFAMethods (Manage second-factor authentication method configuration)
      operationId: create_2
      requestBody:
        description: A JSON payload containing the metadata service configuration.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateFidoMetadataService_2.0"
        required: true
      responses:
        '201':
          description: The metadata service entry was created.
          headers:
            Location:
              description: The URL pointing to the newly created metadata service
                entry.
              schema:
                type: string
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FidoMetadataService_2.0"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/config/v2.0/factors/fido2/metadata/mds/{id}":
    get:
      tags:
      - FIDO MDS Configuration
      summary: Retrieve a metadata service entry.
      description: Retrieve a metadata service entry.<br><br><b>Entitlements:</b><br>  -
        manageMFAMethods (Manage second-factor authentication method configuration)<br>
        - readMFAMethods (Read second-factor authentication method configuration)
      operationId: get_5
      parameters:
      - name: id
        in: path
        description: The unique identifier of the metadata service configuration.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific metadata service entry.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FidoMetadataService_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - FIDO MDS Configuration
      summary: Update a metadata service entry.
      description: Update a metadata service entry.<br><br><b>Entitlements:</b><br>  -
        manageMFAMethods (Manage second-factor authentication method configuration)
      operationId: update_2
      parameters:
      - name: id
        in: path
        description: The unique identifier of the metadata entry.
        required: true
        schema:
          type: string
      requestBody:
        description: A JSON payload that specifies the updated metadata service configuration
          data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/FidoMetadataService_2.0"
        required: true
      responses:
        '204':
          description: The metadata service entry was updated.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - FIDO MDS Configuration
      summary: Delete a metadata service entry.
      description: Delete a metadata service entry.<br><br><b>Entitlements:</b><br>  -
        manageMFAMethods (Manage second-factor authentication method configuration)
      operationId: delete_3
      parameters:
      - name: id
        in: path
        description: The unique identifier of the metadata service entry.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The metadata service entry was deleted.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/config/v2.0/factors/fido2/metadata/{id}":
    get:
      tags:
      - FIDO Configuration
      summary: Retrieve a metadata entry.
      description: Retrieve a metadata entry.<br><br><b>Entitlements:</b><br>  - manageMFAMethods
        (Manage second-factor authentication method configuration)<br> - readMFAMethods
        (Read second-factor authentication method configuration)
      operationId: get_6
      parameters:
      - name: id
        in: path
        description: The unique identifier of the metadata entry
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific metadata entry.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FidoMetadata_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - FIDO Configuration
      summary: Update a metadata entry.
      description: Update a metadata entry.<br><br><b>Entitlements:</b><br>  - manageMFAMethods
        (Manage second-factor authentication method configuration)
      operationId: update_3
      parameters:
      - name: id
        in: path
        description: The unique identifier of the metadata entry
        required: true
        schema:
          type: string
      requestBody:
        description: A JSON payload that specifies the updated metadata entry data
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/FidoMetadata_2.0"
        required: true
      responses:
        '204':
          description: The metadata entry was updated.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - FIDO Configuration
      summary: Delete a metadata entry.
      description: Delete a metadata entry.<br><br><b>Entitlements:</b><br>  - manageMFAMethods
        (Manage second-factor authentication method configuration)
      operationId: delete_4
      parameters:
      - name: id
        in: path
        description: The unique identifier of the metadata entry
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The metadata entry was deleted.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/config/v2.0/factors/fido2/relyingparties":
    get:
      tags:
      - FIDO Configuration
      summary: Retrieve the list of relying party configurations.
      description: Returns the list of relying party configurations.<br><br><b>Entitlements:</b><br>  -
        manageMFAMethods (Manage second-factor authentication method configuration)<br>
        - readMFAMethods (Read second-factor authentication method configuration)
      operationId: list_4
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>You
          can use the following query parameters:<br><br><b>page</b> - Use to identify
          the requested page, or the offset.<br><br><b>limit</b> - Use to define the
          total number of results that are returned per page. The maximum allowed
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: The pagination parameter
          value must be HTML encoded. Use the prefix "pagination=" in the query parameter.<br><br><b>Example</b>:
          Paginate on page=1&limit=5<br>pagination=page%3D1%26limit%3D5'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for Strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for Booleans are = and !=<br>Valid operators
          for Numbers are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>: The search
          parameter value must be HTML encoded. Use the prefix "search=" in the query
          parameter.<br><br><b>Example</b>: Search on id contains "fd45"&enabled=true<br>search=id%20contains%20%22fd45%22%26enabled%3Dtrue'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values to be inclusive or exclusive only. It cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          The filter parameter value must be HTML encoded. Use the prefix "filter="
          in the query parameter.<br><br><b>Examples</b><br>Filter to return only
          id : filter=id<br>Filter to exclude id and enabled : filter=%21id,enabled'
        schema:
          type: string
      responses:
        '200':
          description: The list of relying party configurations.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FidoRelyingParties_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - FIDO Configuration
      summary: Create a relying party configuration.
      description: Create a relying party configuration. Default values will be provided
        for any optional arguments that are excluded.<br><br><b>Entitlements:</b><br>  -
        manageMFAMethods (Manage second-factor authentication method configuration)
      operationId: create_4
      requestBody:
        description: A JSON payload that specifies the relying party configuration
          data
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateFidoRelyingPartyConfig_2.0"
        required: true
      responses:
        '201':
          description: The relying party configuration was created successfully.
          headers:
            Location:
              description: The URL of the new relying party configuration.
              schema:
                type: string
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FidoRelyingPartyConfig_2.0"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request could not be processed due to a conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/config/v2.0/factors/fido2/relyingparties/{id}":
    get:
      tags:
      - FIDO Configuration
      summary: Retrieve a relying party configuration.
      description: Retrieve a relying party configuration.<br><br><b>Entitlements:</b><br>  -
        manageMFAMethods (Manage second-factor authentication method configuration)<br>
        - readMFAMethods (Read second-factor authentication method configuration)
      operationId: get_7
      parameters:
      - name: id
        in: path
        description: The unique identifier of the relying party configuration
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific relying party configuration.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FidoRelyingPartyConfig_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - FIDO Configuration
      summary: Update a relying party configuration.
      description: Update a relying party configuration.<br><br><b>Entitlements:</b><br>  -
        manageMFAMethods (Manage second-factor authentication method configuration)
      operationId: update_4
      parameters:
      - name: id
        in: path
        description: The unique identifier of the relying party configuration
        required: true
        schema:
          type: string
      requestBody:
        description: A JSON payload that specifies the updated relying party configuration
          data
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/FidoRelyingPartyConfig_2.0"
        required: true
      responses:
        '204':
          description: The relying party configuration was updated.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - FIDO Configuration
      summary: Delete a relying party configuration.
      description: Delete a relying party configuration. <br><br><b>Entitlements:</b><br>  -
        manageMFAMethods (Manage second-factor authentication method configuration)
      operationId: delete_5
      parameters:
      - name: id
        in: path
        description: The unique identifier of the relying party configuration
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The relying party configuration was deleted successfully.
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/config/v2.0/factors/otp":
    get:
      tags:
      - One-time Password Configuration 2.0
      summary: Retrieve the one-time password configuration.
      description: Retrieve the one-time password configuration.<br><br><b>Entitlements:</b><br>
        - manageMFAMethods (Manage second-factor authentication method configuration)<br>
        - readMFAMethods (Read second-factor authentication method configuration)
      operationId: getOtpConfiguration_2.0
      responses:
        '200':
          description: The specific configuration.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OtpConfiguration_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - One-time Password Configuration 2.0
      summary: Update the one-time password configuration.
      description: Update the one-time password configuration.<br><br><b>Entitlements:</b><br>
        - manageMFAMethods (Manage second-factor authentication method configuration)
      operationId: updateOtpConfiguration_2.0
      requestBody:
        description: The updated configuration.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/OtpConfiguration_2.0"
        required: true
      responses:
        '204':
          description: The configuration was updated.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/config/v2.0/factors/qr":
    get:
      tags:
      - QR Code Login Configuration
      summary: Retrieve the QR code login configuration.
      description: Retrieve the QR code login configuration.<br><br><b>Entitlements:</b><br>
        - manageMFAMethods (Manage second-factor authentication method configuration)<br>
        - readMFAMethods (Read second-factor authentication method configuration)
      operationId: getQrConfiguration_2.0
      responses:
        '200':
          description: The specific configuration.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/QrConfiguration_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - QR Code Login Configuration
      summary: Update the QR code login configuration.
      description: Update the QR code login configuration.<br><br><b>Entitlements:</b><br>
        - manageMFAMethods (Manage second-factor authentication method configuration)
      operationId: updateQrConfiguration_2.0
      requestBody:
        description: The updated configuration.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/QrConfiguration_2.0"
        required: true
      responses:
        '204':
          description: The configuration was updated.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/config/v2.0/factors/questions":
    get:
      tags:
      - Knowledge Questions Configuration
      summary: Retrieve the list of knowledge questions configuration profiles.
      description: Retrieve the list of knowledge questions configuration profiles.<br/><br/><b>NB:</b>
        Ensure that the required attributes are installed on the tenant to enable
        this feature at the endpoint.<br/><br/><b>Entitlements:</b><br/> - manageMFAMethods
        (Manage second-factor authentication method configuration)<br/> - readMFAMethods
        (Read second-factor authentication method configuration)<br/>
      operationId: getKqConfigurations_2.0
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>You
          can use the following query parameters:<br><br><b>page</b> - Use to identify
          the requested page, or the offset.<br><br><b>limit</b> - Use to define the
          total number of results that are returned per page. The maximum allowed
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: The pagination parameter
          value must be HTML encoded. Use the prefix "pagination=" in the query parameter.<br><br><b>Example</b>:
          Paginate on page=1&limit=5<br>pagination=page%3D1%26limit%3D5'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for Strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for Booleans are = and !=<br>Valid operators
          for Numbers are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>: The search
          parameter value must be HTML encoded. Use the prefix "search=" in the query
          parameter.<br><br><b>Example</b>: Search on id contains "fd45"&enabled=true<br>search=id%20contains%20%22fd45%22%26enabled%3Dtrue'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values to be inclusive or exclusive only. It cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          The filter parameter value must be HTML encoded. Use the prefix "filter="
          in the query parameter.<br><br><b>Examples</b><br>Filter to return only
          id : filter=id<br>Filter to exclude id and enabled : filter=%21id,enabled'
        schema:
          type: string
      responses:
        '200':
          description: The list of knowledge questions configuration profiles.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/QuestionsConfigurations_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/config/v2.0/factors/questions/{id}":
    get:
      tags:
      - Knowledge Questions Configuration
      summary: Retrieve a knowledge questions configuration profile.
      description: Retrieve a knowledge questions configuration profile.<br/><br/>The
        configuration profile includes the lists of questions with locale-specific
        translations. There is no limit to the number of questions that can be supplied.
        <br/><br/><b>NB:</b> Ensure that the required attributes are installed on
        the tenant to enable this feature at the endpoint.<br/><br/><b>Entitlements:</b><br/>
        - manageMFAMethods (Manage second-factor authentication method configuration)<br/>
        - readMFAMethods (Read second-factor authentication method configuration)<br/>
      operationId: getKqConfiguration_2.0
      parameters:
      - name: id
        in: path
        description: The unique identifier for the knowledge questions configuration
          profile
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific configuration profile.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/KnowledgeQuestionsConfiguration_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Knowledge Questions Configuration
      summary: Update a knowledge questions configuration profile.
      description: 'Update a knowledge questions configuration profile.<br/><br/>If
        the number of questions submitted is less than the minimum required for enrollments,
        then the update will not be accepted.<br/><br/>Locale-specific questions texts
        must use a valid locale code, following this standard: <br/>XX or XX_YY, where
        XX is a valid ''ISO 639-1'' language code and YY is a valid ''ISO 3166-1 alpha-2''
        country code.<br/><br/><b>NB:</b> Ensure that the required attributes are
        installed on the tenant to enable this feature at the endpoint.<br/><br/><b>Entitlements:</b><br/>
        - manageMFAMethods (Manage second-factor authentication method configuration)<br/>'
      operationId: updateKqConfiguration_2.0
      parameters:
      - name: id
        in: path
        description: The unique identifier for the knowledge questions configuration
          profile
        required: true
        schema:
          type: string
      requestBody:
        description: A JSON payload that specifies the configuration profile data
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/KnowledgeQuestionsConfiguration_2.0"
        required: true
      responses:
        '204':
          description: The configuration profile was updated.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/config/v2.0/factors/smsotp":
    get:
      tags:
      - SMS One-time Password Configuration 2.0
      summary: Retrieve the SMS one-time password configuration.
      description: Retrieve the SMS one-time password configuration.<br><br><b>Entitlements:</b><br>
        - manageMFAMethods (Manage second-factor authentication method configuration)<br>
        - readMFAMethods (Read second-factor authentication method configuration)
      operationId: getSmsotpConfiguration_2.0
      responses:
        '200':
          description: The specific configuration.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SmsotpConfiguration_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - SMS One-time Password Configuration 2.0
      summary: Update the SMS one-time password configuration.
      description: Update the SMS one-time password configuration.<br><br><b>Entitlements:</b><br>
        - manageMFAMethods (Manage second-factor authentication method configuration)
      operationId: updateSmsotpConfiguration_2.0
      requestBody:
        description: The updated configuration.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SmsotpConfiguration_2.0"
        required: true
      responses:
        '204':
          description: The configuration was updated.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/config/v2.0/factors/totp":
    get:
      tags:
      - Time-based One-time Password Configuration 2.0
      summary: Retrieve the time-based one-time password configuration.
      description: Retrieve the time-based one-time password configuration.<br><br><b>Entitlements:</b><br>
        - manageMFAMethods (Manage second-factor authentication method configuration)<br>
        - readMFAMethods (Read second-factor authentication method configuration)
      operationId: getTotpConfiguration_2.0
      responses:
        '200':
          description: The specific configuration.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TotpConfiguration_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Time-based One-time Password Configuration 2.0
      summary: Update the time-based one-time password configuration.
      description: Update the time-based one-time password configuration.<br><br><b>Entitlements:</b><br>
        - manageMFAMethods (Manage second-factor authentication method configuration)
      operationId: updateTotpConfiguration_2.0
      requestBody:
        description: The updated configuration.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TotpConfiguration_2.0"
        required: true
      responses:
        '204':
          description: The configuration was updated.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/config/v2.0/factors/voiceotp":
    get:
      tags:
      - Voice One-time Password Configuration
      summary: Retrieve the voice one-time password configuration.
      description: Retrieve the voice one-time password configuration.<br><br><b>Entitlements:</b><br>
        - manageMFAMethods (Manage second-factor authentication method configuration)<br>
        - readMFAMethods (Read second-factor authentication method configuration)
      operationId: getVoiceotpConfiguration_2.0
      responses:
        '200':
          description: The specific configuration.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VoiceotpConfiguration_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Voice One-time Password Configuration
      summary: Update the voice one-time password configuration.
      description: Update the voice one-time password configuration.<br><br><b>Entitlements:</b><br>
        - manageMFAMethods (Manage second-factor authentication method configuration)
      operationId: updateVoiceotpConfiguration_2.0
      requestBody:
        description: The updated configuration.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VoiceotpConfiguration_2.0"
        required: true
      responses:
        '204':
          description: The configuration was updated.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/config/v1.0/mfaproviders":
    get:
      tags:
      - External MFA Providers
      summary: Retrieve the list of external MFA provider configurations.
      description: Retrieve the list of external MFA provider configurations.<br><br><b>Entitlements:</b><br>
        - manageMFAMethods (Manage second-factor authentication method configuration)<br>
        - readMFAMethods (Read second-factor authentication method configuration)
      operationId: listMfaProviderConfiguration
      responses:
        '200':
          description: The list of configurations.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MfaProviderConfigurations"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - External MFA Providers
      summary: Create an external MFA provider configuration.
      description: Create an external MFA provider configuration.<br><br><b>Entitlements:</b><br>
        - manageMFAMethods (Manage second-factor authentication method configuration)
      operationId: createMfaProviderConfiguration
      requestBody:
        description: A JSON payload that specifies the configuration data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateMfaProviderConfiguration"
        required: true
      responses:
        '201':
          description: The configuration was created.
          headers:
            Location:
              description: The URL of the newly created configuration.
              schema:
                type: string
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MfaProviderConfiguration"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request could not be processed due to a conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/config/v1.0/mfaproviders/{id}":
    get:
      tags:
      - External MFA Providers
      summary: Retrieve an external MFA provider configuration.
      description: Retrieve an external MFA provider configuration.<br><br><b>Entitlements:</b><br>
        - manageMFAMethods (Manage second-factor authentication method configuration)<br>
        - readMFAMethods (Read second-factor authentication method configuration)
      operationId: getMfaProviderConfiguration
      parameters:
      - name: id
        in: path
        description: The specific configuration identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific configuration.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MfaProviderConfiguration"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - External MFA Providers
      summary: Update an external MFA provider configuration.
      description: Update an external MFA provider configuration.<br><br><b>Entitlements:</b><br>
        - manageMFAMethods (Manage second-factor authentication method configuration)
      operationId: updateMfaProviderConfiguration
      parameters:
      - name: id
        in: path
        description: The specific configuration identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: The updated configuration.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MfaProviderConfiguration"
        required: true
      responses:
        '204':
          description: The configuration was updated.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request could not be processed due to a conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - External MFA Providers
      summary: Delete an external MFA provider configuration.
      description: Delete an external MFA provider configuration.<br><br><b>Entitlements:</b><br>
        - manageMFAMethods (Manage second-factor authentication method configuration)
      operationId: deleteMfaProviderConfiguration
      parameters:
      - name: id
        in: path
        description: The specific configuration identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The configuration was removed.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/config/v1.0/recaptcha":
    get:
      tags:
      - reCAPTCHA
      summary: Retrieve the list of reCAPTCHA configurations
      description: Retrieve the list of reCAPTCHA configurations.<br><br><b>Entitlements:</b><br>
        - manageRecaptcha (Manage reCAPTCHA configuration)<br> - readRecaptcha (Read
        reCAPTCHA configuration)
      operationId: listRecaptchaConfiguration
      responses:
        '200':
          description: The list of configurations.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RecaptchaConfigurations"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - reCAPTCHA
      summary: Create a reCAPTCHA configuration
      description: Create a reCAPTCHA configuration.<br><br><b>Entitlements:</b><br>
        - manageRecaptcha (Manage reCAPTCHA configuration)
      operationId: createRecaptchaConfiguration
      requestBody:
        description: A JSON payload that specifies the configuration data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateRecaptchaConfiguration"
        required: true
      responses:
        '201':
          description: The configuration was created.
          headers:
            Location:
              description: The URL of the newly created configuration.
              schema:
                type: string
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RecaptchaConfiguration"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request could not be processed due to a conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/config/v1.0/recaptcha/{id}":
    get:
      tags:
      - reCAPTCHA
      summary: Retrieve a reCAPTCHA configuration
      description: Retrieve a reCAPTCHA configuration.<br><br><b>Entitlements:</b><br>
        - manageRecaptcha (Manage reCAPTCHA configuration)<br> - readRecaptcha (Read
        reCAPTCHA configuration)
      operationId: getRecaptchaConfiguration
      parameters:
      - name: id
        in: path
        description: The specific configuration identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific configuration.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RecaptchaConfiguration"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - reCAPTCHA
      summary: Update a reCAPTCHA configuration
      description: Update a reCAPTCHA configuration.<br><br><b>Entitlements:</b><br>
        - manageRecaptcha (Manage reCAPTCHA configuration)
      operationId: updateRecaptchaConfiguration
      parameters:
      - name: id
        in: path
        description: The specific configuration identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: The updated configuration.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RecaptchaConfiguration"
        required: true
      responses:
        '204':
          description: The configuration was updated.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request could not be processed due to a conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - reCAPTCHA
      summary: Delete a reCAPTCHA configuration
      description: 'Delete a reCAPTCHA configuration.<br><br><b>NB</b>: A reCAPTCHA
        configuration may only be deleted if it holds no references.<br><br><b>Entitlements:</b><br>
        - manageRecaptcha (Manage reCAPTCHA configuration)'
      operationId: deleteRecaptchaConfiguration
      parameters:
      - name: id
        in: path
        description: The specific configuration identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The configuration was removed.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/mfaproviders":
    get:
      tags:
      - External MFA Providers
      summary: Retrieve the list of external MFA providers.
      description: Retrieve the list of external MFA providers.<br><br><b>Entitlements:</b><br>
        - authnAnyUser (Authenticate any user)
      operationId: listMfaProviders
      responses:
        '200':
          description: The list of providers.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MfaProviderDefinitions"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/mfaproviders/{id}/{userId}":
    get:
      tags:
      - External MFA Providers
      summary: Retrieve the list of enrollments for an external MFA provider.
      description: Retrieve the list of user enrollments for an external MFA provider.<br><br><b>Entitlements:</b><br>
        - authnAnyUser (Authenticate any user)
      operationId: listMfaProviderEnrollments
      parameters:
      - name: id
        in: path
        description: The specific MFA provider identifier.
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The specific user identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The list of enrollments.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MfaProvidersEntities"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - External MFA Providers
      summary: Action an authentication attempt via an external MFA provider.
      description: Action an authentication attempt via an external MFA provider.<br><br><b>Entitlements:</b><br>
        - authnAnyUser (Authenticate any user)
      operationId: actionMfaProvider
      parameters:
      - name: id
        in: path
        description: The specific MFA provider identifier.
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The specific user identifier.
        required: true
        schema:
          type: string
      - name: returnJwt
        in: query
        description: If included and set to 'true', a JWT will be included in the
          verification response.
        schema:
          type: boolean
      requestBody:
        description: A JSON payload that specifies the authentication data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MfaProvidersObject"
        required: true
      responses:
        '200':
          description: The authentication request was actioned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MfaProvidersResult"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request could not be processed due to a conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - External MFA Providers
      summary: Clears all cached enrollments of specific user for an external MFA
        provider
      description: " Clears all cached enrollments of specific user for an external
        MFA provider<br><br><b>Entitlements:</b><br> - authnAnyUser (Authenticate
        any user)"
      operationId: clearMfaProviderEnrollments
      parameters:
      - name: id
        in: path
        description: The specific MFA provider identifier.
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The specific user identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The enrollment cache was cleared.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/mfaproviders/{id}/{userId}/{trxnId}":
    get:
      tags:
      - External MFA Providers
      summary: Retrieve the status of an authentication attempt.
      description: Retrieve the status of an authentication attempt.<br><br><b>Entitlements:</b><br>
        - authnAnyUser (Authenticate any user)
      operationId: resultMfaProvider
      parameters:
      - name: id
        in: path
        description: The specific MFA provider identifier.
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The specific user identifier.
        required: true
        schema:
          type: string
      - name: trxnId
        in: path
        description: The specific transaction identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The authentication attempt status.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MfaProvidersResult"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - External MFA Providers
      summary: Continue an authentication attempt via an external MFA provider.
      description: Continue an authentication attempt via an external MFA provider.<br><br><b>Entitlements:</b><br>
        - authnAnyUser (Authenticate any user)
      operationId: actionIdMfaProvider
      parameters:
      - name: id
        in: path
        description: The specific MFA provider identifier.
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The specific user identifier.
        required: true
        schema:
          type: string
      - name: trxnId
        in: path
        description: The specific transaction identifier.
        required: true
        schema:
          type: string
      - name: returnJwt
        in: query
        description: If included and set to 'true', a JWT will be included in the
          verification response.
        schema:
          type: boolean
      requestBody:
        description: A JSON payload that specifies the authentication data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MfaProvidersObject"
        required: true
      responses:
        '200':
          description: The authentication request was actioned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MfaProvidersResult"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request could not be processed due to a conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/mfaproviders/{userId}":
    get:
      tags:
      - External MFA Providers
      summary: Retrieve the list of enrollments for all external MFA providers.
      description: Retrieve the list of user enrollments for all external MFA providers.<br><br><b>Entitlements:</b><br>
        - authnAnyUser (Authenticate any user)
      operationId: listMfaProvidersEnrollments
      parameters:
      - name: userId
        in: path
        description: The specific user identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The list of enrollments.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MfaProvidersEntities"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/pwdvault/{userId}":
    get:
      tags:
      - Password Vault
      summary: Retrieve a password vault enrollment.
      description: Retrieve a password vault enrollment.<br><br><b>Entitlements:</b><br>
        - managePwdvaultAnyUser (Manage the password vault for all users)<br> - managePwdvault
        (Manage own password vault)<br> - readPwdvaultAnyUser (Read password vault
        for all users)<br> - readPwdvault (Read own password vault)
      operationId: getPwdvaultEnrollment_1.0
      parameters:
      - name: userId
        in: path
        description: The specific user identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific enrollment.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PwdvaultEnrollment"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Password Vault
      summary: Update a password vault enrollment.
      description: Update a password vault enrollment.<br><br><b>Entitlements:</b><br>
        - managePwdvaultAnyUser (Manage the password vault for all users)<br> - managePwdvault
        (Manage own password vault)
      operationId: updatePwdvaultEnrollment_1.0
      parameters:
      - name: userId
        in: path
        description: The specific user identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: The updated enrollment.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PwdvaultEnrollment"
        required: true
      responses:
        '204':
          description: The enrollment was updated.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request could not be processed due to a conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Password Vault
      summary: Delete a password vault enrollment.
      description: Delete a password vault enrollment.<br><br><b>Entitlements:</b><br>
        - managePwdvaultAnyUser (Manage the password vault for all users)<br> - managePwdvault
        (Manage own password vault)
      operationId: deletePwdvaultEnrollment
      parameters:
      - name: userId
        in: path
        description: The specific user identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The enrollment was removed.
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/pwdvault/{userId}/resources/{resourceName}":
    get:
      tags:
      - Password Vault
      summary: Retrieve a password vault resource.
      description: Retrieve a password vault resource.<br><br><b>Entitlements:</b><br>
        - managePwdvaultAnyUser (Manage the password vault for all users)<br> - managePwdvault
        (Manage own password vault)<br> - readPwdvaultAnyUser (Read password vault
        for all users)<br> - readPwdvault (Read own password vault)
      operationId: getPwdvaultResource_1.0
      parameters:
      - name: userId
        in: path
        description: The specific user identifier.
        required: true
        schema:
          type: string
      - name: resourceName
        in: path
        description: The specific resource name.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific resource.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PwdvaultEnrollmentResourceData"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Password Vault
      summary: Update a password vault resource.
      description: Update a password vault resource.<br><br><b>Entitlements:</b><br>
        - managePwdvaultAnyUser (Manage the password vault for all users)<br> - managePwdvault
        (Manage own password vault)
      operationId: updatePwdvaultResource_1.0
      parameters:
      - name: userId
        in: path
        description: The specific user identifier.
        required: true
        schema:
          type: string
      - name: resourceName
        in: path
        description: The specific resource name.
        required: true
        schema:
          type: string
      requestBody:
        description: The resource data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PwdvaultEnrollmentResourceData"
        required: true
      responses:
        '204':
          description: The supplied password vault resource was updated.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Password Vault
      summary: Delete a password vault resource.
      description: Delete a password vault resource.<br><b>Entitlements:</b><br> -
        managePwdvaultAnyUser (Manage the password vault for all users)<br> - managePwdvault
        (Manage own password vault)
      operationId: deletePwdvaultResource
      parameters:
      - name: userId
        in: path
        description: The specific user identifier.
        required: true
        schema:
          type: string
      - name: resourceName
        in: path
        description: The specific resource name.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The resource was deleted.
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/verify/.well-known/apple-app-site-association":
    put:
      tags:
      - Well-Known Uniform Resource Identifiers
      summary: Update the apple app site association file for iOS verifiable links.
      description: Set the apple app site association file for iOS for the service.
      operationId: setAppSiteAssociationFile
      requestBody:
        description: The app site association data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VerifiableLinksAppSiteAssociation"
        required: true
      responses:
        '204':
          description: The app site association file was updated successfully.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/verify/.well-known/assetlinks.json":
    put:
      tags:
      - Well-Known Uniform Resource Identifiers
      summary: Update digital asset link file for Android verifiable links.
      description: Set the digital asset link file for Android for the service.
      operationId: setDigitalAssetLinkFile
      requestBody:
        description: The digital asset link data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VerifiableLinksDigitalAssetLinks"
        required: true
      responses:
        '204':
          description: The digital asset link file was updated successfully.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/verify/.well-known/history/apple-app-site-association":
    get:
      tags:
      - Well-Known Uniform Resource Identifiers
      summary: Fetch the service's history of the apple-app-site-association file
        for iOS.
      description: Get the apple app site association file history for iOS for the
        service.
      operationId: getAppSiteAssociationFileHistory
      parameters:
      - name: count
        in: query
        description: The number of items to retrieve from history
        required: true
        schema:
          type: integer
          format: int32
          default: 5
      - name: order
        in: query
        description: The sorting method to use for the results. 'asc' or 'desc'
        required: true
        schema:
          type: string
          default: asc
      responses:
        '200':
          description: The apple app site association file history was returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/VerifiableLinksEntryData"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/verify/.well-known/history/assetlinks.json":
    get:
      tags:
      - Well-Known Uniform Resource Identifiers
      summary: Fetch the service's history of the assetlinks.json file for Android.
      description: Get the digital asset links file history for Android for the service.
      operationId: getDigitalAssetLinkFileHistory
      parameters:
      - name: count
        in: query
        description: The number of items to retrieve from history
        required: true
        schema:
          type: integer
          format: int32
          default: 5
      - name: order
        in: query
        description: The sorting method to use for the results. 'asc' or 'desc'
        schema:
          type: string
      responses:
        '200':
          description: The digital asset link file history was returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/VerifiableLinksEntryData"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/factors":
    get:
      tags:
      - Authentication Factors 2.0
      summary: Retrieve the list of authentication factor enrollments.
      description: Retrieve the list of authentication factor enrollments.<br/><br/><b>Entitlements:</b><br/>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br/> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)<br/> - readEnrollMFAMethodAnyUser (Read second-factor authentication
        enrollment for all users)<br/> - readEnrollMFAMethod (Read own second-factor
        authentication enrollment)
      operationId: listFactorEnrollments_2.0
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>You
          can use the following query parameters:<br><br><b>page</b> - Use to identify
          the requested page, or the offset.<br><br><b>limit</b> - Use to define the
          total number of results that are returned per page. The maximum allowed
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: The pagination parameter
          value must be HTML encoded. Use the prefix "pagination=" in the query parameter.<br><br><b>Example</b>:
          Paginate on page=1&limit=5<br>pagination=page%3D1%26limit%3D5'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for Strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for Booleans are = and !=<br>Valid operators
          for Numbers are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>: The search
          parameter value must be HTML encoded. Use the prefix "search=" in the query
          parameter.<br><br><b>Example</b>: Search on id contains "fd45"&enabled=true<br>search=id%20contains%20%22fd45%22%26enabled%3Dtrue'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values to be inclusive or exclusive only. It cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          The filter parameter value must be HTML encoded. Use the prefix "filter="
          in the query parameter.<br><br><b>Examples</b><br>Filter to return only
          id : filter=id<br>Filter to exclude id and enabled : filter=%21id,enabled'
        schema:
          type: string
      responses:
        '200':
          description: The list of authentication factor enrollments.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AllEnrollments_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/factors/discover":
    get:
      tags:
      - Authentication Factors 2.0
      summary: Discover the availability of all authentication factors.
      description: Discover the availability of all authentication factors.<br/><br/><b>Entitlements:</b><br/>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br/> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)<br/> - readEnrollMFAMethodAnyUser (Read second-factor authentication
        enrollment for all users)<br/> - readEnrollMFAMethod (Read own second-factor
        authentication enrollment)<br/> - authnAnyUser (Authenticate any user)<br/>
        - authn (Authenticate self)
      operationId: listFactorDiscoverables_2.0
      responses:
        '200':
          description: The availability of all authentication factors.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DiscoverableFactors_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/factors/discover/{type}":
    get:
      tags:
      - Authentication Factors 2.0
      summary: Discover the availability of an authentication factor.
      description: Discover the availability of an authentication factor.<br/><br/><b>Entitlements:</b><br/>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br/> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)<br/> - readEnrollMFAMethodAnyUser (Read second-factor authentication
        enrollment for all users)<br/> - readEnrollMFAMethod (Read own second-factor
        authentication enrollment)<br/> - authnAnyUser (Authenticate any user)<br/>
        - authn (Authenticate self)
      operationId: getFactorDiscoverable_2.0
      parameters:
      - name: type
        in: path
        description: The authentication factor type to be discovered
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The availability of the authentication factor.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Discoverable_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/factors/emailotp":
    get:
      tags:
      - Email One-time Password 2.0
      summary: Retrieve the list of email one-time password enrollments.
      description: Retrieve the list of email one-time password enrollments.<br><br><b>Entitlements:</b><br>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)<br> - readEnrollMFAMethodAnyUser (Read second-factor authentication
        enrollment for all users)<br> - readEnrollMFAMethod (Read own second-factor
        authentication enrollment)
      operationId: listEmailotpEnrollments_2.0
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>You
          can use the following query parameters:<br><br><b>page</b> - Use to identify
          the requested page, or the offset.<br><br><b>limit</b> - Use to define the
          total number of results that are returned per page. The maximum allowed
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: The pagination parameter
          value must be HTML encoded. Use the prefix "pagination=" in the query parameter.<br><br><b>Example</b>:
          Paginate on page=1&limit=5<br>pagination=page%3D1%26limit%3D5'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for Strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for Booleans are = and !=<br>Valid operators
          for Numbers are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>: The search
          parameter value must be HTML encoded. Use the prefix "search=" in the query
          parameter.<br><br><b>Example</b>: Search on id contains "fd45"&enabled=true<br>search=id%20contains%20%22fd45%22%26enabled%3Dtrue'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values to be inclusive or exclusive only. It cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          The filter parameter value must be HTML encoded. Use the prefix "filter="
          in the query parameter.<br><br><b>Examples</b><br>Filter to return only
          id : filter=id<br>Filter to exclude id and enabled : filter=%21id,enabled'
        schema:
          type: string
      responses:
        '200':
          description: The list of email one-time password enrollments.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EmailotpEnrollments_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Email One-time Password 2.0
      summary: Create a email one-time password enrollment.
      description: Create a email one-time password enrollment.<br/><br/>If the authenticated
        user has the entitlement 'manageEnrollMFAMethodAnyUser', then the 'userId'
        attribute must be present in the request payload. Otherwise, the enrollment
        is associated with the authenticated user.<br><br><b>Entitlements:</b><br>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)
      operationId: createEmailotpEnrollment_2.0
      requestBody:
        description: A JSON payload that specifies the enrollment data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateEmailotpEnrollment_2.0"
        required: true
      responses:
        '201':
          description: The enrollment was created.
          headers:
            Location:
              description: The URL of the newly created enrollment.
              schema:
                type: string
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EmailotpEnrollment_2.0"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request could not be processed due to a conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/factors/emailotp/transient/verifications":
    post:
      tags:
      - Email One-time Password 2.0
      summary: Create a transient email one-time password verification.
      description: 'Create a transient email one-time password verification.<br><br>A
        new verification is created in the PENDING state. A one-time password is sent
        to the specified email address.<br><br><b>NB</b>: Once a verification''s state
        has changed from PENDING, it will cease to exist after a given time.<br><br><b>Entitlements:</b><br>
        - authnAnyUser (Authenticate any user)<br> - authn (Authenticate self)'
      operationId: createEmailotpTransient_2.0
      requestBody:
        description: A JSON payload that specifies the verification data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateEmailotpTransient_2.0"
        required: true
      responses:
        '201':
          description: The verification was created.
          headers:
            Location:
              description: The URL of the newly created verification.
              schema:
                type: string
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EmailotpTransient_2.0"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/factors/emailotp/transient/verifications/{trxnId}":
    get:
      tags:
      - Email One-time Password 2.0
      summary: Retrieve a transient email one-time password verification.
      description: 'Retrieve a transient email one-time password verification.<br><br><b>NB</b>:
        Once a verification''s state has changed from PENDING, it will cease to exist
        after a given time.<br><br><b>Entitlements:</b><br> - authnAnyUser (Authenticate
        any user)<br> - authn (Authenticate self)'
      operationId: getEmailotpTransient_2.0
      parameters:
      - name: trxnId
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific verification.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EmailotpTransient_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Email One-time Password 2.0
      summary: Attempt a transient email one-time password verification.
      description: 'Attempt a transient email one-time password verification.<br><br>A
        verification may only be attempted if the state is PENDING.<br><br><b>NB</b>:
        Once a verification''s state has changed from PENDING, it will cease to exist
        after a given time.<br><br><b>NB</b>: When the query parameter ''returnJwt''
        is included and set to ''true'', the response will change from a <b>204</b>
        with no content to a <b>200</b> with a JSON body. This body will contain an
        assertion in the form of a JWT, which serves as cryptographic proof of the
        factor performed. The format of the response body is:<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;"assertion":
        "ey..."<br>}<br><br><b>Entitlements:</b><br> - authnAnyUser (Authenticate
        any user)<br> - authn (Authenticate self)'
      operationId: attemptEmailotpTransient_2.0
      parameters:
      - name: trxnId
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      - name: returnJwt
        in: query
        description: If included and set to 'true', a JWT will be included in the
          verification response.
        schema:
          type: boolean
      requestBody:
        description: The verification data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VerifyEmailotpVerification_2.0"
        required: true
      responses:
        '204':
          description: The supplied one-time password was successfully verified.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Email One-time Password 2.0
      summary: Cancel a transient email one-time password verification.
      description: 'Cancel a transient email one-time password verification.<br><br>The
        verification is updated with the CANCELED state and can no longer be attempted.<br><br><b>NB</b>:
        Once a verification''s state has changed from PENDING, it will cease to exist
        after a given time.<br><br><b>Entitlements:</b><br> - authnAnyUser (Authenticate
        any user)<br> - authn (Authenticate self)'
      operationId: deleteEmailotpTransient_2.0
      parameters:
      - name: trxnId
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The verification was cancelled.
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/factors/emailotp/{id}":
    get:
      tags:
      - Email One-time Password 2.0
      summary: Retrieve a email one-time password enrollment.
      description: Retrieve a email one-time password enrollment.<br><br><b>Entitlements:</b><br>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)<br> - readEnrollMFAMethodAnyUser (Read second-factor authentication
        enrollment for all users)<br> - readEnrollMFAMethod (Read own second-factor
        authentication enrollment)
      operationId: getEmailotpEnrollment_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific enrollment.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EmailotpEnrollment_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Email One-time Password 2.0
      summary: Update a email one-time password enrollment.
      description: Update a email one-time password enrollment.<br><br><b>Entitlements:</b><br>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)
      operationId: updateEmailotpEnrollment_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: The updated enrollment.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/EmailotpEnrollment_2.0"
        required: true
      responses:
        '204':
          description: The enrollment was updated.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request could not be processed due to a conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Email One-time Password 2.0
      summary: Delete a email one-time password enrollment.
      description: Delete a email one-time password enrollment.<br><br><b>Entitlements:</b><br>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)
      operationId: deleteEmailotpEnrollment_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The enrollment was removed.
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/factors/emailotp/{id}/verifications":
    post:
      tags:
      - Email One-time Password 2.0
      summary: Create a email one-time password verification.
      description: 'Create a email one-time password verification.<br><br>A new verification
        is created in the PENDING state. A one-time password is sent to the email
        address associated with the enrollment.<br><br><b>NB</b>: Once a verification''s
        state has changed from PENDING, it will cease to exist after a given time.<br><br><b>Entitlements:</b><br>
        - authnAnyUser (Authenticate any user)<br> - authn (Authenticate self)'
      operationId: createEmailotpVerification_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: A JSON payload that specifies the verification data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateEmailotpVerification_2.0"
        required: true
      responses:
        '201':
          description: The verification was created.
          headers:
            Location:
              description: The URL of the newly created verification.
              schema:
                type: string
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EmailotpVerification_2.0"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/factors/emailotp/{id}/verifications/{trxnId}":
    get:
      tags:
      - Email One-time Password 2.0
      summary: Retrieve a email one-time password verification.
      description: 'Retrieve a email one-time password verification.<br><br><b>NB</b>:
        Once a verification''s state has changed from PENDING, it will cease to exist
        after a given time.<br><br><b>Entitlements:</b><br> - authnAnyUser (Authenticate
        any user)<br> - authn (Authenticate self)'
      operationId: getEmailotpVerification_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      - name: trxnId
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific verification.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EmailotpVerification_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Email One-time Password 2.0
      summary: Attempt a email one-time password verification.
      description: 'Attempt a email one-time password verification.<br><br>A verification
        may only be attempted if the state is PENDING.<br><br><b>NB</b>: Once a verification''s
        state has changed from PENDING, it will cease to exist after a given time.<br><br><b>NB</b>:
        When the query parameter ''returnJwt'' is included and set to ''true'', the
        response will change from a <b>204</b> with no content to a <b>200</b> with
        a JSON body. This body will contain an assertion in the form of a JWT, which
        serves as cryptographic proof of the factor performed. The format of the response
        body is:<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;"assertion": "ey..."<br>}<br><br><b>Entitlements:</b><br>
        - authnAnyUser (Authenticate any user)<br> - authn (Authenticate self)'
      operationId: attemptEmailotpVerification_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      - name: trxnId
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      - name: returnJwt
        in: query
        description: If included and set to 'true', a JWT will be included in the
          verification response.
        schema:
          type: boolean
      requestBody:
        description: The verification data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VerifyEmailotpVerification_2.0"
        required: true
      responses:
        '204':
          description: The supplied one-time password was successfully verified.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Email One-time Password 2.0
      summary: Cancel a email one-time password verification.
      description: 'Cancel a email one-time password verification.<br><br>The verification
        is updated with the CANCELED state and can no longer be attempted.<br><br><b>NB</b>:
        Once a verification''s state has changed from PENDING, it will cease to exist
        after a given time.<br><br><b>Entitlements:</b><br> - authnAnyUser (Authenticate
        any user)<br> - authn (Authenticate self)'
      operationId: deleteEmailotpVerification_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      - name: trxnId
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The verification was cancelled.
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/factors/fido2/registrations":
    get:
      tags:
      - FIDO
      summary: Retrieve the list of FIDO registrations.
      description: Retrieve the list of FIDO registrations.<br/><br/><b>Entitlements:</b><br/>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br/> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)<br/> - readEnrollMFAMethodAnyUser (Read second-factor authentication
        enrollment for all users)<br/> - readEnrollMFAMethod (Read own second-factor
        authentication enrollment)
      operationId: getFidoRegistrations_v2.0
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>You
          can use the following query parameters:<br><br><b>page</b> - Use to identify
          the requested page, or the offset.<br><br><b>limit</b> - Use to define the
          total number of results that are returned per page. The maximum allowed
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: The pagination parameter
          value must be HTML encoded. Use the prefix "pagination=" in the query parameter.<br><br><b>Example</b>:
          Paginate on page=1&limit=5<br>pagination=page%3D1%26limit%3D5'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for Strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for Booleans are = and !=<br>Valid operators
          for Numbers are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>: The search
          parameter value must be HTML encoded. Use the prefix "search=" in the query
          parameter.<br><br><b>Example</b>: Search on id contains "fd45"&enabled=true<br>search=id%20contains%20%22fd45%22%26enabled%3Dtrue'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values to be inclusive or exclusive only. It cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          The filter parameter value must be HTML encoded. Use the prefix "filter="
          in the query parameter.<br><br><b>Examples</b><br>Filter to return only
          id : filter=id<br>Filter to exclude id and enabled : filter=%21id,enabled'
        schema:
          type: string
      responses:
        '200':
          description: The list of FIDO registrations.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Fido2EnrollmentList_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/factors/fido2/registrations/{id}":
    get:
      tags:
      - FIDO
      summary: Retrieve a FIDO registration.
      description: Retrieve a FIDO registration.<br/><br/><b>Entitlements:</b><br/>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br/> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)<br/> - readEnrollMFAMethodAnyUser (Read second-factor authentication
        enrollment for all users)<br/> - readEnrollMFAMethod (Read own second-factor
        authentication enrollment)
      operationId: getFidoRegistration_v2.0
      parameters:
      - name: id
        in: path
        description: The identifier of the registration to retrieve.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The FIDO registration.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FidoEnrollment_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - FIDO
      summary: Update a FIDO registration.
      description: Update a FIDO registration.<br/><br/><b>Entitlements:</b><br/>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br/> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)
      operationId: updateFidoRegistration_v2.0
      parameters:
      - name: id
        in: path
        description: The identifier of the FIDO registration to update.
        required: true
        schema:
          type: string
      requestBody:
        description: A JSON payload that contains the updated enrollment.
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/FidoEnrollment_2.0"
        required: true
      responses:
        '204':
          description: The registration was successfully updated.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - FIDO
      summary: Delete a FIDO registration.
      description: Delete a FIDO registration.<br/><br/><b>Entitlements:</b><br/>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br/> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)
      operationId: deleteFidoRegistration_v2.0
      parameters:
      - name: id
        in: path
        description: The identifier of the FIDO registration to delete.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Registration was successfully removed.
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/factors/fido2/relyingparties":
    post:
      tags:
      - FIDO
      summary: Resolve an rpId.
      description: Present a potential FIDO origin to see if it matches one or more
        configured relying parties.<br><br><b>Entitlements:</b><br>- manageEnrollMFAMethodAnyUser
        (Manage second-factor authentication enrollment for all users)<br>- manageEnrollMFAMethod
        (Manage own second-factor authentication enrollment)<br>- authnAnyUser (Authenticate
        any user)<br>- authn (Authenticate self)
      operationId: resolve
      requestBody:
        description: Presented FIDO origin to resolve to a relying party
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ResolveRelyingPartyRequest"
        required: true
      responses:
        '200':
          description: Origin successfully resolved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ResolvedRP_2.0"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/factors/fido2/relyingparties/{id}/assertion/options":
    post:
      tags:
      - FIDO
      summary: Initiate a FIDO authentication.
      description: Initiate a FIDO verification. Provide some authentication preferences
        for the challenge.<br><br><b>Entitlements:</b><br>- authn (Authenticate self)<br>-
        authnAnyUser (Authenticate any user)
      operationId: assertionOptions
      parameters:
      - name: id
        in: path
        description: The identifier that is assigned to this relying party.
        required: true
        schema:
          type: string
      requestBody:
        description: A JSON payload that contains the assertion requirements that
          are selected by the relying party for this verification ceremony.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AssertionOptionsRequest"
        required: true
      responses:
        '200':
          description: Assertion options were generated and stored successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AssertionOptionsResponse_2.0"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/factors/fido2/relyingparties/{id}/assertion/result":
    post:
      tags:
      - FIDO
      summary: Complete a FIDO authentication.
      description: Complete a FIDO verification. Present the signed challenge to the
        server for verification.<br><br><b>Entitlements:</b><br>- authn (Authenticate
        self)<br>- authnAnyUser (Authenticate any user)
      operationId: assertionResult
      parameters:
      - name: id
        in: path
        description: The identifier that is assigned to this relying party.
        required: true
        schema:
          type: string
      - name: returnJwt
        in: query
        description: If included and set to 'true', a JWT will be included in the
          verification response.
        schema:
          type: boolean
      requestBody:
        description: A JSON payload that contains the signed authentication data that
          is produced by the client and authenticator.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AssertionResultRequest_2.0"
        required: true
      responses:
        '200':
          description: Verification is successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FidoEnrollment_2.0"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/factors/fido2/relyingparties/{id}/attestation/options":
    post:
      tags:
      - FIDO
      summary: Initiate a FIDO registration.
      description: Initiate a FIDO registration. Provide some registration preferences
        in return for a challenge.<br><br><b>Entitlements:</b><br>- manageEnrollMFAMethodAnyUser
        (Manage second-factor authentication enrollment for all users)<br>- manageEnrollMFAMethod
        (Manage own second-factor authentication enrollment)<br>- verifyAuthenticator
        (Use IBM Verify)
      operationId: attestationOptions
      parameters:
      - name: id
        in: path
        description: The identifier that is assigned to this relying party.
        required: true
        schema:
          type: string
      requestBody:
        description: A JSON payload that contains the attestation requirements that
          are selected by the relying party for this registration ceremony.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AttestationOptionsRequest_2.0"
        required: true
      responses:
        '200':
          description: Attestation options generated and stored successfully.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AttestationOptionsResponse_2.0"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/factors/fido2/relyingparties/{id}/attestation/result":
    post:
      tags:
      - FIDO
      summary: Complete a FIDO registration.
      description: Complete a FIDO registration. Present an attestation object containing
        a public key to the server for attestation verification and storage.<br><br><b>Entitlements:</b><br>-
        manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br>- manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)<br>- verifyAuthenticator (Use IBM Verify)
      operationId: attestationResult
      parameters:
      - name: id
        in: path
        description: The identifier that is assigned to this relying party.
        required: true
        schema:
          type: string
      requestBody:
        description: A JSON payload that contains the attestation object that is produced
          by the client and authenticator.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AttestationResultRequest_2.0"
        required: true
      responses:
        '200':
          description: Registration was successful. The attestation object was verified
            and the registration record persisted.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FidoEnrollment_2.0"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/factors/otp":
    post:
      tags:
      - One-time Password
      summary: Create a one-time password verification.
      description: 'Create a one-time password verification.<br><br>A new verification
        is created in the PENDING state. A one-time password will be available in
        the response body.<br><br><b>NB</b>: Once a verification''s state has changed
        from PENDING, it will cease to exist after a given time.<br><br><b>NB</b>:
        It is recommended that this API be used with care from a secured location
        like a backend server.<br><br><b>Entitlements:</b><br> - generateOTP (Generate
        OTP)'
      operationId: createOtpVerification_2.0
      requestBody:
        description: A JSON payload that specifies the verification data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateOtpVerification_2.0"
        required: true
      responses:
        '201':
          description: The verification was created.
          headers:
            Location:
              description: The URL of the newly created verification.
              schema:
                type: string
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreateOtpVerificationResponse_2.0"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/factors/otp/{id}":
    get:
      tags:
      - One-time Password
      summary: Retrieve a one-time password verification.
      description: 'Retrieve a one-time password verification.<br><br><b>NB</b>: Once
        a verification''s state has changed from PENDING, it will cease to exist after
        a given time.<br><br><b>Entitlements:</b><br> - authnAnyUser (Authenticate
        any user)<br> - authn (Authenticate self)'
      operationId: getOtpVerification_2.0
      parameters:
      - name: id
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific verification.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OtpVerification_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - One-time Password
      summary: Attempt a one-time password verification.
      description: 'Attempt a one-time password verification.<br><br>A verification
        may only be attempted if the state is PENDING.<br><br><b>NB</b>: Once a verification''s
        state has changed from PENDING, it will cease to exist after a given time.<br><br><b>NB</b>:
        When the query parameter ''returnJwt'' is included and set to ''true'', the
        response will change from a <b>204</b> with no content to a <b>200</b> with
        a JSON body. This body will contain an assertion in the form of a JWT, which
        serves as cryptographic proof of the factor performed. The format of the response
        body is:<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;"assertion": "ey..."<br>}<br>The
        ''returnJwt'' feature only operates if the entitlement ''authnAnyUser'' is
        not present.<br><br><b>Entitlements:</b><br> - authnAnyUser (Authenticate
        any user)<br> - authn (Authenticate self)'
      operationId: attemptOtpVerification_2.0
      parameters:
      - name: id
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      - name: returnJwt
        in: query
        description: If included and set to 'true', a JWT will be included in the
          verification response.
        schema:
          type: boolean
      requestBody:
        description: The verification data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VerifyOtpVerification_2.0"
        required: true
      responses:
        '204':
          description: The supplied one-time password was successfully verified.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - One-time Password
      summary: Cancel a one-time password verification.
      description: 'Cancel a one-time password verification.<br><br>The verification
        is updated with the CANCELED state and can no longer be attempted.<br><br><b>NB</b>:
        Once a verification''s state has changed from PENDING, it will cease to exist
        after a given time.<br><br><b>Entitlements:</b><br> - authnAnyUser (Authenticate
        any user)<br> - authn (Authenticate self)'
      operationId: deleteOtpVerification_2.0
      parameters:
      - name: id
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The verification was cancelled.
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/factors/qr/authenticate":
    get:
      tags:
      - QR Code Login
      summary: Create a QR code login verification.
      description: Create a QR code login verification.<br><br><b>Entitlements:</b><br>
        - None
      operationId: createQrVerification_2.0
      parameters:
      - name: profileId
        in: query
        description: An IBM Verify registration profile identifier
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The verification was created.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreateQrVerificationResponse_2.0"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/factors/qr/authenticate/{id}":
    get:
      tags:
      - QR Code Login
      summary: Retrieve a QR code login verification.
      description: 'Retrieve a QR code login verification.<br><br>This API can be
        used from the unauthenticated browser that displayed the QR code to determine
        if a scanning device has completed the verification. The request must include
        the ''dsi'' attribute to validate the caller is authorized to retrieve the
        verification.<br><br> If ''returnJwt'' is ''true'', the ''authnAnyUser'' entitlement
        and an authenticated context are required.<br><br><b>NB</b>: Once a verification''s
        state has changed from PENDING, it will cease to exist after a given time.<br><br><b>Entitlements:</b><br>
        - None'
      operationId: getQrVerification_2.0
      parameters:
      - name: id
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      - name: dsi
        in: query
        description: The associated device session identifier.
        required: true
        schema:
          type: string
      - name: returnJwt
        in: query
        description: If included and set to 'true', and accompanied by the 'authnAnyUser'
          entitlement and an authenticated context, a JWT will be included in the
          verification response.
        schema:
          type: boolean
      responses:
        '200':
          description: The specific verification.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/QrVerification_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/factors/qr/{id}":
    post:
      tags:
      - QR Code Login
      summary: Attempt a QR code login verification.
      description: ' Attempt a QR code login verification.<br><br>A verification may
        only be attempted if the state is PENDING and by an IBM Verify authenticator.<br><br><b>NB</b>:
        Once a verification''s state has changed from PENDING, it will cease to exist
        after a given time.<br><br><b>NB</b>: When the query parameter ''returnJwt''
        is included and set to ''true'', the response will change from a <b>204</b>
        with no content to a <b>200</b> with a JSON body. This body will contain an
        assertion in the form of a JWT, which serves as cryptographic proof of the
        factor performed. The format of the response body is:<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;"assertion":
        "ey..."<br>}<br><br><b>Entitlements:</b><br>- verifyAuthenticator (Use IBM
        Verify)'
      operationId: attemptQrVerification_2.0
      parameters:
      - name: id
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      - name: returnJwt
        in: query
        description: If included and set to 'true', a JWT will be included in the
          verification response.
        schema:
          type: boolean
      requestBody:
        description: The verification data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VerifyQrVerification_2.0"
        required: true
      responses:
        '204':
          description: The request was successfully processed.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - QR Code Login
      summary: Cancel a QR code login verification.
      description: 'Cancel a QR code login verification.<br><br>The verification is
        updated with the CANCELED state and can no longer be attempted.<br><br><b>NB</b>:
        Once a verification''s state has changed from PENDING, it will cease to exist
        after a given time.<br><br><b>Entitlements:</b><br>- authnAnyUser (Authenticate
        any user)'
      operationId: deleteQrVerification_2.0
      parameters:
      - name: id
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The verification was cancelled.
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/factors/questions":
    get:
      tags:
      - Knowledge Questions
      summary: Retrieve the list of knowledge question enrollments.
      description: Retrieve the list of knowledge question enrollments. <br/><br/>If
        the authenticated user does not have the entitlement 'manageEnrollMFAMethodAnyUser'
        or 'readEnrollMFAMethodAnyUser', then the user is only permitted to access
        enrollments that they are associated with.<br/><br/><b>NB:</b> To have this
        feature installed on the tenant please contact support.<br><br><b>Entitlements:</b><br>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)<br> - readEnrollMFAMethodAnyUser (Read second-factor authentication
        enrollment for all users)<br> - readEnrollMFAMethod (Read own second-factor
        authentication enrollment)
      operationId: getKqEnrollments_2.0
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>You
          can use the following query parameters:<br><br><b>page</b> - Use to identify
          the requested page, or the offset.<br><br><b>limit</b> - Use to define the
          total number of results that are returned per page. The maximum allowed
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: The pagination parameter
          value must be HTML encoded. Use the prefix "pagination=" in the query parameter.<br><br><b>Example</b>:
          Paginate on page=1&limit=5<br>pagination=page%3D1%26limit%3D5'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for Strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for Booleans are = and !=<br>Valid operators
          for Numbers are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>: The search
          parameter value must be HTML encoded. Use the prefix "search=" in the query
          parameter.<br><br><b>Example</b>: Search on id contains "fd45"&enabled=true<br>search=id%20contains%20%22fd45%22%26enabled%3Dtrue'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values to be inclusive or exclusive only. It cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          The filter parameter value must be HTML encoded. Use the prefix "filter="
          in the query parameter.<br><br><b>Examples</b><br>Filter to return only
          id : filter=id<br>Filter to exclude id and enabled : filter=%21id,enabled'
        schema:
          type: string
      responses:
        '200':
          description: The list of knowledge question enrollments.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/QuestionsEnrollments_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Knowledge Questions
      summary: Create a knowledge question enrollment.
      description: Create a knowledge question enrollment. <br/><br/>If the number
        of answers submitted is fewer than the minimum required for a valid enrollment,
        then the enrollment is created but is considered incomplete. The 'validated'
        attribute value is 'false' and the enrollment is not available for productive
        runtime verifications.<br/><br/>If the authenticated user has the entitlement
        'manageEnrollMFAMethodAnyUser', then the 'userId' attribute must be present
        in the request payload. Otherwise, the enrollment is associated with the authenticated
        user.<br/><br/><b>NB:</b> To have this feature installed on the tenant please
        contact support.<br/><br/><b>Entitlements:</b><br/> - manageEnrollMFAMethodAnyUser
        (Manage second-factor authentication enrollment for all users)<br/> - manageEnrollMFAMethod
        (Manage own second-factor authentication enrollment)<br/>
      operationId: createKqEnrollment_2.0
      requestBody:
        description: A JSON payload that specifies the enrollment data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateQuestionsEnrollment_2.0"
        required: true
      responses:
        '201':
          description: The enrollment was created.
          headers:
            Location:
              description: The URL of the newly created enrollment.
              schema:
                type: string
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/QuestionsEnrollment_2.0"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request could not be processed due to a conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/factors/questions/{id}":
    get:
      tags:
      - Knowledge Questions
      summary: Retrieve a knowledge question enrollment.
      description: Retrieve a knowledge question enrollment.<br/><br/>If the authenticated
        user does not have the entitlement 'manageEnrollMFAMethodAnyUser' or 'readEnrollMFAMethodAnyUser',
        then the user is only permitted to access enrollments that they are associated
        with.<br/><br/><b>NB:</b> To have this feature installed on the tenant please
        contact support.<br><br><b>Entitlements:</b><br> - manageEnrollMFAMethodAnyUser
        (Manage second-factor authentication enrollment for all users)<br> - manageEnrollMFAMethod
        (Manage own second-factor authentication enrollment)<br> - readEnrollMFAMethodAnyUser
        (Read second-factor authentication enrollment for all users)<br> - readEnrollMFAMethod
        (Read own second-factor authentication enrollment)
      operationId: getKqEnrollment_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific enrollment.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/QuestionsEnrollment_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Knowledge Questions
      summary: Update a knowledge question enrollment.
      description: Update a knowledge question enrollment.<br/><br/>To add a new answer,
        or update an existing answer, then include the 'answer' attribute alongside
        the 'questionKey'. If an entry is missing or removed from the 'questions'
        list, then that question is removed from the enrollment. At least one question
        must remain enrolled.<br/><br/> If the number of questions are fewer than
        the minimum required for a valid enrollment, then the enrollment is considered
        incomplete. The 'validated' attribute value is set as 'false' and the enrollment
        is not available for productive runtime verifications. <br/><br/>If the authenticated
        user does not have the entitlement 'manageEnrollMFAMethodAnyUser' then the
        user is only permitted to access enrollments that they are associated with.<br/><br/><b>NB:</b>
        To have this feature installed on the tenant please contact support.<br/><br/><b>Entitlements:</b><br/>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br/> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)<br/>
      operationId: updateKqEnrollment_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: The updated enrollment.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateQuestionsEnrollment_2.0"
        required: true
      responses:
        '204':
          description: The enrollment was updated.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Knowledge Questions
      summary: Delete a knowledge question enrollment.
      description: Delete a knowledge question enrollment.<br/><br/>If the authenticated
        user does not have the entitlement 'manageEnrollMFAMethodAnyUser', then the
        user is only permitted to access enrollments that they are associated with.<br/><br/><b>NB:</b>
        To have this feature installed on the tenant please contact support.<br/><br/><b>Entitlements:</b><br/>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br/> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)<br/>
      operationId: deleteKqEnrollment_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The enrollment was removed.
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/factors/questions/{id}/verifications":
    post:
      tags:
      - Knowledge Questions
      summary: Create a knowledge question verification.
      description: 'Create a knowledge question verification.<br/><br/>A new verification
        is created in the PENDING state. The questions to be answered are randomly
        selected from the enrolled set of answers.<br/><br/>If the authenticated user
        does not have the entitlement ''authnAnyUser'', then the user is only permitted
        to access verifications that they are associated with.<br/><br/><b>NB</b>:
        Once a verification''s state has changed from PENDING, it will cease to exist
        after a given time.<br/><br/><b>NB:</b> To have this feature installed on
        the tenant please contact support.<br/><br/><b>Entitlements:</b><br/> - authnAnyUser
        (Authenticate any user)<br/> - authn (Authenticate self)'
      operationId: createKqVerification_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: A JSON payload that specifies the verification data
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateQuestionsVerification_2.0"
        required: true
      responses:
        '201':
          description: The verification was created.
          headers:
            Location:
              description: The URL of the newly created verification.
              schema:
                type: string
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/QuestionsVerification_2.0"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/factors/questions/{id}/verifications/{trxnId}":
    get:
      tags:
      - Knowledge Questions
      summary: Retrieve a knowledge question verification.
      description: 'Retrieve a knowledge question verification.<br/><br/>If the authenticated
        user does not have the entitlement ''authnAnyUser'', then the user is only
        permitted to access verifications that they are associated with.<br/><br/><b>NB</b>:
        Once a verification''s state has changed from PENDING, it will cease to exist
        after a given time.<br/><br/><b>NB:</b> To have this feature installed on
        the tenant please contact support.<br><br><b>Entitlements:</b><br> - manageEnrollMFAMethodAnyUser
        (Manage second-factor authentication enrollment for all users)<br> - manageEnrollMFAMethod
        (Manage own second-factor authentication enrollment)<br> - readEnrollMFAMethodAnyUser
        (Read second-factor authentication enrollment for all users)<br> - readEnrollMFAMethod
        (Read own second-factor authentication enrollment)<br> - authnAnyUser (Authenticate
        any user)<br/> - authn (Authenticate self)'
      operationId: getKqVerification_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      - name: trxnId
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific verification.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/QuestionsVerification_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Knowledge Questions
      summary: Attempt a knowledge question verification.
      description: 'Attempt a knowledge question verification.<br/><br/>To attempt
        a verification if the challenge is already in a completed state causes an
        error. The verification fails if answers to all questions are not supplied.<br/><br/>If
        the authenticated user does not have the entitlement ''authnAnyUser'', then
        the user is only permitted to access verifications that they are associated
        with.<br/><br/><b>NB</b>: Once a verification''s state has changed from PENDING,
        it will cease to exist after a given time.<br/><br/><b>NB:</b> To have this
        feature installed on the tenant please contact support.<br><br><b>NB</b>:
        When the query parameter ''returnJwt'' is included and set to ''true'', the
        response will change from a <b>204</b> with no content to a <b>200</b> with
        a JSON body. This body will contain an assertion in the form of a JWT, which
        serves as cryptographic proof of the factor performed. The format of the response
        body is:<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;"assertion": "ey..."<br>}<br/><br/><b>Entitlements:</b><br/>
        - authnAnyUser (Authenticate any user)<br/> - authn (Authenticate self)'
      operationId: attemptKqVerification_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      - name: trxnId
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      - name: returnJwt
        in: query
        description: If included and set to 'true', a JWT will be included in the
          verification response.
        schema:
          type: boolean
      requestBody:
        description: The verification attempt data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AttemptQuestionsVerification_2.0"
        required: true
      responses:
        '204':
          description: The supplied answers were successfully verified.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Knowledge Questions
      summary: Delete a knowledge question verification.
      description: Delete a knowledge question verification.<br/><br/>If the authenticated
        user does not have the entitlement 'authnAnyUser', then the user is only permitted
        to access verifications that they are associated with.<br/><br/><b>NB:</b>
        To have this feature installed on the tenant please contact support.<br/><br/><b>Entitlements:</b><br/>
        - authnAnyUser (Authenticate any user)<br/> - authn (Authenticate self)
      operationId: deleteKqVerification_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      - name: trxnId
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The verification was removed.
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/factors/smsotp":
    get:
      tags:
      - SMS One-time Password 2.0
      summary: Retrieve the list of SMS one-time password enrollments.
      description: Retrieve the list of SMS one-time password enrollments.<br><br><b>Entitlements:</b><br>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)<br> - readEnrollMFAMethodAnyUser (Read second-factor authentication
        enrollment for all users)<br> - readEnrollMFAMethod (Read own second-factor
        authentication enrollment)
      operationId: listSmsotpEnrollments_2.0
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>You
          can use the following query parameters:<br><br><b>page</b> - Use to identify
          the requested page, or the offset.<br><br><b>limit</b> - Use to define the
          total number of results that are returned per page. The maximum allowed
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: The pagination parameter
          value must be HTML encoded. Use the prefix "pagination=" in the query parameter.<br><br><b>Example</b>:
          Paginate on page=1&limit=5<br>pagination=page%3D1%26limit%3D5'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for Strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for Booleans are = and !=<br>Valid operators
          for Numbers are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>: The search
          parameter value must be HTML encoded. Use the prefix "search=" in the query
          parameter.<br><br><b>Example</b>: Search on id contains "fd45"&enabled=true<br>search=id%20contains%20%22fd45%22%26enabled%3Dtrue'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values to be inclusive or exclusive only. It cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          The filter parameter value must be HTML encoded. Use the prefix "filter="
          in the query parameter.<br><br><b>Examples</b><br>Filter to return only
          id : filter=id<br>Filter to exclude id and enabled : filter=%21id,enabled'
        schema:
          type: string
      responses:
        '200':
          description: The list of SMS one-time password enrollments.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SmsotpEnrollments_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - SMS One-time Password 2.0
      summary: Create a SMS one-time password enrollment.
      description: Create a SMS one-time password enrollment.<br/><br/>If the authenticated
        user has the entitlement 'manageEnrollMFAMethodAnyUser', then the 'userId'
        attribute must be present in the request payload. Otherwise, the enrollment
        is associated with the authenticated user.<br><br><b>Entitlements:</b><br>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)
      operationId: createSmsotpEnrollment_2.0
      requestBody:
        description: A JSON payload that specifies the enrollment data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateSmsotpEnrollment_2.0"
        required: true
      responses:
        '201':
          description: The enrollment was created.
          headers:
            Location:
              description: The URL of the newly created enrollment.
              schema:
                type: string
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SmsotpEnrollment_2.0"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request could not be processed due to a conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/factors/smsotp/transient/verifications":
    post:
      tags:
      - SMS One-time Password 2.0
      summary: Create a transient SMS one-time password verification.
      description: 'Create a transient SMS one-time password verification.<br><br>A
        new verification is created in the PENDING state. A one-time password is sent
        to the specified phone number.<br><br><b>NB</b>: Once a verification''s state
        has changed from PENDING, it will cease to exist after a given time.<br><br><b>Entitlements:</b><br>
        - authnAnyUser (Authenticate any user)<br> - authn (Authenticate self)'
      operationId: createSmsotpTransient_2.0
      requestBody:
        description: A JSON payload that specifies the verification data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateSmsotpTransient_2.0"
        required: true
      responses:
        '201':
          description: The verification was created.
          headers:
            Location:
              description: The URL of the newly created verification.
              schema:
                type: string
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SmsotpTransient_2.0"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/factors/smsotp/transient/verifications/{trxnId}":
    get:
      tags:
      - SMS One-time Password 2.0
      summary: Retrieve a transient SMS one-time password verification.
      description: 'Retrieve a transient SMS one-time password verification.<br><br><b>NB</b>:
        Once a verification''s state has changed from PENDING, it will cease to exist
        after a given time.<br><br><b>Entitlements:</b><br> - authnAnyUser (Authenticate
        any user)<br> - authn (Authenticate self)'
      operationId: getSmsotpTransient_2.0
      parameters:
      - name: trxnId
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific verification.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SmsotpTransient_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - SMS One-time Password 2.0
      summary: Attempt a transient SMS one-time password verification.
      description: 'Attempt a transient SMS one-time password verification.<br><br>A
        verification may only be attempted if the state is PENDING.<br><br><b>NB</b>:
        Once a verification''s state has changed from PENDING, it will cease to exist
        after a given time.<br><br><b>NB</b>: When the query parameter ''returnJwt''
        is included and set to ''true'', the response will change from a <b>204</b>
        with no content to a <b>200</b> with a JSON body. This body will contain an
        assertion in the form of a JWT, which serves as cryptographic proof of the
        factor performed. The format of the response body is:<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;"assertion":
        "ey..."<br>}<br><br><b>Entitlements:</b><br> - authnAnyUser (Authenticate
        any user)<br> - authn (Authenticate self)'
      operationId: attemptSmsotpTransient_2.0
      parameters:
      - name: trxnId
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      - name: returnJwt
        in: query
        description: If included and set to 'true', a JWT will be included in the
          verification response.
        schema:
          type: boolean
      requestBody:
        description: The verification data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VerifySmsotpVerification_2.0"
        required: true
      responses:
        '204':
          description: The supplied one-time password was successfully verified.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - SMS One-time Password 2.0
      summary: Cancel a transient SMS one-time password verification.
      description: 'Cancel a transient SMS one-time password verification.<br><br>The
        verification is updated with the CANCELED state and can no longer be attempted.<br><br><b>NB</b>:
        Once a verification''s state has changed from PENDING, it will cease to exist
        after a given time.<br><br><b>Entitlements:</b><br> - authnAnyUser (Authenticate
        any user)<br> - authn (Authenticate self)'
      operationId: deleteSmsotpTransient_2.0
      parameters:
      - name: trxnId
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The verification was cancelled.
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/factors/smsotp/{id}":
    get:
      tags:
      - SMS One-time Password 2.0
      summary: Retrieve a SMS one-time password enrollment.
      description: Retrieve a SMS one-time password enrollment.<br><br><b>Entitlements:</b><br>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)<br> - readEnrollMFAMethodAnyUser (Read second-factor authentication
        enrollment for all users)<br> - readEnrollMFAMethod (Read own second-factor
        authentication enrollment)
      operationId: getSmsotpEnrollment_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific enrollment.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SmsotpEnrollment_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - SMS One-time Password 2.0
      summary: Update a SMS one-time password enrollment.
      description: Update a SMS one-time password enrollment.<br><br><b>Entitlements:</b><br>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)
      operationId: updateSmsotpEnrollment_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: The updated enrollment.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SmsotpEnrollment_2.0"
        required: true
      responses:
        '204':
          description: The enrollment was updated.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request could not be processed due to a conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - SMS One-time Password 2.0
      summary: Delete a SMS one-time password enrollment.
      description: Delete a SMS one-time password enrollment.<br><br><b>Entitlements:</b><br>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)
      operationId: deleteSmsotpEnrollment_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The enrollment was removed.
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/factors/smsotp/{id}/verifications":
    post:
      tags:
      - SMS One-time Password 2.0
      summary: Create a SMS one-time password verification.
      description: 'Create a SMS one-time password verification.<br><br>A new verification
        is created in the PENDING state. A one-time password is sent to the phone
        number associated with the enrollment.<br><br><b>NB</b>: Once a verification''s
        state has changed from PENDING, it will cease to exist after a given time.<br><br><b>Entitlements:</b><br>
        - authnAnyUser (Authenticate any user)<br> - authn (Authenticate self)'
      operationId: createSmsotpVerification_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: A JSON payload that specifies the verification data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateSmsotpVerification_2.0"
        required: true
      responses:
        '201':
          description: The verification was created.
          headers:
            Location:
              description: The URL of the newly created verification.
              schema:
                type: string
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SmsotpVerification_2.0"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/factors/smsotp/{id}/verifications/{trxnId}":
    get:
      tags:
      - SMS One-time Password 2.0
      summary: Retrieve a SMS one-time password verification.
      description: 'Retrieve a SMS one-time password verification.<br><br><b>NB</b>:
        Once a verification''s state has changed from PENDING, it will cease to exist
        after a given time.<br><br><b>Entitlements:</b><br> - authnAnyUser (Authenticate
        any user)<br> - authn (Authenticate self)'
      operationId: getSmsotpVerification_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      - name: trxnId
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific verification.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SmsotpVerification_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - SMS One-time Password 2.0
      summary: Attempt a SMS one-time password verification.
      description: 'Attempt a SMS one-time password verification.<br><br>A verification
        may only be attempted if the state is PENDING.<br><br><b>NB</b>: Once a verification''s
        state has changed from PENDING, it will cease to exist after a given time.<br><br><b>NB</b>:
        When the query parameter ''returnJwt'' is included and set to ''true'', the
        response will change from a <b>204</b> with no content to a <b>200</b> with
        a JSON body. This body will contain an assertion in the form of a JWT, which
        serves as cryptographic proof of the factor performed. The format of the response
        body is:<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;"assertion": "ey..."<br>}<br><br><b>Entitlements:</b><br>
        - authnAnyUser (Authenticate any user)<br> - authn (Authenticate self)'
      operationId: attemptSmsotpVerification_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      - name: trxnId
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      - name: returnJwt
        in: query
        description: If included and set to 'true', a JWT will be included in the
          verification response.
        schema:
          type: boolean
      requestBody:
        description: The verification data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VerifySmsotpVerification_2.0"
        required: true
      responses:
        '204':
          description: The supplied one-time password was successfully verified.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - SMS One-time Password 2.0
      summary: Cancel a SMS one-time password verification.
      description: 'Cancel a SMS one-time password verification.<br><br>The verification
        is updated with the CANCELED state and can no longer be attempted.<br><br><b>NB</b>:
        Once a verification''s state has changed from PENDING, it will cease to exist
        after a given time.<br><br><b>Entitlements:</b><br> - authnAnyUser (Authenticate
        any user)<br> - authn (Authenticate self)'
      operationId: deleteSmsotpVerification_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      - name: trxnId
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The verification was cancelled.
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/factors/totp":
    get:
      tags:
      - Time-based One-time Password 2.0
      summary: Retrieve the list of time-based one-time password enrollments.
      description: Retrieve the list of time-based one-time password enrollments.<br><br><b>Entitlements:</b><br>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)<br> - readEnrollMFAMethodAnyUser (Read second-factor authentication
        enrollment for all users)<br> - readEnrollMFAMethod (Read own second-factor
        authentication enrollment)
      operationId: listTotpEnrollments_2.0
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>You
          can use the following query parameters:<br><br><b>page</b> - Use to identify
          the requested page, or the offset.<br><br><b>limit</b> - Use to define the
          total number of results that are returned per page. The maximum allowed
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: The pagination parameter
          value must be HTML encoded. Use the prefix "pagination=" in the query parameter.<br><br><b>Example</b>:
          Paginate on page=1&limit=5<br>pagination=page%3D1%26limit%3D5'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for Strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for Booleans are = and !=<br>Valid operators
          for Numbers are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>: The search
          parameter value must be HTML encoded. Use the prefix "search=" in the query
          parameter.<br><br><b>Example</b>: Search on id contains "fd45"&enabled=true<br>search=id%20contains%20%22fd45%22%26enabled%3Dtrue'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values to be inclusive or exclusive only. It cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          The filter parameter value must be HTML encoded. Use the prefix "filter="
          in the query parameter.<br><br><b>Examples</b><br>Filter to return only
          id : filter=id<br>Filter to exclude id and enabled : filter=%21id,enabled'
        schema:
          type: string
      responses:
        '200':
          description: The list of time-based one-time password enrollments.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TotpEnrollments_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Time-based One-time Password 2.0
      summary: Create a time-based one-time password enrollment.
      description: Create a time-based one-time password enrollment.<br/><br/>If the
        authenticated user has the entitlement 'manageEnrollMFAMethodAnyUser', then
        the 'userId' attribute must be present in the request payload. Otherwise,
        the enrollment is associated with the authenticated user.<br><br><b>Entitlements:</b><br>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)
      operationId: createTotpEnrollment_2.0
      parameters:
      - name: qrCodeInResponse
        in: query
        description: If included and set to 'true', and the Accept header of the request
          is 'application/json', then the JSON response payload will include a base64
          encoded representation of the QR code.
        schema:
          type: boolean
      requestBody:
        description: A JSON payload that specifies the enrollment data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateTotpEnrollment_2.0"
        required: true
      responses:
        '201':
          description: The enrollment was created.
          headers:
            Location:
              description: The URL of the newly created enrollment.
              schema:
                type: string
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreateTotpEnrollmentResponse_2.0"
            image/png:
              schema:
                "$ref": "#/components/schemas/CreateTotpEnrollmentResponse_2.0"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
            image/png:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
            image/png:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
            image/png:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request could not be processed due to a conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
            image/png:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
            image/png:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/factors/totp/{id}":
    get:
      tags:
      - Time-based One-time Password 2.0
      summary: Retrieve a time-based one-time password enrollment.
      description: Retrieve a time-based one-time password enrollment.<br><br><b>Entitlements:</b><br>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)<br> - readEnrollMFAMethodAnyUser (Read second-factor authentication
        enrollment for all users)<br> - readEnrollMFAMethod (Read own second-factor
        authentication enrollment)
      operationId: getTotpEnrollment_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific enrollment.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TotpEnrollment_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Time-based One-time Password 2.0
      summary: Update a time-based one-time password enrollment.
      description: Update a time-based one-time password enrollment.<br><br><b>Entitlements:</b><br>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)
      operationId: updateTotpEnrollment_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: The updated enrollment.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TotpEnrollment_2.0"
        required: true
      responses:
        '204':
          description: The enrollment was updated.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request could not be processed due to a conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    post:
      tags:
      - Time-based One-time Password 2.0
      summary: Attempt a time-based one-time password verification.
      description: 'Attempt a time-based one-time password verification.<br><br><b>NB</b>:
        When the query parameter ''returnJwt'' is included and set to ''true'', the
        response will change from a <b>204</b> with no content to a <b>200</b> with
        a JSON body. This body will contain an assertion in the form of a JWT, which
        serves as cryptographic proof of the factor performed. The format of the response
        body is:<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;"assertion": "ey..."<br>}<br><br><b>Entitlements:</b><br>
        - authnAnyUser (Authenticate any user)<br> - authn (Authenticate self)'
      operationId: verifyTotpEnrollment_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      - name: returnJwt
        in: query
        description: If included and set to 'true', a JWT will be included in the
          verification response.
        schema:
          type: boolean
      requestBody:
        description: The verification data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VerifyTotpEnrollment_2.0"
        required: true
      responses:
        '204':
          description: The supplied one-time password was successfully verified.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Time-based One-time Password 2.0
      summary: Delete a time-based one-time password enrollment.
      description: Delete a time-based one-time password enrollment.<br><br><b>Entitlements:</b><br>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)
      operationId: deleteTotpEnrollment_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The enrollment was removed.
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/factors/voiceotp":
    get:
      tags:
      - Voice One-time Password
      summary: Retrieve the list of voice one-time password enrollments.
      description: Retrieve the list of voice one-time password enrollments.<br><br><b>Entitlements:</b><br>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)<br> - readEnrollMFAMethodAnyUser (Read second-factor authentication
        enrollment for all users)<br> - readEnrollMFAMethod (Read own second-factor
        authentication enrollment)
      operationId: listVoiceotpEnrollments_2.0
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>You
          can use the following query parameters:<br><br><b>page</b> - Use to identify
          the requested page, or the offset.<br><br><b>limit</b> - Use to define the
          total number of results that are returned per page. The maximum allowed
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: The pagination parameter
          value must be HTML encoded. Use the prefix "pagination=" in the query parameter.<br><br><b>Example</b>:
          Paginate on page=1&limit=5<br>pagination=page%3D1%26limit%3D5'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for Strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for Booleans are = and !=<br>Valid operators
          for Numbers are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>: The search
          parameter value must be HTML encoded. Use the prefix "search=" in the query
          parameter.<br><br><b>Example</b>: Search on id contains "fd45"&enabled=true<br>search=id%20contains%20%22fd45%22%26enabled%3Dtrue'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values to be inclusive or exclusive only. It cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          The filter parameter value must be HTML encoded. Use the prefix "filter="
          in the query parameter.<br><br><b>Examples</b><br>Filter to return only
          id : filter=id<br>Filter to exclude id and enabled : filter=%21id,enabled'
        schema:
          type: string
      responses:
        '200':
          description: The list of voice one-time password enrollments.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VoiceotpEnrollments_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Voice One-time Password
      summary: Create a voice one-time password enrollment.
      description: Create a voice one-time password enrollment.<br/><br/>If the authenticated
        user has the entitlement 'manageEnrollMFAMethodAnyUser', then the 'userId'
        attribute must be present in the request payload. Otherwise, the enrollment
        is associated with the authenticated user.<br><br><b>Entitlements:</b><br>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)
      operationId: createVoiceotpEnrollment_2.0
      requestBody:
        description: A JSON payload that specifies the enrollment data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateVoiceotpEnrollment_2.0"
        required: true
      responses:
        '201':
          description: The enrollment was created.
          headers:
            Location:
              description: The URL of the newly created enrollment.
              schema:
                type: string
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VoiceotpEnrollment_2.0"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request could not be processed due to a conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/factors/voiceotp/transient/verifications":
    post:
      tags:
      - Voice One-time Password
      summary: Create a transient voice one-time password verification.
      description: 'Create a transient voice one-time password verification.<br><br>A
        new verification is created in the PENDING state. A one-time password is sent
        to the specified phone number.<br><br><b>NB</b>: Once a verification''s state
        has changed from PENDING, it will cease to exist after a given time.<br><br><b>Entitlements:</b><br>
        - authnAnyUser (Authenticate any user)<br> - authn (Authenticate self)'
      operationId: createVoiceotpTransient_2.0
      requestBody:
        description: A JSON payload that specifies the verification data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateVoiceotpTransient_2.0"
        required: true
      responses:
        '201':
          description: The verification was created.
          headers:
            Location:
              description: The URL of the newly created verification.
              schema:
                type: string
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VoiceotpTransient_2.0"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/factors/voiceotp/transient/verifications/{trxnId}":
    get:
      tags:
      - Voice One-time Password
      summary: Retrieve a transient voice one-time password verification.
      description: 'Retrieve a transient voice one-time password verification.<br><br><b>NB</b>:
        Once a verification''s state has changed from PENDING, it will cease to exist
        after a given time.<br><br><b>Entitlements:</b><br> - authnAnyUser (Authenticate
        any user)<br> - authn (Authenticate self)'
      operationId: getVoiceotpTransient_2.0
      parameters:
      - name: trxnId
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific verification.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VoiceotpTransient_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Voice One-time Password
      summary: Attempt a transient voice one-time password verification.
      description: 'Attempt a transient voice one-time password verification.<br><br>A
        verification may only be attempted if the state is PENDING.<br><br><b>NB</b>:
        Once a verification''s state has changed from PENDING, it will cease to exist
        after a given time.<br><br><b>NB</b>: When the query parameter ''returnJwt''
        is included and set to ''true'', the response will change from a <b>204</b>
        with no content to a <b>200</b> with a JSON body. This body will contain an
        assertion in the form of a JWT, which serves as cryptographic proof of the
        factor performed. The format of the response body is:<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;"assertion":
        "ey..."<br>}<br><br><b>Entitlements:</b><br> - authnAnyUser (Authenticate
        any user)<br> - authn (Authenticate self)'
      operationId: attemptVoiceotpTransient_2.0
      parameters:
      - name: trxnId
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      - name: returnJwt
        in: query
        description: If included and set to 'true', a JWT will be included in the
          verification response.
        schema:
          type: boolean
      requestBody:
        description: The verification data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VerifyVoiceotpVerification_2.0"
        required: true
      responses:
        '204':
          description: The supplied one-time password was successfully verified.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Voice One-time Password
      summary: Cancel a transient voice one-time password verification.
      description: 'Cancel a transient voice one-time password verification.<br><br>The
        verification is updated with the CANCELED state and can no longer be attempted.<br><br><b>NB</b>:
        Once a verification''s state has changed from PENDING, it will cease to exist
        after a given time.<br><br><b>Entitlements:</b><br> - authnAnyUser (Authenticate
        any user)<br> - authn (Authenticate self)'
      operationId: deleteVoiceotpTransient_2.0
      parameters:
      - name: trxnId
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The verification was cancelled.
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/factors/voiceotp/{id}":
    get:
      tags:
      - Voice One-time Password
      summary: Retrieve a voice one-time password enrollment.
      description: Retrieve a voice one-time password enrollment.<br><br><b>Entitlements:</b><br>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)<br> - readEnrollMFAMethodAnyUser (Read second-factor authentication
        enrollment for all users)<br> - readEnrollMFAMethod (Read own second-factor
        authentication enrollment)
      operationId: getVoiceotpEnrollment_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific enrollment.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VoiceotpEnrollment_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Voice One-time Password
      summary: Update a voice one-time password enrollment.
      description: Update a voice one-time password enrollment.<br><br><b>Entitlements:</b><br>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)
      operationId: updateVoiceotpEnrollment_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: The updated enrollment.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VoiceotpEnrollment_2.0"
        required: true
      responses:
        '204':
          description: The enrollment was updated.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request could not be processed due to a conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Voice One-time Password
      summary: Delete a voice one-time password enrollment.
      description: Delete a voice one-time password enrollment.<br><br><b>Entitlements:</b><br>
        - manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br> - manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)
      operationId: deleteVoiceotpEnrollment_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The enrollment was removed.
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/factors/voiceotp/{id}/verifications":
    post:
      tags:
      - Voice One-time Password
      summary: Create a voice one-time password verification.
      description: 'Create a voice one-time password verification.<br><br>A new verification
        is created in the PENDING state. A one-time password is sent to the phone
        number associated with the enrollment.<br><br><b>NB</b>: Once a verification''s
        state has changed from PENDING, it will cease to exist after a given time.<br><br><b>Entitlements:</b><br>
        - authnAnyUser (Authenticate any user)<br> - authn (Authenticate self)'
      operationId: createVoiceotpVerification_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: A JSON payload that specifies the verification data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateVoiceotpVerification_2.0"
        required: true
      responses:
        '201':
          description: The verification was created.
          headers:
            Location:
              description: The URL of the newly created verification.
              schema:
                type: string
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VoiceotpVerification_2.0"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/factors/voiceotp/{id}/verifications/{trxnId}":
    get:
      tags:
      - Voice One-time Password
      summary: Retrieve a voice one-time password verification.
      description: 'Retrieve a voice one-time password verification.<br><br><b>NB</b>:
        Once a verification''s state has changed from PENDING, it will cease to exist
        after a given time.<br><br><b>Entitlements:</b><br> - authnAnyUser (Authenticate
        any user)<br> - authn (Authenticate self)'
      operationId: getVoiceotpVerification_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      - name: trxnId
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific verification.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VoiceotpVerification_2.0"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Voice One-time Password
      summary: Attempt a voice one-time password verification.
      description: 'Attempt a voice one-time password verification.<br><br>A verification
        may only be attempted if the state is PENDING.<br><br><b>NB</b>: Once a verification''s
        state has changed from PENDING, it will cease to exist after a given time.<br><br><b>NB</b>:
        When the query parameter ''returnJwt'' is included and set to ''true'', the
        response will change from a <b>204</b> with no content to a <b>200</b> with
        a JSON body. This body will contain an assertion in the form of a JWT, which
        serves as cryptographic proof of the factor performed. The format of the response
        body is:<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;"assertion": "ey..."<br>}<br><br><b>Entitlements:</b><br>
        - authnAnyUser (Authenticate any user)<br> - authn (Authenticate self)'
      operationId: attemptVoiceotpVerification_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      - name: trxnId
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      - name: returnJwt
        in: query
        description: If included and set to 'true', a JWT will be included in the
          verification response.
        schema:
          type: boolean
      requestBody:
        description: The verification data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VerifyVoiceotpVerification_2.0"
        required: true
      responses:
        '204':
          description: The supplied one-time password was successfully verified.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Voice One-time Password
      summary: Cancel a voice one-time password verification.
      description: 'Cancel a voice one-time password verification.<br><br>The verification
        is updated with the CANCELED state and can no longer be attempted.<br><br><b>NB</b>:
        Once a verification''s state has changed from PENDING, it will cease to exist
        after a given time.<br><br><b>Entitlements:</b><br> - authnAnyUser (Authenticate
        any user)<br> - authn (Authenticate self)'
      operationId: deleteVoiceotpVerification_2.0
      parameters:
      - name: id
        in: path
        description: The specific enrollment identifier.
        required: true
        schema:
          type: string
      - name: trxnId
        in: path
        description: The specific verification identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The verification was cancelled.
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/authenticators/clients":
    get:
      tags:
      - Authenticator Clients
      summary: Retrieve the list of authenticator clients.
      description: Retrieve the list of authenticator clients for IBM Verify instances
        or custom mobile authenticators that are built from the IBM Verify SDK.<br><br>Authenticator
        clients provide the ability to configure specific access controls of an OAuth
        grant for authenticator registrations that are associated with it.<br><br><b>Entitlements:</b><br>
        - manageAuthenticatorsConfig (Manage authenticator configuration)<br> - readAuthenticatorsConfig
        (Read authenticator configuration)
      operationId: getClients
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>You
          can use the following query parameters:<br><br><b>page</b> - Use to identify
          the requested page, or the offset.<br><br><b>limit</b> - Use to define the
          total number of results that are returned per page. The maximum allowed
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: The pagination parameter
          value must be HTML encoded. Use the prefix "pagination=" in the query parameter.<br><br><b>Example</b>:
          Paginate on page=1&limit=5<br>pagination=page%3D1%26limit%3D5'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for Strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for Booleans are = and !=<br>Valid operators
          for Numbers are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>: The search
          parameter value must be HTML encoded. Use the prefix "search=" in the query
          parameter.<br><br><b>Example</b>: Search on id contains "fd45"&enabled=true<br>search=id%20contains%20%22fd45%22%26enabled%3Dtrue'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values to be inclusive or exclusive only. It cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          The filter parameter value must be HTML encoded. Use the prefix "filter="
          in the query parameter.<br><br><b>Examples</b><br>Filter to return only
          id : filter=id<br>Filter to exclude id and enabled : filter=%21id,enabled'
        schema:
          type: string
      responses:
        '200':
          description: The list of authenticator clients.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Clients"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Authenticator Clients
      summary: Create an authenticator client.
      description: Create an authenticator client for IBM Verify instances or custom
        mobile authenticators that are built from the IBM Verify SDK.<br><br><b>Entitlements:</b><br>
        - manageAuthenticatorsConfig (Manage authenticator configuration)
      operationId: createClient
      requestBody:
        description: A JSON payload that specifies the authenticator client data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateClient"
        required: false
      responses:
        '201':
          description: The authenticator client was created.
          headers:
            Location:
              description: The URL of the newly created object.
              schema:
                type: string
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OIDCClient"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request could not be processed due to a conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/authenticators/clients/{id}":
    get:
      tags:
      - Authenticator Clients
      summary: Retrieve a specific authenticator client.
      description: Retrieve a specific authenticator client for IBM Verify instances
        or custom mobile authenticators that are built from the IBM Verify SDK.<br><br><b>Entitlements:</b><br>
        - manageAuthenticatorsConfig (Manage authenticator configuration)<br> - readAuthenticatorsConfig
        (Read authenticator configuration)
      operationId: getClient
      parameters:
      - name: id
        in: path
        description: The authenticator client identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific authenticator client.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OIDCClient"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Authenticator Clients
      summary: Update the editable attributes of a specific authenticator client.
      description: Update the editable attributes of a specific authenticator client
        for IBM Verify instances or custom mobile authenticators that are built from
        the IBM Verify SDK.<br><br><b>Entitlements:</b><br> - manageAuthenticatorsConfig
        (Manage authenticator configuration)
      operationId: updateClient
      parameters:
      - name: id
        in: path
        description: The authenticator client identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: A JSON payload that specifies the authenticator client data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/OIDCClient"
        required: true
      responses:
        '204':
          description: The update was successful.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request could not be processed due to a conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Authenticator Clients
      summary: Delete a specific authenticator client.
      description: Delete a specific authenticator client for IBM Verify instances
        or custom mobile authenticators that are built from the IBM Verify SDK.<br><br><b>Entitlements:</b><br>
        - manageAuthenticatorsConfig (Manage authenticator configuration)
      operationId: deleteClient
      parameters:
      - name: id
        in: path
        description: The authenticator client identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The authenticator client is removed.
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request could not be processed due to a conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    patch:
      tags:
      - Authenticator Clients
      summary: Update the editable attributes of a specific authenticator client.
      description: Update the editable attributes of a specific authenticator client
        for IBM Verify instances or custom mobile authenticators that are built from
        the IBM Verify SDK.<br><br><b>Entitlements:</b><br> - manageAuthenticatorsConfig
        (Manage authenticator configuration)
      operationId: patchClient
      parameters:
      - name: id
        in: path
        description: The authenticator client identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: A JSON payload that specifies the operations to be performed.
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/PatchOperation_1"
        required: true
      responses:
        '204':
          description: The update was successful.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request could not be processed due to a conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '422':
          description: The request was well-formed but was unable to be followed due
            to semantic errors
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/authenticators/clients/{id}/metadata":
    get:
      tags:
      - Authenticator Clients
      summary: Retrieve the metadata of a specific authenticator client.
      description: Retrieve the metadata of a specific authenticator client for IBM
        Verify instances or custom mobile authenticators that are built from the IBM
        Verify SDK.<br><br><b>Entitlements:</b><br> - manageAuthenticatorsConfig (Manage
        authenticator configuration)<br> - readAuthenticatorsConfig (Read authenticator
        configuration)
      operationId: getClientMetadata
      parameters:
      - name: id
        in: path
        description: The authenticator client identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific authenticator clients metadata.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Metadata"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Authenticator Clients
      summary: Update the metadata attributes of an authenticator client.
      description: Update the metadata attributes of an authenticator client for IBM
        Verify instances or custom mobile authenticators that are built from the IBM
        Verify SDK.<br><br><b>Entitlements:</b><br> - manageAuthenticatorsConfig (Manage
        authenticator configuration)
      operationId: updateClientMetadata
      parameters:
      - name: id
        in: path
        description: The authenticator client identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: A JSON payload that specifies the authenticator client data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Metadata"
        required: true
      responses:
        '204':
          description: The update was successful.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    patch:
      tags:
      - Authenticator Clients
      summary: Update the metadata attributes of an authenticator client.
      description: Update the metadata attributes of an authenticator client for IBM
        Verify instances or custom mobile authenticators that are built from the IBM
        Verify SDK.<br><br><b>Entitlements:</b><br> - manageAuthenticatorsConfig (Manage
        authenticator configuration)
      operationId: patchClientMetadata
      parameters:
      - name: id
        in: path
        description: The authenticator client identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: A JSON payload that specifies the operations to be performed.
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/PatchOperation_1"
        required: true
      responses:
        '204':
          description: The update was successful.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '422':
          description: The request was well-formed but was unable to be followed due
            to semantic errors
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/authnmethods/signature":
    get:
      tags:
      - Signature Authentication Configuration
      summary: Retrieve the signature authentication methods configuration.
      description: Retrieve the configuration of all signature authentication methods
        that is used in IBM Verify instances or in the custom mobile authenticators
        that are built from the IBM Verify SDK.<br><br>The signature authentication
        method provides a means of second factor authentication of an external entity
        through the use of digital signatures. The concept of sub types allows for
        the configuration of different strength signatures for different runtime use
        cases.<br><br><b>Entitlements:</b><br> - readMFAMethods (Read second-factor
        authentication method configuration)<br> - manageMFAMethods (Manage second-factor
        authentication method configuration)
      operationId: getSignatureConfiguration
      responses:
        '200':
          description: The signature methods configuration.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Signature"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Signature Authentication Configuration
      summary: Update the signature authentication method configuration.
      description: Update the signature authentication methods that is used in IBM
        Verify instances or in the custom mobile authenticators that are built from
        the IBM Verify SDK.<br><br><b>Entitlements:</b><br> - manageMFAMethods (Manage
        second-factor authentication method configuration)
      operationId: putSignatureConfiguration
      requestBody:
        description: A JSON payload that specifies the signature authentication method
          data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Signature"
        required: true
      responses:
        '204':
          description: The update was successful.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    patch:
      tags:
      - Signature Authentication Configuration
      summary: Update the signature authentication methods configuration.
      description: Update the signature authentication methods that is used in IBM
        Verify instances or in the custom mobile authenticators that are built from
        the IBM Verify SDK.<br><br><b>Entitlements:</b><br> - manageMFAMethods (Manage
        second-factor authentication method configuration)
      operationId: patchSignatureConfiguration
      requestBody:
        description: A JSON payload that specifies the operations to be performed.
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/PatchOperation_1"
        required: true
      responses:
        '204':
          description: The update was successful.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '422':
          description: The request was well-formed but was unable to be followed due
            to semantic errors
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/authenticators":
    get:
      tags:
      - Authenticators
      summary: Retrieve the list of registered authenticators.
      description: Retrieve the list of registered authenticators for IBM Verify instances
        or custom mobile authenticators that are built from the IBM Verify SDK.<br><br><b>Entitlements:</b><br>
        - manageAuthenticatorsAnyUser (Manage authenticator registrations for all
        users)<br> - readAuthenticatorsAnyUser (Read authenticator registrations for
        all users)<br> - manageAuthenticators (Manage authenticator registrations
        for yourself)<br> - readAuthenticators (Read authenticator registrations for
        yourself)
      operationId: getAuthenticators
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>You
          can use the following query parameters:<br><br><b>page</b> - Use to identify
          the requested page, or the offset.<br><br><b>limit</b> - Use to define the
          total number of results that are returned per page. The maximum allowed
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: The pagination parameter
          value must be HTML encoded. Use the prefix "pagination=" in the query parameter.<br><br><b>Example</b>:
          Paginate on page=1&limit=5<br>pagination=page%3D1%26limit%3D5'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for Strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for Booleans are = and !=<br>Valid operators
          for Numbers are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>: The search
          parameter value must be HTML encoded. Use the prefix "search=" in the query
          parameter.<br><br><b>Example</b>: Search on id contains "fd45"&enabled=true<br>search=id%20contains%20%22fd45%22%26enabled%3Dtrue'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values to be inclusive or exclusive only. It cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          The filter parameter value must be HTML encoded. Use the prefix "filter="
          in the query parameter.<br><br><b>Examples</b><br>Filter to return only
          id : filter=id<br>Filter to exclude id and enabled : filter=%21id,enabled'
        schema:
          type: string
      responses:
        '200':
          description: The list of authenticator registrations.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Authenticators"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/authenticators/discovery":
    get:
      tags:
      - Authenticators
      summary: Retrieve the list of available authenticator clients.
      description: Retrieve the list of available authenticator clients for IBM Verify
        instances or custom mobile authenticators that are built from the IBM Verify
        SDK.<br><br><b>Entitlements:</b><br> - manageAuthenticatorsAnyUser (Manage
        authenticator registrations for all users)<br> - readAuthenticatorsAnyUser
        (Read authenticator registrations for all users)<br> - manageAuthenticators
        (Manage authenticator registrations for yourself)<br> - readAuthenticators
        (Read authenticator registrations for yourself)
      operationId: getAuthenticatorClients
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>You
          can use the following query parameters:<br><br><b>page</b> - Use to identify
          the requested page, or the offset.<br><br><b>limit</b> - Use to define the
          total number of results that are returned per page. The maximum allowed
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: The pagination parameter
          value must be HTML encoded. Use the prefix "pagination=" in the query parameter.<br><br><b>Example</b>:
          Paginate on page=1&limit=5<br>pagination=page%3D1%26limit%3D5'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for Strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for Booleans are = and !=<br>Valid operators
          for Numbers are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>: The search
          parameter value must be HTML encoded. Use the prefix "search=" in the query
          parameter.<br><br><b>Example</b>: Search on id contains "fd45"&enabled=true<br>search=id%20contains%20%22fd45%22%26enabled%3Dtrue'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values to be inclusive or exclusive only. It cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          The filter parameter value must be HTML encoded. Use the prefix "filter="
          in the query parameter.<br><br><b>Examples</b><br>Filter to return only
          id : filter=id<br>Filter to exclude id and enabled : filter=%21id,enabled'
        schema:
          type: string
      responses:
        '200':
          description: The list of available authenticator clients.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DiscoverClients"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/authenticators/initiation":
    post:
      tags:
      - Authenticators
      summary: Initiate an authenticator registration.
      description: Initiate an authenticator registration for IBM Verify instances
        or custom mobile authenticators that are built from the IBM Verify SDK.<br>A
        QR Code image is returned which can be scanned by IBM Verify, or custom mobile
        authenticators. The content of the QR Code will be used to complete the registration.<br><br><b>Entitlements:</b><br>
        - manageAuthenticatorsAnyUser (Manage authenticator registrations for all
        users)<br> - manageAuthenticators (Manage authenticator registrations for
        yourself)
      operationId: initiateAuthenticator
      parameters:
      - name: qrcodeInResponse
        in: query
        description: If included and set to 'true', and the Accept header of the request
          is 'application/json', then the JSON response payload will include a base64
          encoded representation of the of the QR Code.
        schema:
          type: boolean
      requestBody:
        description: A JSON payload that specifies the initiation data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/InitiateAuthenticator"
        required: true
      responses:
        '200':
          description: An authenticator registration was initiated.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/InitiateAuthenticatorResponse"
            image/png:
              schema:
                "$ref": "#/components/schemas/InitiateAuthenticatorResponse"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
            image/png:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
            image/png:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
            image/png:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/authenticators/registration":
    post:
      tags:
      - Authenticators
      summary: Complete or refresh an authenticator registration.
      description: Complete the registration process or refresh an existing authenticator
        registration for IBM Verify or custom mobile authenticators that are built
        from the IBM Verify SDK.<br>Registrations are associated with an authenticator
        client to provide access to a restricted set of resources. Use this endpoint
        to maintain an active OAuth grant.
      operationId: grantAuthenticator
      parameters:
      - name: skipTotpEnrollment
        in: query
        description: If included and set to 'true' the TOTP authentication method
          enrollment attempt will be skipped. This parameter is only actionable during
          initial authenticator registration.
        schema:
          type: boolean
      - name: metadataInResponse
        in: query
        description: If included and set to 'true’, the JSON response payload will
          guarantee the inclusion of the metadata attribute. This parameter is only
          actionable during refreshing of authenticator registrations.
        schema:
          type: boolean
      requestBody:
        description: A JSON payload that specifies the authenticator data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/GrantAuthenticator"
        required: true
      responses:
        '200':
          description: The registration metadata.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GrantAuthenticatorResponse"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The request could not be processed due to a conflict
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/authenticators/{id}":
    get:
      tags:
      - Authenticators
      summary: Retrieve a specific authenticator registration.
      description: Retrieve a specific authenticator registration for IBM Verify instances
        or custom mobile authenticators that are built from the IBM Verify SDK.<br><br><b>Entitlements:</b><br>
        - manageAuthenticatorsAnyUser (Manage authenticator registrations for all
        users)<br> - readAuthenticatorsAnyUser (Read authenticator registrations for
        all users)<br> - manageAuthenticators (Manage authenticator registrations
        for yourself)<br> - readAuthenticators (Read authenticator registrations for
        yourself)<br> - verifyAuthenticator (Use IBM Verify)
      operationId: getAuthenticator
      parameters:
      - name: id
        in: path
        description: The authenticator registration identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The specific authenticator registration.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Authenticator"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Authenticators
      summary: Update the editable attributes of a specific authenticator registration.
      description: Update the editable attributes of a specific authenticator registration
        for IBM Verify instances or custom mobile authenticators that are built from
        the IBM Verify SDK.<br><br><b>Entitlements:</b><br> - manageAuthenticatorsAnyUser
        (Manage authenticator registrations for all users)<br> - manageAuthenticators
        (Manage authenticator registrations for yourself)
      operationId: updateAuthenticator
      parameters:
      - name: id
        in: path
        description: The authenticator registration identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: A JSON payload that specifies the authenticator registration
          data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Authenticator"
        required: true
      responses:
        '204':
          description: The update was successful.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Authenticators
      summary: Delete a specific authenticator registration.
      description: Delete a specific authenticator registration for IBM Verify instances
        or custom mobile authenticators that are built from the IBM Verify SDK.<br><br><b>Entitlements:</b><br>
        - manageAuthenticatorsAnyUser (Manage authenticator registrations for all
        users)<br> - manageAuthenticators (Manage authenticator registrations for
        yourself)
      operationId: deleteAuthenticator
      parameters:
      - name: id
        in: path
        description: The authenticator registration identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The authenticator registration was removed.
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    patch:
      tags:
      - Authenticators
      summary: Update the editable attributes of a specific authenticator registration.
      description: Update the editable attributes of a specific authenticator registration
        for IBM Verify instances or custom mobile authenticators that are built from
        the IBM Verify SDK.<br><br><b>Entitlements:</b><br> - manageAuthenticatorsAnyUser
        (Manage authenticator registrations for all users)<br> - manageAuthenticators
        (Manage authenticator registrations for yourself)
      operationId: patchAuthenticator
      parameters:
      - name: id
        in: path
        description: The authenticator registration identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: A JSON payload that specifies the operations to be performed.
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/PatchOperation_1"
        required: true
      responses:
        '204':
          description: The update was successful.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '422':
          description: The request was well-formed but was unable to be followed due
            to semantic errors
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/authenticators/{id}/verifications":
    get:
      tags:
      - Authenticators
      summary: Retrieve the list of verification transactions.
      description: Retrieve the list of verification transactions that are associated
        with an authenticator registration.<br><br><b>Entitlements:</b><br> - manageAuthenticatorsAnyUser
        (Manage authenticator registrations for all users)<br> - readAuthenticatorsAnyUser
        (Read authenticator registrations for all users)<br> - manageAuthenticators
        (Manage authenticator registrations for yourself)<br> - readAuthenticators
        (Read authenticator registrations for yourself)<br> - authnAnyUser (Authenticate
        any user)<br> - authn (Authenticate self)<br> - verifyAuthenticator (Use IBM
        Verify)
      operationId: getVerifications
      parameters:
      - name: id
        in: path
        description: The authenticator registration identifier.
        required: true
        schema:
          type: string
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>You
          can use the following query parameters:<br><br><b>page</b> - Use to identify
          the requested page, or the offset.<br><br><b>limit</b> - Use to define the
          total number of results that are returned per page. The maximum allowed
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: The pagination parameter
          value must be HTML encoded. Use the prefix "pagination=" in the query parameter.<br><br><b>Example</b>:
          Paginate on page=1&limit=5<br>pagination=page%3D1%26limit%3D5'
        schema:
          type: string
      - name: sort
        in: query
        description: 'Sorts the returned results.<br><br>Each attribute must be prefixed
          with either + for ascending or - for descending. <br><br>Use a comma (,)
          to separate multiple attributes.<br><br><b>Note</b>: The sort parameter
          value must be HTML encoded. Use the prefix "sort=" in the query parameter.<br><br><b>Example</b>:
          Sort on -enabled,+id<br>sort=-enabled%2C%2Bid'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for Strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for Booleans are = and !=<br>Valid operators
          for Numbers are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>: The search
          parameter value must be HTML encoded. Use the prefix "search=" in the query
          parameter.<br><br><b>Example</b>: Search on id contains "fd45"&enabled=true<br>search=id%20contains%20%22fd45%22%26enabled%3Dtrue'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values to be inclusive or exclusive only. It cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          The filter parameter value must be HTML encoded. Use the prefix "filter="
          in the query parameter.<br><br><b>Examples</b><br>Filter to return only
          id : filter=id<br>Filter to exclude id and enabled : filter=%21id,enabled'
        schema:
          type: string
      responses:
        '200':
          description: The list of verification transactions.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Verifications"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Authenticators
      summary: Initiate a verification transaction.
      description: Initiate a verification transaction that is associated with an
        authenticator registration.<br><br>The transaction specifies the authentication
        methods that the user must complete. This request creates a transaction and
        sends a push notification to the associated authenticator.<br><br>The transaction
        will remain in a PENDING state until one or more of the following conditions
        occur:<br> - All or one of the requested authentication methods is successfully
        validated based on the transaction logic.<br> - One or none of the requested
        authentication methods fails the validation based on the transaction logic.<br>
        - The transaction is denied for any reason.<br> - The transaction is canceled.<br>
        - The transaction expires.<br><br><b>Entitlements:</b><br> - authnAnyUser
        (Authenticate any user)<br> - authn (Authenticate self)
      operationId: initiateVerification
      parameters:
      - name: id
        in: path
        description: The authenticator registration identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: A JSON payload that specifies the verification transaction data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/InitiateVerification"
        required: true
      responses:
        '202':
          description: The verification transaction has been accepted.
          headers:
            Location:
              description: The URL of the newly created verification transaction.
              schema:
                type: string
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Verification"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '502':
          description: An invalid response was received from the upstream server
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/authenticators/{id}/verifications/{txrnId}":
    get:
      tags:
      - Authenticators
      summary: Retrieve a specific verification transaction.
      description: Retrieve a specific verification transaction that is associated
        with an authenticator registration.<br><br><b>Entitlements:</b><br> - manageAuthenticatorsAnyUser
        (Manage authenticator registrations for all users)<br> - readAuthenticatorsAnyUser
        (Read authenticator registrations for all users)<br> - manageAuthenticators
        (Manage authenticator registrations for yourself)<br> - readAuthenticators
        (Read authenticator registrations for yourself)<br> - authnAnyUser (Authenticate
        any user)<br> - authn (Authenticate self)<br> - verifyAuthenticator (Use IBM
        Verify)
      operationId: getVerification
      parameters:
      - name: id
        in: path
        description: The authenticator registration identifier.
        required: true
        schema:
          type: string
      - name: txrnId
        in: path
        description: The verification transaction identifier.
        required: true
        schema:
          type: string
      - name: returnJwt
        in: query
        description: If included and set to 'true', a JWT will be included in the
          verification response.
        schema:
          type: boolean
      responses:
        '200':
          description: The specific verification transaction.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Verification"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Authenticators
      summary: Complete a specific verification transaction.
      description: 'Complete a specific verification transaction that is associated
        with an authenticator registration.<br><br>This request fulfills a second
        factor authentication challenge from the associated authenticator registration.<br><br><b>NB</b>:
        When the query parameter ''returnJwt'' is included and set to ''true'', the
        response will change from a <b>204</b> with no content to a <b>200</b> with
        a JSON body. This body will contain an assertion in the form of a JWT, which
        serves as cryptographic proof of the factor performed. The format of the response
        body is:<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;"assertion": "ey..."<br>}<br><br><b>Entitlements:</b><br>
        - verifyAuthenticator (Use IBM Verify)'
      operationId: fulfillVerification
      parameters:
      - name: id
        in: path
        description: The authenticator registration identifier.
        required: true
        schema:
          type: string
      - name: txrnId
        in: path
        description: The verification transaction identifier.
        required: true
        schema:
          type: string
      - name: returnJwt
        in: query
        description: If included and set to 'true', a JWT will be included in the
          verification response.
        schema:
          type: boolean
      requestBody:
        description: A JSON payload that specifies the verification data.
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/FulfillVerification"
        required: true
      responses:
        '204':
          description: The verification completed successfully.
          content: {}
        '400':
          description: The signedData cannot be verified with the enrolled public
            key.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/FulfillVerificationFailedResponse"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/authnmethods/password":
    get:
      tags:
      - Password Authentication
      summary: Retrieve the list of valid password based identity sources.
      description: Obtain the list of currently configured and available password
        identity sources for this tenant.<br><br><b>Entitlements:</b><br> - authnAnyUser
        (authnAnyUser)
      operationId: getPasswordMethods
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>You
          can use the following query parameters:<br><br><b>count</b> - Use to define
          the total number of results that are returned from the data store. The maximum
          allowed value is 1000.<br><br><b>page</b> - Use to identify the requested
          page, or the offset.<br><br><b>limit</b> - Use to define the total number
          of results that are returned per page. The maximum allowed value is 1000.<br><br>A
          maximum of 200 results are returned if no pagination query parameters are
          passed.<br><br><b>Note</b>: If you are not using the Swagger UI, the pagination
          parameter value must be HTML encoded. Use the prefix "pagination=" in the
          query parameter.<br><br><b>Example</b>: Paginate on count=10&page=1&limit=5<br>pagination=count%3D10%26page%3D1%26limit%3D5'
        schema:
          type: string
      - name: sort
        in: query
        description: 'Sorts the returned results.<br><br>Each attribute must be prefixed
          with either + for ascending or - for descending. <br><br>Use a comma (,)
          to separate multiple attributes.<br><br><b>Note</b>: If you are not using
          the Swagger UI, the sort parameter value must be HTML encoded. Use the prefix
          "sort=" in the query parameter.<br><br><b>Example</b>: Sort on -enabled,+id<br>sort=-enabled%2C%2Bid'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for Strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for Booleans are = and !<br>Valid operators
          for Numbers are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>: If you
          are not using the Swagger UI, the search parameter value must be HTML encoded.
          Use the prefix "search=" in the query parameter.<br><br><b>Example</b>:
          Search on id contains "fd45"&enabled=true<br>search=id%20contains%20%22fd45%22%26enabled%3Dtrue'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values to be inclusive or exclusive only. It cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          If you are not using the Swagger UI, the filter parameter value must be
          HTML encoded. Use the prefix "filter=" in the query parameter.<br><br><b>Examples</b><br>Filter
          to return only id : filter=id<br>Filter to exclude id and enabled : filter=%21id,enabled'
        schema:
          type: string
      responses:
        '200':
          description: The list of valid password based identity sources.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IdentitySources"
        '401':
          description: The unauthenticated user does not have permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/authnmethods/password/{id}":
    put:
      tags:
      - Password Authentication
      summary: Change a user's password for an on-premise identity source.
      description: Change a user's password for an on-premise identity source using
        the provided credentials.
      operationId: changePassword
      parameters:
      - name: id
        in: path
        description: The password identity source identifier.
        required: true
        schema:
          type: string
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply to email messages.
        schema:
          type: string
      requestBody:
        description: A JSON payload containing the username and passwords.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PasswordChange"
        required: true
      responses:
        '204':
          description: The update was successful.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    post:
      tags:
      - Password Authentication
      summary: Attempt password authentication with an identity source.
      description: Authenticate with a password based identity source using the request's
        credentials.<br><br><b>Entitlements:</b><br> - authnAnyUser (authnAnyUser)
      operationId: authenticateWithPassword
      parameters:
      - name: id
        in: path
        description: The password identity source identifier to authenticate with.
        required: true
        schema:
          type: string
      - name: returnJwt
        in: query
        description: If included and set to 'true', a JWT will be included in the
          verification response.
        schema:
          type: boolean
      requestBody:
        description: A JSON payload containing the username and password to authenticate
          with.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PasswordAuthentication"
        required: true
      responses:
        '200':
          description: Authentication was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BHUser"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/authnmethods/password/{id}/reset":
    post:
      tags:
      - Password Authentication
      summary: Reset a user's password for an on-premise identity source.
      description: Reset a user's password for an on-premise identity source.<br><br><b>Entitlements:</b><br>-
        resetPassword (Can reset own password.)<br>- resetPasswordAnyUser (Can reset
        password for other users.)
      operationId: resetPassword
      parameters:
      - name: id
        in: path
        description: The password identity source identifier.
        required: true
        schema:
          type: string
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply to email messages.
        schema:
          type: string
      requestBody:
        description: A JSON payload containing the username.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PasswordReset"
        required: true
      responses:
        '204':
          description: The reset was successful.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/authnmethods/signatures":
    get:
      tags:
      - Signature Authentication
      summary: Retrieve the list of signature enrollments.
      description: Retrieve the list of enrollments that use signature as the authentication
        method.<br><br>The signature authentication method refers to the use of a
        digital signature as a second factor to authenticate an external entity.<br><br><b>Entitlements:</b><br>-
        manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br>- manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)<br>- readEnrollMFAMethodAnyUser (Read second-factor authentication
        enrollment for all users)<br>- readEnrollMFAMethod (Read own second-factor
        authentication enrollment)
      operationId: getSignatureMethods
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>You
          can use the following query parameters:<br><br><b>page</b> - Use to identify
          the requested page, or the offset.<br><br><b>limit</b> - Use to define the
          total number of results that are returned per page. The maximum allowed
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: The pagination parameter
          value must be HTML encoded. Use the prefix "pagination=" in the query parameter.<br><br><b>Example</b>:
          Paginate on page=1&limit=5<br>pagination=page%3D1%26limit%3D5'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for Strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for Booleans are = and !=<br>Valid operators
          for Numbers are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>: The search
          parameter value must be HTML encoded. Use the prefix "search=" in the query
          parameter.<br><br><b>Example</b>: Search on id contains "fd45"&enabled=true<br>search=id%20contains%20%22fd45%22%26enabled%3Dtrue'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values to be inclusive or exclusive only. It cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          The filter parameter value must be HTML encoded. Use the prefix "filter="
          in the query parameter.<br><br><b>Examples</b><br>Filter to return only
          id : filter=id<br>Filter to exclude id and enabled : filter=%21id,enabled'
        schema:
          type: string
      - name: _embedded
        in: query
        description: If included and set to 'true', the enrollments will include the
          associated authenticator.
        schema:
          type: boolean
      responses:
        '200':
          description: The list of enrollments that use signature as the authentication
            method.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetSignatureMethodsResponse"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Signature Authentication
      summary: Enroll a signature authentication method.
      description: Enroll one or more instances of a signature-based authentication
        method.<br><br>Authentication method enrollments are associated with a user
        ('owner') and an authenticator ('authenticatorId') which are both identified
        through the access token. The authenticator ID must be signed to help verify
        the public key. Provide the signature in the enrollment request by using the
        'signedData' attribute.<br><br>You can enroll multiple instances of a signature
        methodType in a single request but you cannot enroll more than one instance
        of the subType per authenticatorId. The response payload will indicate which
        enrollment requests failed and succeeded.<br><br><b>Entitlements:</b><br>-
        verifyAuthenticator (Use IBM Verify)
      operationId: enrollSignatureMethod
      parameters:
      - name: onlyMultiStatus
        in: query
        description: If included and set to 'true', a '207 Multi-Status' response
          is returned instead of a '201 Created'.
        schema:
          type: boolean
      requestBody:
        description: A JSON payload that specifies the enrollment data.
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/EnrollSignatureMethod"
        required: true
      responses:
        '201':
          description: All enrollments were created.
          headers:
            Location:
              description: The URL that is associated with the first enrollment.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/SignatureMethod"
        '207':
          description: Some of the enrollment requests failed.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EnrollSignatureMethodsPartialResponse"
        '400':
          description: All enrollment requests failed.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/EnrollSignatureMethodFailedResponse"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/authnmethods/signatures/{id}":
    get:
      tags:
      - Signature Authentication
      summary: Retrieve a specific signature enrollment.
      description: Retrieve a specific enrollment of a signature authentication method.<br><br><b>Entitlements:</b><br>-
        manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br>- manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)<br>- readEnrollMFAMethodAnyUser (Read second-factor authentication
        enrollment for all users)<br>- readEnrollMFAMethod (Read own second-factor
        authentication enrollment)<br>- verifyAuthenticator (Use IBM Verify)
      operationId: getSignatureMethod
      parameters:
      - name: id
        in: path
        description: The signature enrollment identifier.
        required: true
        schema:
          type: string
      - name: _embedded
        in: query
        description: If included and set to 'true', the enrollment will include the
          associated authenticator.
        schema:
          type: boolean
      responses:
        '200':
          description: The signature authentication method enrollment.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetSignatureMethodResponse"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Signature Authentication
      summary: Update the editable attributes of a specific signature enrollment.
      description: Update a specific enrollment of a signature authentication method.
        Edit its attributes.<br><br><b>Entitlements:</b><br>- manageEnrollMFAMethodAnyUser
        (Manage second-factor authentication enrollment for all users)<br>- manageEnrollMFAMethod
        (Manage own second-factor authentication enrollment)
      operationId: updateSignatureMethod
      parameters:
      - name: id
        in: path
        description: The signature enrollment identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: A JSON payload that specifies the signature enrollment data.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SignatureMethod"
        required: true
      responses:
        '204':
          description: The update was successful.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Signature Authentication
      summary: Delete a specific signature enrollment.
      description: Delete a specific enrollment of a signature authentication method.<br><br><b>Entitlements:</b><br>-
        manageEnrollMFAMethodAnyUser (Manage second-factor authentication enrollment
        for all users)<br>- manageEnrollMFAMethod (Manage own second-factor authentication
        enrollment)
      operationId: deleteSignatureMethod
      parameters:
      - name: id
        in: path
        description: The signature enrollment identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The enrollment was removed.
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    patch:
      tags:
      - Signature Authentication
      summary: Update the editable attributes of a specific signature enrollment.
      description: Update a specific enrollment of a signature authentication method.
        Edit its attributes.<br><br><b>Entitlements:</b><br>- manageEnrollMFAMethodAnyUser
        (Manage second-factor authentication enrollment for all users)<br>- manageEnrollMFAMethod
        (Manage own second-factor authentication enrollment)
      operationId: patchSignatureMethod
      parameters:
      - name: id
        in: path
        description: The signature enrollment identifier.
        required: true
        schema:
          type: string
      requestBody:
        description: A JSON payload that specifies the operations to be performed.
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/PatchOperation_1"
        required: true
      responses:
        '204':
          description: All patch operations were successful.
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unauthorized"
        '403':
          description: The authenticated user does not have the permissions to perform
            the requested operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '422':
          description: The request was well-formed but was unable to be followed due
            to semantic errors
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '501':
          description: Access to the requested resource is disabled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/usc/password/resetter":
    post:
      tags:
      - User Self Care API
      summary: Initiate a reset password request by using an authentication mechanism.
      description: 'Entitlements required: resetPassword (Reset password).<br><br>Initiates
        a reset password request for the user. Each step defines a method to verify
        the user''s identity. Valid methods are "emailLink", "emailotp", "smsotp",
        "voiceotp", "totp", "fingerprint", and "userpresence". A transaction identifier,
        steps remaining, and the next step to perform are returned in the response.
        When multiple steps are associated with the transaction, call the POST /v1.0/usc/password/resetter/{trxId}/validator
        API to verify the user''s identity until only one step remains. When one step
        remains, call the PUT /v1.0/usc/password/resetter/{trxId} to verify the last
        step and reset the user''s password.<br><br>The "totp", "fingerprint", and
        "userpresence" verification methods require user enrollment. The "fingerprint"
        method also works with facial recognition.  The "emailotp", "smsotp", and
        "voiceotp" verification methods do not require user enrollment, unless the
        authentication factors tenant configuration specifies "User-enrolled methods
        only".<br><br>When the system cannot reset the password, the audit event that
        is generated contains the cause of the error. <br><br>To use this API, password
        reset must be enabled in the Cloud Directory identity provider. <br>Notifications
        can be branded by passing in the themeId as a query parameter. The templates
        for branding MFA notications are located at "authentication/mfa/".'
      operationId: resetPassword_0
      parameters:
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      requestBody:
        description: The body of the reset password operation.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PwdResetModel"
        required: true
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PwdResetResponseModel"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '429':
          description: Too many requests.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/usc/password/resetter/{trxId}":
    put:
      tags:
      - User Self Care API
      summary: Reset the user's forgotten password.
      description: 'Entitlements required: resetPassword (Reset password).<br><br>Verifies
        the user''s identity by using the last step''s method of verification and
        if successful, changes the user''s password.<br><br>On Success, an email is
        sent that the user''s password changed. <br>The email template for branding
        is at "authentication/login/cloud_directory/password/forgot_password/reset_password_complete.xml".
        <br>Pass in the themeId query parameter to brand the email template for notifications.'
      operationId: resetPasswordComplete
      parameters:
      - name: trxId
        in: path
        description: The transaction identifier for the resetter request.
        required: true
        schema:
          type: string
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      requestBody:
        description: The body of the password resetter operation.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PwdResetCompleteModel"
        required: true
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PwdResetCompleteResponseModel"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '405':
          description: Too many failed authentication attempts. The transaction is
            deleted.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '429':
          description: Too many requests.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/usc/password/resetter/{trxId}/validator":
    post:
      tags:
      - User Self Care API
      summary: 'Validates the authentication attempt that is associated with the current
        step in the reset password flow. '
      description: 'Entitlements required: resetPassword (Reset password).<br><br>The
        validator must be called for each step, until only one step remains.<br>After
        a successful authentication, the step is marked complete and the API initiates
        the next step. The response indicates the number of steps that remain and
        the next step to continue. When only one step remains, call the PUT /v1.0/usc/password/resetter/{trxId}
        API to change the user''s password and complete the transaction.'
      operationId: resetPasswordValidator
      parameters:
      - name: trxId
        in: path
        description: The transaction identifier for the reset password validator request.
        required: true
        schema:
          type: string
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      requestBody:
        description: The body of the reset password validator operation.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ValidatorModel"
        required: false
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PwdResetValidatorResponseModel"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '405':
          description: Too many failed authentication attempts. The transaction is
            deleted.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '429':
          description: Too many requests.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/usc/user/invitation":
    get:
      tags:
      - User Self Care API
      summary: List all invitations.
      description: 'Entitlements required: inviteUser (Invite user).<br><br>This API
        is a public preview and is enabled for a tenant that includes invite user
        beta support.<br><br>Searching, sorting, and paging are supported. A maximum
        of 1000 records are returned for a search query.  By default up to 200 records
        are returned, unless you specify the pagination limit to return.<br><br>Example
        search query:<table><tr><td>search=email="bob@mailinator.com"&sort=+email&pagination=limit=1000&page=1<tr><td>The
        search query URL encoded:<tr><td>search=email%3D%22bob%40mailinator.com%22&sort=%2Bemail&pagination=limit%3D1000%26page%3D1</td></tr></table><br><br>Always
        URL encode query parameter values to ensure that they do not become malformed
        during transmission. <br>'
      operationId: getInvitations
      parameters:
      - name: search
        in: query
        description: "Returns results based on the search criteria.\r\n\r\nThe format
          to use the search query parameter is 'search={parameter}{operator}{value}\r\nThe
          following search parameters are allowed: email.\r\n\r\nValid operators for
          string values are =.\r\n\r\nExample: search=email=\"john@abc.com\""
        schema:
          type: string
      - name: sort
        in: query
        description: "Returns sorted results.\r\nThe following sort parameters are
          allowed: email.\r\nEach sort parameter must be prefixed with either + or
          -.\r\n\r\nExample: Sort attributes by ascending 'email': sort=+email"
        schema:
          type: string
      - name: pagination
        in: query
        description: "Returns results based on the requested limit and page. The following
          pagination parameters are allowed: limit, page\r\nThe limit is 1000 and
          page starts at 1.\r\nExample: pagination=limit=1000&page=1"
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetInvitesResponseModel"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '403':
          description: Not authorized.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
      x-publicAPI: 'true'
    post:
      tags:
      - User Self Care API
      summary: Send users an invitation.
      description: 'Entitlements required: inviteUser (Invite user).<br><br>This API
        is a public preview and is enabled for a tenant that includes invite user
        beta support.<br><br>Send users an invitation to onboard them to use an application.  Upon
        accepting the invitation, the user is optionally created and added to the
        specified groups. Through the group membership, users are automatically given
        the roles and permissions that are assigned to those groups.<br><br>This API
        supports emailing invitations to multiple people in one request. Each invitation
        that is sent is given a transaction ID. The transaction ID is needed to validate
        and complete the invite user transaction. The email contains a link to accept
        the invitation. The email link includes the transaction ID and the OTP as
        query parameters. By default, the link takes you to ISV to process the invited
        user. You can override the link by specifying a baseVerificationUrl in the
        payload.  When you override the link, the application is responsible for processing
        the invited user by calling the PUT on the invitation to complete the transaction.<br><br>The
        adopterId + email combination enables multiple invitations to be sent to the
        same user in different requests. This combination can onboard a user to different
        applications on the same tenant. For example, you can add a user to different
        groups as part of accepting the invitation. Only one invitation to the adopterId
        + email combination is active. When you resend the invitation, the existing
        invitation with that adopterId + email combination is replaced.<br><br>The
        assignment of groups requires the manageUserGroups (Manage users and groups)
        or the manageUserStandardGroups (Manage users and standard groups) permission.
        An admin can further scope the groups that can be assigned to invited users
        by creating a custom admin role and then scope the groups that the manageUserGroups
        permission applies to.<br><br>You can enable or disable user invitations in
        the identity provider that is associated with the realm.<br><br>A maximum
        of 100 invitations and 20 groups can be specified in the payload.<br><br>Notifications
        can be branded by passing in the themeId as a query parameter. The template
        for branding is located at "notifications/user_management/invite/invite_user_email.xml"'
      operationId: inviteUser1
      parameters:
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      requestBody:
        description: The body of the invite user operation.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/InviteUserModel"
        required: true
      responses:
        '207':
          description: Multi-Status
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/InviteUserMultiStatusResponseModel"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '403':
          description: Not authorized.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/usc/user/invitation/{trxId}":
    get:
      tags:
      - User Self Care API
      summary: Retrieve an invitation.
      description: 'Entitlements required: inviteUser (Invite user).<br><br>This API
        is a public preview and is enabled for a tenant that includes invite user
        beta support.<br>'
      operationId: getInvitation
      parameters:
      - name: trxId
        in: path
        description: The transaction identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetInviteResponseModel"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
      x-publicAPI: 'true'
    put:
      tags:
      - User Self Care API
      summary: Complete a user invitation.
      description: 'Entitlements required: inviteUser (Invite user).<br><br>This API
        is a public preview and is enabled for a tenant that includes invite user
        beta support.<br><br>Create the user and add them to groups or add an existing
        user to groups depending on the payload that is passed in. If the user record
        is specified, the user is created and added to the groups. If the user ID
        is specified, the user is added to the groups. If neither is specified, the
        transaction is completed without any further updates to the user. <br><br>This
        API completes the transaction and generates the audit event. If the flow is
        not finished and the email link is expired, the transaction is cleaned up
        automatically.  If successful, the end user is emailed indicating they successfully
        completed the invitation.<br><br>Notifications can be branded by passing in
        the themeId as a query parameter. The template for branding is located at
        "notifications/user_management/invite/invite_user_complete_email.xml"'
      operationId: inviteUserComplete
      parameters:
      - name: trxId
        in: path
        description: The transaction identifier for the user invitation.
        required: true
        schema:
          type: string
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      requestBody:
        description: The body of the user invitation complete operation.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/InviteUserCompleteModel"
        required: false
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/InviteUserCompleteResponseModel"
        '207':
          description: Multi-status.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/InviteUserCompleteMultiStatusResponseModel"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '405':
          description: Too many failed authentication attempts. The transaction is
            deleted.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - User Self Care API
      summary: Cancel an invitation.
      description: 'Entitlements required: inviteUser (Invite user).<br><br>This API
        is a public preview and is enabled for a tenant that includes invite user
        beta support.<br><br>When an invitation is canceled the transaction is deleted.<br>'
      operationId: deleteInvitation
      parameters:
      - name: trxId
        in: path
        description: The transaction identifier.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No content
          content: {}
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
      x-publicAPI: 'true'
  "/v1.0/usc/user/invitation/{trxId}/validator":
    post:
      tags:
      - User Self Care API
      summary: Validate a user invitation.
      description: 'Entitlements required: inviteUser (Invite user).<br><br>This API
        is a public preview and is enabled for a tenant that includes invite user
        beta support.<br><br>Validates the email link that is associated with the
        transaction in the invite user flow. The email link includes a factorTrnxId
        and a uscTrxId as query parameters. Pass the value of the factorTrnxId as
        the otp string in the payload. Pass the value of the uscTrxId as the transaction
        ID path parameter for the API URI. <br>'
      operationId: inviteUserValidator
      parameters:
      - name: trxId
        in: path
        description: The transaction identifier for the user invitation.
        required: true
        schema:
          type: string
      requestBody:
        description: The body of the user invitation validator operation.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ValidatorModel"
        required: false
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/InviteUserValidatorResponseModel"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '405':
          description: Too many failed authentication attempts. The transaction is
            deleted.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '429':
          description: Too many requests.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/usc/username/recovery":
    post:
      tags:
      - User Self Care API
      summary: Initiate a forgot username request by using an authentication mechanism.
      description: 'Entitlements required: recoverUsername (Recover user name).<br><br>Initiates
        a forgot username request for the user. Each step defines a method to verify
        the user''s identity. Valid methods are "email", "emailotp", "smsotp", "voiceotp",
        "totp", "fingerprint", and "userpresence".  A transaction identifier, steps
        remaining, and the next step to perform are returned in the response. When
        multiple steps are associated with the transaction, call the POST /v1.0/usc/username/recovery/{trxId}/validator
        API to verify the user''s identity until only one step remains. When one step
        remains, call the PUT /v1.0/usc/username/recovery/{trxId} to verify the last
        step and recover the user''s user name. The username is delivered via email
        after the user''s identity is verified. The email method sends the username
        directly to the user''s email. The method cannot be combined with other authentication
        mechanisms.<br><br>The "totp", "fingerprint", and "userpresence" verification
        methods require user enrollment. The "fingerprint" method also works with
        facial recognition.  The "emailotp", "smsotp", and "voiceotp" verification
        methods do not require user enrollment, unless the authentication factors
        tenant configuration specifies "User-enrolled methods only".<br><br>When the
        system cannot recover the username, the audit event generated contains the
        cause of the error. <br><br>To use this API, username recovery must be enabled
        in the Cloud Directory identity provider. <br>Notifications can be branded
        by passing in the themeId as a query parameter. The templates for branding
        MFA notications are located at "authentication/mfa/". <br>For the email method,
        the email template for branding is at "authentication/login/cloud_directory/username/username_recovery.xml".
        <br>Pass in the themeId query parameter to brand the templates for notifications.'
      operationId: usernameRecovery
      parameters:
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      requestBody:
        description: The body of the user name recovery operation.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UsernameRecoveryModel"
        required: true
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UsernameRecoveryResponseModel"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '429':
          description: Too many requests.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/usc/username/recovery/{trxId}":
    put:
      tags:
      - User Self Care API
      summary: Recover the user's forgotten user name.
      description: 'Entitlements required: recoverUsername (Recover user name).<br><br>Verifies
        the user''s identity by using the last step''s method of verification and
        if successful, recovers the user''s user name. When an OTP is not required,
        call this method with an empty body to complete the transaction and generate
        the audit event.<br><br>On Success, an email is sent to the user with the
        recovered username. <br>The email template for branding is at "authentication/login/cloud_directory/username/username_recovery.xml".
        <br>Pass in the themeId query parameter to brand the email template for notifications.'
      operationId: usernameRecoveryComplete
      parameters:
      - name: trxId
        in: path
        description: The transaction identifier for the user name recovery request.
        required: true
        schema:
          type: string
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      requestBody:
        description: The body of the user name recovery operation.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UsernameRecoveryCompleteModel"
        required: false
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UsernameRecoveryCompleteResponseModel"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '405':
          description: Too many failed authentication attempts. The transaction is
            deleted.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '429':
          description: Too many requests.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/usc/username/recovery/{trxId}/validator":
    post:
      tags:
      - User Self Care API
      summary: 'Validates the authentication attempt that is associated with the current
        step in the username recovery flow. '
      description: 'Entitlements required: recoverUsername (Recover user name).<br><br>The
        validator must be called for each step, until only one step remains.<br>After
        a successful authentication, the step is marked complete and the API initiates
        the next step. The response indicates the number of steps that remain and
        the next step to continue. When only one step remains, call the PUT //v1.0/usc/username/recovery/{trxId}
        API to recover the user''s user name and complete the transaction.'
      operationId: usernameRecoveryValidator
      parameters:
      - name: trxId
        in: path
        description: The transaction identifier for the user name recovery validator
          request.
        required: true
        schema:
          type: string
      - name: themeId
        in: query
        description: The identifier of the theme that you want to apply.
        schema:
          type: string
      requestBody:
        description: The body of the user name recovery validator operation.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ValidatorModel"
        required: false
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UsernameRecoveryResponseModel"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '405':
          description: Too many failed authentication attempts. The transaction is
            deleted.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '429':
          description: Too many requests.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v2.0/tenant/properties":
    get:
      tags:
      - Tenant Properties API 2.0
      summary: 'Retrieves a list of tenant properties for the specified tenant. '
      description: 'Entitlement required: manageTenantProperties (Manage tenant properties)
        or readTenantProperties (Read tenant properties)'
      operationId: getTenantProperties_0
      responses:
        '200':
          description: The request succeeded.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TenantPropertiesModelV2"
        '400':
          description: The request is invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
      x-publicAPI: 'true'
    put:
      tags:
      - Tenant Properties API 2.0
      summary: Replaces the tenant properties for the specified tenant.
      description: 'The HTTP PUT is used to replace the tenant properties.  For example,
        clients that have previously retrieved the entire list of properties and revised
        it, can replace the properties by using an HTTP PUT.<br><br>Entitlements required:
        manageTenantProperties (Manage tenant properties)<br><br>The following example
        shows a JSON body for the tenant property "accessControlAllowOrigin":<br>
        <table><tr><td>{    "accessControlAllowOrigin": [      {        "regex": false,        "origin":
        "https://www.ibm.com"      }    ]}</td></tr></table><br><br>The following
        example shows a JSON body for the tenant property "targetUrlAllowedHostV2":<br>
        <table><tr><td>{    "targetUrlAllowedHostV2": [      {        "regex": true,        "targetUrl":
        "^https"      },      {        "regex": false,        "targetUrl": "https://tenantname.com"      }    ]}</td></tr></table><br><br>The
        target URL path for the tenant domain is allowed by default, for example,
        https://tenantname.com<br><br>The following example shows a JSON body for
        the tenant property "securityHeaderContentSecurityPolicy":<br> <table><tr><td>{    "securityHeaderContentSecurityPolicy":
        "default-src ''self'' example.com *.example.com"}</td></tr></table><br><br>'
      operationId: putTenantProperties_0
      requestBody:
        description: The tenant properties object that contains the tenant properties
          that are to be modified.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TenantPropertiesModelV2"
        required: true
      responses:
        '200':
          description: The request succeeded.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TenantPropertiesModelV2"
        '400':
          description: The request is invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage_0"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/access/entitlements/{entitlement}/children":
    get:
      tags:
      - Access Management
      summary: Find the children of an entitlement either requestable or requested
        or granted to self.
      operationId: getEntitlementChildrenForSelf
      parameters:
      - name: entitlement
        in: path
        description: Code of the entitlement
        required: true
        schema:
          type: string
      - name: lvl
        in: query
        description: Max depth level in case of nested roles.
        schema:
          type: integer
          format: int32
      - name: includeRights
        in: query
        description: Includes rights for each children if present.
        schema:
          type: boolean
          default: false
      - name: limit
        in: query
        description: The maximum number of elements for a page.
        schema:
          type: integer
          format: int32
          default: 50
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseRestrictedEntitlementChildren"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/access/self":
    post:
      tags:
      - Access Management
      summary: Get user access assignments in active and fulfillment failed state.
      operationId: getAccessAssignments
      parameters:
      - name: details
        in: query
        description: If true the object details information of the other microservices
          will be resolved.
        schema:
          type: boolean
          default: false
      - name: limit
        in: query
        description: The maximum number of elements for a page.
        schema:
          type: integer
          format: int32
          default: 50
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      requestBody:
        description: 'Payload will filter or sort the response based on attribute
          values.</br>Supported attributes for search: name, description, accessType,
          application, status, assignmentSource.</br>Supported attributes for sort:
          name, description.</br></br>`or` operator will be used between multiple
          values of accessType, application, status, assignmentSource attribute.</br>`or`
          operator will be used between name and description attribute.</br>`and`
          operator will be used between accessInfo (which is combination of name &
          description attribute), accessType, application, status, assignmentSource
          attribute.'
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AssignmentSearch"
        required: false
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseAccessAssignment"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/access/self/resources/{resourceType}":
    get:
      tags:
      - Access Management
      summary: Get user access assignments statistics.
      operationId: getAccessAssignmentsStats
      parameters:
      - name: resourceType
        in: path
        description: The filter for the access resource type
        required: true
        schema:
          type: string
          enum:
          - status
          - application
          - accessType
          - assignmentSource
      - name: limit
        in: query
        description: The maximum number of elements for a page.
        schema:
          type: integer
          format: int32
          default: 50
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseAccessStatistics"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/access/users/{user}":
    post:
      tags:
      - Access Management
      summary: Fetch the access assignments of specific user.
      operationId: getAccessAssignmentsForOthers
      parameters:
      - name: user
        in: path
        description: The code of the user whose accesses needs to be fetched.
        required: true
        schema:
          type: string
      - name: details
        in: query
        description: If true the object details information of the other microservices
          will be resolved.
        schema:
          type: boolean
          default: false
      - name: limit
        in: query
        description: The maximum number of elements for a page.
        schema:
          type: integer
          format: int32
          default: 50
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      - name: requestId
        in: header
        description: Id of the request establishing relation between user and caller.
        schema:
          type: string
      requestBody:
        description: 'Payload will filter or sort the response based on attribute
          values.</br>Supported attributes for search: name, description, status(default
          value is ''active'').</br>Supported attributes for sort: name, description.</br></br>`or`
          operator will be used between multiple values of status attribute.</br>`or`
          operator will be used between name and description attribute.</br>`and`
          operator will be used between accessInfo (which is combination of name &
          description attribute) and status attribute.'
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RestrictedAssignmentSearch"
        required: false
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseAccessAssignment"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Approver is not allowed to view accesses of requester.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/access/users/{user}/entitlements/{entitlement}/children":
    get:
      tags:
      - Access Management
      summary: Find the children of an application entitlement either requestable
        or requested or granted to a specific user.
      operationId: getEntitlementChildrenForOthers
      parameters:
      - name: user
        in: path
        description: The code of the user whose accesses needs to be fetched.
        required: true
        schema:
          type: string
      - name: entitlement
        in: path
        description: Code of the entitlement
        required: true
        schema:
          type: string
      - name: lvl
        in: query
        description: Max depth level in case of nested roles.
        schema:
          type: integer
          format: int32
      - name: includeRights
        in: query
        description: Includes rights for each children if present.
        schema:
          type: boolean
          default: false
      - name: limit
        in: query
        description: The maximum number of elements for a page.
        schema:
          type: integer
          format: int32
          default: 50
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      - name: requestId
        in: header
        description: Id of the request establishing relation between user and caller.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseRestrictedEntitlementChildren"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Approver is not allowed to view accesses of requester.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/admin/entitlements":
    post:
      tags:
      - Admin Entitlement Management
      summary: Create an admin entitlement.
      description: 'Entitlements required: tenantadmin [Tenant Administrator].'
      operationId: createAdminEntitlement
      parameters:
      - name: resourceType
        in: query
        description: Resource type of the admin entitlement.
        schema:
          type: string
          enum:
          - user
          - application
          - group
          - custom
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AdminEntitlementWithChildren"
        required: false
      responses:
        '201':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CodeResult"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/admin/entitlements/assignments/search":
    post:
      tags:
      - Admin Entitlement Management
      summary: Get the list of admin assignments.
      description: 'If more than one parameter is specified in the filter object,
        "AND" is used as logical operator.</br>Entitlements required: tenantadmin
        [Tenant Administrator].'
      operationId: findAdminAssignments
      parameters:
      - name: details
        in: query
        description: If true the <object>Details field will be filled
        schema:
          type: boolean
          default: false
      - name: user
        in: query
        description: The user code to filter.
        schema:
          type: string
      - name: group
        in: query
        description: The group code to filter.
        schema:
          type: string
      - name: enable
        in: query
        description: Filter to return the direct assignments enabled or not.
        schema:
          type: boolean
      - name: assignmentType
        in: query
        description: The assignment type filter.
        schema:
          type: string
          enum:
          - USER
          - GROUP
      - name: isDelegated
        in: query
        description: Retrieve only assignments that are delegated.
        schema:
          type: boolean
      - name: limit
        in: query
        description: The maximum number of elements for page.
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      requestBody:
        description: The object filter.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AdminEntitlementFilter"
        required: false
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseAdminAssignment"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/admin/entitlements/group/{group}":
    post:
      tags:
      - Admin Entitlement Management
      summary: Grant or revoke one or more admin entitlements to a group.
      description: 'Entitlements required: tenantadmin [Tenant Administrator].'
      operationId: grantRevokeAdminEntitlementToGroup
      parameters:
      - name: group
        in: path
        description: The code of the group.
        required: true
        schema:
          type: string
      requestBody:
        description: The list of admin entitlements to grant or revoke.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ListBulkGrantRevokeGrantAdminEntitlementToGroupRevokeEntitlementToGroup"
        required: false
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/BulkGrantRevokeResponse"
        '207':
          description: There was a problem with one or more entities in the list.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BulkGrantRevokeResponse"
        '400':
          description: An application status error occurred for one or more operations.
            The error code and description are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '413':
          description: Request entity too large.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/admin/entitlements/review/search":
    post:
      tags:
      - Admin Entitlement Management
      summary: Get the list of user added to or removed from dynamic admin entitlement.
      description: 'If more than one parameter is specified in the filter object,
        "AND" is used as logical operator.</br>Entitlements required: tenantadmin
        [Tenant Administrator].'
      operationId: findReviewAdminAssignments
      parameters:
      - name: user
        in: query
        description: The user name to filter.
        schema:
          type: string
      - name: details
        in: query
        description: If true the Details field will be filled.
        schema:
          type: boolean
          default: false
      - name: operationType
        in: query
        description: The user added or removed filter.
        schema:
          type: string
          enum:
          - ADDED
          - REMOVED
      - name: limit
        in: query
        description: The maximum number of elements for page.
        schema:
          type: integer
          format: int32
          default: 200
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      requestBody:
        description: The object filter.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AdminEntitlementFilter"
        required: false
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseReviewAdminAssignment"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/admin/entitlements/search":
    post:
      tags:
      - Admin Entitlement Management
      summary: Get the list of admin entitlements.
      description: 'Entitlements required: tenantadmin [Tenant Administrator].'
      operationId: findAdminEntitlements
      parameters:
      - name: search
        in: query
        description: 'Search filter. Supported attributes: code, name, description,
          type, subtype, ootb, subscription, status</br></br>Allowable values for
          status attribute: waiting, inprogress, reviewpublish, failed, active, active_waiting,
          active_inprogress, active_reviewpublish, active_failed, waiting_for_deletion,
          deleting</br></br>Syntax:</br>- Operators for `strings` are **=**, **!=**.</br>-
          Operators for `booleans` are **=**, **!=**.</br>- Operators for `numbers`
          are **&gt;**, **&lt;**, **&gt;=**, **&lt;=**, **=**, **!=**.</br>- Logical
          operators are **&**, **|**.</br>- Parentheses to explicitly specify the
          intended precedence of statements.</br>- Use double quotes for values of
          type `String`.'
        schema:
          type: string
      - name: sort
        in: query
        description: 'Sort the result by attribute values. Supported attributes: name,
          description, type, subtype, ootb, subscription.</br></br>(**+** ascending,
          **-** descending)</br>Default is ascending.'
        schema:
          type: string
      - name: details
        in: query
        description: If true the <object>Details field will be filled
        schema:
          type: boolean
          default: false
      - name: properties
        in: query
        description: If true the result will contain also the entitlement properties
        schema:
          type: boolean
          default: false
      - name: limit
        in: query
        description: The maximum number of elements for a page.
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseAdminEntitlement"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/admin/entitlements/user/{user}":
    post:
      tags:
      - Admin Entitlement Management
      summary: Grant or revoke one or more admin entitlements to a user.
      description: 'Entitlements required: tenantadmin [Tenant Administrator].'
      operationId: grantRevokeAdminEntitlementToUser
      parameters:
      - name: user
        in: path
        description: The code of the user.
        required: true
        schema:
          type: string
      requestBody:
        description: The list of admin entitlements to grant or revoke.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ListBulkGrantRevokeAdminEntitlementToUserAdminEntitlementToUser"
        required: true
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/BulkGrantRevokeResponse"
        '207':
          description: There was a problem with one or more entities in the list.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BulkGrantRevokeResponse"
        '400':
          description: An application status error occurred for one or more operations.
            The error code and description are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '413':
          description: Request entity too large.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/admin/entitlements/{entitlement}":
    get:
      tags:
      - Admin Entitlement Management
      summary: Get an admin entitlement.
      description: 'Entitlements required: tenantadmin [Tenant Administrator].'
      operationId: getAdminEntitlement
      parameters:
      - name: details
        in: query
        description: If true the <object>Details field will be filled
        schema:
          type: boolean
          default: false
      - name: entitlement
        in: path
        description: Code of the admin entitlement.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AdminEntitlementDetailsResult"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
    post:
      tags:
      - Admin Entitlement Management
      summary: Grant or revoke an admin entitlement to one or more users and groups.
      description: 'Entitlements required: tenantadmin [Tenant Administrator].'
      operationId: grantRevokeAdminEntitlementBulk
      parameters:
      - name: entitlement
        in: path
        description: The code of the entitlement.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/BulkGrantRevokeUserGroupToAdminEntitlementGrantUserGroupToEntitlementRevoke"
        required: true
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/BulkGrantRevokeResponse"
        '207':
          description: There was a problem with one or more entities in the list.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BulkGrantRevokeResponse"
        '400':
          description: An application status error occurred for one or more operations.
            The error code and description are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '413':
          description: Request entity too large.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Admin Entitlement Management
      summary: Delete an admin entitlement.
      description: 'Entitlements required: tenantadmin [Tenant Administrator].'
      operationId: deleteAdminEntitlement
      parameters:
      - name: entitlement
        in: path
        description: Code of the admin entitlement to delete.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The request was successful.
          content: {}
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
    patch:
      tags:
      - Admin Entitlement Management
      summary: Update an admin entitlement.
      description: 'Entitlements required: tenantadmin [Tenant Administrator].'
      operationId: updateAdminEntitlement
      parameters:
      - name: entitlement
        in: path
        description: Code of the admin entitlement to update.
        required: true
        schema:
          type: string
      requestBody:
        description: The body of the admin entitlement to update.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PatchAdminEntitlement"
        required: true
      responses:
        '204':
          description: The request was successful.
          content: {}
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
            text/plain:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/admin/entitlements/{entitlement}/children":
    get:
      tags:
      - Admin Entitlement Management
      summary: Get the children of an admin entitlement.
      description: 'Entitlements required: tenantadmin [Tenant Administrator].'
      operationId: getAdminEntitlementsChildren
      parameters:
      - name: entitlement
        in: path
        description: The code of the admin entitlement.
        required: true
        schema:
          type: string
      - name: search
        in: query
        description: 'The **search** query parameter allow the following values:<br/>`code`
          search by entitlement code.<br/>`name` search by entitlement name.</br>`description`
          search by entitlement description.</br>`type` search by entitlement type.</br>`subtype`
          search by entitlement sub type.</br>`ootb` search the ootb entitlements
          [1 if you want to search the ootb entitlement].</br>`status` search by entitlement
          status.</br></br>Allowable values for status attribute: waiting, inprogress,
          reviewpublish, failed, active, active_waiting, active_inprogress, active_reviewpublish,
          active_failed, waiting_for_deletion, deleting</br></br>Syntax:</br>- Operators
          for `strings` are **=**, **!=**.</br>- Operators for `booleans` are **=**,
          **!=**.</br>- Operators for `numbers` are **&gt;**, **&lt;**, **&gt;=**,
          **&lt;=**, **=**, **!=**.</br>- Logical operators are **&**, **|**.</br>-
          Parentheses to explicitly specify the intended precedence of statements.</br>-
          `String` search values uses double quoted, `numbers` and `booleans` will
          not.'
        schema:
          type: string
      - name: lvl
        in: query
        description: Max depth level in case of nested roles.
        schema:
          type: integer
          format: int32
      - name: details
        in: query
        description: If true the <object>Details field will be filled
        schema:
          type: boolean
          default: false
      - name: limit
        in: query
        description: The maximum number of elements for a page.
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseAdminEntitlementChildren"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/BulkAddRemoveChildrenResponse"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
    post:
      tags:
      - Admin Entitlement Management
      summary: Add or remove one or more children for an admin entitlement.
      description: 'In the <b>add</b> operation you can use two kinds of payload.
        The first is to use only the <b>code</b> attribute to add an entitlement that
        already exists as child. The second is to use the <b>name</b> and <b>type</b>
        attributes. In this case if the child entitlement don''t exist, it will be
        created and added as child.</br></br>Entitlements required: tenantadmin [Tenant
        Administrator].'
      operationId: addRemoveAdminEntitlementsChildren
      parameters:
      - name: entitlement
        in: path
        description: The code of the admin entitlement.
        required: true
        schema:
          type: string
      requestBody:
        description: The list of children to add or remove.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/BulkAddRemoveAdminChildrenAdminEntitlement"
        required: false
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/BulkAddRemoveChildrenResponse"
        '207':
          description: There was a problem with one or more entities in the list.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BulkGrantRevokeResponse"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '413':
          description: Request entity too large.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/admin/entitlements/{entitlement}/{operation}":
    patch:
      tags:
      - Admin Entitlement Management
      summary: Publish or discard an admin entitlement.
      description: 'Entitlements required: tenantadmin [Tenant Administrator].'
      operationId: publishDiscardAdminEntitlement
      parameters:
      - name: entitlement
        in: path
        description: Code of the admin entitlement to publish or discard.
        required: true
        schema:
          type: string
      - name: operation
        in: path
        description: Operation to perform after review.
        required: true
        schema:
          type: string
          enum:
          - publish
          - discard
      responses:
        '204':
          description: The request was successful.
          content: {}
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
            text/plain:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/assignments/{assignment}/rights":
    get:
      tags:
      - Entitlement Management
      summary: Get the rights values associated to an assignment.
      description: 'Entitlements required: tenantadmin [Tenant Administrator], manageAppAccessOwner
        [Manage Application Entitlements].'
      operationId: getAssignmentRightValues
      parameters:
      - name: assignment
        in: path
        description: The code of the assignment.
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: The maximum number of elements for a page.
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseAssignmentRight"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
    patch:
      tags:
      - Entitlement Management
      summary: Update the rights values of an assignment.
      description: 'Entitlements required: tenantadmin [Tenant Administrator], manageAppAccessOwner
        [Manage Application Entitlements].'
      operationId: updateAssignmentRightValues
      parameters:
      - name: assignment
        in: path
        description: The code of the assignment.
        required: true
        schema:
          type: string
      requestBody:
        description: The body for the assignment right values patch operation.
        content:
          "*/*":
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/UpdateAssignmentRight"
        required: true
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UpdateAssignmentRightResult"
        '207':
          description: There was a problem with one or more entities in the list.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BulkGrantRevokeResponse"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '413':
          description: Request entity too large.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/entitlements":
    post:
      tags:
      - Entitlement Management
      summary: Creates a new entitlement.
      description: 'Creates a new entitlement of type role or permission.</br>In case
        of roles it is possible to add a list of children.</br>Entitlements required:
        tenantadmin [Tenant Administrator], manageAppAccessOwner [Manage Application
        Entitlements].'
      operationId: createEntitlement
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/EntitlementWithChildren"
        required: false
      responses:
        '201':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CodeResult"
            text/plain:
              schema:
                "$ref": "#/components/schemas/CodeResult"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
            text/plain:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/entitlements/assignments/search":
    post:
      tags:
      - Entitlement Management
      summary: Search the assignments.
      description: 'Search the assignments related to users or groups filtering by
        entitlement attributes.</br>If more than one parameter is specified in the
        filter object, "AND" is used as logical operator.</br>Entitlements required:
        tenantadmin [Tenant Administrator], manageAppAccessOwner [Manage Application
        Entitlements].'
      operationId: findAssignments
      parameters:
      - name: user
        in: query
        description: The user code to filter user details from list of users.
        schema:
          type: string
      - name: group
        in: query
        description: The group code to filter.
        schema:
          type: string
      - name: type
        in: query
        description: The assignment type filter.
        schema:
          type: string
          enum:
          - USER
          - GROUP
      - name: includeRights
        in: query
        description: Includes rights for each assignment if present.
        schema:
          type: boolean
          default: false
      - name: limit
        in: query
        description: The maximum number of elements for page.
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      requestBody:
        description: The object filter.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/EntitlementFilter"
        required: false
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseAssignment"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/entitlements/group/{group}":
    post:
      tags:
      - Entitlement Management
      summary: Grant or revoke one or more entitlements to a group.
      description: 'Entitlements required: tenantadmin [Tenant Administrator], manageAppAccessOwner
        [Manage Application Entitlements].</br>Note: The API could be used to mark
        the Basic access as requestable for the end-user. In order to mark application
        roles and permissions as requestable, Fine Grained Access Request beta plan
        needs to be enabled.'
      operationId: grantRevokeEntitlementToGroup
      parameters:
      - name: group
        in: path
        description: The code of the group.
        required: true
        schema:
          type: string
      requestBody:
        description: The list of entitlements to grant or revoke from the group.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ListBulkGrantRevokeGrantEntitlementToGroupRevokeEntitlementToGroup"
        required: false
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/BulkGrantRevokeResponse"
        '207':
          description: There was a problem with one or more entities in the list.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BulkGrantRevokeResponse"
        '400':
          description: An application status error occurred for one or more operations.
            The error code and description are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '413':
          description: Request entity too large.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/entitlements/review/search":
    post:
      tags:
      - Entitlement Management
      summary: Get the list of user added to or removed from dynamic entitlement.
      description: 'Search the assignments related to users or groups filtering by
        entitlement attributes.</br>If more than one parameter is specified in the
        filter object, "AND" is used as logical operator.</br>Entitlements required:
        tenantadmin [Tenant Administrator], manageAppAccessOwner [Manage Application
        Entitlements].'
      operationId: findReviewAssignments
      parameters:
      - name: user
        in: query
        description: The user name to filter.
        schema:
          type: string
      - name: operationType
        in: query
        description: The user added or removed filter.
        schema:
          type: string
          enum:
          - ADDED
          - REMOVED
      - name: details
        in: query
        description: If true the object details information of the other microservices
          will be resolved.
        schema:
          type: boolean
          default: false
      - name: limit
        in: query
        description: The maximum number of elements for page.
        schema:
          type: integer
          format: int32
          default: 200
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      requestBody:
        description: The object filter.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/EntitlementFilter"
        required: false
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseReviewAssignment"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/entitlements/search":
    post:
      tags:
      - Entitlement Management
      summary: Search the entitlements.
      description: 'Search the entitlements filtering by entitlements attributes.</br>If
        more than one parameter is specified in the filter object, "AND" is used as
        logical operator.</br>Entitlements required: tenantadmin [Tenant Administrator],
        manageAppAccessOwner [Manage Application Entitlements].'
      operationId: findEntitlements_0
      parameters:
      - name: search
        in: query
        description: 'Search filter. Supported attributes: code, name, description,
          type, subtype, application, category, extRef, status</br></br>Allowable
          values for status attribute: waiting, inprogress, reviewpublish, failed,
          active, active_waiting, active_inprogress, active_reviewpublish, active_failed,
          waiting_for_deletion, deleting</br></br>Syntax:</br>- Operators for `strings`
          are **=**, **!=**.</br>- Operators for `booleans` are **=**, **!=**.</br>-
          Operators for `numbers` are **&gt;**, **&lt;**, **&gt;=**, **&lt;=**, **=**,
          **!=**.</br>- Logical operators are **&**, **|**.</br>- Parentheses to explicitly
          specify the intended precedence of statements.</br>- Use double quotes for
          values of type `String`.'
        schema:
          type: string
      - name: sort
        in: query
        description: 'Sort the result by attribute values. Supported attributes: name,
          description, type, subtype, application, category, extRef.</br></br>(**+**
          ascending, **-** descending)</br>Default is ascending.'
        schema:
          type: string
      - name: limit
        in: query
        description: The maximum  number of elements for a page.
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseEntitlement"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/entitlements/user/{user}":
    post:
      tags:
      - Entitlement Management
      summary: Grant or revoke one or more entitlements to a user.
      description: 'Entitlements required: tenantadmin [Tenant Administrator], manageAppAccessOwner
        [Manage Application Entitlements].'
      operationId: grantRevokeEntitlementToUser
      parameters:
      - name: user
        in: path
        description: The code of the user.
        required: true
        schema:
          type: string
      requestBody:
        description: The list of entitlements to grant or revoke from the user.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ListBulkGrantRevokeEntitlementToUserAddEntitlementToUserRemove"
        required: true
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/BulkGrantRevokeResponse"
        '207':
          description: There was a problem with one or more entities in the list.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BulkGrantRevokeResponse"
        '400':
          description: An application status error occurred for one or more operations.
            The error code and description are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '413':
          description: Request entity too large.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/entitlements/{entitlement}":
    get:
      tags:
      - Entitlement Management
      summary: Get the entitlement details.
      description: 'Entitlements required: tenantadmin [Tenant Administrator], manageAppAccessOwner
        [Manage Application Entitlements].'
      operationId: getEntitlement
      parameters:
      - name: entitlement
        in: path
        description: Code of the entitlement.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EntitlementDetailsResult"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
    post:
      tags:
      - Entitlement Management
      summary: Grant or revoke an entitlement to one or more users and groups.
      description: 'Entitlements required: tenantadmin [Tenant Administrator], manageAppAccessOwner
        [Manage Application Entitlements].</br>Note: The API could be used to mark
        the Basic access as requestable for the end-user. In order to mark application
        roles and permissions as requestable, Fine Grained Access Request beta plan
        needs to be enabled.'
      operationId: grantRevokeEntitlementBulk
      parameters:
      - name: entitlement
        in: path
        description: Code of the entitlement.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/BulkGrantRevokeUserGroupToEntitlementGrantUserGroupToEntitlementRevoke"
        required: false
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/BulkGrantRevokeResponse"
        '207':
          description: There was a problem with one or more entities in the list.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BulkGrantRevokeResponse"
        '400':
          description: An application status error occurred for one or more operations.
            The error code and description are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '413':
          description: Request entity too large.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Entitlement Management
      summary: Delete an entitlement.
      description: 'Entitlements required: tenantadmin [Tenant Administrator], manageAppAccessOwner
        [Manage Application Entitlements].'
      operationId: deleteEntitlement
      parameters:
      - name: entitlement
        in: path
        description: Code of the entitlement to delete.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The request was successful.
          content: {}
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
    patch:
      tags:
      - Entitlement Management
      summary: Update an entitlement.
      description: 'Entitlements required: tenantadmin [Tenant Administrator], manageAppAccessOwner
        [Manage Application Entitlements].'
      operationId: updateEntitlement
      parameters:
      - name: entitlement
        in: path
        description: Code of the entitlement to update.
        required: true
        schema:
          type: string
      requestBody:
        description: The body to update the the entitlement.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PatchEntitlement"
        required: true
      responses:
        '204':
          description: The request was successful.
          content: {}
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
            text/plain:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/entitlements/{entitlement}/children":
    get:
      tags:
      - Entitlement Management
      summary: Find the children of an entitlement.
      description: 'Entitlements required: tenantadmin [Tenant Administrator], manageAppAccessOwner
        [Manage Application Entitlements].'
      operationId: getEntitlementsChildren
      parameters:
      - name: entitlement
        in: path
        description: The code of the entitlement.
        required: true
        schema:
          type: string
      - name: lvl
        in: query
        description: Max depth level in case of nested roles.
        schema:
          type: integer
          format: int32
      - name: includeRights
        in: query
        description: Includes rights for each children if present.
        schema:
          type: boolean
          default: false
      - name: limit
        in: query
        description: The maximum number of elements for page.
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseEntitlementChildren"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
    post:
      tags:
      - Entitlement Management
      summary: Add or remove one or more children for an entitlement.
      description: 'In the <b>add</b> operation you can use two kinds of payload.
        The first is to use only the <b>code</b> attribute to add an entitlement that
        already exists as child. The second is to use the <b>name</b> and <b>type</b>
        attributes. In this case if the child entitlement don''t exist, it will be
        created and added as child.</br></br>Entitlements required: tenantadmin [Tenant
        Administrator], manageAppAccessOwner [Manage Application Entitlements].'
      operationId: addRemoveEntitlementsChildren
      parameters:
      - name: entitlement
        in: path
        description: The code of the entitlement.
        required: true
        schema:
          type: string
      requestBody:
        description: The list of children to add or remove.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/BulkAddRemoveChildrenEntitlement"
        required: false
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/BulkAddRemoveChildrenResponse"
        '207':
          description: There was a problem with one or more entities in the list.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BulkGrantRevokeResponse"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '413':
          description: Request entity too large.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/entitlements/{entitlement}/children/{permission}/rights":
    patch:
      tags:
      - Entitlement Management
      summary: Update the rights values of a role.
      description: 'Entitlements required: tenantadmin [Tenant Administrator], manageAppAccessOwner
        [Manage Application Entitlements].'
      operationId: updateFixedRightValues
      parameters:
      - name: entitlement
        in: path
        description: The code of the role.
        required: true
        schema:
          type: string
      - name: permission
        in: path
        description: The code of the permission.
        required: true
        schema:
          type: string
      requestBody:
        description: The body to update the rights values.
        content:
          "*/*":
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/UpdateAssignmentRight"
        required: true
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UpdateAssignmentRightResult"
        '207':
          description: There was a problem with one or more entities in the list.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BulkGrantRevokeResponse"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '413':
          description: Request entity too large.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/entitlements/{entitlement}/{operation}":
    patch:
      tags:
      - Entitlement Management
      summary: Publish or discard an entitlement.
      description: 'Entitlements required: tenantadmin [Tenant Administrator], manageAppAccessOwner
        [Manage Application Entitlements].'
      operationId: publishDiscardEntitlement
      parameters:
      - name: entitlement
        in: path
        description: Code of the entitlement to publish or discard.
        required: true
        schema:
          type: string
      - name: operation
        in: path
        description: Operation to perform after review.
        required: true
        schema:
          type: string
          enum:
          - publish
          - discard
      responses:
        '204':
          description: The request was successful.
          content: {}
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
            text/plain:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/groups/{group}/admin/entitlements":
    get:
      tags:
      - Admin Entitlement Management
      summary: Find the admin entitlements that are granted to a group.
      description: 'Entitlements required: tenantadmin [Tenant Administrator].'
      operationId: findGroupAdminEntitlements
      parameters:
      - name: group
        in: path
        description: The code of the group.
        required: true
        schema:
          type: string
      - name: sublevels
        in: query
        description: If true for each, entitlements are returned at the sublevels.
        schema:
          type: boolean
          default: false
      - name: type
        in: query
        description: The entitlement type filter.
        schema:
          type: string
          enum:
          - role
          - permission
      - name: brt
        in: query
        description: Birthright filter. 1=entitlement inherited automatically, 0=entitlement
          is visible for discretionary assignment.
        schema:
          type: string
          enum:
          - '0'
          - '1'
      - name: limit
        in: query
        description: The maximum number of elements for a page.
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseAdminEntitlementRelation"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/groups/{group}/entitlements":
    get:
      tags:
      - Entitlement Management
      summary: Get the entitlements granted to a group.
      description: 'Entitlements required: tenantadmin [Tenant Administrator], manageAppAccessOwner
        [Manage Application Entitlements].'
      operationId: findGroupEntitlements
      parameters:
      - name: group
        in: path
        description: The code of the group.
        required: true
        schema:
          type: string
      - name: sublevels
        in: query
        description: If true for each, entitlements are returned at the sublevels.
        schema:
          type: boolean
          default: false
      - name: type
        in: query
        description: The etitlement type filter.
        schema:
          type: string
          enum:
          - role
          - permission
      - name: brt
        in: query
        description: Birthright filter. 1=entitlement inherited automatically, 0=entitlement
          is visible for discretionary assignment.
        schema:
          type: string
          enum:
          - '0'
          - '1'
      - name: limit
        in: query
        description: The maximum number of elements for page.
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseEntitlementRelation"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/prov/policy/{application}":
    get:
      tags:
      - Provisioning Management
      summary: Get provisioning policy for an application.
      description: 'Entitlements required: tenantadmin [Tenant Administrator].'
      operationId: findProvisioningPolicy
      parameters:
      - name: application
        in: path
        description: Unique Identifier of the application
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The request was successful.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ProvCfgResult"
        '400':
          description: The error code and description are available in the payload.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: Provisioning policy not found for the application.
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
    put:
      tags:
      - Provisioning Management
      summary: Update provisioning policy for an application. In addition resends
        all events for the application.
      description: 'Entitlements required: tenantadmin [Tenant Administrator].'
      operationId: updateProvisioningPolicy
      parameters:
      - name: application
        in: path
        description: Unique Identifier of the application
        required: true
        schema:
          type: string
      - name: resendAll
        in: query
        description: In case provisioning is enabled, if true resends all events for
          the application. Default value is true.
        schema:
          type: boolean
          default: true
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/ProvCfg"
        required: false
      responses:
        '200':
          description: The request was successful.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CodeResult"
        '400':
          description: The error code and description are available in the payload.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    post:
      tags:
      - Provisioning Management
      summary: Create a provisioning policy for an applicatication. Provisioning policy
        enables or disables publishing of provisioning events for the application.
      description: 'Entitlements required: tenantadmin [Tenant Administrator].'
      operationId: createProvisioningPolicy
      parameters:
      - name: application
        in: path
        description: Unique Identifier of the application
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/ProvCfg"
        required: false
      responses:
        '200':
          description: The request was successful.
          content:
            "*/*":
              schema:
                type: string
        '400':
          description: The error code and description are available in the payload.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Provisioning Management
      summary: Delete provisioning policy for an application.
      description: 'Entitlements required: tenantadmin [Tenant Administrator].'
      operationId: deleteProvisioningPolicy
      parameters:
      - name: application
        in: path
        description: Unique Identifier of the application
        required: true
        schema:
          type: string
      responses:
        '201':
          description: The request was successful.
          content: {}
        '400':
          description: The error code and description are available in the payload.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/self/admin/entitlements":
    get:
      tags:
      - Admin Entitlement Management
      summary: Find the admin entitlements that are granted to the user that is logged
        in.
      description: 'Entitlements required: anyone [Any Authenticated User].'
      operationId: selfAdminEntitlements
      parameters:
      - name: sublevels
        in: query
        description: If true for each, entitlements are returned at the sublevels.
        schema:
          type: boolean
          default: false
      - name: type
        in: query
        description: The entitlement type filter.
        schema:
          type: string
          enum:
          - role
          - permission
      - name: enable
        in: query
        description: Filter to return the direct assignments enabled or not.
        schema:
          type: boolean
          default: true
      - name: limit
        in: query
        description: The maximum number of elements for page.
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseAdminEntitlementRelation"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/self/entitlements":
    get:
      tags:
      - Entitlement Management
      summary: Get the entitlements granted to the logged user.
      description: 'Entitlements required: anyone [Any Authenticated User], manageAppAccessOwner
        [Manage Application Entitlements]'
      operationId: selfEntitlements
      parameters:
      - name: sublevels
        in: query
        description: If true for each, entitlements are returned at the sublevels.
        schema:
          type: boolean
          default: false
      - name: type
        in: query
        description: The entitlement type filter.
        schema:
          type: string
          enum:
          - role
          - permission
      - name: limit
        in: query
        description: The maximum number of elements for page.
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseEntitlementRelation"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/users/{user}/admin/entitlements":
    get:
      tags:
      - Admin Entitlement Management
      summary: Find the admin entitlements that are granted to a user.
      description: 'Entitlements required: tenantadmin [Tenant Administrator].'
      operationId: findUserAdminEntitlements
      parameters:
      - name: user
        in: path
        description: The code of the user.
        required: true
        schema:
          type: string
      - name: groups
        in: query
        description: The list of groups code. Parameter supported only by intraservices
          call.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: sublevels
        in: query
        description: If true for each, entitlements are returned at the sublevels.
        schema:
          type: boolean
          default: false
      - name: type
        in: query
        description: The entitlement type filter.
        schema:
          type: string
          enum:
          - role
          - permission
      - name: enable
        in: query
        description: Filter to return the direct assignments enabled or not.
        schema:
          type: boolean
          default: true
      - name: limit
        in: query
        description: The maximum number of elements for a page.
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      - name: count
        in: query
        description: Is count of entitlements required.
        schema:
          type: boolean
          default: true
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseAdminEntitlementRelation"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/users/{user}/application/{application}/check":
    get:
      tags:
      - Entitlement Management
      summary: Check if a user is granted to an application.
      description: 'Entitlements required: tenantadmin [Tenant Administrator], manageAppAccessOwner
        [Manage Application Entitlements].'
      operationId: checkUserApplications
      parameters:
      - name: user
        in: path
        description: The code of the user.
        required: true
        schema:
          type: string
      - name: application
        in: path
        description: The code of the application.
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The user is granted to the application.
          content: {}
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The user is not granted to the application.
          content: {}
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
    post:
      tags:
      - Entitlement Management
      summary: Check if a user is granted to an application.
      description: 'Entitlements required: tenantadmin [Tenant Administrator], manageAppAccessOwner
        [Manage Application Entitlements].'
      operationId: checkUserApplicationsWithGroups
      parameters:
      - name: user
        in: path
        description: The code of the user.
        required: true
        schema:
          type: string
      - name: application
        in: path
        description: The code of the application.
        required: true
        schema:
          type: string
      requestBody:
        description: The list of user groups.
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/UserGroupList"
        required: false
      responses:
        '204':
          description: The user is granted to the application.
          content: {}
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The user is not granted to the application.
          content: {}
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/users/{user}/applications":
    get:
      tags:
      - Entitlement Management
      summary: Get all the applications that are granted to a user.
      description: 'Entitlements required: tenantadmin [Tenant Administrator], manageAppAccessOwner
        [Manage Application Entitlements].'
      operationId: findUserApplications
      parameters:
      - name: user
        in: path
        description: The code of the user.
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: The maximum number of elements for page.
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: The list of applications.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseString"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/users/{user}/entitlements":
    get:
      tags:
      - Entitlement Management
      summary: Get the entitlements that are granted to a user.
      description: 'Entitlements required: tenantadmin [Tenant Administrator], manageAppAccessOwner
        [Manage Application Entitlements].'
      operationId: findUserEntitlements
      parameters:
      - name: user
        in: path
        description: The code of the user.
        required: true
        schema:
          type: string
      - name: sublevels
        in: query
        description: If true for each, entitlements are returned at the sublevels.
        schema:
          type: boolean
          default: false
      - name: type
        in: query
        description: Entitlement type filter.
        schema:
          type: string
          enum:
          - role
          - permission
      - name: entitlement
        in: query
        description: Entitlement filter.
        schema:
          type: string
      - name: application
        in: query
        description: Application filter.
        schema:
          type: string
      - name: limit
        in: query
        description: The maximum number of elements for page.
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseEntitlementRelation"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/users/{user}/permissions/{permission}/rights":
    get:
      tags:
      - Entitlement Management
      summary: Get the right values of a permission assigned to a user.
      description: 'Entitlements required: tenantadmin [Tenant Administrator], manageAppAccessOwner
        [Manage Application Entitlements].'
      operationId: findUserPermissionRightValues
      parameters:
      - name: user
        in: path
        description: The code of the user.
        required: true
        schema:
          type: string
      - name: permission
        in: path
        description: The code of the permission.
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: The maximum number of elements for page.
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseString"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/personalcert":
    get:
      tags:
      - Certificates
      summary: Gets the list of personal certificates.
      description: 'Retrieves the list of personal certificates for this tenant.<br><br>Entitlements
        required: readCerts.'
      operationId: getPersonalCerts
      parameters:
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Query
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Certificate_0"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: No resource found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Certificates
      summary: Import or generate a personal certificate.
      description: 'Imports or generates a personal certificate for this tenant. The
        imported or generated personal certificate will be added to the tenant''s
        keystore. <br><br>For more details on the required parameters for importing
        or generating a personal certificate,  check the model that is described in
        the payload. <br><br>Entitlements required: manageCerts.'
      operationId: postPersonalCert
      parameters:
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      requestBody:
        description: Import payload
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PostPersonalCertificate"
        required: true
      responses:
        '201':
          description: Created
          content: {}
        '400':
          description: Bad request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal server error
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: payload
  "/v1.0/personalcert/{label}":
    get:
      tags:
      - Certificates
      summary: Get a single personal certificate with the specified label.
      description: 'Retrieves the personal certificate with the specified label for
        this tenant.<br><br>Entitlements required: readCerts.'
      operationId: getPersonalCert
      parameters:
      - name: label
        in: path
        description: certificate label
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Query
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SingleCertificate"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: No resource found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Certificates
      summary: Update a personal certificate.
      description: 'Update a personal certificate with the specified label for this
        tenant.<br>Currently it only allows changing the default personal certificate.<br>Entitlements
        required: manageCerts.'
      operationId: updatePersonalCert
      parameters:
      - name: label
        in: path
        description: certificate label
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      requestBody:
        description: Import payload
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PersonalCertificate"
        required: true
      responses:
        '204':
          description: No content
          content: {}
        '400':
          description: Bad request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal server error
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: payload
    delete:
      tags:
      - Certificates
      summary: Delete a personal certificate.
      description: 'Delete a personal certificate with the specified label for this
        tenant.<br><br>Entitlements required: manageCerts.'
      operationId: deletePersonalCert
      parameters:
      - name: label
        in: path
        description: certificate label
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No content
          content: {}
        '400':
          description: Bad request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal server error
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/signercert":
    get:
      tags:
      - Certificates
      summary: Gets the list of signer certificates.
      description: 'Retrieves the list of signer certificates for this tenant.<br><br>Entitlements
        required: readCerts.'
      operationId: getSignerCerts
      parameters:
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Query
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Certificate_0"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: No resource found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Certificates
      summary: Imports a signer certificate.
      description: 'Imports a signer certificate for this tenant.<br><br>Entitlements
        required: manageCerts.'
      operationId: importSignerCert
      parameters:
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      requestBody:
        description: Import payload
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SignerCertificate"
        required: true
      responses:
        '201':
          description: Created
          content: {}
        '400':
          description: Bad request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal server error
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: payload
  "/v1.0/signercert/{label}":
    get:
      tags:
      - Certificates
      summary: Gets the signer certificate with the given label.
      description: 'Retrieves the signer certificate with the specified label for
        this tenant.<br><br>Entitlements required: readCerts.'
      operationId: getSignerCert
      parameters:
      - name: label
        in: path
        description: certificate label
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Query
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Certificate_0"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: No resource found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    delete:
      tags:
      - Certificates
      summary: Delete a signer certificate.
      description: 'Delete a signer certificate for this tenant.<br><br>Entitlements
        required: manageCerts.'
      operationId: deleteSignerCert
      parameters:
      - name: label
        in: path
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No content
          content: {}
        '400':
          description: Bad request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal server error
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/config/v1.0/mdm/device-managers":
    get:
      tags:
      - Device manager configuration
      summary: Lists device managers
      description: 'List the device managers configuration.<br>Entitlements required:
        readIdentitySources (Read identity providers) or manageIdentitySources (Manage
        identity providers).<br>Note: You only need one entitlement, but you can have
        more than one.<br>'
      operationId: listDeviceManager
      parameters:
      - name: identitySourceId
        in: query
        schema:
          type: string
      - name: idOnly
        in: query
        schema:
          type: boolean
          enum:
          - true
          - false
      responses:
        '200':
          description: Successful Query
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/DeviceManager"
        '400':
          description: Bad Request Exception
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Forbidden
          content: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Device manager configuration
      summary: Create a device manager configuration.
      description: 'Creates the device manager configuration.<br>Entitlements required:
        manageIdentitySources (Manage identity providers).<br>'
      operationId: createDeviceManager
      requestBody:
        description: Device-manager payload
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/DeviceManager"
        required: true
      responses:
        '201':
          description: Successful Creation
          content: {}
        '400':
          description: Bad Request Exception
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Forbidden
          content: {}
        '500':
          description: Internal Server Error
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: payload
  "/config/v1.0/mdm/device-managers/testconnection":
    post:
      tags:
      - Device manager configuration
      summary: Test a device manager connection
      description: 'Tests the device-manager connection.<br>Entitlements required:
        manageIdentitySources (Manage identity providers).<br>'
      operationId: testConnectionBeforeCreation
      parameters:
      - name: mdmType
        in: query
        schema:
          type: string
      requestBody:
        description: Connection parameters payload
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MdmConnection"
        required: true
      responses:
        '200':
          description: Successful
          content: {}
        '400':
          description: Bad Request Exception
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Forbidden
          content: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: payload
  "/config/v1.0/mdm/device-managers/trusted-certificates":
    get:
      tags:
      - Device manager configuration
      summary: Get trusted certificates as a zip file.
      description: 'Retrieves the trusted certificates as a zip file.<br>Entitlements
        required: readIdentitySources (Read identity providers) or manageIdentitySources
        (Manage identity providers).<br>Note: You only need one entitlement, but you
        can have more than one.<br>'
      operationId: getTrustedCertificates
      responses:
        '200':
          description: Successful Query
          content: {}
        '400':
          description: Bad Request Exception
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Device-manager Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
  "/config/v1.0/mdm/device-managers/{deviceManagerId}":
    get:
      tags:
      - Device manager configuration
      summary: Get a device-manager
      description: 'Retrieves the device manager configuration.<br>Entitlements required:
        readIdentitySources (Read identity providers) or manageIdentitySources (Manage
        identity providers).<br>Note: You only need one entitlement, but you can have
        more than one.<br>'
      operationId: getDeviceManagerById
      parameters:
      - name: deviceManagerId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Query
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DeviceManager"
        '400':
          description: Bad Request Exception
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Device-manager Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Device manager configuration
      summary: Update a device manager configuration
      description: 'Update the device-manager configuration.<br>Entitlements required:
        manageIdentitySources (Manage identity providers).<br>'
      operationId: updateDeviceManager
      parameters:
      - name: deviceManagerId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Device-manager payload
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/DeviceManager"
        required: true
      responses:
        '204':
          description: Successful Update
          content: {}
        '400':
          description: Bad Request Exception
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Device-manager Not Found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: payload
    delete:
      tags:
      - Device manager configuration
      summary: Delete a device manager configuration.
      description: 'Deletes the device manager configuration.<br>Entitlements required:
        manageIdentitySources (Manage identity providers).'
      operationId: deleteDeviceManager
      parameters:
      - name: deviceManagerId
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Successful Deletion
          content: {}
        '400':
          description: Bad Request Exception
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Device-manager Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    patch:
      tags:
      - Device manager configuration
      summary: PATCH a device manager configuration.
      description: 'Update the device manager configuration with PATCH and returns
        the modified device-manager.<br>Entitlements required: manageIdentitySources
        (Manage identity providers).'
      operationId: patchDeviceManager
      parameters:
      - name: deviceManagerId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Update
          content: {}
        '400':
          description: Bad Request Exception
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Device-manager Not Found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/config/v1.0/mdm/device-managers/{deviceManagerId}/testconnection":
    put:
      tags:
      - Device manager configuration
      summary: Test a device manager connection
      description: 'Tests the device-manager connection.<br>Entitlements required:
        manageIdentitySources (Manage identity providers).'
      operationId: testConnectionAfterCreation
      parameters:
      - name: deviceManagerId
        in: path
        required: true
        schema:
          type: string
      - name: mdmType
        in: query
        schema:
          type: string
      responses:
        '200':
          description: Successful
          content: {}
        '400':
          description: Bad Request Exception
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Forbidden
          content: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/config/v1.0/mdm/devices":
    get:
      tags:
      - Device manager configuration
      summary: Lists device information
      description: 'List device information<br>Entitlements required: tenantAdmin,
        readDevicesAnyUser or manageDevicesAnyUser.<br>Note: You only need one entitlement,
        but you can have more than one.<br>'
      operationId: getDeviceInfo
      parameters:
      - name: userId
        in: query
        required: true
        schema:
          type: string
      - name: deviceManagerId
        in: query
        schema:
          type: string
      - name: deviceId
        in: query
        schema:
          type: string
      - name: refresh
        in: query
        schema:
          type: string
      responses:
        '200':
          description: Successful Query
          content: {}
        '400':
          description: Bad Request Exception
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
    delete:
      tags:
      - Device manager configuration
      summary: Delete user device
      description: 'Delete user device<br>Entitlements required: tenantAdmin, manageDevicesAnyUser.<br>'
      operationId: deleteDevice
      parameters:
      - name: userId
        in: query
        required: true
        schema:
          type: string
      - name: deviceManagerId
        in: query
        required: true
        schema:
          type: string
      - name: deviceId
        in: query
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Successful Deletion
          content: {}
        '400':
          description: Bad Request Exception
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
  "/config/v1.0/mdm/mydevices":
    get:
      tags:
      - Device manager configuration
      summary: Lists your own device information
      description: 'List your own device information.<br>Entitlements required: manageDevices.'
      operationId: getDeviceInfo_0
      parameters:
      - name: deviceManagerId
        in: query
        schema:
          type: string
      - name: deviceId
        in: query
        schema:
          type: string
      - name: refresh
        in: query
        schema:
          type: string
      responses:
        '200':
          description: Successful Query
          content: {}
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
    delete:
      tags:
      - Device manager configuration
      summary: Deletes your own device
      description: 'Delete your own device<br>Entitlements required: manageDevices.<br>'
      operationId: deleteDevice_0
      parameters:
      - name: deviceManagerId
        in: query
        required: true
        schema:
          type: string
      - name: deviceId
        in: query
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Successful Deletion
          content: {}
        '400':
          description: Bad Request Exception
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
  "/config/v1.0/mdm/uniqueuseridentifiers":
    get:
      tags:
      - Device manager configuration
      summary: Lists uniqueuseridentifiers
      description: 'List the uniqueuseridentifiers.<br>Entitlements required: readIdentitySources
        (Read identity providers) or manageIdentitySources (Manage identity providers).<br>Note:
        You only need one entitlement, but you can have more than one.<br>'
      operationId: listUids
      parameters:
      - name: mdmType
        in: query
        schema:
          type: string
      responses:
        '200':
          description: Successful Query
          content: {}
        '400':
          description: Bad Request Exception
          content: {}
        '403':
          description: Forbidden
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
  "/config/v1.0/smartcard-providers":
    get:
      tags:
      - Smartcard and other X.509 certificate provider configuration
      summary: Lists smartcard and other X.509 certificate providers.
      description: 'List the smartcard and other X.509 certificate providers configuration.<br>Entitlements
        required: readIdentitySources (Read identity providers) or manageIdentitySources
        (Manage identity providers).<br>Note: You only need one entitlement, but you
        can have more than one.<br>'
      operationId: listSmartcardProviders
      parameters:
      - name: identitySourceId
        in: query
        schema:
          type: string
      - name: idOnly
        in: query
        schema:
          type: boolean
          enum:
          - true
          - false
      responses:
        '200':
          description: Successful Query
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/SmartcardProvider"
        '400':
          description: Bad Request Exception
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Forbidden
          content: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Smartcard and other X.509 certificate provider configuration
      summary: Create a smartcard and other X.509 certificate provider.
      description: 'Creates the smartcard and other X.509 certificate provider.<br>Entitlements
        required: manageIdentitySources (Manage identity providers).<br>'
      operationId: createSmartcardProvider
      requestBody:
        description: smartcard-provider payload
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SmartcardProvider"
        required: true
      responses:
        '201':
          description: Successful Creation
          content: {}
        '400':
          description: Bad Request Exception
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Forbidden
          content: {}
        '500':
          description: Internal Server Error
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: payload
  "/config/v1.0/smartcard-providers/attributes":
    get:
      tags:
      - Smartcard and other X.509 certificate provider configuration
      summary: Lists attributes and uniqueUserIdentifiers for a X.509 compliant certificate.
      description: 'List the attributes and uniqueUserIdentifiers.<br>Entitlements
        required: readIdentitySources (Read identity providers) or manageIdentitySources
        (Manage identity providers).<br>Note: You only need one entitlement, but you
        can have more than one.<br>'
      operationId: listAttributesAndUniqueUids
      responses:
        '200':
          description: Successful Query
          content: {}
        '400':
          description: Bad Request Exception
          content: {}
        '403':
          description: Forbidden
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
  "/config/v1.0/smartcard-providers/devices":
    delete:
      tags:
      - Smartcard or certificate provider operations
      summary: Remove smartcard/X.509 certificate provider certificates for a specified
        user id.
      description: 'Removes any user certificates for the specified certificate provider<br>Entitlements
        required: tenantAdmin, manageDevicesAnyUser.<br>'
      operationId: deleteDevice_1
      parameters:
      - name: smartcardProviderId
        in: query
        required: true
        schema:
          type: string
      - name: userId
        in: query
        required: true
        schema:
          type: string
      - name: serialNumber
        in: query
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Successful Deletion
          content: {}
        '400':
          description: Bad Request Exception
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
  "/config/v1.0/smartcard-providers/{smartcardProviderId}":
    get:
      tags:
      - Smartcard and other X.509 certificate provider configuration
      summary: Get a smartcard and other X.509 certificate providers
      description: 'Retrieves the smartcard and other X.509 certificate provider configuration.<br>Entitlements
        required: readIdentitySources (Read identity providers) or manageIdentitySources
        (Manage identity providers).<br>Note: You only need one entitlement, but you
        can have more than one.<br>'
      operationId: getSmartcardProviderById
      parameters:
      - name: smartcardProviderId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Query
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SmartcardProvider"
        '400':
          description: Bad Request Exception
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Forbidden
          content: {}
        '404':
          description: smartcard-provider Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Smartcard and other X.509 certificate provider configuration
      summary: Update a smartcard or X.509 certificate provider.
      description: 'Updates the smartcard or X.509 certificate provider configuration.<br>Entitlements
        required: manageIdentitySources (Manage identity providers).<br>'
      operationId: updateSmartcardProvider
      parameters:
      - name: smartcardProviderId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Smartcard-provider payload
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SmartcardProvider"
        required: true
      responses:
        '204':
          description: Successful Update
          content: {}
        '400':
          description: Bad Request Exception
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Smartcard-provider Not Found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: payload
    delete:
      tags:
      - Smartcard and other X.509 certificate provider configuration
      summary: Delete a smartcard or X.509 certificate provider
      description: 'Deletes the smartcard or X.509 certificate provider configuration.<br>Entitlements
        required: manageIdentitySources (Manage identity providers).'
      operationId: deleteSmartcardProvider
      parameters:
      - name: smartcardProviderId
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Successful Deletion
          content: {}
        '400':
          description: Bad Request Exception
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Forbidden
          content: {}
        '404':
          description: smartcard-provider Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    patch:
      tags:
      - Smartcard and other X.509 certificate provider configuration
      summary: Update a smartcard or X.509 certificate provider with PATCH
      description: 'Update the smartcard or X.509 certificate provider configuration
        with PATCH and returns the modified provider configuration.<br>Entitlements
        required: manageIdentitySources (Manage identity providers).'
      operationId: patchSmartcardProvider
      parameters:
      - name: smartcardProviderId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Update
          content: {}
        '400':
          description: Bad Request Exception
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Forbidden
          content: {}
        '404':
          description: smartcard-provider Not Found
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/config/v1.0/push-notification/credentials":
    get:
      tags:
      - Push Credentials Management
      summary: Get all the sets of configured mobile push provider credentials.
      description: 'Get all the sets of mobile push provider credentials that were
        stored for the tenant. Each set of mobile push provider credentials is listed
        by its "appId" and includes the server resource ID that is used to get, update,
        or delete that set of credentials.<br /><br />Entitlements required: readPushCreds
        (Read Push Notification Credentials) or managePushCreds (Manage Push Notification
        Credentials).'
      operationId: getAllPushCredentialsForTenant
      parameters:
      - name: metaOnly
        in: query
        description: Meta Data Only
        schema:
          type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Credentials"
        '400':
          description: The request was malformed or could not be handled, or the tenant
            was invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Push Credentials Management
      summary: Create a set of mobile push provider credentials.
      description: 'Store mobile push credentials for Android or IOS mobile applications
        that use the IBM Verify mobile SDK. ISV supports the Apple Push Notification
        service (APNs) for iOS and the Firebase Cloud Messaging service (FCM) for
        Android. Credentials are stored under the unique appId for the mobile application.
        Production and development credentials are supported. The credentials are
        retrieved at runtime when sending push notifications to the mobile application.<br/><br/>An
        ISV assigned unique identifier for the push credential is returned in the
        “location” response header.<br/><br/>Entitlements required: managePushCreds
        (Manage Push Notification Credentials).<br/><br/>**AppId**<br>The appId specified
        in the payload must match the unique application id for the mobile application.  Credentials
        for IOS and Android applications should be stored using separate API calls
        unless the IOS and Android apps use the identical appId.<br/><br/>**Firebase
        Credentials**<br/>The service account JSON can be generated through the Firebase
        Console in Project Settings -> Service Accounts. For more information, see
        the Firebase documentation on its HTTP v1 API.<br/><br/>**APNs Credentials**<br>Download
        the APNs certificate (.cer) file for your app from your Apple developer website
        and convert it to base64 format with the following steps:<br/>1. When the
        SSL certificate is ready, click “Download” to save it to your Mac.<br/>2.
        On your Mac, locate the downloaded SSL certificate and double-click it to
        install it in your keychain.<br/>3. On your Mac, open Keychain Access. Under “My
        Certificates”, locate the certificate that you have just added; it should
        be called "Apple Development IOS Push Services: your.bundle.id".<br/>4. Right-click
        on the certificate, select "Export Apple Development IOS Push Services: your.bundle.id" and
        save it as a .p12 file. Enter a password to protect the exported certificate.<br/>5.
        From the terminal, base64 encode the p12 file with the following command:<br/>$
        base64 --input Certificate.p12 --output Certificate.txt<br/>6. Use the contents
        of Certificate.txt as the “base64Cert” in the body payload.'
      operationId: createPushCredentials
      requestBody:
        description: The push credentials
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PushCredentials"
        required: true
      responses:
        '201':
          description: The push credentials were created.
          content: {}
        '400':
          description: The request was malformed or could not be handled, or the tenant
            was invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: The resource already exists
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/config/v1.0/push-notification/credentials/{id}":
    get:
      tags:
      - Push Credentials Management
      summary: Get a specific set of configured mobile push provider credentials.
      description: 'Get a specific set of configured mobile push provider credentials.<br
        /><br />Entitlements required: readPushCreds (Read Push Notification Credentials)
        or managePushCreds (Manage Push Notification Credentials).'
      operationId: getPushCredentials
      parameters:
      - name: id
        in: path
        description: The CI assigned identifier of the push credential set
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Credential"
        '400':
          description: The request was malformed or could not be handled, or the tenant
            was invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Push Credentials Management
      summary: Update a specific set of configured mobile push provider credentials.
      description: 'Update a specific set of configured mobile push provider credentials.
        Development or production creds for Firebase or APNS can be added individually
        and do not overwrite or remove the existing credentials of other types in
        the set. The appId cannot be changed.<br /><br />Entitlements required: managePushCreds
        (Manage Push Notification Credentials).'
      operationId: updatePushCredentials
      parameters:
      - name: id
        in: path
        description: The CI assigned identifier of the push credential set
        required: true
        schema:
          type: string
      requestBody:
        description: The push credentials
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PushCredentials"
        required: true
      responses:
        '204':
          description: Success
          content: {}
        '400':
          description: The request was malformed or could not be handled, or the tenant
            was invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Push Credentials Management
      summary: Delete a specific set of configured mobile push provider credentials.
      description: 'Delete a specific set of configured mobile push provider credentials.<br/><br/>Entitlements
        required: managePushCreds (Manage Push Notification Credentials).'
      operationId: deletePushCredentials
      parameters:
      - name: id
        in: path
        description: The CI assigned identifier of the push credential set
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Success
          content: {}
        '400':
          description: The request was malformed or could not be handled, or the tenant
            was invalid
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/appconsents":
    get:
      tags:
      - OpenID Connect Consent Management (deprecated)
      summary: Deprecated - Retrieves the list of OIDC consents.
      description: 'Deprecated: This API is deprecated and will be removed after June
        2022. Migrate OIDC applications to Advanced consent type and start using the
        Data Privacy and Consent Management APIs.<br> Retrieves the list of OIDC or
        OAuth consents of OIDC applications that the user owns.'
      operationId: readConsents
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>Use
          the following query parameters:<br><br><b>count</b> - Defines the total
          number of results that are returned from the data store. The maximum value
          is 1000.<br><br><b>page</b> - Identifies the requested page, or the offset.<br><br><b>limit</b>
          - Defines the total number of results that are returned per page. The maximum
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: If you are not using the
          Swagger UI, the pagination parameter value must be HTML-encoded. Use the
          prefix "pagination=" in the query parameter.<br><br><b>Example</b>: Paginate
          on count=10&page=1&limit=5<br>pagination=count%3D10%26page%3D1%26limit%3D5'
        schema:
          type: string
      - name: sort
        in: query
        description: 'Sorts the returned results.<br><br>Each attribute must be prefixed
          with either + for ascending or - for descending. <br><br>Use a comma (,)
          to separate multiple attributes.<br><br><b>Note</b>: If you are not using
          the Swagger UI, the sort parameter value must be HTML-encoded. Use the prefix
          "sort=" in the query parameter.<br><br><b>Example</b>: Sort on -issuedOn,+lastUsed<br>sort=-issuedOn%2C%2BlastUsed'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for booleans are = and !<br>Valid operators
          for numbers and timestamps are >=, >, &lt;=, &lt;, =, and !=.<br><br><b>Note</b>:
          If you are not using the Swagger UI, the search parameter value must be
          HTML-encoded. Use the prefix "search=" in the query parameter.<br><br><b>Example</b>:
          Search on clientName contains "fd45"&name="John Smith"<br>search=clientName%20contains%20%22fd45%22%26name%3D%22John%20Smith%22'
        schema:
          type: string
      - name: base
        in: query
        description: 'Applies a base criteria to the search.<br><br>Valid operators
          for strings are =, !=, and contains. Use double quotation marks for the
          search values.<br>Valid operators for booleans are = and !<br>Valid operators
          for numbers and timestamps are >=, >, &lt;=, &lt;, =, and !=<br>.<br><b>Note</b>:
          If you are not using the Swagger UI, the base parameter value must be HTML-encoded.
          Use the prefix "base=" in the query parameter.<br><br><b>Example</b>: Base
          criteria for clientName contains "fd45"&name="John Smith"<br>base=clientName%20contains%20%22fd45%22%26name%3D%22John%20Smith%22'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values are inclusive or exclusive only. They cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          If you are not using the Swagger UI, the filter parameter value must be
          HTML-encoded. Use the prefix "filter=" in the query parameter.<br><br><b>Examples</b><br>Filter
          to return only clientName : filter=clientName<br>Filter to exclude clientId
          and category : filter=%21clientId,%21category'
        schema:
          type: string
      responses:
        '200':
          description: The grants were returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/USCConsentList"
        '400':
          description: The request was invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: Access is forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    patch:
      tags:
      - OpenID Connect Consent Management (deprecated)
      summary: Deprecated - Bulk delete, or scope and entitlement removal of OIDC
        consents.
      description: 'Deprecated: This API is deprecated and will be removed after June
        2022. Migrate OIDC applications to Advanced consent type and start using the
        Data Privacy and Consent Management APIs.<br> Deletion, removal of scopes
        and entitlements for specified OIDC or OAuth consents of OIDC applications
        that the user owns.'
      operationId: patchConsents
      requestBody:
        description: The patch payload
        content:
          "*/*":
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/ConsentPatchEntry"
        required: true
      responses:
        '204':
          description: The patch operation succeeded.
          content: {}
        '207':
          description: The patch operation partially succeeded.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PatchResponse"
        '400':
          description: The request was invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Access is forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: payload
  "/v1.0/appconsents/{id}":
    get:
      tags:
      - OpenID Connect Consent Management (deprecated)
      summary: Deprecated - Retrieves a specific OIDC consent.
      description: 'Deprecated: This API is deprecated and will be removed after June
        2022. Migrate OIDC applications to Advanced consent type and start using the
        Data Privacy and Consent Management APIs.<br> Retrieves a specific OIDC or
        OAuth consent from an OIDC application that the user owns.'
      operationId: readConsent
      parameters:
      - name: id
        in: path
        description: Consent identifier
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The consent was returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/USCConsent"
        '403':
          description: Access is forbidden.
          content: {}
        '404':
          description: The consent was not found.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    delete:
      tags:
      - OpenID Connect Consent Management (deprecated)
      summary: Deprecated - Deletes a specific OIDC consent.
      description: 'Deprecated: This API is deprecated and will be removed after June
        2022. Migrate OIDC applications to Advanced consent type and start using the
        Data Privacy and Consent Management APIs.<br> Deletes a specific OIDC or OAuth
        consent from an OIDC application that the user owns.'
      operationId: deleteConsent_0
      parameters:
      - name: id
        in: path
        description: Consent identifier
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The consent was deleted.
          content: {}
        '403':
          description: Access is forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/appgrants":
    get:
      tags:
      - OpenID Connect Grant Management
      summary: Deprecated - Retrieves the list of OIDC grants.
      description: 'Deprecated: This API is deprecated and will be removed after June
        2024. Retrieves the list of OIDC or OAuth grants of OIDC applications that
        the user owns.'
      operationId: readGrants
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>Use
          the following query parameters:<br><br><b>count</b> - Defines the total
          number of results that are returned from the data store. The maximum value
          is 1000.<br><br><b>page</b> - Identifies the requested page, or the offset.<br><br><b>limit</b>
          - Defines the total number of results that are returned per page. The maximum
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: If you are not using the
          Swagger UI, the pagination parameter value must be HTML encoded. Use the
          prefix "pagination=" in the query parameter.<br><br><b>Example</b>: Paginate
          on count=10&page=1&limit=5<br>pagination=count%3D10%26page%3D1%26limit%3D5'
        schema:
          type: string
      - name: sort
        in: query
        description: 'Sorts the returned results.<br><br>Each attribute must be prefixed
          with either + for ascending or - for descending. <br><br>Use a comma (,)
          to separate multiple attributes.<br><br><b>Note</b>: If you are not using
          the Swagger UI, the sort parameter value must be HTML encoded. Use the prefix
          "sort=" in the query parameter.<br><br><b>Example</b>: Sort on -issuedOn,+lastUsed<br>sort=-issuedOn%2C%2BlastUsed'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for booleans are = and !<br>Valid operators
          for numbers and timestamps are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>:
          If you are not using the Swagger UI, the search parameter value must be
          HTML encoded. Use the prefix "search=" in the query parameter.<br><br><b>Example</b>:
          Search on clientName contains "fd45"&name="John Smith"<br>search=clientName%20contains%20%22fd45%22%26name%3D%22John%20Smith%22'
        schema:
          type: string
      - name: base
        in: query
        description: 'Applies a base criteria to the search.<br><br>Valid operators
          for strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for booleans are = and !<br>Valid operators
          for numbers and timestamps are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>:
          If you are not using the Swagger UI, the base parameter value must be HTML
          encoded. Use the prefix "base=" in the query parameter.<br><br><b>Example</b>:
          Base criteria for clientName contains "fd45"&name="John Smith"<br>base=clientName%20contains%20%22fd45%22%26name%3D%22John%20Smith%22'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values are inclusive or exclusive only. They cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          If you are not using the Swagger UI, the filter parameter value must be
          HTML encoded. Use the prefix "filter=" in the query parameter.<br><br><b>Examples</b><br>Filter
          to return only clientName : filter=clientName<br>Filter to exclude clientId
          and category : filter=%21clientId,%21category'
        schema:
          type: string
      responses:
        '200':
          description: The grants were returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/USCGrantList"
        '400':
          description: The request was invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: Access was forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    patch:
      tags:
      - OpenID Connect Grant Management
      summary: Deprecated - Bulk delete, disable, or enable OIDC grants.
      description: 'Deprecated: This API is deprecated and will be removed after June
        2024. Delete, disable, or enable all of the specified OIDC or OAuth grants
        and the associated tokens of OIDC applications that the user owns.'
      operationId: patchGrant
      requestBody:
        description: The patch payload
        content:
          "*/*":
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/GrantPatchEntry"
        required: true
      responses:
        '204':
          description: The patch operation succeeded.
          content: {}
        '207':
          description: The patch operation partially succeeded.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PatchResponse"
        '400':
          description: The request was invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Access was forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: payload
  "/v1.0/appgrants/{gid}":
    get:
      tags:
      - OpenID Connect Grant Management
      summary: Deprecated - Retrieves a specific OIDC grant.
      description: 'Deprecated: This API is deprecated and will be removed after June
        2024. Retrieves a specific OIDC or OAuth grant of OIDC applications that the
        user owns.'
      operationId: readGrant
      parameters:
      - name: gid
        in: path
        description: Grant identifier
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The grant was returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/USCGrant"
        '403':
          description: Access was forbidden.
          content: {}
        '404':
          description: The grant was not found.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    delete:
      tags:
      - OpenID Connect Grant Management
      summary: Deprecated - Deletes a specific OIDC grant.
      description: 'Deprecated: This API is deprecated and will be removed after June
        2024. Deletes a specific OIDC or OAuth grant and the associated tokens of
        OIDC applications that the user owns.'
      operationId: deleteGrant
      parameters:
      - name: gid
        in: path
        description: Grant identifier
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The grant was deleted.
          content: {}
        '403':
          description: Access was forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/consents":
    get:
      tags:
      - OpenID Connect Consent Management (deprecated)
      summary: Deprecated - Retrieves the list of OIDC consents.
      description: 'Deprecated: This API is deprecated and will be removed after June
        2022. Migrate OIDC applications to Advanced consent type and start using the
        Data Privacy and Consent Management APIs.<br> Retrieves the list of OIDC or
        OAuth consents that belongs to this tenant.<br><br>Entitlements required:
        readOidcConsents (Read OIDC and OAuth consents) or manageOidcConsents (Manage
        OIDC and OAuth consents)'
      operationId: readConsents_0
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>Use
          the following query parameters:<br><br><b>count</b> - Defines the total
          number of results that are returned from the data store. The maximum value
          is 1000.<br><br><b>page</b> - Identifies the requested page, or the offset.<br><br><b>limit</b>
          - Defines the total number of results that are returned per page. The maximum
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: If you are not using the
          Swagger UI, the pagination parameter value must be HTML-encoded. Use the
          prefix "pagination=" in the query parameter.<br><br><b>Example</b>: Paginate
          on count=10&page=1&limit=5<br>pagination=count%3D10%26page%3D1%26limit%3D5'
        schema:
          type: string
      - name: sort
        in: query
        description: 'Sorts the returned results.<br><br>Each attribute must be prefixed
          with either + for ascending or - for descending. <br><br>Use a comma (,)
          to separate multiple attributes.<br><br><b>Note</b>: If you are not using
          the Swagger UI, the sort parameter value must be HTML-encoded. Use the prefix
          "sort=" in the query parameter.<br><br><b>Example</b>: Sort on -issuedOn,+lastUsed<br>sort=-issuedOn%2C%2BlastUsed'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for strings are =, !=, and contains. Use double quotation marks for the
          search values.<br>Valid operators for booleans are = and !<br>Valid operators
          for numbers and timestamps are >=, >, &lt;=, &lt;, =, and !=.<br><br><b>Note</b>:
          If you are not using the Swagger UI, the search parameter value must be
          HTML-encoded. Use the prefix "search=" in the query parameter.<br><br><b>Example</b>:
          Search on clientName contains "fd45"&name="John Smith"<br>search=clientName%20contains%20%22fd45%22%26name%3D%22John%20Smith%22'
        schema:
          type: string
      - name: base
        in: query
        description: 'Applies a base criteria to the search.<br><br>Valid operators
          for strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for booleans are = and !<br>Valid operators
          for numbers and timestamps are >=, >, &lt;=, &lt;, =, and !=.<br><br><b>Note</b>:
          If you are not using the Swagger UI, the base parameter value must be HTML-encoded.
          Use the prefix "base=" in the query parameter.<br><br><b>Example</b>: Base
          criteria for clientName contains "fd45"&name="John Smith"<br>base=clientName%20contains%20%22fd45%22%26name%3D%22John%20Smith%22'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values are inclusive or exclusive only. They cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          If you are not using the Swagger UI, the filter parameter value must be
          HTML-encoded. Use the prefix "filter=" in the query parameter.<br><br><b>Examples</b><br>Filter
          to return only clientName : filter=clientName<br>Filter to exclude clientId
          and category : filter=%21clientId,%21category'
        schema:
          type: string
      responses:
        '200':
          description: The consents were returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/USCConsentList"
        '400':
          description: The request was invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: Access is forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    patch:
      tags:
      - OpenID Connect Consent Management (deprecated)
      summary: Deprecated - Bulk delete OIDC consents.
      description: 'Deprecated: This API is deprecated and will be removed after June
        2022. Migrate OIDC applications to Advanced consent type and start using the
        Data Privacy and Consent Management APIs.<br> Delete specified OIDC or OAuth
        consents that belongs to this tenant.<br><br>Entitlements required: manageOidcConsents
        (Manage OIDC and OAuth consents)'
      operationId: patchConsents_0
      requestBody:
        description: The patch payload
        content:
          "*/*":
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/ConsentPatchEntry"
        required: true
      responses:
        '204':
          description: The patch operation succeeded.
          content: {}
        '207':
          description: The patch operation partially succeeded.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PatchResponse"
        '400':
          description: The request was invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Access is forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: payload
  "/v1.0/consents/{id}":
    get:
      tags:
      - OpenID Connect Consent Management (deprecated)
      summary: Deprecated - Retrieves a specific OIDC consent.
      description: 'Deprecated: This API is deprecated and will be removed after June
        2022. Migrate OIDC applications to Advanced consent type and start using the
        Data Privacy and Consent Management APIs.<br> Retrieves a specific OIDC or
        OAuth consent that belongs to this tenant.<br><br>Entitlements required: readOidcConsents
        (Read OIDC and OAuth consents) or manageOidcConsents (Manage OIDC and OAuth
        consents)'
      operationId: readConsent_0
      parameters:
      - name: id
        in: path
        description: Consent identifier
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The consent was returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/USCConsent"
        '403':
          description: Access is forbidden.
          content: {}
        '404':
          description: The consent was not found.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    delete:
      tags:
      - OpenID Connect Consent Management (deprecated)
      summary: Deprecated - Deletes a specific OIDC consent.
      description: 'Deprecated: This API is deprecated and will be removed after June
        2022. Migrate OIDC applications to Advanced consent type and start using the
        Data Privacy and Consent Management APIs.<br> Deletes a specific OIDC or OAuth
        consent that belongs to this tenant.<br><br>Entitlements required: manageOidcConsents
        (Manage OIDC and OAuth consents)'
      operationId: deleteConsent_0_0
      parameters:
      - name: id
        in: path
        description: Consent identifier
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The consent was deleted.
          content: {}
        '403':
          description: Access is forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/dynamic-client-profile":
    get:
      tags:
      - OpenID Connect Dynamic Client Profile
      summary: Read dynamic client profile.
      description: 'Retrieves the default settings for creating dynamic client of
        this tenant.<br><br>Entitlements required: readFederations (Read federations)'
      operationId: readProfile
      responses:
        '200':
          description: Successful Read
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DynamicClientProfile"
        '403':
          description: Forbidden
          content: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - OpenID Connect Dynamic Client Profile
      summary: Update dynamic client profile.
      description: 'Modify the default settings for creating dynamic client of this
        tenant.<br><br>Entitlements required: manageFederations (Manage federations)'
      operationId: updateProfile
      requestBody:
        description: Client payload
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateOidcDynClientProfile"
        required: true
      responses:
        '204':
          description: Successful Update
          content: {}
        '400':
          description: Bad Request Exception
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Forbidden
          content: {}
        '409':
          description: Conflict
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: payload
  "/v1.0/grants":
    get:
      tags:
      - OpenID Connect Grant Management
      summary: Retrieves the list of OIDC grants.
      description: 'Retrieves the list of OIDC or OAuth grants that belong to this
        tenant.<br><br>Entitlements required: readOidcGrants (Read OIDC and OAuth
        grants) or manageOidcGrants (Manage OIDC and OAuth grants)'
      operationId: readGrants_1
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>Use
          the following query parameters:<br><br><b>count</b> - Defines the total
          number of results that are returned from the data store. The maximum value
          is 1000.<br><br><b>page</b> - Identifies the requested page, or the offset.<br><br><b>limit</b>
          - Defines the total number of results that are returned per page. The maximum
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: If you are not using the
          Swagger UI, the pagination parameter value must be HTML encoded. Use the
          prefix "pagination=" in the query parameter.<br><br><b>Example</b>: Paginate
          on count=10&page=1&limit=5<br>pagination=count%3D10%26page%3D1%26limit%3D5'
        schema:
          type: string
      - name: sort
        in: query
        description: 'Sorts the returned results.<br><br>Each attribute must be prefixed
          with either + for ascending or - for descending. <br><br>Use a comma (,)
          to separate multiple attributes.<br><br><b>Note</b>: If you are not using
          the Swagger UI, the sort parameter value must be HTML encoded. Use the prefix
          "sort=" in the query parameter.<br><br><b>Example</b>: Sort on -issuedOn,+lastUsed<br>sort=-issuedOn%2C%2BlastUsed'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for booleans are = and !<br>Valid operators
          for numbers and timestamps are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>:
          If you are not using the Swagger UI, the search parameter value must be
          HTML encoded. Use the prefix "search=" in the query parameter.<br><br><b>Example</b>:
          Search on clientName contains "fd45"&name="John Smith"<br>search=clientName%20contains%20%22fd45%22%26name%3D%22John%20Smith%22'
        schema:
          type: string
      - name: base
        in: query
        description: 'Applies a base criteria to the search.<br><br>Valid operators
          for strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for booleans are = and !<br>Valid operators
          for numbers and timestamps are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>:
          If you are not using the Swagger UI, the base parameter value must be HTML
          encoded. Use the prefix "base=" in the query parameter.<br><br><b>Example</b>:
          Base criteria for clientName contains "fd45"&name="John Smith"<br>base=clientName%20contains%20%22fd45%22%26name%3D%22John%20Smith%22'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values are inclusive or exclusive only. They cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          If you are not using the Swagger UI, the filter parameter value must be
          HTML encoded. Use the prefix "filter=" in the query parameter.<br><br><b>Examples</b><br>Filter
          to return only clientName : filter=clientName<br>Filter to exclude clientId
          and category : filter=%21clientId,%21category'
        schema:
          type: string
      responses:
        '200':
          description: The grants were returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/USCGrantList"
        '400':
          description: The request was invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: Access was forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    patch:
      tags:
      - OpenID Connect Grant Management
      summary: Bulk delete, disable, or enable OIDC grants.
      description: 'Delete, disable, or enable all of the specified OIDC or OAuth
        grants and the associated tokens.<br><br>Entitlements required: manageOidcGrants
        (Manage OIDC and OAuth grants)'
      operationId: patchGrant_1
      requestBody:
        description: The patch payload
        content:
          "*/*":
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/GrantPatchEntry"
        required: true
      responses:
        '204':
          description: The patch operation succeeded.
          content: {}
        '207':
          description: The patch operation partially succeeded.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PatchResponse"
        '400':
          description: The request was invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Access was forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: payload
  "/v1.0/grants/{gid}":
    get:
      tags:
      - OpenID Connect Grant Management
      summary: Retrieves a specific OIDC grant.
      description: 'Retrieves a specific OIDC or OAuth grant.<br><br>Entitlements
        required: readOidcGrants (Read OIDC and OAuth grants) or manageOidcGrants
        (Manage OIDC and OAuth grants)'
      operationId: readGrant_1
      parameters:
      - name: gid
        in: path
        description: Grant identifier
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The grant was returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/USCGrant"
        '403':
          description: Access was forbidden.
          content: {}
        '404':
          description: The grant was not found.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    delete:
      tags:
      - OpenID Connect Grant Management
      summary: Deletes a specific OIDC grant.
      description: 'Deletes a specific OIDC or OAuth grant and the associated tokens.<br><br>Entitlements
        required: manageOidcGrants (Manage OIDC and OAuth grants)'
      operationId: deleteGrant_1
      parameters:
      - name: gid
        in: path
        description: Grant identifier
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The grant was deleted.
          content: {}
        '403':
          description: Access was forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/oidc/federation":
    get:
      tags:
      - OpenID Connect Federation
      summary: Retrieves the OpenID Connect federation configuration.
      description: 'Retrieves federation settings for this tenant.<br><br>Entitlements
        required: readFederations (Read federations)'
      operationId: readSettings
      responses:
        '200':
          description: The federation configuration was returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FederationSettings"
        '403':
          description: Access was forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - OpenID Connect Federation
      summary: Updates the OpenID Connect federation configuration.
      description: 'Modify federation settings for this tenant.<br><br>Entitlements
        required: manageFederations (Manage federations)'
      operationId: updateSettings
      requestBody:
        description: Federation settings
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateOidcFederation"
        required: true
      responses:
        '204':
          description: The federation configuration was updated.
          content: {}
        '400':
          description: The request was invalid.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Access was forbidden.
          content: {}
        '409':
          description: Conflicting modifications. Try again later.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An internal server error occurred.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: payload
  "/v1.0/sts/tokentypes":
    get:
      tags:
      - OpenID Connect Token Types
      summary: Retrieves the list of custom OIDC token types.
      description: 'Retrieves the list of custom OIDC token types.<br><br>Entitlements
        required: readSTSClients (Read STS clients and token types) or manageSTSClients
        (Manage STS clients and token types)'
      operationId: readTokenTypes
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>Use
          the following query parameters:<br><br><b>count</b> - Defines the total
          number of results that are returned from the data store. The maximum value
          is 1000.<br><br><b>page</b> - Identifies the requested page, or the offset.<br><br><b>limit</b>
          - Defines the total number of results that are returned per page. The maximum
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: If you are not using the
          Swagger UI, the pagination parameter value must be HTML encoded. Use the
          prefix "pagination=" in the query parameter.<br><br><b>Example</b>: Paginate
          on count=10&page=1&limit=5<br>pagination=count%3D10%26page%3D1%26limit%3D5'
        schema:
          type: string
      - name: sort
        in: query
        description: 'Sorts the returned results.<br><br>Each attribute must be prefixed
          with either + for ascending or - for descending. <br><br>Use a comma (,)
          to separate multiple attributes.<br><br><b>Note</b>: If you are not using
          the Swagger UI, the sort parameter value must be HTML encoded. Use the prefix
          "sort=" in the query parameter.<br><br><b>Example</b>: Sort on name (descending)<br>sort=-name'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for booleans are = and !<br>Valid operators
          for numbers and timestamps are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>:
          If you are not using the Swagger UI, the search parameter value must be
          HTML encoded. Use the prefix "search=" in the query parameter.<br><br><b>Example</b>:
          Search on name contains "ibm"&type="urn:ietf:params:oauth:token-type:jwt"<br>search=name%20contains%20%22ibm%22%26type%3D%22urn%3Aietf%3Aparams%3Aoauth%3Atoken-type%3Ajwt%22'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values are inclusive or exclusive only. They cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          If you are not using the Swagger UI, the filter parameter value must be
          HTML encoded. Use the prefix "filter=" in the query parameter.<br><br><b>Examples</b><br>Filter
          to return only the token type name : filter=name<br>Filter to exclude issuer
          and jwksUri : filter=%21issuer,%21jwksUri'
        schema:
          type: string
      responses:
        '200':
          description: The custom OIDC token types were returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/STSTokenTypeList"
        '400':
          description: The request was invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Access was forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - OpenID Connect Token Types
      summary: Create a custom OIDC token type
      description: 'Create a new custom OIDC token type for this tenant.<br><br>Entitlements
        required: manageSTSClients (Manage STS clients and token types)'
      operationId: createTokenType
      requestBody:
        description: Custom OIDC token type payload
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateOidcSTSTokenType"
        required: true
      responses:
        '201':
          description: The custom OIDC token type was successfully created.
          headers:
            Location:
              description: Created resource location
              schema:
                type: string
                format: uri
          content: {}
        '400':
          description: The request was invalid.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Access was forbidden.
          content: {}
        '409':
          description: A custom OIDC token type with the same ID already exists.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An internal server error occurred.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: payload
  "/v1.0/sts/tokentypes/{id}":
    get:
      tags:
      - OpenID Connect Token Types
      summary: Read a custom OIDC token type
      description: 'Read a custom OIDC token type.<br><br>Entitlements required: readSTSClients
        (Read STS clients and token types) or manageSTSClients (Manage STS clients
        and token types)'
      operationId: readTokenType
      parameters:
      - name: id
        in: path
        description: Token type identifier
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The custom OIDC token type was returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/STSTokenType"
        '400':
          description: The request was invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Access was forbidden.
          content: {}
        '404':
          description: The resource was not found.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - OpenID Connect Token Types
      summary: Update a custom OIDC Token Type
      description: 'Update an existing custom OIDC token type.<br><br>Entitlements
        required: manageSTSClients (Manage STS clients and token types)'
      operationId: updateTokenType
      parameters:
      - name: id
        in: path
        description: Token type identifier
        required: true
        schema:
          type: string
      requestBody:
        description: Custom OIDC token type payload
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateOidcSTSTokenType"
        required: true
      responses:
        '204':
          description: The custom OIDC token type was successfully updated.
          content: {}
        '400':
          description: The request was invalid.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Access was forbidden.
          content: {}
        '409':
          description: A custom OIDC token type with the same ID already exists.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An internal server error occurred.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: payload
    delete:
      tags:
      - OpenID Connect Token Types
      summary: Delete a custom OIDC token type
      description: 'Delete an existing custom OIDC token type.<br><br>Entitlements
        required: manageSTSClients (Manage STS clients and token types)'
      operationId: deleteTokenType
      parameters:
      - name: id
        in: path
        description: Token type identifier
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The custom OIDC token type was successfully deleted.
          content: {}
        '403':
          description: Access was forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/userconsents":
    get:
      tags:
      - OpenID Connect Consent Management (deprecated)
      summary: Deprecated - Retrieves the list of OIDC consents.
      description: 'Deprecated: This API is deprecated and will be removed after June
        2022. Migrate OIDC applications to Advanced consent type and start using the
        Data Privacy and Consent Management APIs.<br> Retrieves the list of OIDC or
        OAuth consents that belong to this user.'
      operationId: readConsents_1
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>Use
          the following query parameters:<br><br><b>count</b> - Defines the total
          number of results that are returned from the data store. The maximum value
          is 1000.<br><br><b>page</b> - Identifies the requested page, or the offset.<br><br><b>limit</b>
          - Defines the total number of results that are returned per page. The maximum
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: If you are not using the
          Swagger UI, the pagination parameter value must be HTML-encoded. Use the
          prefix "pagination=" in the query parameter.<br><br><b>Example</b>: Paginate
          on count=10&page=1&limit=5<br>pagination=count%3D10%26page%3D1%26limit%3D5'
        schema:
          type: string
      - name: sort
        in: query
        description: 'Sorts the returned results.<br><br>Each attribute must be prefixed
          with either + for ascending or - for descending. <br><br>Use a comma (,)
          to separate multiple attributes.<br><br><b>Note</b>: If you are not using
          the Swagger UI, the sort parameter value must be HTML-encoded. Use the prefix
          "sort=" in the query parameter.<br><br><b>Example</b>: Sort on -issuedOn,+lastUsed<br>sort=-issuedOn%2C%2BlastUsed'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for strings are = , !=, and contains. Use double quotation marks for the
          search values.<br>Valid operators for booleans are = and !.<br>Valid operators
          for numbers and timestamps are >=, >, &lt;=, &lt;, =, and !=.<br><br><b>Note</b>:
          If you are not using the Swagger UI, the search parameter value must be
          HTML-encoded. Use the prefix "search=" in the query parameter.<br><br><b>Example</b>:
          Search on clientName contains "fd45"&name="John Smith"<br>search=clientName%20contains%20%22fd45%22%26name%3D%22John%20Smith%22'
        schema:
          type: string
      - name: base
        in: query
        description: 'Applies a base criteria to the search.<br><br>Valid operators
          for strings are = , !=, and contains. Use double quotation marks for the
          search values.<br>Valid operators for booleans are = and !<br>Valid operators
          for numbers and timestamps are >=, >, &lt;=, &lt;, =, and !=<br><br><b>Note</b>:
          If you are not using the Swagger UI, the base parameter value must be HTML-encoded.
          Use the prefix "base=" in the query parameter.<br><br><b>Example</b>: Base
          criteria for clientName contains "fd45"&name="John Smith"<br>base=clientName%20contains%20%22fd45%22%26name%3D%22John%20Smith%22'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values are inclusive or exclusive only. They cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          If you are not using the Swagger UI, the filter parameter value must be
          HTML-encoded. Use the prefix "filter=" in the query parameter.<br><br><b>Examples</b><br>Filter
          to return only clientName : filter=clientName<br>Filter to exclude clientId
          and category : filter=%21clientId,%21category'
        schema:
          type: string
      responses:
        '200':
          description: The consents were returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/USCConsentList"
        '400':
          description: The request was invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: Access is forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    patch:
      tags:
      - OpenID Connect Consent Management (deprecated)
      summary: Deprecated - Bulk delete, or scope and entitlement removal of OIDC
        consents.
      description: 'Deprecated: This API is deprecated and will be removed after June
        2022. Migrate OIDC applications to Advanced consent type and start using the
        Data Privacy and Consent Management APIs.<br> Deletion or removal of scope/entitlement
        of specified OIDC or OAuth consents that belong to this user.'
      operationId: patchConsents_1
      requestBody:
        description: The patch payload
        content:
          "*/*":
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/ConsentPatchEntry"
        required: true
      responses:
        '204':
          description: The patch operation succeeded.
          content: {}
        '207':
          description: The patch operation partially succeeded.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PatchResponse"
        '400':
          description: The request was invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Access is forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: payload
  "/v1.0/userconsents/{id}":
    get:
      tags:
      - OpenID Connect Consent Management (deprecated)
      summary: Deprecated - Retrieves a specific OIDC consent.
      description: 'Deprecated: This API is deprecated and will be removed after June
        2022. Migrate OIDC applications to Advanced consent type and start using the
        Data Privacy and Consent Management APIs.<br> Retrieves a specific OIDC or
        OAuth consent that belong to this user.'
      operationId: readConsent_1
      parameters:
      - name: id
        in: path
        description: Consent identifier
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The consent was returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/USCConsent"
        '403':
          description: Access is forbidden.
          content: {}
        '404':
          description: The consent was not found.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    delete:
      tags:
      - OpenID Connect Consent Management (deprecated)
      summary: Deprecated - Deletes a specific OIDC consent.
      description: 'Deprecated: This API is deprecated and will be removed after June
        2022. Migrate OIDC applications to Advanced consent type and start using the
        Data Privacy and Consent Management APIs.<br> Deletes a specific OIDC or OAuth
        consent that belongs to this user.'
      operationId: deleteConsent_1
      parameters:
      - name: id
        in: path
        description: Consent identifier
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The consent was deleted.
          content: {}
        '403':
          description: Access is forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    patch:
      tags:
      - OpenID Connect Consent Management (deprecated)
      summary: Deprecated - Bulk scope/entitlement removal of OIDC consents.
      description: 'Deprecated: This API is deprecated and will be removed after June
        2022. Migrate OIDC applications to Advanced consent type and start using the
        Data Privacy and Consent Management APIs.<br> Removal of scope/entitlement
        of specified OIDC or OAuth consents that belong to this user.'
      operationId: patchConsent_0
      parameters:
      - name: id
        in: path
        description: Consent identifier
        required: true
        schema:
          type: string
      requestBody:
        description: The patch payload
        content:
          "*/*":
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/ConsentPatchEntry"
        required: true
      responses:
        '204':
          description: The patch operation succeeded.
          content: {}
        '207':
          description: The patch operation partially succeeded.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PatchResponse"
        '400':
          description: The request was invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Access is forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: payload
  "/v1.0/usergrants":
    get:
      tags:
      - OpenID Connect Grant Management
      summary: Retrieves the list of OIDC grants.
      description: Retrieves the list of OIDC or OAuth grants that belong to this
        user.
      operationId: readGrants_2
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>Use
          the following query parameters:<br><br><b>count</b> - Defines the total
          number of results that are returned from the data store. The maximum value
          is 1000.<br><br><b>page</b> - Identifies the requested page, or the offset.<br><br><b>limit</b>
          - Defines the total number of results that are returned per page. The maximum
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: If you are not using the
          Swagger UI, the pagination parameter value must be HTML encoded. Use the
          prefix "pagination=" in the query parameter.<br><br><b>Example</b>: Paginate
          on count=10&page=1&limit=5<br>pagination=count%3D10%26page%3D1%26limit%3D5'
        schema:
          type: string
      - name: sort
        in: query
        description: 'Sorts the returned results.<br><br>Each attribute must be prefixed
          with either + for ascending or - for descending. <br><br>Use a comma (,)
          to separate multiple attributes.<br><br><b>Note</b>: If you are not using
          the Swagger UI, the sort parameter value must be HTML encoded. Use the prefix
          "sort=" in the query parameter.<br><br><b>Example</b>: Sort on -issuedOn,+lastUsed<br>sort=-issuedOn%2C%2BlastUsed'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for booleans are = and !<br>Valid operators
          for numbers and timestamps are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>:
          If you are not using the Swagger UI, the search parameter value must be
          HTML encoded. Use the prefix "search=" in the query parameter.<br><br><b>Example</b>:
          Search on clientName contains "fd45"&name="John Smith"<br>search=clientName%20contains%20%22fd45%22%26name%3D%22John%20Smith%22'
        schema:
          type: string
      - name: base
        in: query
        description: 'Applies a base criteria to the search.<br><br>Valid operators
          for strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for booleans are = and !<br>Valid operators
          for numbers and timestamps are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>:
          If you are not using the Swagger UI, the base parameter value must be HTML
          encoded. Use the prefix "base=" in the query parameter.<br><br><b>Example</b>:
          Base criteria for clientName contains "fd45"&name="John Smith"<br>base=clientName%20contains%20%22fd45%22%26name%3D%22John%20Smith%22'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values are inclusive or exclusive only. They cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          If you are not using the Swagger UI, the filter parameter value must be
          HTML encoded. Use the prefix "filter=" in the query parameter.<br><br><b>Examples</b><br>Filter
          to return only clientName : filter=clientName<br>Filter to exclude clientId
          and category : filter=%21clientId,%21category'
        schema:
          type: string
      responses:
        '200':
          description: The grants were returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/USCGrantList"
        '400':
          description: The request was invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: Access was forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    patch:
      tags:
      - OpenID Connect Grant Management
      summary: Bulk delete, disable, or enable OIDC grants.
      description: Delete, disable, or enable all of the specified OIDC or OAuth grants
        and the associated tokens that belongs to the user.
      operationId: patchGrant_2
      requestBody:
        description: The patch payload
        content:
          "*/*":
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/GrantPatchEntry"
        required: true
      responses:
        '204':
          description: The patch operation succeeded.
          content: {}
        '207':
          description: The patch operation partially succeeded.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PatchResponse"
        '400':
          description: The request was invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Access was forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: payload
  "/v1.0/usergrants/{gid}":
    get:
      tags:
      - OpenID Connect Grant Management
      summary: Retrieves a specific OIDC grant.
      description: Retrieves a specific OIDC or OAuth grant that belongs to the user.
      operationId: readGrant_2
      parameters:
      - name: gid
        in: path
        description: Grant identifier
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The grant was returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/USCGrant"
        '403':
          description: Access was forbidden.
          content: {}
        '404':
          description: The grant was not found.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    delete:
      tags:
      - OpenID Connect Grant Management
      summary: Deletes a specific OIDC grant.
      description: Deletes a specific OIDC or OAuth grant and the associated tokens
        that belongs to the user.
      operationId: deleteGrant_2
      parameters:
      - name: gid
        in: path
        description: Grant identifier
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The grant was deleted.
          content: {}
        '403':
          description: Access was forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v2.0/appgrants/app/{appId}":
    get:
      tags:
      - OpenID Connect Grant Management
      summary: Retrieves the list of OIDC application grants.
      description: 'Retrieves the list of OIDC or OAuth grants for a particular OIDC
        application. The user must be an admin or the owner of the application.<br><br>Entitlements
        required: readOidcAppGrants (Read OIDC and OAuth application grants) or manageOidcAppGrants
        (Manage OIDC and OAuth application grants) or readOidcGrants (Read OIDC and
        OAuth grants) or manageOidcGrants (Manage OIDC and OAuth grants)'
      operationId: readGrants_0
      parameters:
      - name: appId
        in: path
        description: Application ID
        required: true
        schema:
          type: string
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>Use
          the following query parameters:<br><br><b>count</b> - Defines the total
          number of results that are returned from the data store. The maximum value
          is 1000.<br><br><b>page</b> - Identifies the requested page, or the offset.<br><br><b>limit</b>
          - Defines the total number of results that are returned per page. The maximum
          value is 1000.<br><br>A maximum of 200 results are returned if no pagination
          query parameters are passed.<br><br><b>Note</b>: If you are not using the
          Swagger UI, the pagination parameter value must be HTML encoded. Use the
          prefix "pagination=" in the query parameter.<br><br><b>Example</b>: Paginate
          on count=10&page=1&limit=5<br>pagination=count%3D10%26page%3D1%26limit%3D5'
        schema:
          type: string
      - name: sort
        in: query
        description: 'Sorts the returned results.<br><br>Each attribute must be prefixed
          with either + for ascending or - for descending. <br><br>Use a comma (,)
          to separate multiple attributes.<br><br><b>Note</b>: If you are not using
          the Swagger UI, the sort parameter value must be HTML encoded. Use the prefix
          "sort=" in the query parameter.<br><br><b>Example</b>: Sort on -issuedOn,+lastUsed<br>sort=-issuedOn%2C%2BlastUsed'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for booleans are = and !<br>Valid operators
          for numbers and timestamps are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>:
          If you are not using the Swagger UI, the search parameter value must be
          HTML encoded. Use the prefix "search=" in the query parameter.<br><br><b>Example</b>:
          Search on clientName contains "fd45"&name="John Smith"<br>search=clientName%20contains%20%22fd45%22%26name%3D%22John%20Smith%22'
        schema:
          type: string
      - name: base
        in: query
        description: 'Applies a base criteria to the search.<br><br>Valid operators
          for strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for booleans are = and !<br>Valid operators
          for numbers and timestamps are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>:
          If you are not using the Swagger UI, the base parameter value must be HTML
          encoded. Use the prefix "base=" in the query parameter.<br><br><b>Example</b>:
          Base criteria for clientName contains "fd45"&name="John Smith"<br>base=clientName%20contains%20%22fd45%22%26name%3D%22John%20Smith%22'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values are inclusive or exclusive only. They cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          If you are not using the Swagger UI, the filter parameter value must be
          HTML encoded. Use the prefix "filter=" in the query parameter.<br><br><b>Examples</b><br>Filter
          to return only clientName : filter=clientName<br>Filter to exclude clientId
          and category : filter=%21clientId,%21category'
        schema:
          type: string
      responses:
        '200':
          description: The grants were returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/USCGrantList"
        '400':
          description: The request was invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: Access was forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    patch:
      tags:
      - OpenID Connect Grant Management
      summary: Bulk delete, disable, or enable OIDC application grants.
      description: 'Delete, disable, or enable all of the specified OIDC or OAuth
        grants and the associated tokens of a particular OIDC application. The user
        must be an admin or the owner of the application.<br><br>Entitlements required:
        manageOidcAppGrants (Manage OIDC and OAuth application grants) or manageOidcGrants
        (Manage OIDC and OAuth grants)'
      operationId: patchGrant_0
      parameters:
      - name: appId
        in: path
        description: Application ID
        required: true
        schema:
          type: string
      requestBody:
        description: The patch payload
        content:
          "*/*":
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/GrantPatchEntry"
        required: true
      responses:
        '204':
          description: The patch operation succeeded.
          content: {}
        '207':
          description: The patch operation partially succeeded.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PatchResponse"
        '400':
          description: The request was invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: Access was forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: payload
  "/v2.0/appgrants/app/{appId}/grant/{gid}":
    get:
      tags:
      - OpenID Connect Grant Management
      summary: Retrieves a specific OIDC application grant.
      description: 'Retrieves a specific OIDC or OAuth grant of a particular OIDC
        application. The user must be an admin or the owner of the application.<br><br>Entitlements
        required: readOidcAppGrants (Read OIDC and OAuth application grants) or manageOidcAppGrants
        (Manage OIDC and OAuth application grants) or readOidcGrants (Read OIDC and
        OAuth grants) or manageOidcGrants (Manage OIDC and OAuth grants)'
      operationId: readGrant_0
      parameters:
      - name: appId
        in: path
        description: Application ID
        required: true
        schema:
          type: string
      - name: gid
        in: path
        description: Grant identifier
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The grant was returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/USCGrant"
        '403':
          description: Access was forbidden.
          content: {}
        '404':
          description: The grant was not found.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    delete:
      tags:
      - OpenID Connect Grant Management
      summary: Deletes a specific OIDC application grant.
      description: 'Deletes a specific OIDC or OAuth grant and the associated tokens
        of a particular OIDC application. The user must be an admin or the owner of
        the application.<br><br>Entitlements required: manageOidcAppGrants (Manage
        OIDC and OAuth application grants) or manageOidcGrants (Manage OIDC and OAuth
        grants)'
      operationId: deleteGrant_0
      parameters:
      - name: appId
        in: path
        description: Application ID
        required: true
        schema:
          type: string
      - name: gid
        in: path
        description: Grant identifier
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The grant was deleted.
          content: {}
        '403':
          description: Access was forbidden.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/endpoint/{opName}/.well-known/openid-configuration":
    get:
      tags:
      - OpenID Connect
      summary: Get provider's metadata.
      description: Use this API to get the OIDC provider's metadata.
      operationId: handleMetadata
      parameters:
      - name: opName
        in: path
        description: The OpenID Connect provider ID. The default provider ID is "default".
        required: true
        schema:
          type: string
          default: default
          enum:
          - default
      responses:
        '200':
          description: The metadata was returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DefinitionMetadata"
        '404':
          description: The resource was not found.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
      x-publicAPI: 'true'
  "/v1.0/endpoint/{opName}/authorize":
    get:
      tags:
      - OpenID Connect
      summary: Authorize the user to use OIDC.
      description: Use this API to authorize a user to use OIDC. This endpoint requires
        valid login session cookies for the tenant.
      operationId: handleAuthorizeGet
      parameters:
      - name: opName
        in: path
        description: The OpenID Connect provider ID. The default provider ID is "default".
        required: true
        schema:
          type: string
          default: default
          enum:
          - default
      - name: client_id
        in: query
        description: The OIDC application's client ID.
        required: true
        schema:
          type: string
      - name: response_type
        in: query
        description: 'A space-delimited list of response types. Valid response types
          are: code, token, id_token.'
        required: true
        schema:
          type: string
          default: code
      - name: response_mode
        in: query
        description: The response mode. It defaults to query for the authorization_code
          grant type flow, and to fragment for the implicit grant type flow.
        schema:
          type: string
          enum:
          - query
          - fragment
          - form_post
      - name: redirect_uri
        in: query
        description: The redirect URI.
        required: true
        schema:
          type: string
      - name: state
        in: query
        description: The state. An opaque value that is used to maintain the state
          between the request and the callback.
        schema:
          type: string
      - name: nonce
        in: query
        description: Nonce. The string value that is used to associate a client session
          with an ID Token to mitigate replay attacks. This attribute is required
          when the response type includes id_token.
        schema:
          type: string
      - name: prompt
        in: query
        description: Whether the user is prompted for reauthentication. When the value
          is "login", the user is reauthenticated. The reauthentication applies to
          default Cloud Directory logins only. When the value is "none", the user
          is not be prompted for authentication.
        schema:
          type: string
          enum:
          - none
          - login
      - name: max_age
        in: query
        description: Maximum authentication age. Specifies the allowable elapsed time,
          in seconds, since the last time the user was authenticated. This attribute
          applies to Cloud Directory login sessions only.
        schema:
          type: string
      - name: code_challenge
        in: query
        description: Code challenge. Required if the OIDC application is configured
          to require proof key for code exchange (PKCE).
        schema:
          type: string
      - name: code_challenge_method
        in: query
        description: Code challenge method for PKCE. Defaults to plain if not specified.
        schema:
          type: string
          enum:
          - plain
          - S256
      - name: scope
        in: query
        description: A space-delimited list of scopes that are associated with this
          authorization request.
        required: true
        schema:
          type: string
          default: openid
      - name: claims
        in: query
        description: The JSON that contains the claims for id_token or userinfo endpoint.
        schema:
          type: string
      - name: login_hint
        in: query
        description: Login hint. Value to use when prompting the user for login. Optional
          for OIDC request. This value could be the username as a string (e.g. john@ibm.com),
          or a JSON (e.g. {"realm":"cloudIdentityRealm","username":"john@ibm.com"}).
          When using a JSON value, the realm represents the identity source realm.
        schema:
          type: string
      responses:
        '200':
          description: Form post response.
          content: {}
        '302':
          description: Redirect response.
          headers:
            Location:
              description: The redirection URI that has a query string or a fragment.
                For an error, it contains the error and error_description field. For
                success, it might return the authorization code, access_token, token_type,
                expires_in, scope, id_token, grant_id and state attributes.
              schema:
                type: string
          content: {}
        '400':
          description: The error page that contains the error and error_description
            attributes.
          content: {}
      x-publicAPI: 'true'
    post:
      tags:
      - OpenID Connect
      summary: Authorize the user to use OIDC.
      description: Use this API to authorize a user to use OIDC. This endpoint requires
        valid login session cookies for the tenant.
      operationId: handleAuthorizePost
      parameters:
      - name: opName
        in: path
        description: The OpenID Connect provider ID. The default provider ID is "default".
        required: true
        schema:
          type: string
          default: default
          enum:
          - default
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - client_id
              - redirect_uri
              - response_type
              - scope
              type: object
              properties:
                client_id:
                  type: string
                  description: The OIDC application's client ID.
                response_type:
                  type: string
                  description: 'A space-delimited list of response types. Valid response
                    types are: code, token, id_token.'
                  default: code
                response_mode:
                  type: string
                  description: The response mode. It defaults to query for the authorization_code
                    grant type flow, and to fragment for the implicit grant type flow.
                  enum:
                  - query
                  - fragment
                  - form_post
                redirect_uri:
                  type: string
                  description: The redirect URI.
                state:
                  type: string
                  description: The state. An opaque value that is used to maintain
                    the state between the request and the callback.
                nonce:
                  type: string
                  description: Nonce. The string value that is used to associate a
                    client session with an ID Token to mitigate replay attacks. This
                    attribute is required when the response type includes id_token.
                prompt:
                  type: string
                  description: Whether the user is prompted for reauthentication.
                    When the value is "login", the user is reauthenticated. The reauthentication
                    applies to default Cloud Directory logins only. When the value
                    is "none", the user is not be prompted for authentication.
                  enum:
                  - none
                  - login
                max_age:
                  type: string
                  description: Maximum authentication age. Specifies the allowable
                    elapsed time, in seconds, since the last time the user was authenticated.
                    This attribute applies to Cloud Directory login sessions only.
                code_challenge:
                  type: string
                  description: Code challenge. Required if the OIDC application is
                    configured to require proof key for code exchange (PKCE).
                code_challenge_method:
                  type: string
                  description: Code challenge method for PKCE. Defaults to plain if
                    not specified.
                  enum:
                  - plain
                  - S256
                scope:
                  type: string
                  description: A space-delimited list of scopes that are associated
                    with this authorization request.
                  default: openid
                claims:
                  type: string
                  description: The JSON that contains the claims for id_token or userinfo
                    endpoint.
                login_hint:
                  type: string
                  description: Login hint. Value to use when prompting the user for
                    login. Optional for OIDC request. This value could be the username
                    as a string (e.g. john@ibm.com), or a JSON (e.g. {"realm":"cloudIdentityRealm","username":"john@ibm.com"}).
                    When using a JSON value, the realm represents the identity source
                    realm.
        required: true
      responses:
        '200':
          description: Form post response.
          content: {}
        '302':
          description: Redirect response.
          headers:
            Location:
              description: The redirection URI that has a query string or a fragment.
                For an error, it contains the error and error_description field. For
                success, it might return the authorization code, access_token, token_type,
                expires_in, scope, id_token, grant_id and state attributes.
              schema:
                type: string
          content: {}
        '400':
          description: The error page that contains the error and error_description
            attributes.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/endpoint/{opName}/client_registration":
    post:
      tags:
      - OpenID Connect
      summary: Create a dynamic client.
      description: 'Use this API to create a dynamic client.<br><br>Entitlements required:
        manageAppAccessAdmin (Manage application lifecycle).'
      operationId: handleClientRegistrationPost
      parameters:
      - name: opName
        in: path
        description: The OpenID Connect provider ID. The default provider ID is "default".
        required: true
        schema:
          type: string
          default: default
          enum:
          - default
      - name: Authorization
        in: header
        description: Bearer access token
        required: true
        schema:
          type: string
      requestBody:
        description: Dynamic client payload
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateDynamicClient"
        required: true
      responses:
        '200':
          description: Successful Creation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DynamicClientResponse"
        '400':
          description: Bad Request Exception
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
      x-publicAPI: 'true'
      x-codegen-request-body-name: payload
  "/v1.0/endpoint/{opName}/client_registration/{id}":
    get:
      tags:
      - OpenID Connect
      summary: Read a dynamic client.
      description: 'Use this API to read a dynamic client.<br><br>Entitlements required:
        manageAppAccessAdmin (Manage application lifecycle).'
      operationId: handleClientRegistrationGet
      parameters:
      - name: opName
        in: path
        description: The OpenID Connect provider ID. The default provider ID is "default".
        required: true
        schema:
          type: string
          default: default
          enum:
          - default
      - name: id
        in: path
        description: Dynamic client identifier
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Bearer access token
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Read
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DynamicClientResponse"
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
      x-publicAPI: 'true'
    delete:
      tags:
      - OpenID Connect
      summary: Delete a dynamic client.
      description: 'Use this API to delete a dynamic client.<br><br>Entitlements required:
        manageAppAccessAdmin (Manage application lifecycle).'
      operationId: handleClientRegistrationDelete
      parameters:
      - name: opName
        in: path
        description: The OpenID Connect provider ID. The default provider ID is "default".
        required: true
        schema:
          type: string
          default: default
          enum:
          - default
      - name: id
        in: path
        description: Dynamic client identifier
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Bearer access token
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Successful Delete
          content: {}
        '401':
          description: Unauthorized access
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
        '403':
          description: Forbidden
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
        '500':
          description: Internal Server Error
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
      x-publicAPI: 'true'
  "/v1.0/endpoint/{opName}/device_authorization":
    post:
      tags:
      - OpenID Connect
      summary: Authorize device to use OIDC.
      description: Use this API to authorize a device to use OIDC.
      operationId: handleDeviceAuthorize
      parameters:
      - name: opName
        in: path
        description: The OpenID Connect provider ID. The default provider ID is "default".
        required: true
        schema:
          type: string
          default: default
          enum:
          - default
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - client_id
              - scope
              type: object
              properties:
                client_id:
                  type: string
                  description: The OIDC application's client ID.
                scope:
                  type: string
                  description: A space-delimited list of scopes that are associated
                    with this device authorization request.
                  default: openid
        required: true
      responses:
        '200':
          description: Device and user codes are returned.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/DeviceAuthorizeResponse"
        '400':
          description: The request was invalid.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
        '500':
          description: An internal server error occurred.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
      x-publicAPI: 'true'
  "/v1.0/endpoint/{opName}/introspect":
    post:
      tags:
      - OpenID Connect
      summary: Introspect the token.
      description: Use this API to introspect an OIDC token.
      operationId: handleIntrospect_0
      parameters:
      - name: opName
        in: path
        description: The OpenID Connect provider ID. The default provider ID is "default".
        required: true
        schema:
          type: string
          default: default
          enum:
          - default
      - name: Authorization
        in: header
        description: The basic authorization header that contains a base64-encoded
          client ID and the client secret. Use this header as an alternative to sending
          the client ID and secret in the form parameters.
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - token
              type: object
              properties:
                client_id:
                  type: string
                  description: The API client's or OIDC application's client ID that
                    is required when the basic authorization header is not set.
                client_secret:
                  type: string
                  description: The API client's or OIDC application's client secret
                    that is required when the basic authorization header is not set
                    and the client is not a public client.
                client_assertion:
                  type: string
                  description: The JWT assertion being used to authenticate the client.
                client_assertion_type:
                  type: string
                  description: The format of client assertion. When using client_secret_jwt
                    or private_key_jwt client assertion, the value here must be urn:ietf:params:oauth:client-assertion-type:jwt-bearer.
                token:
                  type: string
                  description: The token that is being introspected.
                token_type_hint:
                  type: string
                  description: The token type. This attribute is an optional hint
                    about the token that is being introspected.
        required: true
      responses:
        '200':
          description: The introspection result was returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IntrospectResponse_0"
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
      x-publicAPI: 'true'
  "/v1.0/endpoint/{opName}/jwks":
    get:
      tags:
      - OpenID Connect
      summary: Get the provider's JSON Web Key Set (JWKS).
      description: Use this API to get the OIDC provider's JSON Web Key Set, which
        contains the public keys.
      operationId: handleJwks
      parameters:
      - name: opName
        in: path
        description: The OpenID Connect provider ID. The default provider ID is "default".
        required: true
        schema:
          type: string
          default: default
          enum:
          - default
      responses:
        '200':
          description: The JSON Web Key Set was returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/JwksResponse"
        '404':
          description: The resource was not found.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
      x-publicAPI: 'true'
  "/v1.0/endpoint/{opName}/revoke":
    post:
      tags:
      - OpenID Connect
      summary: Revoke the token.
      description: Use this API to revoke an OIDC token.
      operationId: handleRevoke
      parameters:
      - name: opName
        in: path
        description: The OpenID Connect provider ID. The default provider ID is "default".
        required: true
        schema:
          type: string
          default: default
          enum:
          - default
      - name: Authorization
        in: header
        description: The basic authorization header that contains a base64-encoded
          client ID and the client secret. Use this header as an alternative to sending
          the client ID and secret in the form parameters.
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - token
              type: object
              properties:
                client_id:
                  type: string
                  description: The API client's or OIDC application's client ID that
                    is required when the basic authorization header is not set.
                client_secret:
                  type: string
                  description: The API client's or OIDC application's client secret
                    that is required when the basic authorization header is not set
                    and the client is not a public client.
                client_assertion:
                  type: string
                  description: The JWT assertion being used to authenticate the client.
                client_assertion_type:
                  type: string
                  description: The format of client assertion. When using client_secret_jwt
                    or private_key_jwt client assertion, the value here must be urn:ietf:params:oauth:client-assertion-type:jwt-bearer.
                token:
                  type: string
                  description: The token that is being revoked.
                token_type_hint:
                  type: string
                  description: The token type. This attribute is an optional hint
                    about the token that is being revoked.
        required: true
      responses:
        '200':
          description: The token was revoked.
          content: {}
        '400':
          description: The request was invalid.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
        '500':
          description: An internal server error occurred.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
      x-publicAPI: 'true'
  "/v1.0/endpoint/{opName}/token":
    post:
      tags:
      - OpenID Connect
      summary: Get the access token.
      description: Use this API to get the OIDC tokens by using the API client credentials
        or OIDC application client credentials. For API clients, the returned access
        tokens can be used to access the APIs that the API client has been granted
        access to.
      operationId: handleToken
      parameters:
      - name: opName
        in: path
        description: The OpenID Connect provider ID. The default provider ID is "default".
        required: true
        schema:
          type: string
          default: default
          enum:
          - default
      - name: Authorization
        in: header
        description: The basic authorization header that contains a base64-encoded
          client ID and the client secret. Use this header as an alternative to sending
          the client ID and secret in the form parameters.
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - grant_type
              - scope
              type: object
              properties:
                code:
                  type: string
                  description: The authorization code. It is only required for "authorization_code"
                    grant types.
                code_verifier:
                  type: string
                  description: The code verifier. This optional attribute is for "authorization_code"
                    grant types, when public clients are being used.
                redirect_uri:
                  type: string
                  description: The redirect URI. It is only required for "authorization_code"
                    grant types.
                username:
                  type: string
                  description: Username credential. Only required for "password" grant
                    type.
                password:
                  type: string
                  description: Password credential. Only required for "password" grant
                    type.
                device_code:
                  type: string
                  description: Device verification code. Only required for "urn:ietf:params:oauth:grant-type:device_code"
                    grant type.
                refresh_token:
                  type: string
                  description: The refresh token. It is only required for "refresh_token"
                    grant types.
                client_id:
                  type: string
                  description: The API client's or OIDC application's client ID that
                    is required when the basic authorization header is not set.
                client_secret:
                  type: string
                  description: The API client's or OIDC application's client secret
                    that is required when the basic authorization header is not set
                    and the client is not a public client.
                assertion:
                  type: string
                  description: Signed and/or encrypted JWT-bearer token. It is only
                    required for "urn:ietf:params:oauth:grant-type:jwt-bearer" grant
                    type.
                client_assertion:
                  type: string
                  description: The JWT assertion being used to authenticate the client.
                client_assertion_type:
                  type: string
                  description: The format of client assertion. When using client_secret_jwt
                    or private_key_jwt client assertion, the value here must be urn:ietf:params:oauth:client-assertion-type:jwt-bearer.
                grant_type:
                  type: string
                  description: 'The grant type. The valid grant types for API clients
                    is: client_credentials. The valid grant types for OIDC applications
                    are: authorization_code, refresh_token, password, urn:ietf:params:oauth:grant-type:device_code
                    and urn:ietf:params:oauth:grant-type:jwt-bearer'
                  default: client_credentials
                  enum:
                  - client_credentials
                  - authorization_code
                  - refresh_token
                  - password
                  - urn:ietf:params:oauth:grant-type:device_code
                  - urn:ietf:params:oauth:grant-type:jwt-bearer
                scope:
                  type: string
                  description: A space-delimited list of scopes that are associated
                    with this token.
                  default: openid
        required: true
      responses:
        '200':
          description: The access token was returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TokenResponse"
        '400':
          description: The request was invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
        '404':
          description: The resource was not found.
          content: {}
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
      x-publicAPI: 'true'
  "/v1.0/endpoint/{opName}/userinfo":
    get:
      tags:
      - OpenID Connect
      summary: Retrieve user information
      description: Use this API to get the user information that is associated with
        the token.
      operationId: handleUserInfoGet
      parameters:
      - name: opName
        in: path
        description: The OpenID Connect provider ID. The default provider ID is "default".
        required: true
        schema:
          type: string
          default: default
          enum:
          - default
      - name: Authorization
        in: header
        description: The authorization header that contains the bearer token.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The user information was returned.
          content:
            application/jwt:
              schema:
                "$ref": "#/components/schemas/UserInfoResponse"
            application/json:
              schema:
                "$ref": "#/components/schemas/UserInfoResponse"
        '401':
          description: Access was forbidden.
          content:
            application/jwt:
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
        '500':
          description: An internal server error occurred.
          content:
            application/jwt:
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
      x-publicAPI: 'true'
    post:
      tags:
      - OpenID Connect
      summary: Retrieve user information
      description: Use this API to get the user information that is associated with
        the token.
      operationId: handleUserInfoPost
      parameters:
      - name: opName
        in: path
        description: The OpenID Connect provider ID. The default provider ID is "default".
        required: true
        schema:
          type: string
          default: default
          enum:
          - default
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - access_token
              type: object
              properties:
                access_token:
                  type: string
                  description: The access token.
        required: true
      responses:
        '200':
          description: The user information was returned.
          content:
            application/jwt:
              schema:
                "$ref": "#/components/schemas/UserInfoResponse"
            application/json:
              schema:
                "$ref": "#/components/schemas/UserInfoResponse"
        '401':
          description: Access was forbidden.
          content:
            application/jwt:
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
        '500':
          description: An internal server error occurred.
          content:
            application/jwt:
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse_1"
      x-publicAPI: 'true'
  "/v1.0/events":
    get:
      tags:
      - Events
      summary: Get all events for a tenant.
      description: 'Gets the management, sso and authentication events by default
        for a tenant. The events API will max out at 10000 events in the response.
        To get the next batch of events, use the time and id  from the search_after
        object in the response from the current call for the subsequent calls.<br><br>Entitlements
        required: manageReports or readReports.'
      operationId: getAllEvents
      parameters:
      - name: all_events
        in: query
        description: get all types of events.
        schema:
          type: string
          default: 'no'
          enum:
          - 'no'
          - 'yes'
      - name: event_type
        in: query
        description: 'The type or types of events to return. The default setting includes
          management, sso and authentication event types. <br><br>Event types must
          be in a comma separated list that is surrounded by quotes and the quotes
          must be escaped.<br><br>Other events that can be included are: service,
          fulfillment, adaptive_risk, cert_campaign, access_request, account_sync,
          token, privacy_consent, risk, threat or notice events.<br><b>Here is an
          example to include some events:</b> event_type=\"authentication\",\"management\",\"sso\",\"token\",\"fulfillment\",\"adaptive_risk\",\"cert_campaign\",\"access_request\",\"account_sync\",\"privacy_consent\",\"threat\",
          \"notice\"'
        schema:
          type: string
      - name: resource
        in: query
        description: The resource type or types of management events to return. The
          default setting is all resource types. <br><b>The event_type filter must
          include management events to filter by resource type.</b><br>Resource types
          include user, token, app_consent, campaign, instance and so on.<br><br>Resource
          types must be in a comma separated list that is surrounded by quotation
          marks and the quotation marks must be escaped.<br><b>Example:</b> resource=\"user\",\"token\",\"app_consent\",
          \"campaign\", \"instance\"
        schema:
          type: string
      - name: filter_key
        in: query
        description: The name of the field to filter. The default value of filter_key
          for management events and cert_campaign events is data.performedby_type.<br><br>Here
          is an example for filter_key<br><b>Example:</b> filter_key=data.performedby_type
        schema:
          type: string
      - name: filter_value
        in: query
        description: The value of the field to be filtered. The default value for
          filter value of performedby_type for management events and cert_campaign
          events is *.<br><br>Filter values must be in a comma separated list that
          is surrounded by quotation marks and the quotation marks must be escaped.<br><br>Here
          is an example for filter_value<br><b>Example:</b> filter_value=\"user\",\"api\",\"system\"
        schema:
          type: string
      - name: from
        in: query
        description: The lower bound Unix Epoch timestamp of events to return. The
          default setting is the last 24 hours. <br>Input must be an Unix Epoch timestamp
          (milliseconds).
        schema:
          type: string
      - name: to
        in: query
        description: The upper bound Unix Epoch timestamp of events to return. The
          default setting is the current time. <br>Input must be an Unix Epoch timestamp
          (milliseconds).
        schema:
          type: string
      - name: after_id
        in: query
        description: 'The event ID of a previously returned event, after which to
          start searching. If the sort_order is ascending, then events that are generated
          or processed after this event are returned in increasing time. Note, the
          default sort order is descending. With this default the events are returned
          in decreasing time in the subsequent calls from the last event. <br>If <b>from</b>
          and <b>to</b> values are included in the original request, keep them the
          same in the following requests to maintain the correct timeframe. To identify
          the event after which to start searching, <br><br> <b>after_id</b> is the
          ID of the event after which to search and must be used in conjunction with
          after_time. <br><br>Example: id'
        schema:
          type: string
      - name: after_time
        in: query
        description: 'The event generation time (time) or event processing time by
          transform service (indexed_at) of a previously returned event, after which
          to start searching. If the sort_order is ascending, then the events generated
          or processed after this event are returned in increasing time for the subsequent
          calls. Note, the default sort order is descending. <br>If <b>from</b> and
          <b>to</b> values are included in the original request, keep them the same
          in the following requests to maintain the correct timeframe To identify
          the event after which to start searching, <br><br> <b>after_time</b> is
          the generation timestamp of the event after which to search and must be
          used in conjunction with after_id <br><br>Example: time'
        schema:
          type: string
      - name: range_type
        in: query
        description: Range type of the event either time (when the event was generated)
          or indexed_at (when event was processed by the transform service). The default
          setting is time.
        schema:
          type: string
          default: time
          enum:
          - time
          - indexed_at
      - name: size
        in: query
        description: The number of events to return. The default setting is 50. The
          maximum is 10,000.
        schema:
          type: integer
          format: int32
      - name: sort_order
        in: query
        description: 'The sort order of the events: desc, asc. The default order is
          desc.'
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AllEventsResponse"
        '400':
          description: Bad Request.
          content: {}
        '403':
          description: Forbidden.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/reports/export/jobs":
    post:
      tags:
      - Reports
      summary: Generates a report asynchronously for a specified tenant into a CSV
        file.
      description: 'This API submits a request to download a CSV file and returns
        the job ID of the request. <br>The API, GET /reporting/v1.0/reporting/jobs/{id},
        returns the status and other details of a downloaded job if you choose Response
        Content Type as application/json. If your Response Content Type is application/csv,
        this API uses the job ID to get the CSV file.<br><br>Entitlements required:
        manage reports.<br><br>Search operators supported:<table><tr><td>eq</td><td>The
        attribute and operator values must be identical for a match.</td></tr><tr><td>sw</td><td>The
        entire operator value must be a substring of the attribute value, starting
        at the beginning of the attribute value.</td></tr><tr><td>ew</td><td>The entire
        operator value must be a substring of the attribute value, matching at the
        end of the attribute value.</td></tr><tr><td>gt</td><td>If the attribute value
        is greater than the operator value, a match occurs. The actual comparison
        depends on the attribute type.</td></tr><tr><td>ge</td><td>If the attribute
        value is greater than or equal to the operator value, a match occurs. The
        actual comparison depends on the attribute type.</td></tr><tr><td>lt</td><td>If
        the attribute value is less than the operator value, a match occurs. The actual
        comparison depends on the attribute type.</td></tr><tr><td>le</td><td>If the
        attribute value is less than or equal to the operator value, a match occurs.
        The actual comparison depends on the attribute type.</td></tr></table><br><br>Example
        queries:<table><tr><td>User List</td></tr><tr><td><code>{<br>&nbsp;&nbsp;&nbsp;&nbsp;"filter":
        "((emails sw \\\"example\\\") or (active eq \\\"true\\\")) and ((urn:ietf:params:scim:schemas:extension:ibm:2.0:User:realm
        eq \\\"cloudIdentityRealm\\\") or (urn:ietf:params:scim:schemas:extension:ibm:2.0:User:realm
        eq \\\"www.ibm.com\\\"))",<br>&nbsp;&nbsp;&nbsp;&nbsp;"columns": [<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"attributeCategory":
        "global",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"attributeName":
        "preferred_username",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"attributeKey":
        "userName"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"attributeCategory":
        "global",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"attributeName":
        "email",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"attributeKey":
        "emails"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"attributeCategory":
        "global",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"attributeName":
        "employee_id",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"attributeKey":
        "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:employeeNumber"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;]<br>}</code></td></tr><tr><td>User
        Count</td></tr><tr><td><code>{<br>&nbsp;&nbsp;&nbsp;&nbsp;"filter": "((emails
        sw \\\"example\\\") or (active eq \\\"true\\\")) and ((urn:ietf:params:scim:schemas:extension:ibm:2.0:User:realm
        eq \\\"cloudIdentityRealm\\\") or (urn:ietf:params:scim:schemas:extension:ibm:2.0:User:realm
        eq \\\"www.ibm.com\\\"))",<br>&nbsp;&nbsp;&nbsp;&nbsp;"columns": []<br>}</code></td></tr><tr><td>Note:
        If no filter is given then the entire user registry is returned.</td></tr></table>'
      operationId: exportAsynchronousJob
      parameters:
      - name: type
        in: query
        description: Report Type.
        required: true
        schema:
          type: string
          enum:
          - user_list_csv
          - user_count
      - name: name
        in: query
        description: Name of the report. Concatenate report name using either "_"
          or "-". E.g. "sample_report_name". The report name should be no longer than
          210 characters in length.
        required: true
        schema:
          type: string
      - name: description
        in: query
        description: Description of the report.
        schema:
          type: string
      - name: email_list
        in: query
        description: Comma separated list of user emails that will be notified of
          the report status.
        schema:
          type: string
      - name: generated_by
        in: query
        description: Email of user that requested the report.
        required: true
        schema:
          type: string
      requestBody:
        description: The columns in the report and the optional filter query.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/StatusReportParameters"
        required: true
      responses:
        '202':
          description: The request was accepted for processing, but the processing
            is not completed.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CSVExportJob"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '429':
          description: Too many Requests.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/reports/export/{name}":
    post:
      tags:
      - Reports
      summary: Export reports for a specified tenant into CSV file.
      description: 'This API is used to export user activity reports. and returns
        <b> CSV file as Response. </b>This API is designed as synchronous API.<br><br/><b>Entitlements
        required: read or manage reports.</b>'
      operationId: runExportReport
      parameters:
      - name: name
        in: path
        description: Name of the report to export into CSV file. Report names for
          exporting user activities is user_activity_csv. This is a Synchronous API
        required: true
        schema:
          type: string
          enum:
          - user_activity_csv
      requestBody:
        description: |-
          Report parameters:<br/><br/><b>default value for all these filters is "\"*\""</b><br/><b>NOTE: FROM and TO parameters must be supplied always through request. No default values provided and should be in epoch timestamp format<table><tr><th>Report Name</th><th>Optional Filters</th><th>Sample Request Payload</th></tr><tr><td>user_activity_csv</td><td>RESULT, PERFORMED_BY_USERNAME, CLIENT_IP, EVENT_TYPE, COUNTRY_NAME, COUNTRY_CODE</td><td>{
          "USERID":"60000076X0",
          "FROM":"1690952400000",
          "TO":"1693586702789"
          }</td></tr></table>
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        '200':
          description: Success
          content: {}
        '400':
          description: Bad Request.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/reports/jobs/{id}":
    get:
      tags:
      - Reports
      summary: Gets the details of a download job or gets a CSV report.
      description: 'If Response Content Type is application/json, then this API uses
        the job ID to get the details of the CSV file. <br>If Response Content Type
        is application/zip, this API gets the .zip file that is identified by the
        job ID.<br>Allowed Response Content Type are application/json and application/zip<br><br>Entitlements
        required: manage reports.'
      operationId: getJob_0
      parameters:
      - name: id
        in: path
        description: The identifier of the download request for which the details
          are being retrieved.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Retrieves the details of a CSV download job or gets a .zip
            file.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CSVExportRecord"
            application/zip:
              schema:
                "$ref": "#/components/schemas/CSVExportRecord"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/zip:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '404':
          description: The request does not exist.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/zip:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
            application/zip:
              schema:
                "$ref": "#/components/schemas/ExternalErrorMessage"
      x-publicAPI: 'true'
  "/v1.0/reports/{name}":
    post:
      tags:
      - Reports
      summary: Run a report.
      description: |-
        This endpoint is used to run most of the reports. Provide the report name and request payload in the body section.<br><br/><b>Entitlements required: readReports or manageReports.</b><br/><br>POST /reporting/v1.0/reports/{report_name} -  API is used to get the first batch of events.<br>POST /reporting/v1.0/reports/{report_name}_search_after -  API to get the remaining events.<br/><br/>For example, to get the authentication event attributes that are included in the table for authentication activity, you can use the following payloads:<br/><table><tr><th><b>Report Name</b></th><th><b>Example Payload Request</b></th></tr><tr><td>auth_audit_trail</td><td>{
        "FROM":"now-24h",
        "TO":"now",
        "SIZE":"10",
        "SORT_BY":"time",
        "SORT_ORDER":"asc"
        }</td></tr><tr><td>auth_audit_trail_search_after</td><td>{
        "FROM":"now-24h",
        "TO":"now",
        "SIZE":"10",
        "SORT_BY":"time",
        "SORT_ORDER":"asc",
        "SEARCH_AFTER":"\"1554479231870\",\"30f5a726-0e11-4066-a49f-e1e1d03a62b4\""
        }<br/>The SEARCH_AFTER value is an array of the timestamp and ID of the last response entry from the auth_audit_trail report.</td></tr><tr><td>auth_audit_trail with SUBTYPE filter</td><td>{
        "FROM":"now-24h",
        "TO":"now",
        "SIZE":"10",
        "SUBTYPE":"\"mfa\",\"federation\"",
        "SORT_BY":"time",
        "SORT_ORDER":"asc"
        }</td></tr></table><br/>Note: Filter values must be in a comma separated list that is surrounded by quotation marks and the quotation marks must be escaped.<br/>
      operationId: runReport
      parameters:
      - name: name
        in: path
        description: The name of the report.<br/>Some example report names are<br/><table><tr><th>Report
          Names</th><th>Display name</th></tr><tr><td>auth_audit_trail, auth_audit_trail_search_after</td><td>Authentication
          activity</td></tr><tr><td>app_audit_trail, app_audit_trail_search_after</td><td>Application
          usage</td></tr><tr><td>admin_activity, admin_activity_search_after</td><td>Admin
          activity</td></tr><tr><td>user_activity, user_activity_search_after</td><td>User
          activity</td></tr><tr><td>mfa_activity, mfa_activity_search_after</td><td>MFA
          activity</td></tr><tr><td>risk_adaptive_access,  risk_adaptive_access_search_after</td><td>Adaptive
          access</td></tr></table>
        required: true
        schema:
          type: string
      requestBody:
        description: 'Report parameters:<br><br/><b>The default value of the optional
          filters is a wildcard "\"*\"".</b><br>For example, to apply a SUBTYPE filter
          with a single value or a RESULT filter with multiple values, quotes must
          be escaped. "SUBTYPE":"\"mfa\"" or "RESULT":"\"failure\",\"success\""<br><br/><b>NOTE:</b>
          The default values for the following filters is: SORT_ORDER - desc, SORT_BY-
          time, FROM - now-24h, TO - now, and SIZE - 10. The range for size is 1 to
          10000.<table><tr><th>Report Names</th><th>Optional Filters</th><th>Request
          Payload Parameters</th></tr><tr><td>auth_audit_trail, auth_audit_trail_search_after</td><td>RESULT,
          USERNAME, REALM, CLIENT_IP, COUNTRY_NAME, COUNTRY_CODE, SOURCE_TYPE, DEVICE_ID,
          MDM_COMPLIANT, MDM_MANAGED, PROVIDER_ID, SUBTYPE</td><td></td></tr><tr><td>app_audit_trail,
          app_audit_trail_search_after</td><td>RESULT, USERNAME, REALM, CLIENT_IP,
          APP_NAME, COUNTRY_NAME, COUNTRY_CODE, SOURCE_TYPE, DEVICE_ID, MDM_COMPLIANT,
          MDM_MANAGED, APP_TYPE, PROVIDER_ID, CLIENT_ID, REDIRECT_URL, CAUSE</td><td>APPID</td></tr><tr><td>admin_activity,
          admin_activity_search_after</td><td>PERFORMED_BY_USERNAME, PERFORMED_BY_REALM,
          PERFORMED_BY_CLIENTNAME, PERFORMED_BY_TYPE, CLIENT_IP, COUNTRY_NAME, COUNTRY_CODE,
          TARGET_ID, ACTION, RESOURCE</td><td></td></tr><tr><td>user_activity, user_activity_search_after</td><td>RESULT,
          PERFORMED_BY_USERNAME, CLIENT_IP, EVENT_TYPE, COUNTRY_NAME, COUNTRY_CODE</td><td>USERID</td></tr><tr><td>mfa_activity,
          mfa_activity_search_after</td><td>REALM, RESULT, USERNAME, CLIENT_IP, COUNTRY_NAME,
          COUNTRY_CODE, MFA_METHOD, MFA_DEVICE</td><td></td></tr><tr><td>risk_adaptive_access,
          risk_adaptive_access_search_after</td><td>REALM, USERNAME, CLIENT_IP, COUNTRY_NAME,
          COUNTRY_CODE, RISK_LEVEL</td><td></td></tr></table>'
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ReportResponseTemplate"
            application/xml:
              schema:
                "$ref": "#/components/schemas/ReportResponseTemplate"
        '400':
          description: The request is invalid.
          content: {}
        '403':
          description: The access token is denied access to the requested resource.
          content: {}
        '408':
          description: The Request has been timed out.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/access/entitlements/{entitlement}":
    get:
      tags:
      - Access Request Management V1.0
      summary: Get details of specified requestable access.
      operationId: getRequestableAccessDetails_0
      parameters:
      - name: entitlement
        in: path
        description: Code of the entitlement
        required: true
        schema:
          type: string
      - name: details
        in: query
        description: If true, the object details information of the other microservices
          are resolved.
        schema:
          type: boolean
          default: false
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AccessDetailsResult_0"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/access/requestable":
    post:
      tags:
      - Access Request Management V1.0
      summary: Get the requestable access list for self.
      operationId: findRequestableAccessesForSelf_0
      parameters:
      - name: details
        in: query
        description: If true, the object details information of the other microservices
          are resolved.
        schema:
          type: boolean
          default: false
      - name: limit
        in: query
        description: The maximum number of elements for a page.
        schema:
          type: integer
          format: int32
          default: 50
      - name: page
        in: query
        description: Page number.
        schema:
          type: integer
          format: int32
          default: 1
      requestBody:
        description: 'Payload filters or sorts the response based on attribute values.</br>Application
          is a required field in the payload. At most, one application can be specified
          in one request.</br></br>Supported attributes for search: name, description,
          accessType, and application.</br>Supported attributes for sort: name and
          description.</br></br>or operator is used between multiple values of accessType
          and application attribute.</br>or operator is used between name and description
          attribute.</br>and operator is used between accessInfo (which is combination
          of name & description attribute), accessType, and application attribute.'
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/EntitlementGroupSearch"
        required: false
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseAccesses"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/admin/request/{id}":
    delete:
      tags:
      - Access Request Management V1.0
      summary: Delete a request by id
      description: 'Entitlements required: tenantadmin (Tenant Administrator)'
      operationId: deleteRequest_0
      parameters:
      - name: id
        in: path
        description: ID of the request
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The request was deleted.
          content: {}
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/admin/requests":
    delete:
      tags:
      - Access Request Management V1.0
      summary: Delete all the requests that are filtered by one or more query parameters.
      description: 'Entitlements required: tenantadmin (Tenant Administrator)'
      operationId: deleteByFilter_0
      parameters:
      - name: applicationId
        in: query
        description: The filter that is used to delete all the requests of a application
        schema:
          type: string
      - name: beforeDate
        in: query
        description: The filter that is used to delete all the requests that were
          created before the indicated date.</br><strong>NOTE:</strong> The date must
          be in the ISO 8601 format <strong>(2017-07-21T17:32:28Z)</strong>.
        schema:
          type: string
          format: date-time
      - name: forceDelete
        in: query
        description: If set to true, delete the requests forcefully even if the corresponding
          assignment is not deleted.
        schema:
          type: boolean
          default: false
      responses:
        '200':
          description: The number of the requests that were deleted
          content: {}
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: You must specify at least one filter.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/approver/request":
    get:
      tags:
      - Access Request Management V1.0
      summary: Search requests of an approver
      description: 'Entitlements required: manageAccessRequestActivities [Manage my
        activities: approve or reject access request]'
      operationId: findByApprover_0
      parameters:
      - name: countOnly
        in: query
        description: When set to true, the API returns only the number of results.
        schema:
          type: boolean
          default: false
      - name: status
        in: query
        description: 'The filter for request status: pending/approved/rejected/invalidated/need_action_by_requestor'
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: pending
            enum:
            - pending
            - approved
            - rejected
            - invalidated
            - need_action_by_requestor
      - name: accessType
        in: query
        description: 'The filter for the request access type: permission or role'
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - permission
            - role
      - name: applicationId
        in: query
        description: The filter for the request application
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: beneficiaryId
        in: query
        description: The filter for the beneficiary
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: filter
        in: query
        description: 'A generic filter that returns requests that contain the passed
          string in one of the following attributes: requestNumber, requestor. fullName,
          beneficiary.fullname, reference, accessName, or requestType.'
        schema:
          type: string
      - name: sort
        in: query
        description: 'The attribute of the request that is used to sort results. The
          possible values are: requestNumber, application, requestor, beneficiary,
          requestid, reference, accessName, accessType, status, requestdate, lastchangedate,
          or requestType.'
        schema:
          type: string
          default: requestor
      - name: requestOperation
        in: query
        description: 'The filter for request operation: add access or user registration'
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - ACCESS_ADD
            - USER_REGISTRATION
      - name: sortDesc
        in: query
        schema:
          type: boolean
          default: true
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseApproverRequestPreview"
        '207':
          description: The bulk request was partially successful. The error code and
            description are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/approver/request/resources":
    get:
      tags:
      - Access Request Management V1.0
      summary: Get statistical view of requests for approval
      description: 'Entitlements required: manageAccessRequestActivities [Manage my
        activities: approve or reject access request]'
      operationId: approverFindStats_0
      parameters:
      - name: resourceType
        in: query
        description: 'The filter for the request resource type: status, applicationName,
          accessType, approverRole, or beneficiary'
        required: true
        schema:
          type: string
          default: status
          enum:
          - status
          - applicationName
          - accessType
          - beneficiary
      - name: applicationName
        in: query
        description: The filter for the request application name. The filter is honored
          only if the resourceType is set to applicationName.
        schema:
          type: string
      - name: sortDesc
        in: query
        schema:
          type: boolean
          default: true
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseRequestStatistics"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/approver/request/stats":
    get:
      tags:
      - Access Request Management V1.0
      summary: Get statistical summary of requests for approval
      description: 'Entitlements required: manageAccessRequestActivities [Manage my
        activities: approve or reject access request]'
      operationId: approverStats_0
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseRequestStatsSummary"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/approver/requests":
    post:
      tags:
      - Access Request Management V1.0
      summary: Execute actions for a list of requests
      description: 'Entitlements required: manageAccessRequestActivities [Manage my
        activities: approve or reject access request]'
      operationId: bulk_0
      requestBody:
        description: Bulk object
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RequestBulkRequestOperation"
        required: true
      responses:
        '200':
          description: List of requests that indicates that the operation was performed
            correctly
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/RequestActionResponse"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '422':
          description: List of requests that indicates for each request whether the
            approve or reject operation was performed correctly.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RequestActionResponse"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/request":
    get:
      tags:
      - Access Request Management V1.0
      summary: Search the requests
      description: 'Entitlements required: manageAccessRequest [Manage Access Request]'
      operationId: find_0
      parameters:
      - name: status
        in: query
        description: 'The filter for the request status: pending, completed, rejected,
          canceled, invalidated, or need_action_by_requestor'
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: pending
            enum:
            - pending
            - completed
            - rejected
            - canceled
            - invalidated
            - need_action_by_requestor
      - name: accessType
        in: query
        description: 'The filter for the request access type: permission or role'
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - permission
            - role
      - name: applicationId
        in: query
        description: The filter for the request application
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: approverRole
        in: query
        description: 'The filter for the request approver role: um or am'
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - um
            - am
      - name: beneficiaryId
        in: query
        description: The filter for the beneficiary
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: filter
        in: query
        description: 'A generic filter that returns requests that contain the passed
          string in one of the following attributes: requestNumber, reference, accessName,
          beneficiary.fullName, or approver.username (applicable only in case of actionable
          requests).'
        schema:
          type: string
      - name: sort
        in: query
        description: 'The attribute of the request that is used to sort results. The
          possible values are: requestNumber, application, requestor, beneficiary,
          requestid, approver, approverRole, reference, accessName, accessType, status,
          requestdate, or lastchangedate.'
        schema:
          type: string
          default: requestor
      - name: asRequestor
        in: query
        description: If set to true, the search is performed as requestor and not
          beneficiary.
        schema:
          type: boolean
          default: false
      - name: sortDesc
        in: query
        schema:
          type: boolean
          default: true
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseRequestPreview"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
    post:
      tags:
      - Access Request Management V1.0
      summary: Create a request
      description: 'Entitlements required: manageAccessRequest [Manage Access Request]'
      operationId: create_0
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RequestInput"
        required: false
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RequestPreview"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/request/resources":
    get:
      tags:
      - Access Request Management V1.0
      summary: Get statistical view of requests
      description: 'Entitlements required: manageAccessRequest [Manage Access Request]'
      operationId: findStats_0
      parameters:
      - name: resourceType
        in: query
        description: 'The filter for the request resource type: status, applicationName,
          accessType, approverRole, or beneficiary'
        required: true
        schema:
          type: string
          default: status
          enum:
          - status
          - applicationName
          - accessType
          - approverRole
          - beneficiary
      - name: applicationName
        in: query
        description: The filter for the request application name. It is honored only
          if resourceType is set to applicationName.
        schema:
          type: string
      - name: asRequestor
        in: query
        description: If set to true, the search is performed as requestor and not
          beneficiary.
        schema:
          type: boolean
          default: false
      - name: sortDesc
        in: query
        schema:
          type: boolean
          default: true
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseRequestStatistics"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/request/stats":
    get:
      tags:
      - Access Request Management V1.0
      summary: Get the summary of request statistics
      description: 'Entitlements required: manageAccessRequest [Manage Access Request]'
      operationId: stats_0
      parameters:
      - name: asRequestor
        in: query
        description: If set to true, the search is performed as requestor and not
          beneficiary.
        schema:
          type: boolean
          default: false
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseRequestStatsSummary"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/request/{id}":
    get:
      tags:
      - Access Request Management V1.0
      summary: Get request details
      description: 'Entitlements required: manageAccessRequest [Manage Access Request]'
      operationId: getDetails_0
      parameters:
      - name: id
        in: path
        description: Request ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Request"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/request/{id}/justification":
    post:
      tags:
      - Access Request Management V1.0
      summary: Add a justification
      description: 'Entitlements required: manageAccessRequest [Manage Access Request]'
      operationId: addJustification_0
      parameters:
      - name: id
        in: path
        description: Request ID
        required: true
        schema:
          type: string
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/AddJustification"
        required: false
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Request"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: A conflict occurred. The operation was not performed.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/request/{id}/reminder/approvers":
    post:
      tags:
      - Access Request Management V1.0
      summary: Send a reminder to all approvers of a request
      description: 'Entitlements required: manageAccessRequest [Manage Access Request]'
      operationId: reminder_0
      parameters:
      - name: id
        in: path
        description: Request ID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The request was successful.
          content: {}
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The reminder can be sent only once.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: A conflict occurred. The operation was not performed.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/requests":
    post:
      tags:
      - Access Request Management V1.0
      summary: " Create a fine grained access requests"
      description: 'Entitlements required: manageAccessRequest [Manage Access Request]'
      operationId: bulkCreate_0
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/BulkRequestInput"
        required: false
      responses:
        '200':
          description: The request was submitted successfully. You can track your
            requests under My requests.
          content: {}
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/requests/cancel":
    post:
      tags:
      - Access Request Management V1.0
      summary: Cancel a list of requests
      description: 'Entitlements required: manageAccessRequest [Manage Access Request]'
      operationId: cancel_0
      requestBody:
        description: Bulk object
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RequestBulkDeleteOperation"
        required: true
      responses:
        '200':
          description: List of requests that indicates for each request whether the
            cancel operation was performed correctly
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/RequestActionResponse"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: A conflict occurred. The operation was not performed.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/self/request":
    get:
      tags:
      - Access Request Management V1.0
      summary: Deprecated - Search the self requests
      description: 'Deprecated - This API is deprecated.  Use API: GET /v1.0/request<br>Entitlements
        required: manageAccessRequest [Manage Access Request]'
      operationId: selfFind_0
      parameters:
      - name: status
        in: query
        description: 'The filter for the request status: pending, completed, rejected,
          canceled, invalidated, or need_action_by_requestor'
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: pending
            enum:
            - pending
            - completed
            - rejected
            - canceled
            - invalidated
            - need_action_by_requestor
      - name: accessType
        in: query
        description: 'The filter for the request access type: permission or role'
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - permission
            - role
      - name: applicationId
        in: query
        description: The filter for the request application
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: approverRole
        in: query
        description: 'The filter for the request approver role: um or am'
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - um
            - am
      - name: beneficiaryId
        in: query
        description: The filter for the beneficiary
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: filter
        in: query
        description: 'A generic filter that returns requests that contain the passed
          string in one of the following attributes: requestNumber, reference, accessName,
          beneficiary.fullName, or approver.username (applicable only in case of actionable
          requests).'
        schema:
          type: string
      - name: sort
        in: query
        description: 'The attribute of the request that is used to sort results. The
          possible values are: requestNumber, application, requestor, beneficiary,
          requestid, approver, approverRole, reference, accessName, accessType, status,
          requestdate, or lastchangedate.'
        schema:
          type: string
          default: requestor
      - name: asRequestor
        in: query
        description: If set to true, the search is performed as requestor and not
          beneficiary.
        schema:
          type: boolean
          default: false
      - name: sortDesc
        in: query
        schema:
          type: boolean
          default: true
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseRequestPreview"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      deprecated: true
      x-publicAPI: 'true'
    post:
      tags:
      - Access Request Management V1.0
      summary: Create a self request
      description: 'Entitlements required: manageAccessRequest [Manage Access Request]'
      operationId: selfCreate_0
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RequestInput"
        required: false
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RequestPreview"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/self/request/resources":
    get:
      tags:
      - Access Request Management V1.0
      summary: Deprecated - Get statistical view of self requests
      description: 'Deprecated - This API is deprecated.  Use API: GET /v1.0/request/resources<br>Entitlements
        required: manageAccessRequest [Manage Access Request]'
      operationId: selfFindStats_0
      parameters:
      - name: resourceType
        in: query
        description: 'The filter for the request resource type: status, applicationName,
          accessType, approverRole, or beneficiary'
        required: true
        schema:
          type: string
          default: status
          enum:
          - status
          - applicationName
          - accessType
          - approverRole
          - beneficiary
      - name: applicationName
        in: query
        description: The filter for the request application name. It is honored only
          if resourceType is set to applicationName.
        schema:
          type: string
      - name: asRequestor
        in: query
        description: If set to true, the search is performed as requestor and not
          beneficiary.
        schema:
          type: boolean
          default: false
      - name: sortDesc
        in: query
        schema:
          type: boolean
          default: true
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseRequestStatistics"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      deprecated: true
      x-publicAPI: 'true'
  "/v1.0/self/request/stats":
    get:
      tags:
      - Access Request Management V1.0
      summary: Deprecated - Get the summary of self request statistics
      description: 'Deprecated - This API is deprecated.  Use API: GET /v1.0/request/stats<br>Entitlements
        required: manageAccessRequest [Manage Access Request]'
      operationId: selfStats_0
      parameters:
      - name: asRequestor
        in: query
        description: If set to true, the search is performed as requestor and not
          beneficiary.
        schema:
          type: boolean
          default: false
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseRequestStatsSummary"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      deprecated: true
      x-publicAPI: 'true'
  "/v1.0/self/requests":
    post:
      tags:
      - Access Request Management V1.0
      summary: Deprecated - Create a fine grained access request for self
      description: 'Deprecated - This API is deprecated.  Use API: POST /v1.0/requests<br>Entitlements
        required: manageAccessRequest [Manage Access Request]'
      operationId: selfBulkCreate_0
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/BulkRequestInput"
        required: false
      responses:
        '200':
          description: The request was submitted successfully. You can track your
            requests under My requests.
          content: {}
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      deprecated: true
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/self/requests/cancel":
    post:
      tags:
      - Access Request Management V1.0
      summary: Deprecated - Cancel a list of requests
      description: 'Deprecated - This API is deprecated.  Use API: POST /v1.0/requests/cancel<br>Entitlements
        required: manageAccessRequest [Manage Access Request]'
      operationId: selfCancel_0
      requestBody:
        description: Bulk object
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RequestBulkDeleteOperation"
        required: true
      responses:
        '200':
          description: List of requests that indicates for each request whether the
            cancel operation was performed correctly
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/RequestActionResponse"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: A conflict occurred. The operation was not performed.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      deprecated: true
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/users/applications/catalog":
    get:
      tags:
      - Access Request Management V1.0
      summary: Find all requestable applications in the catalog.
      description: 'Entitlements required: manageAccessRequest [Manage Access Request]'
      operationId: findUserCatalog_0
      parameters:
      - name: sortDesc
        in: query
        schema:
          type: boolean
          default: true
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseCatalogApplication"
        '400':
          description: An application status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/workflows":
    get:
      tags:
      - Access Request Management V1.0
      summary: Find a workflow configuration.
      description: 'Entitlements required: manageAccessWorkflow [Manage Access Request
        Work Flows]'
      operationId: findByApplication_0
      parameters:
      - name: applicationId
        in: query
        description: The ID of the application
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: The maximum number of elements to be returned
        schema:
          type: integer
          format: int32
          default: 500
      - name: page
        in: query
        description: The page number to be returned
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListResponseWorkflow"
        '400':
          description: A client-side status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v1.0/workflows/{id}":
    get:
      tags:
      - Access Request Management V1.0
      summary: Find a workflow configuration by ID.
      description: 'Entitlements required: manageAccessWorkflow [Manage Access Request
        Work Flows]'
      operationId: oldFindById_0
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Workflow"
        '400':
          description: A client-side status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
    put:
      tags:
      - Access Request Management V1.0
      summary: Replace an existing workflow configuration.
      description: 'Entitlements required: manageAccessWorkflow [Manage Access Request
        Work Flows]'
      operationId: replace_0_0
      parameters:
      - name: id
        in: path
        description: Workflow ID
        required: true
        schema:
          type: string
      - name: force
        in: query
        description: 'If set to true, the replace workflow operation is done even
          if inflight requests exist. NOTE: The status of the inflight requests is
          set to INVALIDATED.'
        required: true
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Workflow"
        required: false
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Workflow"
        '400':
          description: A client-side status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: A conflict occurred. The operation was not performed.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '422':
          description: The request can not be processed because other requests are
            in progress.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CountErrorMessage"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Access Request Management V1.0
      summary: Delete a workflow configuration.
      description: 'Entitlements required: manageAccessWorkflow [Manage Access Request
        Work Flows]'
      operationId: deleteWorkflow_0
      parameters:
      - name: id
        in: path
        description: ID of the workflow
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The workflow was removed.
          content: {}
        '400':
          description: A client-side status error occurred. The error code and description
            are available in the payload.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Your request can't be processed because an internal server
            error occurred.
          content: {}
      x-publicAPI: 'true'
  "/v5.0/policyvault/accesspolicy":
    get:
      tags:
      - Access Policy Management V5.0
      summary: retrieve access policies
      description: Retrieves all the predefined and tenant specific policies based
        on tenant subscriptions. Supports search, sort and pagination. <br><br><b>Entitlements:</b><br>-
        readAccessPolicies (Read Access Policies)<br>- manageAccessPolicies (Manage
        Access Policies)
      operationId: listAccessPolicies
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>You
          can use the following query parameters:<br><br><b>count</b> - Optional.
          Use to define the total number of results that are returned from the data
          store. The maximum allowed value is 1000. If excluded will be set to limit.<br><br><b>page</b>
          - Use to identify the requested page, or the offset.<br><br><b>limit</b>
          - Use to define the total number of results that are returned per page.
          The maximum allowed value is 1000.<br><br>A maximum of 200 results are returned
          if no pagination query parameters are passed.<br><br><b>Note</b>: The pagination
          parameter value must be HTML encoded. Use the prefix "pagination=" in the
          query parameter.<br><br><b>Example</b>: Paginate on count=10&page=1&limit=5<br>pagination=count%3D10%26page%3D1%26limit%3D5'
        schema:
          type: string
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for Strings are = , != and contains. Use double quotation marks for the
          search values.<br>Valid operators for Booleans are = and !=<br>Valid operators
          for Numbers are >=, >, &lt;=, &lt;, = and !=<br><br><b>Note</b>: The search
          parameter value must be HTML encoded. Use the prefix "search=" in the query
          parameter.<br><br><b>Example</b>: Search on id contains "fd45"&enabled=true<br>search=id%20contains%20%22fd45%22%26enabled%3Dtrue'
        schema:
          type: string
      - name: filter
        in: query
        description: 'Displays results based on the filter criteria.<br><br>Filter
          values to be inclusive or exclusive only. It cannot be combined.<br><br>Use
          a comma (,) to separate multiple filter parameters.<br><br><b>Note</b>:
          The filter parameter value must be HTML encoded. Use the prefix "filter="
          in the query parameter.<br><br><b>Examples</b><br>Filter to return only
          id : filter=id<br>Filter to exclude id and enabled : filter=%21id,enabled'
        schema:
          type: string
      responses:
        '200':
          description: Policies were retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PolicyVaultList_0"
        '401':
          description: The access token in the request is not valid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The authenticated user does not have permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Access Policy Management V5.0
      summary: create an access policy
      description: Create an access policy.<br>For more information on Access Policy
        rules click <a href="https://www.ibm.com/support/knowledgecenter/en/SSCT62/com.ibm.iamservice.doc/tasks/t_manage_access_policies.html">
        here </a>.<br><br><b>Entitlements:</b><br>- manageAccessPolicies (Manage Access
        Policies)
      operationId: createAccessPolicy
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AccessPolicyRequest"
        required: false
      responses:
        '201':
          description: The created access policy
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Policy_0"
        '401':
          description: The access token in the request is not valid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The authenticated user does not have permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v5.0/policyvault/accesspolicy/{policyId}":
    get:
      tags:
      - Access Policy Management V5.0
      summary: retrieve a access policy
      description: Retrieves the primary revision of a specific access policy. <br><br><b>Entitlements:</b><br>
        - readAccessPolicies (Read Access Policies)<br> - managedAccessPolicies (Manage
        Access Policies)
      operationId: getAccessPolicy
      parameters:
      - name: policyId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: The primary access policy revision
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Policy_0"
        '401':
          description: The access token in the request is not valid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The authenticated user does not have permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Access Policy Management V5.0
      summary: update a access policy
      description: Update the primary revision for the access policy.<br><br><b>NB:</b>
        if the change is significant a new revision will be created.
      operationId: updateAccessPolicy
      parameters:
      - name: policyId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AccessPolicyRequest"
        required: false
      responses:
        '200':
          description: The updated policy
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Policy_0"
        '401':
          description: The access token in the request is not valid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The authenticated user does not have permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    post:
      tags:
      - Access Policy Management V5.0
      summary: create an access policy revision
      description: Creates a new access policy revision.<br><br><b>NB:</b> this revision
        will become the primary revision if the state is 'active'.
      operationId: createAccessPolicyRevision
      parameters:
      - name: policyId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AccessPolicyRequest"
        required: false
      responses:
        '201':
          description: The created access policy revision
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Policy_0"
        '401':
          description: The access token in the request is not valid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The authenticated user does not have permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Access Policy Management V5.0
      summary: delete an access policy
      description: Deletes an access policy along with all of the revisions.<br><br><b>Entitlements:</b><br>-
        manageAccessPolicies (Manage Access Policies)
      operationId: deleteAccessPolicy
      parameters:
      - name: policyId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '204':
          description: The access policy was deleted
          content: {}
        '401':
          description: The access token in the request is not valid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The authenticated user does not have permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v5.0/policyvault/accesspolicy/{policyId}/revision":
    get:
      tags:
      - Access Policy Management V5.0
      summary: retrieve the revisions for an access policy
      description: Retrieves all of the revisions for the access policy.<br><br><b>Entitlements:</b><br>
        - readAccessPolicies (Read Access Policies)<br> - manageAccessPolicies (Manage
        Access Policies)
      operationId: listAccessPolicyRevisions
      parameters:
      - name: policyId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: The revisions
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Policy_0"
        '401':
          description: The access token in the request is not valid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The authenticated user does not have permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v5.0/policyvault/accesspolicy/{policyId}/revision/{revisionId}":
    get:
      tags:
      - Access Policy Management V5.0
      summary: retrieve a revision for an access policy
      description: Retrieves a specific access policy revision.<br><br><b>Entitlements:</b><br>
        - readAccessPolicies (Read Access Policies)<br> - manageAccessPolicies (Manage
        Access Policies)
      operationId: getAccessPolicyRevision
      parameters:
      - name: policyId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: revisionId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: The access policy revision
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Policy_0"
        '401':
          description: The access token in the request is not valid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The authenticated user does not have permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Access Policy Management V5.0
      summary: update a access policy revision
      description: Update the access policy revision.<br><br><b>NB:</b> if the change
        is significant a new revision will be created.
      operationId: updateAccessPolicyRevision
      parameters:
      - name: policyId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: revisionId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AccessPolicyRequest"
        required: false
      responses:
        '200':
          description: The revision was updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Policy_0"
        '201':
          description: A new revision was created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Policy_0"
        '401':
          description: The access token in the request is not valid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The authenticated user does not have permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Access Policy Management V5.0
      summary: delete an access policy revision
      description: Delete an access policy revision.<b>NB:</b> only <b>DRAFT</b> revisions
        can be deleted
      operationId: deleteAccessPolicyRevision
      parameters:
      - name: policyId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: revisionId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '204':
          description: The revision was deleted
          content: {}
        '401':
          description: The access token in the request is not valid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The authenticated user does not have permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/oauth2/.well-known/openid-configuration":
    get:
      summary: Get provider's metadata
      description: Use this API to get the OIDC provider's metadata.
      x-publicAPI: 'true'
      tags:
      - OpenID Connect API v2
      responses:
        '200':
          description: The metadata was returned
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            X-Correlation-Id:
              schema:
                type: string
                example: CORR_ID-c3d726fc-bc90-4b4b-ad19-a3f8a8c935df
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MetadataResponse"
        '404':
          description: The resource was not found.
          headers:
            Content-Type:
              schema:
                type: string
                example: text/plain; charset=utf-8
          content:
            text/plain:
              schema:
                type: string
              example: 404 page not found
        '500':
          description: An internal server error occurred.
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error_0"
  "/oauth2/authorize":
    get:
      summary: Authorize the user to use OIDC.
      description: Use this API to authorize a user to use OIDC. This endpoint requires
        valid login session cookies for the tenant.
      x-publicAPI: 'true'
      tags:
      - OpenID Connect API v2
      parameters:
      - description: The OIDC client ID.
        required: true
        name: client_id
        in: query
        schema:
          type: string
      - description: 'A space-delimited list of response types. Valid response types
          are: code, token, id_token.'
        required: false
        in: query
        name: response_type
        schema:
          type: string
          default: code
      - description: The response mode. It defaults to query for the authorization_code
          flow, and to fragment for the implicit or hybrid flow.
        required: false
        in: query
        name: response_mode
        schema:
          type: string
          enum:
          - query
          - fragment
          - form_post
          - query.jwt
          - fragment.jwt
          - form_post.jwt
      - description: The redirect URI.
        required: false
        name: redirect_uri
        in: query
        schema:
          type: string
      - description: The state. An opaque value that is used to maintain the state
          between the request and the callback.
        required: false
        name: state
        in: query
        schema:
          type: string
      - description: Nonce. The string value that is used to associate a client session
          with an ID Token to mitigate replay attacks. This attribute is required
          when the response type includes id_token.
        required: false
        name: nonce
        in: query
        schema:
          type: string
      - description: Whether the user is prompted for reauthentication. When the value
          is "login", the user is reauthenticated. When the value is "none", the user
          is not be prompted for authentication.
        required: false
        in: query
        name: prompt
        schema:
          type: string
          enum:
          - none
          - login
      - description: Maximum authentication age. Specifies the allowable elapsed time,
          in seconds, since the last time the user was authenticated.
        required: false
        name: max_age
        in: query
        schema:
          type: integer
      - description: Code challenge. Required if the OIDC client is configured to
          require proof key for code exchange (PKCE).
        required: false
        name: code_challenge
        in: query
        schema:
          type: string
      - description: Code challenge method for PKCE.
        required: false
        in: query
        name: code_challenge_method
        schema:
          type: string
          enum:
          - S256
      - description: A space-delimited list of scopes that are associated with this
          authorization request.
        required: false
        in: query
        name: scope
        schema:
          type: string
      - description: The JSON that contains the claims for id_token or userinfo endpoint.
        required: false
        name: claims
        in: query
        schema:
          type: string
      - description: Login hint. Value to use when prompting the user for login. Optional
          for OIDC request. This value is the username as a string (e.g. john@ibm.com).
        required: false
        name: login_hint
        in: query
        schema:
          type: string
      - description: The request object in the form of a signed JWT. This can be used
          as an alternative to sending the individual properties in the form.
        required: false
        name: request
        in: query
        schema:
          type: string
      - description: The URI referencing the request object.
        required: false
        name: request_uri
        in: query
        schema:
          type: string
      responses:
        '200':
          description: Form post response.
        '302':
          headers:
            Location:
              description: The redirection URI that has a query string or a fragment.
                For an error, it contains the error and error_description field. For
                success, it might return the authorization code, access_token, token_type,
                expires_in, scope, id_token, grant_id and state attributes.
              schema:
                type: string
          description: Redirect response.
        '400':
          description: The error page that contains the error and error_description
            attributes.
    post:
      summary: Authorize the user to use OIDC.
      description: Use this API to authorize a user to use OIDC. This endpoint requires
        valid login session cookies for the tenant.
      x-publicAPI: 'true'
      tags:
      - OpenID Connect API v2
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              "$ref": "#/components/schemas/AuthorizeRequest"
        required: true
      responses:
        '200':
          description: Form post response.
        '302':
          headers:
            Location:
              description: The redirection URI that has a query string or a fragment.
                For an error, it contains the error and error_description field. For
                success, it might return the authorization code, access_token, token_type,
                expires_in, scope, id_token, grant_id and state attributes.
              schema:
                type: string
          description: Redirect response.
        '400':
          description: The error page that contains the error and error_description
            attributes.
  "/oauth2/token":
    post:
      summary: Get the access token.
      description: Use this API to get the OIDC tokens by using the client credentials.
        For API clients, the returned access tokens can be used to access the APIs
        that the API client has been granted access to.
      x-publicAPI: 'true'
      tags:
      - OpenID Connect API v2
      parameters:
      - description: The basic authorization header that contains a base64-encoded
          client ID and the client secret. Use this header as an alternative to sending
          the client ID and secret in the form parameters.
        required: false
        name: Authorization
        in: header
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              "$ref": "#/components/schemas/TokenRequest"
      responses:
        '200':
          description: The access token was returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TokenResponse"
        '400':
          description: The request was invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error_0"
        '404':
          description: The resource was not found.
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error_0"
  "/oauth2/par":
    post:
      summary: Pushed Authorization Requests (PAR).
      description: Use this API to initiate the authorization flow using the OAuth
        2.0 Pushed Authorization Requests specification.
      x-publicAPI: 'true'
      tags:
      - OpenID Connect API v2
      parameters:
      - description: The basic authorization header that contains a base64-encoded
          client ID and the client secret. Use this header as an alternative to sending
          the client ID and secret in the form parameters.
        required: false
        name: Authorization
        in: header
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              "$ref": "#/components/schemas/PushAuthorizeRequest"
      responses:
        '201':
          description: The request was successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  request_uri:
                    description: The URI referencing the request object to be used
                      in the authorize flow.
                    type: string
                  expires_in:
                    description: The lifetime, in seconds, of the request object.
                    type: integer
        '400':
          description: The request was invalid.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error_0"
        '401':
          description: The client could not be authorised.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error_0"
  "/oauth2/introspect":
    post:
      summary: Introspect the token
      description: Use this API to introspect an OIDC token.
      x-publicAPI: 'true'
      tags:
      - OpenID Connect API v2
      parameters:
      - description: The basic authorization header that contains a base64-encoded
          client ID and the client secret. Use this header as an alternative to sending
          the client ID and secret in the form parameters.
        required: false
        name: Authorization
        in: header
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              "$ref": "#/components/schemas/IntrospectRequest"
      responses:
        '200':
          description: The introspection result was returned.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IntrospectResponse_1"
        '500':
          description: An internal server error occurred.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error_0"
  "/oauth2/userinfo":
    get:
      summary: Retrieve user information
      description: Use this API to get the user information that is associated with
        the token.
      x-publicAPI: 'true'
      tags:
      - OpenID Connect API v2
      parameters:
      - description: The authorization header that contains the bearer token.
        required: true
        name: Authorization
        in: header
        schema:
          type: string
      responses:
        '200':
          description: The user information was returned.
          content:
            application/jwt:
              schema:
                "$ref": "#/components/schemas/UserInfoResponse"
            application/json:
              schema:
                "$ref": "#/components/schemas/UserInfoResponse"
        '401':
          description: Access was forbidden.
          content:
            application/jwt:
              schema:
                "$ref": "#/components/schemas/Error_0"
            application/json:
              schema:
                "$ref": "#/components/schemas/Error_0"
        '500':
          description: An internal server error occurred.
          content:
            application/jwt:
              schema:
                "$ref": "#/components/schemas/Error_0"
            application/json:
              schema:
                "$ref": "#/components/schemas/Error_0"
    post:
      summary: Retrieve user information
      description: Use this API to get the user information that is associated with
        the token.
      x-publicAPI: 'true'
      tags:
      - OpenID Connect API v2
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                access_token:
                  description: The access token.
                  type: string
              required:
              - access_token
        required: true
      responses:
        '200':
          description: The user information was returned.
          content:
            application/jwt:
              schema:
                "$ref": "#/components/schemas/UserInfoResponse"
            application/json:
              schema:
                "$ref": "#/components/schemas/UserInfoResponse"
        '401':
          description: Access was forbidden.
          content:
            application/jwt:
              schema:
                "$ref": "#/components/schemas/Error_0"
            application/json:
              schema:
                "$ref": "#/components/schemas/Error_0"
        '500':
          description: An internal server error occurred.
          content:
            application/jwt:
              schema:
                "$ref": "#/components/schemas/Error_0"
            application/json:
              schema:
                "$ref": "#/components/schemas/Error_0"
  "/oauth2/revoke":
    post:
      summary: Revoke the token.
      description: Use this API to revoke an OIDC token.
      x-publicAPI: 'true'
      tags:
      - OpenID Connect API v2
      parameters:
      - description: The basic authorization header that contains a base64-encoded
          client ID and the client secret. Use this header as an alternative to sending
          the client ID and secret in the form parameters.
        required: false
        name: Authorization
        in: header
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              "$ref": "#/components/schemas/RevokeRequest"
      responses:
        '200':
          description: The token was revoked.
        '500':
          description: An internal server error occurred.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/Error_0"
  "/oauth2/register":
    post:
      summary: Create a dynamic client.
      description: Use this API to create a dynamic client. If dynamic client registration
        is configured to require bearer token authentication, the token needs to have
        the manageAppAccessAdmin (Manage application lifecycle) entitlement.
      x-publicAPI: 'true'
      tags:
      - OpenID Connect API v2
      parameters:
      - description: Bearer access token
        required: false
        name: Authorization
        in: header
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/DynamicClientRequest"
        description: Dynamic client payload
        required: true
      responses:
        '200':
          description: Successful Creation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DynamicClientResponse_0"
        '400':
          description: Bad Request Exception
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error_0"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error_0"
        '500':
          description: An internal server error occurred.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/Error_0"
  "/oauth2/register/{id}":
    get:
      summary: Read a dynamic client.
      description: Use this API to read a dynamic client. If dynamic client registration
        is configured to require bearer token authentication, the token needs to have
        the manageAppAccessAdmin (Manage application lifecycle) entitlement.
      x-publicAPI: 'true'
      tags:
      - OpenID Connect API v2
      parameters:
      - description: Dynamic client identifier
        required: true
        name: id
        in: path
        schema:
          type: string
      - description: Bearer access token
        required: true
        name: Authorization
        in: header
        schema:
          type: string
      responses:
        '200':
          description: Successful Read
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DynamicClientResponse_0"
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error_0"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error_0"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error_0"
    delete:
      summary: Delete a dynamic client.
      description: Use this API to delete a dynamic client. If dynamic client registration
        is configured to require bearer token authentication, the token needs to have
        the manageAppAccessAdmin (Manage application lifecycle) entitlement.
      x-publicAPI: 'true'
      tags:
      - OpenID Connect API v2
      parameters:
      - description: Dynamic client identifier
        required: true
        name: id
        in: path
        schema:
          type: string
      - description: Bearer access token
        required: true
        name: Authorization
        in: header
        schema:
          type: string
      responses:
        '204':
          description: Successful Delete
        '401':
          description: Unauthorized access
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/Error_0"
        '403':
          description: Forbidden
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/Error_0"
        '500':
          description: Internal Server Error
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/Error_0"
  "/v1.0/saml/alias":
    get:
      tags:
      - SAML 2.0 Alias Management
      summary: Retrieves the list of aliases
      description: Retrieves the list of aliases of tenant.
      operationId: listAlias
      parameters:
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for strings is = . Use double quotation marks for the search values.<br><br>Valid
          search parameters are: <b>userId:</b> search by User ID, <b>appId:</b> search
          by application ID, <b>appName:</b> case insensitive search by application
          name<br><br><b>Note</b>: If you are not using the Swagger UI, the search
          parameter value must be HTML encoded. Use the prefix "search=" in the query
          parameter.<br><br><b>Example 1</b>: Search on user ID is "600001ABC2" and
          application ID is "6543210012345678901"<br>search=userId%3D%22600001ABC2%22%26appId%3D%226543210012345678901%22<br><b>Example
          2</b>: Search on user ID is "600001ABC2" and application Name contains "myapp"<br>search=userId%3D%22600001ABC2%22%26appName%3D%22myapp%22'
        schema:
          type: string
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>Use
          the following query parameters:<br><br><b>page</b> - Identifies the requested
          page<br><br><b>limit</b> - Defines the total number of results that are
          returned per page. The maximum value is 100.<br><br><b>Note</b>: If you
          are not using the Swagger UI, the pagination parameter value must be HTML
          encoded. Use the prefix "pagination=" in the query parameter.<br><br><b>Example</b>:
          Paginate on page=1&limit=5<br>pagination=page%3D1%26limit%3D5'
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Query
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AliasList"
        '400':
          description: Bad Request Exception
          content: {}
        '403':
          description: Forbidden
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
  "/v1.0/saml/alias/{aliasUuid}":
    get:
      tags:
      - SAML 2.0 Alias Management
      summary: Retrieves a specific alias
      description: Retrieves a specific alias of tenant.
      operationId: getAlias
      parameters:
      - name: aliasUuid
        in: path
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Query
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Alias"
        '400':
          description: Bad Request Exception
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Alias Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
    delete:
      tags:
      - SAML 2.0 Alias Management
      summary: Deletes a specific alias
      description: Deletes a specific alias of tenant.
      operationId: deleteAlias
      parameters:
      - name: aliasUuid
        in: path
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Successful Deletion
          content: {}
        '400':
          description: Bad Request Exception
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Alias Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
  "/v1.0/saml/federations":
    get:
      tags:
      - SAML 2.0 Federations Management
      summary: Get all Federations
      description: 'Retrieves the federation configurations.<br>Entitlements required:
        readFederations (Read federations) or manageFederations (Manage federations)
        or manageAppAccessAdmin (Manage application lifecycle) or manageIdentitySources
        (Manage identity sources) or readIdentitySources (Read identity sources).<br>Note:
        You only need one entitlement, but you can have more than one.<br><br>The
        configuration properties that are used for the service provider federations
        are:<br><b>clockSkew</b><br>The tolerance in seconds when the received SAML
        assertion NotBefore and NotOnOrAfter is validated.<br><b>includeAllAttributes</b><br>Includes
        all attributes available in the SAML assertion, even if it is mapped to a
        standard IBM Security Verify attribute. <br>The includeAllAttributes property
        defaults to false.<br><b>skipTargetUrlValidation</b><br>Specify whether to
        skip targetURL validation.<br><b>allowedTargetUrls</b><br>Specify the allowed
        target URLs.<br><br>The configuration properties that are used for the identity
        provider federations are:<br><b>assertionValidAfter</b><br>The tolerance in
        seconds that are added to NotOnOrAfter when the SAML assertion is issued.<br><b>assertionValidBefore</b><br>The
        tolerance in seconds that are added to NotBefore when the SAML assertion is
        issued.<br><br>Configuration properties that are used for both the service
        provider and identity provider federations are:<br><b>messageValidTime</b><br>The
        tolerance in seconds when the received SAML message IssueInstant is validated.<br><b>crlEnabled</b><br>Checks
        the certificate revocation list. Checking is done for all functions that use
        an external certificate. If your configuration does not require CRL checking,
        you can disable it. For example, if you use an internal certificate authority
        (CA), you might want to disable CRL checking. The crlEnabled property defaults
        to false.<br><b>keySelectionCriteria</b><br>Specify which key or certificate
        to use for signing, validating, encrypting, or decrypting various messages.
        If there are multiple keys or certificates with the same Subject DN as the
        key or certificate with the specified alias, this setting determines which
        one to use. Use one of the following selection methods:<br>&nbsp&nbsp&nbsp&nbsp<b>only.alias</b><br>&nbsp&nbsp&nbsp&nbspSelect
        the key or certificate with the specified alias. This method is the default.<br>&nbsp&nbsp&nbsp&nbsp<b>longest.lifetime</b><br>&nbsp&nbsp&nbsp&nbspFor
        signing, a valid key with the longest lifetime is used. For validation, keys
        that share the same SubjectDN are sorted based on lifetime availability. Starting
        with the key that has the longest lifetime availability, the keys are tried
        sequentially until validation is successful.<br>&nbsp&nbsp&nbsp&nbsp<b>shortest.lifetime</b><br>&nbsp&nbsp&nbsp&nbspFor
        signing, a valid key with the shortest lifetime is used. For validation, keys
        that share the same SubjectDN are sorted based on lifetime availability. Starting
        with the key that has the shortest lifetime availability, the keys are tried
        sequentially until validation is successful.<br><br><b>defaultNameIDFormat</b><br>Specify
        the nameID format to be used when there''s no nameID format specified in SSO
        query parameter or message. Use one of the following nameID formats for identity
        provider federation:<br>&nbsp&nbsp&nbsp&nbsp<b>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</b><br>&nbsp&nbsp&nbsp&nbsp<b>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</b><br>&nbsp&nbsp&nbsp&nbsp<b>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</b><br>&nbsp&nbsp&nbsp&nbsp<b>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</b><br>Use
        one of the following nameID formats for service provider federation:<br>&nbsp&nbsp&nbsp&nbsp<b>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</b><br>&nbsp&nbsp&nbsp&nbsp<b>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</b><br><br><b>Note</b>:
        The <u>crlEnabled</u> and <u>keySelectionCriteria</u> fields are not shown
        in the GET response until they are updated. <br>The response looks like this:
        <br>[<br>&nbsp&nbsp{<br>&nbsp&nbsp&nbsp&nbsp"name": "saml20ip",<br>&nbsp&nbsp&nbsp&nbsp"messageValidTime":
        300,<br>&nbsp&nbsp&nbsp&nbsp"assertionValidBefore": 300,<br>&nbsp&nbsp&nbsp&nbsp"assertionValidAfter":
        300,<br>&nbsp&nbsp&nbsp&nbsp"crlEnabled": true,<br>&nbsp&nbsp&nbsp&nbsp"keySelectionCriteria":
        "only.alias",<br>&nbsp&nbsp&nbsp&nbsp"defaultNameIDFormat": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",<br>&nbsp&nbsp&nbsp&nbsp"role":
        "ip"<br>&nbsp&nbsp},<br>&nbsp&nbsp{<br>&nbsp&nbsp&nbsp&nbsp"name": "saml20sp",<br>&nbsp&nbsp&nbsp&nbsp"messageValidTime":
        300,<br>&nbsp&nbsp&nbsp&nbsp"clockSkew": 0,<br>&nbsp&nbsp&nbsp&nbsp"includeAllAttributes":
        false,<br>&nbsp&nbsp&nbsp&nbsp"crlEnabled": true,<br>&nbsp&nbsp&nbsp&nbsp"keySelectionCriteria":
        "only.alias",<br>&nbsp&nbsp&nbsp&nbsp"defaultNameIDFormat": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",<br>&nbsp&nbsp&nbsp&nbsp"role":
        "sp"<br>&nbsp&nbsp}<br>]<br>'
      operationId: getPublicFederations
      responses:
        '200':
          description: Successful Query
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Federation1"
        '400':
          description: Bad Request Exception
          content: {}
        '403':
          description: Forbidden
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
  "/v1.0/saml/federations/{federationName}":
    get:
      tags:
      - SAML 2.0 Federations Management
      summary: Get a Federation
      description: 'Retrieves the federation configuration.<br>Entitlements required:
        readFederations (Read federations) or manageFederations (Manage federations)
        or manageAppAccessAdmin (Manage application lifecycle) or manageIdentitySources
        (Manage identity sources) or readIdentitySources (Read identity sources).<br>Note:
        You only need one entitlement, but you can have more than one.<br><br>The
        configuration properties that are used for the service provider federations
        are:<br><b>clockSkew</b><br>The tolerance in seconds when the received SAML
        assertion NotBefore and NotOnOrAfter is validated.<br><b>includeAllAttributes</b><br>Includes
        all attributes available in the SAML assertion, even if it is mapped to a
        standard IBM Security Verify attribute. <br>The includeAllAttributes property
        defaults to false.<br><b>skipTargetUrlValidation</b><br>Specify whether to
        skip targetURL validation.<br><b>allowedTargetUrls</b><br>Specify the allowed
        target URLs.<br><br>The configuration properties that are used for the identity
        provider federations are:<br><b>assertionValidAfter</b><br>The tolerance in
        seconds that are added to NotOnOrAfter when the SAML assertion is issued.<br><b>assertionValidBefore</b><br>The
        tolerance in seconds that are added to NotBefore when the SAML assertion is
        issued.<br><br>Configuration properties that are used for both the service
        provider and identity provider federations are:<br><b>messageValidTime</b><br>The
        tolerance in seconds when the received SAML message IssueInstant is validated.<br><b>crlEnabled</b><br>Checks
        the certificate revocation list. Checking is done for all functions that use
        an external certificate. If your configuration does not require CRL checking,
        you can disable it. For example, if you use an internal certificate authority
        (CA), you might want to disable CRL checking. The crlEnabled property defaults
        to false.<br><b>keySelectionCriteria</b><br>Specify which key or certificate
        to use for signing, validating, encrypting, or decrypting various messages.
        If there are multiple keys or certificates with the same Subject DN as the
        key or certificate with the specified alias, this setting determines which
        one to use. Use one of the following selection methods:<br>&nbsp&nbsp&nbsp&nbsp<b>only.alias</b><br>&nbsp&nbsp&nbsp&nbspSelect
        the key or certificate with the specified alias. This method is the default.<br>&nbsp&nbsp&nbsp&nbsp<b>longest.lifetime</b><br>&nbsp&nbsp&nbsp&nbspFor
        signing, a valid key with the longest lifetime is used. For validation, keys
        that share the same SubjectDN are sorted based on lifetime availability. Starting
        with the key that has the longest lifetime availability, the keys are tried
        sequentially until validation is successful.<br>&nbsp&nbsp&nbsp&nbsp<b>shortest.lifetime</b><br>&nbsp&nbsp&nbsp&nbspFor
        signing, a valid key with the shortest lifetime is used. For validation, keys
        that share the same SubjectDN are sorted based on lifetime availability. Starting
        with the key that has the shortest lifetime availability, the keys are tried
        sequentially until validation is successful.<br><br><b>defaultNameIDFormat</b><br>Specify
        the nameID format to be used when there''s no nameID format specified in SSO
        query parameter or message. Use one of the following nameID formats for identity
        provider federation:<br>&nbsp&nbsp&nbsp&nbsp<b>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</b><br>&nbsp&nbsp&nbsp&nbsp<b>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</b><br>&nbsp&nbsp&nbsp&nbsp<b>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</b><br>&nbsp&nbsp&nbsp&nbsp<b>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</b><br>Use
        one of the following nameID formats for service provider federation:<br>&nbsp&nbsp&nbsp&nbsp<b>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</b><br>&nbsp&nbsp&nbsp&nbsp<b>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</b><br><br><b>organizationName</b><br>The
        name of the federation''s organization, to be included in the exported metadata.<br><br><b>organizationDisplayName</b><br>The
        displayName of the federation''s organization, to be included in the exported
        metadata.<br><br><b>organizationURL</b><br>The URL of the federation''s organization,
        to be included in the exported metadata.<br><br><b>Note</b>: The <u>crlEnabled</u>
        and <u>keySelectionCriteria</u> fields are not shown in the GET response until
        they are updated. <br>If the federation is an identity provider, the response
        looks like this example: <br>&nbsp&nbsp{<br>&nbsp&nbsp&nbsp&nbsp"messageValidTime":
        300,<br>&nbsp&nbsp&nbsp&nbsp"assertionValidBefore": 300,<br>&nbsp&nbsp&nbsp&nbsp"assertionValidAfter":
        300,<br>&nbsp&nbsp&nbsp&nbsp"crlEnabled": true,<br>&nbsp&nbsp&nbsp&nbsp"keySelectionCriteria":
        "only.alias",<br>&nbsp&nbsp&nbsp&nbsp"defaultNameIDFormat": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",<br>&nbsp&nbsp&nbsp&nbsp"role":
        "ip"<br>&nbsp&nbsp}<br><br>If the federation is a service provider, the response
        looks like this example: <br>&nbsp&nbsp{<br>&nbsp&nbsp&nbsp&nbsp"messageValidTime":
        300,<br>&nbsp&nbsp&nbsp&nbsp"clockSkew": 0,<br>&nbsp&nbsp&nbsp&nbsp"includeAllAttributes":
        false,<br>&nbsp&nbsp&nbsp&nbsp"crlEnabled": true,<br>&nbsp&nbsp&nbsp&nbsp"keySelectionCriteria":
        "only.alias",<br>&nbsp&nbsp&nbsp&nbsp"defaultNameIDFormat": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",<br>&nbsp&nbsp&nbsp&nbsp"role":
        "sp"<br>&nbsp&nbsp}'
      operationId: getPublicFederationWithName
      parameters:
      - name: federationName
        in: path
        description: Federation name
        required: true
        schema:
          type: string
          enum:
          - saml20ip
          - saml20sp
      responses:
        '200':
          description: Successful Query
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FederationIp"
        '400':
          description: Bad Request Exception
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Federation Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
    put:
      tags:
      - SAML 2.0 Federations Management
      summary: Update a Federation
      description: 'Updates the federation configuration.<br>Entitlements required:
        manageFederations (Manage federations) or manageAppAccessAdmin (Manage application
        lifecycle) or manageIdentitySources (Manage identity sources).<br>Note: You
        only need one entitlement, but you can have more than one.<br><br>The configuration
        properties that are used for the service provider federations are:<br><b>clockSkew</b><br>The
        tolerance in seconds when the received SAML assertion NotBefore and NotOnOrAfter
        is validated.<br><b>skipTargetUrlValidation</b><br>Specify whether to skip
        targetURL validation.<br><b>allowedTargetUrls</b><br>Specify the allowed target
        URLs.<br><br>The configuration properties that are used for the identity provider
        federations are:<br><b>assertionValidAfter</b><br>The tolerance in seconds
        that are added to NotOnOrAfter when the SAML assertion is issued.<br><b>assertionValidBefore</b><br>The
        tolerance in seconds that are added to NotBefore when the SAML assertion is
        issued.<br><br>Configuration properties that are used for both the service
        provider and identity provider federations are:<br><b>messageValidTime</b><br>The
        tolerance in seconds when the received SAML message IssueInstant is validated.<br><b>crlEnabled</b><br>Checks
        the certificate revocation list. Checking is done for all functions that use
        an external certificate. If your configuration does not require CRL checking,
        you can disable it. For example, if you use an internal certificate authority
        (CA), you might want to disable CRL checking. The crlEnabled property defaults
        to false.<br><b>keySelectionCriteria</b><br>Specify which key or certificate
        to use for signing, validating, encrypting, or decrypting various messages.
        If there are multiple keys or certificates with the same Subject DN as the
        key or certificate with the specified alias, this setting determines which
        one to use. Use one of the following selection methods:<br>&nbsp&nbsp&nbsp&nbsp<b>only.alias</b><br>&nbsp&nbsp&nbsp&nbspSelect
        the key or certificate with the specified alias. This method is the default.<br>&nbsp&nbsp&nbsp&nbsp<b>longest.lifetime</b><br>&nbsp&nbsp&nbsp&nbspFor
        signing, a valid key with the longest lifetime is used. For validation, keys
        that share the same SubjectDN are sorted based on lifetime availability. Starting
        with the key that has the longest lifetime availability, the keys are tried
        sequentially until validation is successful.<br>&nbsp&nbsp&nbsp&nbsp<b>shortest.lifetime</b><br>&nbsp&nbsp&nbsp&nbspFor
        signing, a valid key with the shortest lifetime is used. For validation, keys
        that share the same SubjectDN are sorted based on lifetime availability. Starting
        with the key that has the shortest lifetime availability, the keys are tried
        sequentially until validation is successful.<br><br><b>defaultNameIDFormat</b><br>Specify
        the nameID format to be used when there''s no nameID format specified in SSO
        query parameter or message. Use one of the following nameID formats for identity
        provider federation:<br>&nbsp&nbsp&nbsp&nbsp<b>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</b><br>&nbsp&nbsp&nbsp&nbsp<b>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</b><br>&nbsp&nbsp&nbsp&nbsp<b>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</b><br>&nbsp&nbsp&nbsp&nbsp<b>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</b><br>Use
        one of the following nameID formats for service provider federation:<br>&nbsp&nbsp&nbsp&nbsp<b>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</b><br>&nbsp&nbsp&nbsp&nbsp<b>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</b><br><b>organizationName</b><br>The
        name of the federation''s organization, to be included in the exported metadata.<br><br><b>organizationDisplayName</b><br>The
        displayName of the federation''s organization, to be included in the exported
        metadata.<br><br><b>organizationURL</b><br>The URL of the federation''s organization,
        to be included in the exported metadata.<br><br><b>Note</b>: The <u>crlEnabled</u>
        and <u>keySelectionCriteria</u> fields are not shown in the GET response until
        they are updated. <br>If the federation is an identity provider, the payload
        looks like this example: <br>&nbsp&nbsp{<br>&nbsp&nbsp&nbsp&nbsp"messageValidTime":
        300,<br>&nbsp&nbsp&nbsp&nbsp"assertionValidBefore": 300,<br>&nbsp&nbsp&nbsp&nbsp"assertionValidAfter":
        300,<br>&nbsp&nbsp&nbsp&nbsp"crlEnabled": true,<br>&nbsp&nbsp&nbsp&nbsp"keySelectionCriteria":
        "only.alias",<br>&nbsp&nbsp&nbsp&nbsp"defaultNameIDFormat": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",<br>&nbsp&nbsp&nbsp&nbsp"role":
        "ip"<br>&nbsp&nbsp}<br><br>If the federation is a service provider, the payload
        looks like this example: <br>&nbsp&nbsp{<br>&nbsp&nbsp&nbsp&nbsp"messageValidTime":
        300,<br>&nbsp&nbsp&nbsp&nbsp"clockSkew": 0,<br>&nbsp&nbsp&nbsp&nbsp"crlEnabled":
        true,<br>&nbsp&nbsp&nbsp&nbsp"keySelectionCriteria": "only.alias",<br>&nbsp&nbsp&nbsp&nbsp"defaultNameIDFormat":
        "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",<br>&nbsp&nbsp&nbsp&nbsp"role":
        "sp"<br>&nbsp&nbsp}'
      operationId: updatePublicFederationWithName
      parameters:
      - name: federationName
        in: path
        description: Federation name
        required: true
        schema:
          type: string
          enum:
          - saml20ip
          - saml20sp
      requestBody:
        description: Federation payload
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Federation1"
        required: true
      responses:
        '204':
          description: Successful Update
          content: {}
        '400':
          description: Bad Request Exception
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Federation Not Found
          content: {}
        '409':
          description: Conflict
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/saml/federations/{federationName}/metadata":
    get:
      tags:
      - SAML 2.0 Federations Management
      summary: Exports a federation metadata
      operationId: exportFederation_0
      parameters:
      - name: federationName
        in: path
        description: Federation name
        required: true
        schema:
          type: string
          enum:
          - saml20ip
          - saml20sp
      - name: virtualId
        in: query
        description: The application's unique ID if <b>Use unique ID</b> is checked
        schema:
          type: string
      - name: keyLabel
        in: query
        description: The personal certificate name used to sign the SAML assertion
        schema:
          type: string
      responses:
        '201':
          description: Successful Creation
          content: {}
        '400':
          description: Bad Request Exception
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Federation Not Found
          content: {}
        '409':
          description: Conflict
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
  "/v1.0/saml/useralias":
    get:
      tags:
      - SAML 2.0 Alias Management
      summary: Retrieves the list of aliases belonging to user
      description: Retrieves the list of aliases belonging to user.
      operationId: listAlias_0
      parameters:
      - name: search
        in: query
        description: 'Returns results based on the search criteria.<br><br>Valid operators
          for strings is = . Use double quotation marks for the search values.<br><br>Valid
          search parameters are: <b>appId:</b> search by application ID, <b>appName:</b>
          case insensitive search by application name<br><br><b>Note</b>: If you are
          not using the Swagger UI, the search parameter value must be HTML encoded.
          Use the prefix "search=" in the query parameter.<br><br><b>Example 1</b>:
          Search on application ID is "6543210012345678901"<br>search=appId%3D%226543210012345678901%22<br><b>Example
          2</b>: Search on application Name contains "myapp"<br>search=appName%3D%22myapp%22'
        schema:
          type: string
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page.<br><br>Use
          the following query parameters:<br><br><b>page</b> - Identifies the requested
          page<br><br><b>limit</b> - Defines the total number of results that are
          returned per page. The maximum value is 100.<br><br><b>Note</b>: The pagination
          parameter value must be HTML encoded. Use the prefix "pagination=" in the
          query parameter.<br><br><b>Example</b>: Paginate on page=1&limit=5<br>pagination=page%3D1%26limit%3D5'
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Query
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AliasList"
        '400':
          description: Bad Request Exception
          content: {}
        '403':
          description: Forbidden
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
  "/v1.0/saml/useralias/{aliasUuid}":
    get:
      tags:
      - SAML 2.0 Alias Management
      summary: Retrieves a specific alias belonging to user
      description: Retrieves a specific alias belonging to user.
      operationId: getAlias_0
      parameters:
      - name: aliasUuid
        in: path
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Query
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Alias"
        '400':
          description: Bad Request Exception
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Alias Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
    delete:
      tags:
      - SAML 2.0 Alias Management
      summary: Deletes a specific alias belonging to user
      description: Deletes a specific alias belonging to user.
      operationId: deleteAlias_0
      parameters:
      - name: aliasUuid
        in: path
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: Authorization Header
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Successful Deletion
          content: {}
        '400':
          description: Bad Request Exception
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Alias Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
  "/v1.0/wsf/federations/trace":
    post:
      tags:
      - WS Federation Management
      summary: Enable WS-Federation audit trace for the tenant
      description: 'Enable audit logging of the Security Token Response in the WS-Federation
        or WS-Trust response for the tenant.<br><br><b>enabled</b><br>Set to true
        to enable tenant level audit logging of the Security Token Response in the
        WS-Federation or WS-Trust response.<br><b>allUsers</b><br>Enabling tenant
        level audit logging of the Security Token Response in WS-Federation or WS-Trust
        response is applied to all users.<br>This field will be ignored.<br><b>users</b><br>Enabling
        tenant level audit logging of the Security Token Response in WS-Federation
        or WS-Trust response is applied to all users.<br>This field will be ignored.<br><b>expiry</b><br>Period
        to enable audit logging of the Security Token Response in WS-Federation or
        WS-Trust response for. <br>The value can be specified in seconds, minutes
        or hours. e.g. 120s, 10m, 1h. <br>If expiry is not specified or is specified
        in an invalid format, the default expiry of 10 minutes will be used. <br>The
        maximum expiry is 1 hour. If the expiry specified is more than 1 hour, e.g.
        2h, the maximum expiry of 1 hour will be used.<br><br><br><b>Example payload</b>:
        <br>&nbsp&nbsp{<br>&nbsp&nbsp&nbsp&nbsp"enabled": true,<br>&nbsp&nbsp&nbsp&nbsp"expiry":
        "10m"<br>&nbsp&nbsp}<br>'
      operationId: updateTenantTrace
      requestBody:
        description: Trace enablement payload
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AuditTrace"
        required: true
      responses:
        '204':
          description: No content
          content: {}
        '400':
          description: Bad Request
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/wsf/federations/{federationName}/trace":
    post:
      tags:
      - WS Federation Management
      summary: Enable WS-Federation audit trace
      description: 'Enable audit logging of the Security Token Response in the WS-Federation
        or WS-Trust response for the specified partner and users.<br><br><b>enabled</b><br>Set
        to true to enable audit logging of the Security Token Response in the WS-Federation
        or WS-Trust response.<br><b>providerId</b><br>The partner''s provider ID,
        for which to enable the audit logging of the Security Token Response in the
        WS-Federation or WS-Trust response. This is required when <b>enabled</b> is
        set to true.<br><b>allUsers</b><br>Set to true to enable audit logging of
        the Security Token Response in WS-Federation or WS-Trust response for all
        users.<br><b>users</b><br>List of users'' uids for whom to enable audit logging
        of the Security Token Response in the WS-Federation or WS-Trust response.
        This is required when <b>enabled</b> is set to true and <b>allUsers</b> is
        set to false.<br><b>expiry</b><br>Period to enable audit logging of the Security
        Token Response in WS-Federation or WS-Trust response for. <br>The value can
        be specified in seconds, minutes or hours. e.g. 120s, 10m, 1h. <br>If expiry
        is not specified or is specified in an invalid format, the default expiry
        of 10 minutes will be used. <br>The maximum expiry is 1 hour. If the expiry
        specified is more than 1 hour, e.g. 2h, the maximum expiry of 1 hour will
        be used.<br><br><br><b>Example payload</b>: <br>&nbsp&nbsp[<br>&nbsp&nbsp&nbsp&nbsp{<br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp"enabled":
        true,<br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp"providerId": "urn:federation:MicrosoftOnline",<br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp"allUsers":
        false,<br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp"users": [<br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp"6090001RWA",<br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp"6090003QET"<br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp],<br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp"expiry":
        "10m"<br>&nbsp&nbsp&nbsp&nbsp}<br>&nbsp&nbsp]<br>'
      operationId: updateFederationTrace
      parameters:
      - name: federationName
        in: path
        description: federation name
        required: true
        schema:
          type: string
          enum:
          - wsfedip
      requestBody:
        description: Trace enablement payload
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/FederationAuditTrace"
        required: true
      responses:
        '204':
          description: No content
          content: {}
        '400':
          description: Bad Request
          content: {}
        '404':
          description: Federation or partner with the specified provider ID is Not
            Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: body
  "/v1.0/branding/reset":
    delete:
      tags:
      - Customization - Themes
      summary: Reset customizations
      description: 'Eliminate all themes and template customizations for a tenant,
        effectively resetting back to the Out of the Box templates.<br><br>Entitlements
        required: manageTemplates (Manage Templates)'
      operationId: resetCustomizations
      responses:
        '400':
          description: The request was malformed or might not be handled
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The client was not authenticated
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The client was not authorized to perform the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource could not be located
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '405':
          description: The HTTP method that is specified in the request is not supported
            by the resource
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '406':
          description: The resource cannot produce the representation that is specified
            in the Accept header of the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '415':
          description: The resource cannot consume the representation that is specified
            in the Content-Type header of the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An error occurred processing the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/branding/themes":
    get:
      tags:
      - Customization - Themes
      summary: List all the themes
      description: List all the themes that are registered for the tenant. <br> Generates
        a list of registered themes for the tenant, which includes theme name and
        description(optional).<br><br>Default theme is always present since it is
        the current themeID for your Verify tenant.<br><br> Entitlements required:<br>
        manageTemplates (Manage templates and themes) or readTemplates (Read templates
        and themes)
      operationId: getThemeRegistrations
      parameters:
      - name: pagination
        in: query
        description: 'Controls the results that are returned in a page. If no pagination
          parameters are passed in all results are returned.<br><br>You can use the
          following query parameters:<br><br><b>count</b> - Use to define the total
          number of results that are returned from the data store. The maximum allowed
          value is 1000.<br><br><b>page</b> - Use to identify the requested page,
          or the offset.<br><br><b>limit</b> - Use to define the total number of results
          that are returned per page. The maximum allowed value is 1000.<br><br><b>Note</b>:
          If you are not using the Swagger UI, the pagination parameter value must
          be HTML encoded. Use the prefix "pagination=" in the query parameter.<br><br><b>Example</b>:
          Paginate on count=10&page=1&limit=5<br>pagination=count%3D10%26page%3D1%26limit%3D5'
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ThemeRegistration"
        '400':
          description: The request was malformed or might not be handled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The client was not authenticated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The client was not authorized to perform the request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource could not be located
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '405':
          description: The HTTP method that is specified in the request is not supported
            by the resource
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '406':
          description: The resource cannot produce the representation that is specified
            in the Accept header of the request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '415':
          description: The resource cannot consume the representation that is specified
            in the Content-Type header of the request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An error occurred processing the request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Customization - Themes
      summary: Register a new theme
      description: Register a new theme by using the supported templates and language
        locales. <br><br> This API generates a unique themeId for each theme registered.<br><br>
        Upload template customizations in a .zip theme file. Use the following format
        to add the entries to the compressed theme file:<br><br>/templates/&lt;template_path&gt;/&lt;locale&gt;/&lt;file_name&gt;<br><br>
      operationId: registerThemeTemplates
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - configuration
              - files
              type: object
              properties:
                configuration:
                  type: string
                  description: 'Theme Registration configuration payload. String-encoded
                    JSON Object.<br><br>Example:<br>{<br>"name": "string",<br>"description":
                    "string (optional)"<br>}<br><br>'
                files:
                  type: string
                  description: Customized Template .zip File
                  format: binary
        required: true
      responses:
        '400':
          description: The request was malformed or might not be handled
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The client was not authenticated
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The client was not authorized to perform the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource could not be located
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '405':
          description: The HTTP method that is specified in the request is not supported
            by the resource
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '406':
          description: The resource cannot produce the representation that is specified
            in the Accept header of the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: A conflict occurred with an existing Template Registration.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '415':
          description: The resource cannot consume the representation that is specified
            in the Content-Type header of the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An error occurred processing the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/branding/themes/{themeId}":
    get:
      tags:
      - Customization - Themes
      summary: Download theme-based templates
      description: 'Download all templates that are registered for the theme in a
        .zip file format. Typically used to later provide customizations to templates
        by using the PUT API. See the "Update a theme registration" API. <br><br>
        Downloads the customizations in a .zip file. The entries in the .zip file
        are in the following format:<br><br>/templates/&lt;template_path&gt;/&lt;locale&gt;/&lt;file_name&gt;<br><br><br>
        Note : <br> 1. Use ''master'' to download the global theme for the Verify
        product. The master theme can be used as a template for a registering a new
        theme.<br> 2. Use ''default'' to download the current customizations for your
        Verify tenant.<br><br> Entitlements required: <br> manageTemplates (Manage
        templates and themes) or readTemplates (Read templates and themes)'
      operationId: downloadThemeTemplates
      parameters:
      - name: themeId
        in: path
        description: Generated themeId for the requested theme. The themeID can be
          obtained from the GET call. See the "List all the themes" API.
        required: true
        schema:
          type: string
      - name: customized_only
        in: query
        description: Includes templates that are customized only. Returns global templates
          if false
        schema:
          type: boolean
          default: false
      responses:
        '200':
          description: successful operation
          content:
            application/octet-stream:
              schema:
                "$ref": "#/components/schemas/ThemeRegistration"
        '400':
          description: The request was malformed or might not be handled
          content:
            application/octet-stream:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The client was not authenticated
          content:
            application/octet-stream:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The client was not authorized to perform the request
          content:
            application/octet-stream:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource could not be located
          content:
            application/octet-stream:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '405':
          description: The HTTP method that is specified in the request is not supported
            by the resource
          content:
            application/octet-stream:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '406':
          description: The resource cannot produce the representation that is specified
            in the Accept header of the request
          content:
            application/octet-stream:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '415':
          description: The resource cannot consume the representation that is specified
            in the Content-Type header of the request
          content:
            application/octet-stream:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An error occurred processing the request
          content:
            application/octet-stream:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Customization - Themes
      summary: Update a theme registration
      description: Used to update the theme name, the theme description, and the template
        files for a theme registered.
      operationId: updateThemeTemplates
      parameters:
      - name: themeId
        in: path
        description: Generated themeId for the requested theme. The themeID can be
          obtained from the GET call. See the "List all the themes" API.
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - configuration
              type: object
              properties:
                configuration:
                  type: string
                  description: 'Theme Registration configuration payload. String-encoded
                    JSON Object.<br><br>Example:<br>{<br>"name": "string",<br>"description":
                    "string (optional)"<br>}<br><br>'
                files:
                  type: string
                  description: Customized Theme .zip File
                  format: binary
        required: true
      responses:
        '400':
          description: The request was malformed or might not be handled
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The client was not authenticated
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The client was not authorized to perform the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource could not be located
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '405':
          description: The HTTP method that is specified in the request is not supported
            by the resource
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '406':
          description: The resource cannot produce the representation that is specified
            in the Accept header of the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: A conflict occurred updating this template.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '415':
          description: The resource cannot consume the representation that is specified
            in the Content-Type header of the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An error occurred processing the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    delete:
      tags:
      - Customization - Themes
      summary: Delete a theme registration
      description: Delete a theme registration and the associated template files.
        Checks whether the theme is used by any application before it is deleted.
      operationId: deregisterTheme
      parameters:
      - name: themeId
        in: path
        description: Generated themeId for the requested theme. The themeID can be
          obtained from the GET call. See the "List all the themes" API.
        required: true
        schema:
          type: string
      responses:
        '400':
          description: The request was malformed or might not be handled
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The client was not authenticated
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The client was not authorized to perform the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource could not be located
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '405':
          description: The HTTP method that is specified in the request is not supported
            by the resource
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '406':
          description: The resource cannot produce the representation that is specified
            in the Accept header of the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: A conflict occurred unregistering this template.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '415':
          description: The resource cannot consume the representation that is specified
            in the Content-Type header of the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An error occurred processing the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/branding/themes/{themeId}/{templatePath}":
    get:
      tags:
      - Customization - Themes
      summary: Download a specific template file from a theme
      description: Downloads a single template file from a theme.
      operationId: getTemplate_0
      parameters:
      - name: themeId
        in: path
        description: Generated themeId for the requested theme. The themeID can be
          obtained from the GET call. See the "List all the themes" API.
        required: true
        schema:
          type: string
      - name: templatePath
        in: path
        description: 'Path to the template file as found in the theme .zip file. Example
          templatePath: authentication/saml/error/fr/routing_error.html'
        required: true
        schema:
          pattern: ".*"
          type: string
      responses:
        '400':
          description: The request was malformed or might not be handled
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The client was not authenticated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The client was not authorized to perform the request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource could not be located
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '405':
          description: The HTTP method that is specified in the request is not supported
            by the resource
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '406':
          description: The resource cannot produce the representation that is specified
            in the Accept header of the request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '415':
          description: The resource cannot consume the representation that is specified
            in the Content-Type header of the request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An error occurred processing the request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Customization - Themes
      summary: Update a specific template file for a theme
      description: Updates the contents of a single file from a themeId.
      operationId: updateThemeTemplate
      parameters:
      - name: themeId
        in: path
        description: Generated themeId for the requested theme. The themeID can be
          obtained from the GET call. See the "List all the themes" API.
        required: true
        schema:
          type: string
      - name: templatePath
        in: path
        description: 'Path to the template file as found in the theme .zip file. Example
          templatePath value: authentication/saml/error/default/routing_error.html'
        required: true
        schema:
          pattern: ".*"
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              type: object
              properties:
                file:
                  type: string
                  description: Translation Archive File
                  format: binary
        required: true
      responses:
        '400':
          description: The request was malformed or might not be handled
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The client was not authenticated
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The client was not authorized to perform the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource could not be located
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '405':
          description: The HTTP method that is specified in the request is not supported
            by the resource
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '406':
          description: The resource cannot produce the representation that is specified
            in the Accept header of the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: A conflict occurred updating this template.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '415':
          description: The resource cannot consume the representation that is specified
            in the Content-Type header of the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An error occurred processing the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    delete:
      tags:
      - Customization - Themes
      summary: Deletes a customization for a specific template file in a theme
      description: Deletes a single customized template file from a theme. The file
        is restored to the default version of the template file.
      operationId: deleteSingleThemeFile
      parameters:
      - name: themeId
        in: path
        description: Generated themeId for the requested theme. The themeID can be
          obtained from the GET call. See the "List all the themes" API.
        required: true
        schema:
          type: string
      - name: templatePath
        in: path
        description: 'Path to the template file as found in the theme .zip file. Example
          templatePath: authentication/saml/error/default/routing_error.html'
        required: true
        schema:
          pattern: ".*"
          type: string
      responses:
        '400':
          description: The request was malformed or might not be handled
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The client was not authenticated
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The client was not authorized to perform the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource could not be located
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '405':
          description: The HTTP method that is specified in the request is not supported
            by the resource
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '406':
          description: The resource cannot produce the representation that is specified
            in the Accept header of the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '409':
          description: A conflict occurred deregistering this template.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '415':
          description: The resource cannot consume the representation that is specified
            in the Content-Type header of the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: An error occurred processing the request
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/v1.0/itdr/configurations/default":
    get:
      tags:
      - Threat Insights Configurations API
      summary: Fetch threat default configuration for specified tenant
      description: Fetch threat default configuration for specified tenant
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for specified tenant eg - Bearer 8sAsPFcWRJ78WEUgNH3PKzlyUH6fn9xKhk8paQNb
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Response status would be either allowed or denied
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Configuration"
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden - Insufficient rights to a resource
          content: {}
        '404':
          description: Configuration not found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
  "/v1.0/itdr/configurations":
    post:
      tags:
      - Threat Insights Configurations API
      summary: Create the threat configuration for specified tenant
      description: Create the threat configuration for specified tenant
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for specified tenant eg - Bearer 8sAsPFcWRJ78WEUgNH3PKzlyUH6fn9xKhk8paQNb
        required: true
        schema:
          type: string
      requestBody:
        description: Threat configuration as a part of request body
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Configuration_post"
        required: true
      responses:
        '201':
          description: Response status is created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Created_Configuration"
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden - Insufficient rights to a resource
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: configuration
  "/v1.0/itdr/configurations/{config_id}":
    get:
      tags:
      - Threat Insights Configurations API
      summary: Fetch threat configuration for specified tenant and configuration id
      description: Fetch threat configuration for specified tenant and configuration
        id
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for specified tenant eg - Bearer 8sAsPFcWRJ78WEUgNH3PKzlyUH6fn9xKhk8paQNb
        required: true
        schema:
          type: string
      - name: config_id
        in: path
        description: Threat conguration id to be fetched
        required: true
        schema:
          type: string
          default: default
      responses:
        '200':
          description: Response status would return threat configuration
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Configuration"
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden - Insufficient rights to a resource
          content: {}
        '404':
          description: Configuration not found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
    put:
      tags:
      - Threat Insights Configurations API
      summary: Update the threat configuration for specified tenant for given configuration
        id
      description: Update the threat configuration for specified tenant for given
        configuration id
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for specified tenant eg - Bearer 8sAsPFcWRJ78WEUgNH3PKzlyUH6fn9xKhk8paQNb
        required: true
        schema:
          type: string
      - name: config_id
        in: path
        description: Value of config id to be updated
        required: true
        schema:
          type: string
          default: default
      requestBody:
        description: Threat configuration as a part of request body
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Configuration_put"
        required: true
      responses:
        '204':
          description: No Content
          content: {}
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden - Insufficient rights to a resource
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: configuration
  "/v1.0/itdr/configurations/{config_id}/status":
    put:
      tags:
      - Threat Insights Configurations API
      summary: Update the threat configuration Status for specified tenant and configuration
        id
      description: Update the threat configuration Status to either 'active' or 'inactive'
        for specified tenant and configuration id
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for specified tenant eg - Bearer 8sAsPFcWRJ78WEUgNH3PKzlyUH6fn9xKhk8paQNb
        required: true
        schema:
          type: string
      - name: config_id
        in: path
        description: configuration id status to be updated
        required: true
        schema:
          type: string
          default: default
      requestBody:
        description: Threat configuration status as a part of request body
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Configuration_put_status"
        required: true
      responses:
        '204':
          description: No Content
          content: {}
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden - Insufficient rights to a resource
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
      x-codegen-request-body-name: configuration
    delete:
      tags:
      - Threat Insights Configurations API
      summary: Delete the threat configuration for specified tenant for given configuration
        id
      description: Delete the threat configuration for specified tenant for given
        configuration id
      parameters:
      - name: Authorization
        in: header
        description: Bearer token for specified tenant eg - Bearer 8sAsPFcWRJ78WEUgNH3PKzlyUH6fn9xKhk8paQNb
        required: true
        schema:
          type: string
      - name: config_id
        in: path
        description: Threat configuration id to be deleted
        required: true
        schema:
          type: string
          default: default
      responses:
        '200':
          description: Response status is ok
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden - Insufficient rights to a resource
          content: {}
        '404':
          description: Not found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
      x-publicAPI: 'true'
  "/config/v1.0/webhooks/":
    get:
      tags:
      - Webhook-Configuration
      summary: List Webhooks
      description: |2-

        Lists all configured webhooks.
      operationId: webhooksList
      parameters:
      - name: pagination
        in: query
        description: |-
          Controls the results that are returned in a page.

          You can use the following query parameters:

          count - The maximum number of results that are returned. The maximum allowed value is 200. If excluded will be set to 200.

          offset - How far into the records to retrieve from.


          A maximum of 200 results are returned if no pagination query parameters are passed.

          Note: The pagination parameter value must be HTML encoded. Use the prefix "pagination=" in the query parameter.

          For example, to retrieve the 10th to 20th records, count=10&offset=10
          "pagination=count%3D10%26offset%3D10"
        schema:
          type: string
      - name: search
        in: query
        description: |-
          Returns results based on the search criteria.

          Valid operators for Strings are eq, ne, and contains. Use double quotation marks for the search values.
          Valid operators for Booleans are = and !=
          Valid operators for Numbers are >=, >, <=, <, = and !=

          Note: The search parameter value must be HTML encoded. Use the prefix "search=" in the query parameter.

          For example to search on name contains "acme"
          search=name%20contains%20%22acme%22
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WebhookListConfigResponse"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Webhook-Configuration
      summary: Create a Webhook
      description: |2-

        Create a webhook.
      operationId: webhookPost
      requestBody:
        description: The webhook configuration object to be stored.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/WebhookConfig"
        required: false
      responses:
        '200':
          description: The webhook configuration
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WebhookConfigResponse"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: Body
  "/config/v1.0/webhooks/pretest":
    post:
      tags:
      - Webhook-Configuration
      summary: Preflight a webhook configuration
      description: |2-

        Test a webhook configuration before creation.
      operationId: webhookPretest
      requestBody:
        description: The webhook configuration object to be stored.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/WebhookConfig"
        required: false
      responses:
        '200':
          description: Webhook Test object
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WebhookTestResponse"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: Body
  "/config/v1.0/webhooks/pretest/{resource}":
    post:
      tags:
      - Webhook-Configuration
      summary: Preflight a webhook configuration
      description: |2-

        Test a webhook configuration before creation using a specific resource.
      operationId: webhookPretestResource
      parameters:
      - name: resource
        in: path
        description: Name of the resource of this configuration to use for pretest
        required: true
        schema:
          type: string
      requestBody:
        description: The webhook configuration object to be stored.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/WebhookConfig"
        required: false
      responses:
        '200':
          description: Webhook Test object
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WebhookTestResponse"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: Body
  "/config/v1.0/webhooks/purposes":
    get:
      tags:
      - Webhook-Configuration
      summary: List Webhook Purposes
      description: |2-

        Fetch available purposes for a webhook.
      operationId: webhookPurposes
      responses:
        '200':
          description: The webhook configuration
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Purposes"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/config/v1.0/webhooks/transform":
    post:
      tags:
      - Webhook-Configuration
      summary: Develop an transform
      description: |2-

        Run a transform against a provided payload.
      operationId: webhookTransformTest
      requestBody:
        description: The transform request to try
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TransformRequest"
        required: false
      responses:
        '200':
          description: TransformResponse is the output of the transform test
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TransformResponse"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: Body
  "/config/v1.0/webhooks/{id}":
    get:
      tags:
      - Webhook-Configuration
      summary: Fetch a Webhook
      description: |2-

        Retrieves a webhook configuration.
      operationId: webhookGet
      parameters:
      - name: id
        in: path
        description: ID of the webhook
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The webhook configuration
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WebhookConfigResponse"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    put:
      tags:
      - Webhook-Configuration
      summary: Update a Webhook
      description: |2-

        Updates a webhook configuration.
      operationId: webhookPut
      parameters:
      - name: id
        in: path
        description: ID of the webhook to update
        required: true
        schema:
          type: string
      requestBody:
        description: The webhook configuration object to be stored.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/WebhookConfig"
        required: false
      responses:
        '200':
          description: The webhook configuration
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WebhookConfigResponse"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: Body
    delete:
      tags:
      - Webhook-Configuration
      summary: Delete a webhhook
      description: |2-

        Delete a webhook configuration. Cannot be performed if the webhook is referenced.
      operationId: webhookDelete
      parameters:
      - name: id
        in: path
        description: ID of the webhook
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No content
          content: {}
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/config/v1.0/webhooks/{id}/deadletters":
    get:
      tags:
      - Webhook-Configuration
      summary: Fetch webhook dead letters
      description: |2-

        Retrieves the dead letters for a notification webhook.
      operationId: webhookListDeadletters
      parameters:
      - name: pagination
        in: query
        description: |-
          Controls the results that are returned in a page.

          You can use the following query parameters:

          count - The maximum number of results that are returned. The maximum allowed value is 200. If excluded will be set to 200.

          offset - How far into the records to retrieve from.


          A maximum of 200 results are returned if no pagination query parameters are passed.

          Note: The pagination parameter value must be HTML encoded. Use the prefix "pagination=" in the query parameter.

          For example, to retrieve the 10th to 20th records, count=10&offset=10
          "pagination=count%3D10%26offset%3D10"
        schema:
          type: string
      - name: id
        in: path
        description: ID of the webhook
        required: true
        schema:
          type: string
      responses:
        '200':
          description: This notification webhooks undelivered messages
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DeadLetterListResponse"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    delete:
      tags:
      - Webhook-Configuration
      summary: Remove webhook dead letters
      description: |2-

        Remove webhook dead letters older than the provided critiera.
      operationId: webhookDeleteDeadletters
      parameters:
      - name: id
        in: path
        description: ID of webhook.
        required: true
        schema:
          type: string
      - name: beforeMs
        in: query
        description: Maximum age threshold of deadletters to keep
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: The deleted undelivered messages
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DeadLetterDeleteResponse"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/config/v1.0/webhooks/{id}/deadletters/count":
    get:
      tags:
      - Webhook-Configuration
      summary: View the total number of deadletters a webhook
      description: |2-

        Show the total number of deadletters recorded for this webhook
      operationId: webhookCountDeadletter
      parameters:
      - name: id
        in: path
        description: ID of the webhook
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The count of deadletters
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DeadletterCount"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/config/v1.0/webhooks/{id}/deadletters/flush":
    get:
      tags:
      - Webhook-Configuration
      summary: View the state of a deadletter reconciliation
      description: |2-

        Show the state of a currently running or previously ran reconciliation.
      operationId: webhookCheckFlushDeadletter
      parameters:
      - name: id
        in: path
        description: ID of the webhook
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FlushState"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    post:
      tags:
      - Webhook-Configuration
      summary: Initiate a reconciliation of deadletters
      description: |2-

        Reconcile undelievered notifications. Duplicate calls per webhook will be ignored.
        Will run for at most two hours, or until all deadletters are reconciled.
      operationId: webhookFlushDeadletter
      parameters:
      - name: id
        in: path
        description: ID of webhook to flush.
        required: true
        schema:
          type: string
      requestBody:
        description: The flush parameters
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/DeadLetterFlushBody"
        required: false
      responses:
        '200':
          description: No content
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
      x-codegen-request-body-name: Body
  "/config/v1.0/webhooks/{id}/deadletters/{eventId}":
    get:
      tags:
      - Webhook-Configuration
      summary: Retrieve a dead letter
      description: |2-

        Fetches a webhook dead letter.
      operationId: webhookDeadletter
      parameters:
      - name: id
        in: path
        description: ID of the webhook
        required: true
        schema:
          type: string
      - name: eventId
        in: path
        description: EventID of the deadletter
        required: true
        schema:
          type: string
      responses:
        '204':
          description: An undelivered notification for this webhook
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DeadLetterResponse"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
    delete:
      tags:
      - Webhook-Configuration
      summary: Remove a dead letter
      description: |2-

        Remove a webhook deadletter.
      operationId: webhookDeleteDeadletter
      parameters:
      - name: id
        in: path
        description: ID of the webhook
        required: true
        schema:
          type: string
      - name: eventId
        in: path
        description: EventID of the deadletter
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No content
          content: {}
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/config/v1.0/webhooks/{id}/health":
    get:
      tags:
      - Webhook-Configuration
      summary: Get webhook health
      description: |2-

        Get simple health of a webhook derived from the statistics API data.
      operationId: webhookHealth
      parameters:
      - name: id
        in: path
        description: ID of the webhook
        required: true
        schema:
          type: string
      responses:
        '200':
          description: |-
            At a glance health information about a webhook.
            Interprets the stats API response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HealthResponse"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/config/v1.0/webhooks/{id}/stats":
    get:
      tags:
      - Webhook-Configuration
      summary: Current webhook status
      description: |2-

        Retrieve the statistics for a webhook.
      operationId: webhookGetStats
      parameters:
      - name: id
        in: path
        description: ID of the webhook to query
        required: true
        schema:
          type: string
      - name: time
        in: query
        description: Timestamp of stat to lookup. Should be a unix epoch. Will be
          rounded down to the nearest hour.
        schema:
          type: string
      responses:
        '200':
          description: Webhook Statistics object
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WebhookStatResponse"
        '400':
          description: The request cannot be processed because the request body contains
            improperly structured JSON.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/config/v1.0/webhooks/{id}/test":
    get:
      tags:
      - Webhook-Configuration
      summary: Test a configured webhook
      description: |2-

        Test a webhook configuration.
      operationId: webhookTest
      parameters:
      - name: id
        in: path
        description: ID of the webhook
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Webhook Test object
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WebhookTestResponse"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
  "/config/v1.0/webhooks/{id}/test/{resource}":
    get:
      tags:
      - Webhook-Configuration
      summary: Tests a resource of a configured webhook
      description: |2-

        Tests the provided resource of the webhook.
      operationId: webhookTestResource
      parameters:
      - name: id
        in: path
        description: ID of the webhook
        required: true
        schema:
          type: string
      - name: resource
        in: path
        description: Resouce to test
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Webhook Test object
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WebhookTestResponse"
        '401':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '403':
          description: The unauthenticated user does not have the permissions to perform
            the requested operation.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '404':
          description: The resource cannot be found.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VerifyError"
      x-publicAPI: 'true'
components:
  schemas:
    ErrorResponseMessage:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        errorCode:
          type: string
    DetailProfile:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        source:
          type: string
        state:
          type: string
        createdOn:
          type: string
        draftExists:
          type: boolean
        targetEndpoint:
          type: string
        templateId:
          type: string
        attributeList:
          type: object
          properties:
            attributes:
              type: array
              description: Attribute object.
              items:
                "$ref": "#/components/schemas/Attribute"
            targetEndpoint:
              type: string
    Attribute:
      required:
      - schema
      type: object
      properties:
        schema:
          type: string
        dataType:
          type: string
        mutability:
          type: string
        displayName:
          type: string
        multivalued:
          type: boolean
        attributeName:
          type: string
        customAttribute:
          type: boolean
        attributeMapping:
          type: string
    AttributeForProfile:
      type: object
      properties:
        attributeName:
          type: string
        defaultValue:
          type: string
        description:
          type: object
          properties:
            textKey:
              type: string
        displayName:
          type: object
          properties:
            textKey:
              type: string
        elementType:
          type: string
        hidden:
          type: boolean
        readonly:
          type: boolean
        required:
          type: boolean
        scope:
          type: string
        valueType:
          type: string
    CreateProfileResponseData:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: Profile ID
        attr_list:
          type: object
          properties:
            targetEndpoint:
              type: string
            attributes:
              type: array
              description: Attribute object.
              items:
                "$ref": "#/components/schemas/CreateDiscoverProfileAttributeResponseData"
    CreateProfileBodyData:
      required:
      - description
      - name
      - targetEndpoint
      type: object
      properties:
        name:
          type: string
          description: Unique Name for the draft
        draftExists:
          type: boolean
        description:
          type: string
        source:
          type: string
        state:
          type: string
        targetEndpoint:
          type: string
          description: Name of the target like box,salesforce.
        attributeList:
          type: array
          description: Attribute object.
          items:
            "$ref": "#/components/schemas/CreateProfileAttributeData"
    CreateProfileBodyDataForPost:
      required:
      - name
      - targetEndpoint
      type: object
      properties:
        name:
          type: string
          description: Unique Name for the draft
        targetEndpoint:
          type: string
          description: Name of the target like box,salesforce.
        description:
          type: string
        attributeList:
          type: array
          description: Attribute object.
          items:
            "$ref": "#/components/schemas/CreateProfileAttributeDataForPost"
    CreateDiscoverProfileAttributeResponseData:
      type: object
      properties:
        schema:
          type: string
        attributeName:
          type: string
        attributeMapping:
          type: string
        dataType:
          type: string
        displayName:
          type: string
        mutability:
          type: string
        multivalued:
          type: boolean
        customAttribute:
          type: boolean
    CreateProfileAttributeData:
      type: object
      properties:
        attributeId:
          type: string
        attributeMapping:
          type: string
        attributeName:
          type: string
        mutability:
          type: string
        customAttribute:
          type: boolean
        required:
          type: boolean
        uniqueness:
          type: string
        dataType:
          type: string
        displayName:
          type: string
        multivalued:
          type: boolean
        targetAttributeName:
          type: string
    CreateProfileAttributeDataForPost:
      type: object
      properties:
        attributeId:
          type: string
        attributeMapping:
          type: string
        mutability:
          type: string
    GetProfileListResponse:
      required:
      - totalCount
      type: object
      properties:
        page:
          type: integer
          description: Number of pages to fetch.
          format: int32
        limit:
          type: integer
          description: Total number of profiles to return in each page.
          format: int32
        totalCount:
          type: integer
          description: Number of total profiles.
          format: int32
        profiles:
          type: array
          description: Profile object.
          items:
            "$ref": "#/components/schemas/Profile"
    Profile:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        draftExists:
          type: boolean
        templateId:
          type: string
        createdOn:
          type: string
        lastModified:
          type: string
        targetEndpoint:
          type: string
        source:
          type: string
        state:
          type: string
    GetProfileListForTemplateResponse:
      type: array
      items:
        "$ref": "#/components/schemas/GetProfileListForTemplateResponseObj"
    GetProfileListForTemplateResponseObj:
      required:
      - custom
      - displayName
      - profileId
      - source
      type: object
      properties:
        profileId:
          type: string
        displayName:
          type: string
        custom:
          type: boolean
        source:
          type: string
    GetWebUiTemplateResponse:
      required:
      - accountLifeCycle
      - adapterInfo
      type: object
      properties:
        adapterInfo:
          "$ref": "#/components/schemas/AdapterInfoWebUiTemplate"
        accountLifeCycle:
          "$ref": "#/components/schemas/AccountLifeCycleWebUiTemplate"
    ProfileAttributeUsageResponse:
      type: object
      properties:
        attributeid:
          type: string
        tenant_id:
          type: string
        profile_id:
          type: string
        state:
          type: string
        targetEndpoint:
          type: string
        name:
          type: string
    GetProfileAttributeUsageResponse:
      type: array
      items:
        "$ref": "#/components/schemas/ProfileAttributeUsageResponse"
    AdapterInfoWebUiTemplate:
      required:
      - description
      - endpointName
      - profileName
      - providerType
      - templateId
      type: object
      properties:
        templateId:
          type: string
        description:
          type: string
        profileName:
          type: string
        endpointName:
          type: string
        providerType:
          type: string
    AccountLifeCycleWebUiTemplate:
      required:
      - ResourceAPIAttributes
      - attributeSourcesInfo
      - targetDetailSections
      type: object
      properties:
        attributeSourcesInfo:
          "$ref": "#/components/schemas/AttrSourceInfoWebUiTemplate"
        targetDetailSections:
          type: array
          items:
            "$ref": "#/components/schemas/TargetDetailWebUiTemplate"
        ResourceAPIAttributes:
          type: array
          items:
            "$ref": "#/components/schemas/AttributeInfoWebUiTemplate"
    AttrSourceInfoWebUiTemplate:
      required:
      - sourceIdField
      - url
      type: object
      properties:
        url:
          type: string
        sourceIdField:
          type: string
    TargetDetailWebUiTemplate:
      required:
      - attributes
      - displayName
      type: object
      properties:
        attributes:
          type: array
          items:
            "$ref": "#/components/schemas/AttributeForProfile"
        displayName:
          type: object
          properties:
            textKey:
              type: string
        description:
          type: object
          properties:
            textKey:
              type: string
        sectionSequenceNumber:
          type: integer
    AttributeInfoWebUiTemplate:
      required:
      - attributeName
      - defaultSource
      - displayName
      - order
      - outboundTracking
      - readOnly
      - required
      - valueType
      type: object
      properties:
        order:
          type: string
        readOnly:
          type: boolean
        required:
          type: boolean
        valueType:
          type: string
        displayName:
          type: string
        attributeName:
          type: string
        defaultSource:
          type: integer
        outboundTracking:
          type: boolean
    GetProfileUpdateResponse:
      type: object
      properties:
        id:
          type: string
    CreateOnpremAgentConfiguration:
      required:
      - description
      - heartbeat
      - modules
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the agent configuration
          example: Authentication Agent
        description:
          type: string
          description: The description of the agent configuration
          example: For authenticating against the on premise LDAP server
        heartbeat:
          minimum: 120
          type: integer
          description: How often the agent should emit a heartbeat
          format: int32
          example: 120
        authnCacheTimeout:
          minimum: 0
          type: integer
          description: Time in minutes to cache authentications. Default is no caching
          format: int32
          example: 0
        certLabel:
          type: string
          description: The certificate label used to encrypt modules data, default
            certificate used if not supplied
          example: personalcert
        references:
          type: array
          description: The entities referenced by this configuration.
          items:
            "$ref": "#/components/schemas/OnpremAgentConfigReference"
        purpose:
          type: string
          description: The purpose of the agent configuration
          example: LDAPAUTH
          enum:
          - LDAPAUTH
          - PROV
          - CERTIFICATION
          - EXTERNAL
          - AUTHN
          - EXTAUTHN
        modules:
          type: array
          description: The associated modules with the agent configuration
          items:
            type: object
            additionalProperties:
              type: object
              properties: {}
      description: The creation data of an agent configuration.
    OnpremAgentConfiguration:
      required:
      - apiClients
      - description
      - heartbeat
      - modules
      - name
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the agent configuration
          readOnly: true
          example: bd45bba8-a1d4-4de2-bc80-be2855589363
        name:
          type: string
          description: The name of the agent configuration
          example: Authentication Agent
        description:
          type: string
          description: The description of the agent configuration
          example: For authenticating against the on premise LDAP server
        apiClients:
          type: array
          description: The list of api clients which are permitted to access this
            configuration
          items:
            type: string
        heartbeat:
          minimum: 120
          type: integer
          description: How often the agent should emit a heartbeat
          format: int32
          example: 120
        authnCacheTimeout:
          minimum: 0
          type: integer
          description: Time in minutes to cache authentications. Default is no caching
          format: int32
          example: 0
        certLabel:
          type: string
          description: The certificate label used to encrypt modules data, default
            certificate used if not supplied
          example: personalcert
        references:
          type: array
          description: The entities referenced by this configuration.
          items:
            "$ref": "#/components/schemas/OnpremAgentConfigReference"
        purpose:
          type: string
          description: The purpose of the agent configuration
          example: LDAPAUTH
          enum:
          - LDAPAUTH
          - PROV
          - CERTIFICATION
          - EXTERNAL
          - AUTHN
          - EXTAUTHN
        modules:
          type: array
          description: The associated modules with the agent configuration
          items:
            type: object
            additionalProperties:
              type: object
              properties: {}
      description: The agent configuration.
    OnpremAgentCorruptConfiguration:
      required:
      - apiClients
      - description
      - heartbeat
      - modules
      - name
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the agent configuration
          readOnly: true
          example: bd45bba8-a1d4-4de2-bc80-be2855589363
        name:
          type: string
          description: The name of the agent configuration
          example: Authentication Agent
        description:
          type: string
          description: The description of the agent configuration
          example: For authenticating against the on premise LDAP server
        apiClients:
          type: array
          description: The list of api clients which are permitted to access this
            configuration
          items:
            type: string
        heartbeat:
          minimum: 120
          type: integer
          description: How often the agent should emit a heartbeat
          format: int32
          example: 120
        authnCacheTimeout:
          minimum: 0
          type: integer
          description: Time in minutes to cache authentications. Default is no caching
          format: int32
          example: 0
        certLabel:
          type: string
          description: The certificate label used to encrypt modules data, default
            certificate used if not supplied
          example: personalcert
        references:
          type: array
          description: The entities referenced by this configuration.
          items:
            "$ref": "#/components/schemas/OnpremAgentConfigReference"
        purpose:
          type: string
          description: The purpose of the agent configuration
          example: LDAPAUTH
          enum:
          - LDAPAUTH
          - PROV
          - CERTIFICATION
          - EXTERNAL
          - AUTHN
          - EXTAUTHN
        modules:
          "$ref": "#/components/schemas/OnpremAgentEncryptedModules"
      description: The corrupt agent configuration.
    HealthStatus:
      required:
      - components
      - status
      - time
      type: object
      properties:
        status:
          type: string
          description: The overall health status of the evaluated components
          example: good
        components:
          type: array
          description: A list of evaluated components
          items:
            "$ref": "#/components/schemas/Component_1"
        time:
          type: string
          description: The overall time that was taken to evaluate the health status
            of the components
          example: 10ms
      description: The overall health status of the evaluated components.
    OnpremAgentEncryptedModules:
      required:
      - cb64u
      - ivb64u
      - kwa
      - pea
      - wkb64u
      type: object
      properties:
        pea:
          type: string
          description: The case-insensitive payload symmetric encryption algorithm
          readOnly: true
          example: AES/CBC/PKCS5PADDING
        kwa:
          type: string
          description: The case-insensitive asymmetric encryption algorithm
          readOnly: true
          example: RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING
        cb64u:
          type: string
          description: The Base 64 URL encoded JCA/JCE 'combined' crypttext/ciphertext
          readOnly: true
          example: J3WNkT2OvIyGO9IYQ-FAulLVef5h6X9RIT7qn3KHOhCIXl8g7kK8nB3nc0ATMO2nK3Gfy3ZCrGZTkz8RaiYvGKa3...
        wkb64u:
          type: string
          description: The Base 64 URL encoded 'wrapped' payload encryption secret
            key
          readOnly: true
          example: IcvO5Zf7e-jelWpPrJJ-kGKMS49KomhMKFr19QCw1YB49Z2eUKtndhm5pSHnvHIpjiEM2XBTIPYzch8le8-11ZG4...
        ivb64u:
          type: string
          description: The Base 64 URL encoded payload symmetric encryption IV data
          readOnly: true
          example: mLPpSBOzetiQHbIA3HJd8w
      description: The encrypted modules.
    OnpremAgentConfigReference:
      required:
      - id
      - ref
      - type
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the resource that the agent configuration
            is referencing
          readOnly: true
          example: bd45bba8-a1d4-4de2-bc80-be2855589363
        type:
          type: string
          description: The type of resource that the agent configuration is referencing
          readOnly: true
          example: "/v1.0/identitySources/bd45bba8-a1d4-4de2-bc80-be2855589363"
        ref:
          type: string
          description: The type of reference that the agent configuration is referencing
          readOnly: true
          example: identitysources
      description: The entity reference details.
    Unauthorized:
      description: The request is not authorized
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/VerifyError"
    OnpremAgentApiCred:
      required:
      - clientId
      - clientSecret
      type: object
      properties:
        clientId:
          type: string
          description: The unique identifier of the client
          readOnly: true
          example: bd45bba8-a1d4-4de2-bc80-be2855589363
        clientSecret:
          type: string
          description: The client secret.
          readOnly: true
          example: FDzG0Rmrta
      description: The API credential.
    NotAcceptable:
      description: The request is not acceptable
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/VerifyError"
    Component:
      required:
      - details
      - name
      - status
      - time
      type: object
      properties:
        name:
          type: string
          description: The name of the evaluated component
          example: ZooKeeper
        status:
          type: string
          description: The status of the evaluated component
          example: good
        details:
          type: string
          description: A descriptive message about the health status
          example: Successfully connected to ZooKeeper
        time:
          type: string
          description: The time that was taken to evaluate the health status of the
            component
          example: 4ms
      description: The health status of a component.
    ServiceStatistics:
      required:
      - averageLatency
      - serviceStarted
      type: object
      properties:
        averageLatency:
          type: integer
          format: int64
        serviceStarted:
          type: string
    BulkResponse:
      type: object
      properties:
        messageId:
          type: string
          description: The message key identifier.
          example: CSIAB3702E
        messageDescription:
          type: string
          description: Requester locale specific descriptive message.
          example: The retrieval of the resource failed.
        results:
          type: array
          items:
            "$ref": "#/components/schemas/BulkResult"
      xml:
        name: error
    BulkResult:
      type: object
      properties:
        op:
          type: string
          enum:
          - remove
        path:
          type: string
          example: "/00000000-1111-2222-3333-44444444"
        result:
          type: string
          enum:
          - success
          - failure
        error:
          type: string
          description: this field will not be included if the operation was successful
    BulkOperation:
      type: object
      properties:
        op:
          type: string
          example: remove
        path:
          type: string
          example: "/00000000-1111-2222-3333-44444444"
    APIClientAdditionalConfig:
      type: object
      properties:
        clientAuthMethod:
          type: string
          description: the authentication method type
          example: default
        validateClientAssertionJti:
          type: boolean
          description: a Boolean value that indicates whether or not to validate the
            client assertion JTI
          example: true
        allowedClientAssertionVerificationKeys:
          type: array
          description: a list of the allowed client assertion verification keys
          items:
            type: string
    APIClientConfig:
      required:
      - clientName
      - entitlements
      type: object
      properties:
        id:
          type: string
          description: the unique id for the client
          readOnly: true
          example: 00000000-1111-2222-3333-44444444
        clientName:
          type: string
          description: the friendly name of the client
          example: Demo Client
        entitlements:
          type: array
          description: the list of entitlements assigned to the client
          items:
            type: string
        clientId:
          type: string
          description: the generated client id for authorization
          example: demoClient
        clientSecret:
          type: string
          description: the generated client secret for authorization
          example: demoSecret
        enabled:
          type: boolean
          description: whether or not the client can be used to generate tokens
          example: true
        overrideSettings:
          "$ref": "#/components/schemas/APIClientOverrideSettings"
        description:
          type: string
          description: a description of the client
          example: Client used for demonstrations
        additionalProperties:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: additional properties for the client
        ipFilterOp:
          type: string
          description: the operation of the ip filter. The default setting is null,
            which means that the ip filter is disabled
          example: allow
          enum:
          - allow
          - deny
        ipFilters:
          type: array
          description: the list of ips
          items:
            type: string
        jwkUri:
          type: string
          description: the JSON web key URI endpoint
          example: https://tenant-name/oidc/endpoint/default/jwks
        additionalConfig:
          "$ref": "#/components/schemas/APIClientAdditionalConfig"
    APIClientConfigPaginatedResponseContainer:
      type: object
      properties:
        count:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        apiClients:
          type: array
          items:
            "$ref": "#/components/schemas/APIClientConfig"
    APIClientOverrideSettings:
      type: object
      properties:
        restrictScopes:
          type: boolean
          description: boolean value that determines whether or not to restrict scopes
          example: true
        scopes:
          type: array
          items:
            "$ref": "#/components/schemas/APIClientScopes"
    APIClientScopes:
      type: object
      properties:
        name:
          type: string
          description: the name of the scope
          example: scope
        description:
          type: string
          description: a description of the scope
          example: scope description
    APIClientConfigRequest:
      required:
      - clientName
      - enabled
      - entitlements
      type: object
      properties:
        clientId:
          type: string
          description: the unique identifier of the client
          example: ffa71178-a945-4727-bef0-e10f7ebc9554
        clientName:
          type: string
          description: the friendly name of the client
          example: Demo Client
        clientSecret:
          type: string
          description: the generated client secret for authorization. If unspecified,
            a random client secret is generated
          example: demoSecret
        entitlements:
          type: array
          description: the list of entitlements assigned to the client
          items:
            type: string
        enabled:
          type: boolean
          description: whether or not the client can be used to generate tokens
          example: true
        overrideSettings:
          "$ref": "#/components/schemas/APIClientOverrideSettings"
        description:
          type: string
          description: a description of the client
          example: Client used for demonstrations
        additionalProperties:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: additional properties for the client
        ipFilterOp:
          type: string
          description: the operation of the ip filter. The default setting is null,
            which means that the ip filter is disabled
          example: allow
          enum:
          - allow
          - deny
        ipFilters:
          type: array
          description: the list of ips
          items:
            type: string
        jwkUri:
          type: string
          description: the JSON web key URI endpoint
          example: https://tenant-name/oidc/endpoint/default/jwks
        additionalConfig:
          "$ref": "#/components/schemas/APIClientAdditionalConfig"
    Entitlements:
      required:
      - entitlements
      type: object
      properties:
        entitlements:
          type: array
          items:
            "$ref": "#/components/schemas/Entitlment"
      xml:
        name: entitlements
    Entitlment:
      required:
      - entitlements
      - groupUids
      - identifier
      - type
      type: object
      properties:
        identifier:
          type: string
        type:
          type: string
          enum:
          - "[userid"
          - apikey
          - serviceid
          - clientid
          - group]
        entitlements:
          type: array
          items:
            type: string
        groupUids:
          type: array
          items:
            type: string
      description: Object representing a single entitlement
      xml:
        name: entitlement
    IntrospectResponse:
      type: object
      properties:
        active:
          type: boolean
        clientId:
          type: string
        grantId:
          type: string
        grantType:
          type: string
        realmName:
          type: string
        scope:
          type: string
        sub:
          type: string
        tokenType:
          type: string
        uniqueSecurityName:
          type: string
        entitlementsJwt:
          type: string
    Certificate:
      type: object
      properties:
        type:
          type: string
        encoded:
          type: array
          items:
            pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            type: string
            format: byte
        publicKey:
          "$ref": "#/components/schemas/PublicKey"
    PublicKey:
      type: object
      properties:
        algorithm:
          type: string
        format:
          type: string
        encoded:
          type: array
          items:
            pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            type: string
            format: byte
    Role:
      required:
      - allowIndividualEntitlements
      - entitlements
      - id
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        entitlements:
          uniqueItems: true
          type: array
          items:
            "$ref": "#/components/schemas/RoleEntitlement"
        allowIndividualEntitlements:
          type: boolean
      description: Object representing a single role
      xml:
        name: role
    RoleEntitlement:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        label:
          type: string
    RuntimeEntitlements:
      type: object
      properties:
        entitlements:
          uniqueItems: true
          type: array
          items:
            type: string
    SubscriptionResponse:
      required:
      - feedType
      - feedURL
      type: object
      properties:
        feedType:
          type: string
          description: Type of the subscription feed
        feedURL:
          type: string
          description: URL of the subscription feed
    GeneratedDoc:
      type: string
      format: byte
    Plans:
      required:
      - default
      type: object
      properties:
        default:
          "$ref": "#/components/schemas/DefaultPlan"
    DefaultPlan:
      required:
      - title
      type: object
      properties:
        title:
          type: string
          description: The title of the plan
          default: Default Plan
        rate-limit:
          type: object
          properties:
            value:
              type: string
              default: 100/hour
            hard-limit:
              type: boolean
              default: false
        approval:
          type: boolean
          default: false
    DeploymentVisibility:
      required:
      - subscribe
      - view
      type: object
      properties:
        view:
          "$ref": "#/components/schemas/View"
        subscribe:
          "$ref": "#/components/schemas/Subscribe"
    View:
      required:
      - enabled
      - type
      type: object
      properties:
        enabled:
          type: boolean
          description: Is the plan visible.
        type:
          type: string
          enum:
          - public
          - custom
          - authenticated
        tags:
          type: array
          description: 'When view is custom: The Communities allowed to view this
            plan.'
          items:
            type: string
        orgs:
          type: array
          description: 'When view is custom: The Organizations allowed to view this
            plan.'
          items:
            type: string
    Info:
      required:
      - name
      - title
      - version
      type: object
      properties:
        name:
          type: string
          description: The name of the product
          default: pushed-product
        title:
          type: string
          description: The title of the product
          default: A Product that encapsulates Liberty APIs
        version:
          type: string
          description: The version of the product
          default: 1.0.0
    Product:
      type: object
      properties:
        product:
          type: string
          description: Product document version
          default: 1.0.0
        info:
          "$ref": "#/components/schemas/Info"
        visibility:
          "$ref": "#/components/schemas/DeploymentVisibility"
        apis:
          type: object
          properties:
            liberty:
              "$ref": "#/components/schemas/ProductApi"
          description: Apis included in the product
        plans:
          "$ref": "#/components/schemas/Plans"
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
    Subscribe:
      required:
      - enabled
      - type
      type: object
      properties:
        enabled:
          type: boolean
          description: Is the plan visible.
        type:
          type: string
          enum:
          - authenticated
          - custom
        tags:
          type: array
          description: 'When subscribe is custom: The Communities allowed to subscribe.'
          items:
            type: string
        orgs:
          type: array
          description: 'When subscribe is custom: The Organizations allowed to subscribe.'
          items:
            type: string
    ProductApi:
      type: object
      properties:
        name:
          type: string
          description: A name:version pair of the Liberty API
          default: liberty-api:1.0.0
      description: Product API
    PlanPackage:
      type: object
      properties:
        productName:
          type: string
        productVersion:
          type: string
        document:
          "$ref": "#/components/schemas/ConfigDataObject"
        productVisibilityMetadata:
          "$ref": "#/components/schemas/ProductPackageUpdateJsonBody"
        task:
          "$ref": "#/components/schemas/TaskListGetResponse"
        planId:
          type: string
        planVersion:
          type: integer
          format: int32
        planName:
          type: string
        planDescription:
          type: string
        planDisplayName:
          type: string
        planRequiresApproval:
          type: boolean
        planRegistrations:
          type: integer
          format: int64
        apiId:
          type: string
        apiName:
          type: string
        apiVersion:
          type: string
        apiDescription:
          type: string
        apiEndpoint:
          type: string
        vendorExtensions:
          type: object
          additionalProperties:
            type: object
            properties: {}
        url:
          type: string
        dependents:
          type: object
          additionalProperties:
            type: array
            items:
              "$ref": "#/components/schemas/PlanPackage"
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        envId:
          type: string
        deploymentState:
          type: string
          enum:
          - TRANSIENT_REMOVED
          - STOPPED
          - RUNNING
          - SUSPENDED
          - ARCHIVED
          - RETIRED
          - DEPRECATED
          - PUBLISHED
          - DEPLOYED
          - PENDING
        deploymentVisibility:
          "$ref": "#/components/schemas/DeploymentVisibility"
        documentType:
          type: string
          enum:
          - POLICYTYPE
          - PRODUCTVERSION
          - PLANVERSION
          - APIRESOURCE
          - APIVERSION
        documentVersion:
          type: integer
          format: int32
        documentId:
          type: string
        orgId:
          type: string
        taskId:
          type: string
        id:
          type: string
        deploymentPackageId:
          type: string
        pendingDeploymentState:
          type: string
          enum:
          - REMOVE
          - ARCHIVE
          - RETIRE
          - DEPRECATE
          - SUPERSEDE
          - REPLACE
          - UPDATE
          - PUBLISH
          - RESTAGE
          - STAGE_FROM_DRAFT
        supersedes:
          "$ref": "#/components/schemas/PlanIdentifierTuple"
        supersededBy:
          "$ref": "#/components/schemas/PlanIdentifierTuple"
        affectedPlans:
          type: object
          additionalProperties:
            type: array
            items:
              "$ref": "#/components/schemas/PlanIdentifierTuple"
        operationStatusSummary:
          "$ref": "#/components/schemas/OperationStatusSummary"
    ConfigDataObject:
      type: object
      properties:
        id:
          type: string
        orgId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: string
        createdBy:
          type: string
        url:
          type: string
        envId:
          type: string
    ProductPackageUpdateJsonBody:
      type: object
      properties:
        visibility:
          "$ref": "#/components/schemas/DeploymentVisibility"
    TaskListGetResponse:
      required:
      - activities
      - availableActions
      - envId
      - id
      - orgId
      - status
      - taskType
      - url
      type: object
      properties:
        id:
          type: string
        orgId:
          type: string
        envId:
          type: string
        taskType:
          type: string
          enum:
          - planSubscriptionApproval
          - productDeploymentApproval
          - planDeploymentApproval
        status:
          type: string
          enum:
          - cancelled
          - rejected
          - approved
          - pending
        taskProperties:
          type: string
        activities:
          type: array
          items:
            "$ref": "#/components/schemas/TaskActivityResponse"
        availableActions:
          type: array
          items:
            type: string
        url:
          type: string
    TaskActivityResponse:
      type: object
      properties:
        action:
          type: object
          properties: {}
          description: The action executed by this activity
        date:
          type: string
          description: The date this action was executed
          format: date-time
        userId:
          type: string
          description: The id of the user who initiated this action
        comment:
          type: string
          description: The user's comment for this action
        username:
          type: string
          description: The username of the user who initiated this action
        displayName:
          type: string
          description: The display name of the user who initiated this action
    PlanIdentifierTuple:
      type: object
      properties:
        planId:
          type: string
        version:
          type: integer
          format: int32
        set:
          type: boolean
    OperationStatusSummary:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
        messages:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    Callable:
      type: object
    CallableObject:
      type: object
    RetryOperationsBean:
      required:
      - operationids
      type: object
      properties:
        operationids:
          type: array
          description: List of operation ids (identifiers) eligible for retry
          items:
            type: string
    AccountOwnerBean:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for account owner
        name:
          type: string
          description: name of account owner
    MessageBean:
      required:
      - description
      - status
      type: object
      properties:
        description:
          type: string
          description: Detailed message about the current state of operation.
        status:
          type: integer
          description: HTTP status code of the operation
          format: int32
        details:
          "$ref": "#/components/schemas/MessageDetailsBean"
    MessageDetailsBean:
      type: object
      properties:
        statusCode:
          type: integer
          description: HTTP status sent by the underlying target
          format: int32
        error:
          type: string
          description: Error details sent by the target
        message:
          type: string
          description: Details about the error message
    OperationBean:
      required:
      - accountName
      - accountOwner
      - applicationName
      - gracePeriod
      - icon
      - id
      - lastUpdatedTime
      - message
      - origin
      - requestor
      - status
      - submissionTime
      - type
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for the operation.
        type:
          type: string
          description: The type of the operation
          enum:
          - AP (Account Provisioning)
          - AD (Account Deprovisioning)
        origin:
          type: string
          description: Information on from where the operation originated
          enum:
          - AM (Automatic)
          - MN (Manual)
        applicationName:
          type: string
          description: Name of the application whose account is operated
        icon:
          type: string
          description: URL to fetch the icon for the application
        accountName:
          type: string
          description: Name of the account on which operation is performed
        lastUpdatedTime:
          type: integer
          description: When was the operation last updated
          format: int64
        status:
          type: string
          description: Status of operation
        accountOwner:
          "$ref": "#/components/schemas/AccountOwnerBean"
        requestor:
          "$ref": "#/components/schemas/RequestorBean"
        message:
          "$ref": "#/components/schemas/MessageBean"
        submissionTime:
          type: integer
          description: When was the operation was submitted
          format: int64
        gracePeriod:
          type: integer
          description: Graceperiod
          format: int64
        permissionType:
          type: string
          description: Type of permission associated with the operation, if any
        permissionId:
          type: string
          description: ID of permission associated with the operation, if any
        permissionName:
          type: string
          description: Name of permission associated with the operation, if any
        modifiedAttributes:
          type: string
          description: List of modified attributes
    RequestorBean:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user who requested the operation
        name:
          type: string
          description: name of user
    SearchOperationBean:
      required:
      - operations
      - totalCount
      type: object
      properties:
        totalCount:
          type: integer
          description: Total number of records found.
          format: int32
        operations:
          type: array
          description: List of all the operations performed.
          items:
            "$ref": "#/components/schemas/OperationBean"
        supportedOpTypesForRetry:
          type: array
          description: List of all operation codes that can be retried like 'AP',
            'AD', 'AGA', 'RGA', 'AM', 'AS', 'AR'.
          items:
            type: string
    AdminApplicationWithoutProv:
      required:
      - applicationState
      - approvalRequired
      - customIcon
      - defaultIcon
      - description
      - icon
      - name
      - providers
      - provisioning
      - provisioningMode
      - templateId
      - type
      - visibleOnLaunchpad
      type: object
      properties:
        name:
          type: string
          description: Name of the application
        icon:
          type: string
          description: URI of the icon API for the application
        defaultIcon:
          type: string
          description: URI of the default icon which was associated with the application
        customIcon:
          type: string
          description: URI of the icon associated by Administrator with the application
        templateId:
          type: string
          description: Unique identifier representing the type of SaaS application
        applicationState:
          type: string
          description: Boolean flag to indicate whether end user can use SSO with
            the application
        description:
          type: string
          description: Description of the application
        provisioningMode:
          type: string
          description: Boolean flag to indicate where JIT is supported or not.
        type:
          type: string
          description: Name of the SaaS application
        visibleOnLaunchpad:
          type: string
          description: Boolean flag representing  whether application is visible for
            end user to request access
        approvalRequired:
          type: string
          description: 'Boolean flag representing  whether approval request will be
            sent when end user request access '
        applicationRefId:
          type: string
          description: ID of the the paret of referencing application
        adaptiveAuthentication:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Adaptive authentication data for devportal applications
        signonState:
          type: boolean
          description: True if Sign On is Enabled and False if it is in Disabled.
        providers:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Provider Bean containing relevant attributes
        provisioning:
          "$ref": "#/components/schemas/ProvisioningBeanWithBlankFields"
        _links:
          "$ref": "#/components/schemas/HALLink"
    AdoptionPolicyBeanWithBlankSections:
      type: object
      properties:
        matchingAttributes:
          type: array
          items:
            type: object
            properties: {}
        remediationPolicy:
          type: object
          additionalProperties:
            type: object
            properties: {}
    EmbeddedApplicationsWithoutProv:
      type: object
      properties:
        totalCount:
          type: integer
          format: int32
        applications:
          type: array
          items:
            "$ref": "#/components/schemas/AdminApplicationWithoutProv"
    HALLink:
      type: object
      properties:
        self:
          "$ref": "#/components/schemas/Self"
    ProvisioningBeanWithBlankFields:
      type: object
      properties:
        authentication:
          type: object
          additionalProperties:
            type: object
            properties: {}
        attributeMappings:
          type: array
          items:
            type: object
            properties: {}
        reverseAttributeMappings:
          type: array
          items:
            type: object
            properties: {}
        policies:
          "$ref": "#/components/schemas/ProvisioningPoliciesBeanWithBlankSections"
        extension:
          type: object
          additionalProperties:
            type: object
            properties: {}
        provisioningState:
          type: string
    ProvisioningPoliciesBeanWithBlankSections:
      type: object
      properties:
        provPolicy:
          type: string
        deProvPolicy:
          type: string
        deProvAction:
          type: string
        passwordSync:
          type: string
        adoptionPolicy:
          "$ref": "#/components/schemas/AdoptionPolicyBeanWithBlankSections"
        gracePeriod:
          type: integer
          format: int64
    SearchAdminApplicationWithoutProvResponseBean:
      type: object
      properties:
        _embedded:
          "$ref": "#/components/schemas/EmbeddedApplicationsWithoutProv"
        _links:
          "$ref": "#/components/schemas/HALLink"
        totalCount:
          type: integer
          format: int32
    Self:
      required:
      - href
      type: object
      properties:
        href:
          type: string
          description: URI of an application to get more details.
    PostCustomRuleResponseBean:
      type: object
      properties:
        ruleId:
          type: string
          description: Unique identifier of the rule that is created.
    CustomRuleBean:
      type: object
      properties:
        ruleType:
          type: string
          description: Type of rule
        ruleScript:
          type: string
          description: Script for the rule
        templateId:
          type: string
          description: Template id associated with the rule
    MigrateTenantBean:
      type: object
      properties:
        migrateAll:
          type: boolean
          description: Migrate all the tenants. default value is false.  When migrateAll
            is sent as true, the tenantHostNames data is ignored
        tenantHostNames:
          uniqueItems: true
          type: array
          description: Name of the tenant whose data needs to be migrated. The tenantHostName
            = all, will migrate all tenants data.
          items:
            type: string
    GetLastReconStatusResponseBean:
      type: object
      properties:
        reconciliationId:
          type: string
          description: Unique Identifier for the Account sync.
        applicationId:
          type: string
          description: Unique identified for the application.
        reconStatus:
          type: string
          description: Status of account sync sub-process of retrieving data from
            target endpoint.
        reconStartTime:
          type: string
          description: Start time of the account sync operation.
          format: date-time
        reconEndTime:
          type: string
          description: End time of the account sync operation.
          format: date-time
        reconOpType:
          type: string
          description: Type of account sync operation that is executed.
        adoptionStatus:
          type: string
          description: Account Sync overall status.
    AccountDetails:
      type: object
      properties:
        accountId:
          type: string
          description: Account id of an application
        complianceStatus:
          type: string
          description: 'Account Compliance Status of account eg: COMPLIANT, NON_COMPLIANT,
            UNMATCHED'
        userName:
          type: string
          description: User name of an account
    GetReconAccountDetailsResponseBean:
      type: object
      properties:
        reconciliationId:
          type: string
          description: Unique identifier for reconciliation Operation.
        applicationId:
          type: string
          description: Unique identifier for application.
        totalCount:
          type: string
          description: total account count.
        accountDetails:
          type: array
          description: Account details for each account.
          items:
            "$ref": "#/components/schemas/AccountDetails"
    AccountClass:
      type: object
      properties:
        status:
          type: string
          description: Status of account.
        accountId:
          type: string
          description: Unique Account id.
        userName:
          type: string
          description: Username.
        creationTime:
          type: integer
          description: Account creation time.
          format: int32
        deletionTime:
          type: integer
          description: Account deletion time.
          format: int32
        owner:
          "$ref": "#/components/schemas/OwnerClass"
        finerStatus:
          type: string
          description: Finer status of account.
        reconciliationId:
          type: string
          description: Reconciliation id of an account.
    GetAccountListResponseBean:
      required:
      - templateId
      - totalCount
      type: object
      properties:
        totalCount:
          type: integer
          description: Number of total accounts.
          format: int32
        accounts:
          type: array
          description: Account object.
          items:
            "$ref": "#/components/schemas/AccountClass"
        templateId:
          type: string
          description: Value of template id.
        complianceStats:
          "$ref": "#/components/schemas/UserAccountStats"
    OwnerClass:
      type: object
      properties:
        userName:
          type: string
          description: Username.
        givenName:
          type: string
          description: Given name.
        lastName:
          type: string
          description: Last name.
        email:
          type: string
          description: Email.
        id:
          type: string
          description: Unique identifier of the owner.
        realm:
          type: string
          description: Realm.
    UserAccountStats:
      type: object
      properties:
        applicationId:
          type: string
        totalAccounts:
          type: integer
          format: int64
        totalCompliantCount:
          type: integer
          format: int64
        totalNonCompliantCount:
          type: integer
          format: int64
        totalUnmatchedCount:
          type: integer
          format: int64
        totalOrphanCount:
          type: integer
          format: int64
        totalUnmanagedCount:
          type: integer
          format: int64
        totalFailedCount:
          type: integer
          format: int64
        totalNoneCount:
          type: integer
          format: int64
    PostReconciliationResponseBean:
      type: object
      properties:
        reconciliationId:
          type: string
          description: Unique identifier when reconciliation operation is started.
    ReconciliationBean:
      required:
      - action
      type: object
      properties:
        action:
          type: string
          description: Action can be specified as - start to start a new account sync
            operation or - stop to cancel a currently running account sync operation.
        reconType:
          type: string
          description: Optional attribute to specify type as supportingdata to retrieve
            only supporting data for the application from target to Verify irrespective
            of remediation policy. If not specified, regular account sync is run for
            the application.
    PostStopReconciliationResponseBean:
      type: object
      properties:
        reconciliationId:
          type: string
          description: Unique reconciliation identifier when operation stopped is
            requested.
        status:
          type: string
          description: 'Status of reconciliation eg: SUCCESS or FAILED'
    ReconciliationStopBean:
      required:
      - action
      type: object
      properties:
        action:
          type: string
          description: Action to stop reconciliation
          enum:
          - stop
    AccountBean:
      type: object
      properties:
        id:
          type: string
        attributes:
          type: object
          additionalProperties:
            type: string
    RemediationAccountStatusDetails:
      type: object
      properties:
        applicationId:
          type: string
        remediationStatus:
          type: array
          items:
            "$ref": "#/components/schemas/RemediationStatus"
    RemediationStatus:
      type: object
      properties:
        accountId:
          type: string
        messageId:
          type: string
        messageDescription:
          type: string
        accountName:
          type: string
    Account:
      required:
      - accountId
      - reconciliationId
      type: object
      properties:
        accountId:
          type: string
          description: Account to be remediated.
        reconciliationId:
          type: string
          description: The reconciliationId is the Account Sync ID. This is available
            in the Applications, Account Sync, Click on Account Sync entry in which
            the accounts were synced. The reconciliationId is displayed on the right
            hand side panel.
    RemediateAccountRequestBean:
      required:
      - accounts
      - remediationPolicy
      type: object
      properties:
        remediationPolicy:
          type: string
          description: "Remediation Policy can take either of the following values.
            All accounts mentioned will be updated as per this policy \n1. ON_CI corresponding
            to Update IBM Security Verify with the target applications values. This
            will update attributes defined in Reverse Attribute mapping and permissions\n2.
            ON_TARGET corresponding to Update target application with IBM Security
            Verify values. This will update attributes defined Attribute mapping and
            permissions"
          example: ON_CI
        accounts:
          type: array
          description: Remediation account list
          items:
            "$ref": "#/components/schemas/Account"
    AdoptionAccountBean:
      type: object
      properties:
        accountId:
          type: string
    APIAccessClientBean:
      required:
      - clientName
      - enabled
      type: object
      properties:
        clientName:
          type: string
          description: 'Display client name. '
        clientId:
          type: string
          description: Unique identifier for a client. Auto generated on save.
        clientSecret:
          type: string
          description: 'Client Secret. Will be auto-generated on save. '
        enabled:
          type: boolean
          description: If true, client is enabled.
        defaultEntitlements:
          type: array
          description: List of entitlement strings.
          items:
            type: string
        accessTokenType:
          type: string
          description: Type of token
          enum:
          - default
          - jwt
        jwtSigningAlg:
          type: string
          description: JWT signing algorithm.
        signKeyLabel:
          type: string
          description: Signature key label.
        accessTokenLifetime:
          type: integer
          description: Access token lifetime seconds.
          format: int32
        restrictScopes:
          type: boolean
          description: Restrict the scopes for application api access.
        ipFilterOp:
          type: string
          description: Operator to filter ip (allow/deny).
        ipFilters:
          type: array
          description: List and/or range of IPs to filter ip based on ipFilterOp.
          items:
            type: string
        scopes:
          type: array
          description: List of scopes.
          items:
            "$ref": "#/components/schemas/OIDCScopesBean"
        jwkUri:
          type: string
          description: The URI where the relying party publishes its public keys in
            JSON Web Keys (JWKs) format.
        additionalConfig:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Additional OIDC configurations
    AdaptiveAuthenticationBean:
      type: object
      properties:
        platform:
          type: string
          description: platform name
        licenseData:
          type: string
          description: License Data
        storageLink:
          type: string
          description: Storage link
    AdditionalPropertiesBean:
      type: object
      properties:
        name:
          type: string
          description: When onboarding or updating a custom application of type SAML,
            possible values can be metadaFileUrl or metadaFilePayload.
        value:
          type: string
          description: "For name set as metadaFileUrl : Specify the metadaFileUrl
            that will take in the URL value and create the SAML application based
            on the URL. \n\n For name set as metadaFilePayload : Specify the metaDataFilePayload
            that will take a XML value and create SAML application based on the XML
            specified against the value."
    AdoptionPolicyAttrMappingsBean:
      type: object
      properties:
        targetName:
          type: string
          description: Name of the attribute
        sourceId:
          type: string
          description: Unique identifier of the attribute
    AdoptionPolicyBean:
      type: object
      properties:
        matchingAttributes:
          type: array
          items:
            "$ref": "#/components/schemas/AdoptionPolicyAttrMappingsBean"
        remediationPolicy:
          "$ref": "#/components/schemas/RemediationPolicyBean"
    AppDetLink:
      type: object
      properties:
        self:
          "$ref": "#/components/schemas/Self"
    ApplicationDetailsResponseBean:
      required:
      - name
      - providers
      - provisioning
      - templateId
      type: object
      properties:
        _links:
          "$ref": "#/components/schemas/AppDetLink"
        name:
          type: string
          description: Name of the Entity.
        owners:
          type: array
          description: List[OwnerBean] , a colloction of owners of this application
          items:
            "$ref": "#/components/schemas/OwnerBean"
        target:
          type: array
          description: List[Map[String, String]] , a colloction of targets of this
            application
          items:
            type: object
            additionalProperties:
              type: string
        icon:
          type: string
          description: represents icon for this application
        defaultIcon:
          type: string
          description: represents defaulticon for this application
        customIcon:
          type: string
          description: represents custom icon for this application
        xforce:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Map[String, Map] holds XForce application details
        type:
          type: string
          description: Type of application
        templateId:
          type: string
          description: ID of the template for this application
        providers:
          "$ref": "#/components/schemas/ProviderBean"
        attributeMappings:
          type: array
          description: List[AttributeMapBean], collection of attributeMapping.
          items:
            "$ref": "#/components/schemas/AttributeMapBean"
        applicationState:
          type: boolean
          description: True if application is saved and False if it is in Draft State.
        description:
          type: string
          description: description about application
        authPolicy:
          "$ref": "#/components/schemas/AuthenticationPolicyBean"
        provisioningMode:
          type: string
          description: Mode of provisioning for example SAMLJIT etc
        identitySources:
          type: array
          description: List[String], a collection of application IdentitySources.
          items:
            type: string
        visibleOnLaunchpad:
          type: boolean
          description: Visibility flag for the application on launchpad.
        provisioning:
          "$ref": "#/components/schemas/ProvisioningBean"
        customization:
          "$ref": "#/components/schemas/CustomizationBean"
        devportalSettings:
          "$ref": "#/components/schemas/DevportalSettingsBean"
        apiAccessClients:
          type: array
          description: List of API access clients for application
          items:
            "$ref": "#/components/schemas/APIAccessClientBean"
        adaptiveAuthentication:
          "$ref": "#/components/schemas/AdaptiveAuthenticationBean"
    AssertionConsumerServiceBean:
      required:
      - index
      - url
      type: object
      properties:
        index:
          type: integer
          description: Index value of the assertion consumer service url
          format: int32
        url:
          type: string
          description: URL value.
        default:
          type: boolean
    AttributeMapBean:
      required:
      - name
      - targetName
      type: object
      properties:
        name:
          type: string
          description: Name of the Entity.
        targetName:
          type: string
          description: Name of target
        targetAttrFormat:
          type: string
          description: Attribute Format for target
        sourceId:
          type: string
          description: identifier of the source associated with this Target, only
            applicable for mapping to Attribute Source Id.
    AuthenticationPolicyBean:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: represents identifier for Authentication Policy
        name:
          type: string
          description: represents name of the Authentication Policy
          enum:
          - Applicable only for GET endpoint calls.
        grantTypes:
          type: array
          description: 'List of API grantTypes and the corresponding Boolean flag
            to indicate if the Auth Policy  will be applied on it by oidc. Supported
            API grant types are: ropc, jwtBearer, policyAuth  and refresh_token. See
            the ''Example Value'' section for payload details.'
          example: "[ {String: Boolean} ]"
          items:
            type: object
            additionalProperties:
              type: boolean
        errorCode:
          type: string
        errorDescription:
          type: string
    BookmarkBean:
      required:
      - bookmarkUrl
      type: object
      properties:
        bookmarkUrl:
          type: string
          description: string containing URL of Bookmark
    CustomizationBean:
      required:
      - themeId
      type: object
      properties:
        themeId:
          type: string
          description: Theme identifier for the application
    DevportalSettingsBean:
      type: object
      properties:
        grantTypes:
          "$ref": "#/components/schemas/GrantTypesBean"
        identitySources:
          type: array
          description: List[String], a collection of application IdentitySources settings
            for the developer portal application.
          items:
            type: string
        authPolicy:
          "$ref": "#/components/schemas/AuthenticationPolicyBean"
        sendAllKnownUserAttributes:
          type: string
          description: 'Boolean flag setting to indicate to return all supported claims
            for the developer portal application. '
        attributeMappings:
          type: array
          description: List[AttributeMapBean], collection of attributeMapping settings
            for the developer portal application .
          items:
            "$ref": "#/components/schemas/AttributeMapBean"
        extendedProperties:
          type: object
          additionalProperties:
            type: string
          description: Map<String,String> a map containing Devportal extended properties.
    GrantTypesBean:
      type: object
      properties:
        authorizationCode:
          type: string
          description: Authorization Code.
          enum:
          - 'true'
          - 'false'
        implicit:
          type: string
          description: Implicit
          enum:
          - 'true'
          - 'false'
        deviceFlow:
          type: string
          description: Device Flow.
          enum:
          - 'true'
          - 'false'
        ropc:
          type: string
          description: Resource owner password credentials.
          enum:
          - 'true'
          - 'false'
        jwtBearer:
          type: string
          description: JWT bearer token.
          enum:
          - 'true'
          - 'false'
        policyAuth:
          type: string
          description: Policy driven authentication token.
          enum:
          - 'true'
          - 'false'
        clientCredentials:
          type: string
          description: 'Allow client credentials grant type to be configured '
          enum:
          - 'true'
          - 'false'
        tokenExchange:
          type: string
          description: 'Token Exchange '
          enum:
          - 'true'
          - 'false'
    JWTAttributeMapBean:
      required:
      - sourceId
      - targetName
      type: object
      properties:
        targetName:
          type: string
          description: Name of target
        sourceId:
          type: string
          description: identifier of the source associated with this Target
    ManageNameIDService:
      required:
      - url
      type: object
      properties:
        url:
          type: string
          description: URL value.
    OIDCBean:
      type: object
      properties:
        applicationUrl:
          type: string
          description: URL which will be use to trigger Single-Sign-On flow.
        properties:
          "$ref": "#/components/schemas/OIDCPropertiesBean"
        restrictScopes:
          type: string
        scopes:
          type: array
          items:
            "$ref": "#/components/schemas/OIDCScopesBean"
        entitlements:
          type: array
          description: OIDC application entitlements
          items:
            type: string
        restrictEntitlements:
          type: boolean
          description: Flag to restrict oidc entitlements
        grantProperties:
          "$ref": "#/components/schemas/OIDCGrantPropertiesBean"
        token:
          "$ref": "#/components/schemas/OIDCTokenBean"
        consentAction:
          type: string
          description: Consent action
          enum:
          - never_prompt
          - always_prompt
        requirePkceVerification:
          type: string
          description: PKCE verification
          enum:
          - 'false'
          - 'true'
        jwtBearerProperties:
          "$ref": "#/components/schemas/OIDCJwtBearerPropertiesBean"
    OIDCGrantPropertiesBean:
      type: object
      properties:
        generateDeviceFlowQRCode:
          type: string
    OIDCJwtBearerPropertiesBean:
      type: object
      properties:
        userIdentifier:
          type: string
          description: User Identifier for JWT Bearer grant type.
        identitySource:
          type: string
          description: Identity source of user for JWT Bearer properties.
    OIDCPropertiesBean:
      type: object
      properties:
        grantTypes:
          "$ref": "#/components/schemas/GrantTypesBean"
        redirectUris:
          type: array
          description: 'List of redirect URIs. '
          items:
            type: string
        idTokenSigningAlg:
          type: string
          description: 'ID token signing algorithm. '
        accessTokenExpiry:
          type: integer
          description: 'Access token lifetime, in seconds '
          format: int64
        refreshTokenExpiry:
          type: integer
          description: 'Lifetime of authorization grant. Required only when generateRefreshToken
            is set '
          format: int64
        doNotGenerateClientSecret:
          type: string
          description: Boolean flag to disable auto generation of OIDC client secret.
        generateRefreshToken:
          type: string
          description: 'Boolean flag to indicate that lifetime of authorization grant
            must be set. '
        renewRefreshTokenExpiry:
          type: integer
          description: Renew refresh token expiry value.
          format: int64
        signIdToken:
          type: string
          description: 'Boolean flag to indicate that a key label must be specified
            to perform signing. '
        signingCertificate:
          type: string
          description: Key label used to perform the signing. Required only when signIdToken
            is set.
        clientId:
          type: string
          description: 'Unique identifier for a client. '
        clientSecret:
          type: string
          description: 'Client Secret. Will be auto-generated if this parameter is
            not specified. '
        sendAllKnownUserAttributes:
          type: string
          description: 'Boolean flag to indicate to return all supported claims. '
        jwksUri:
          type: string
          description: Relying party URL. If not specified public key used for signature
            verification.
        consentType:
          type: string
          description: The type of consent to be generated for this application. New
            applications will automatically use 'dpcm' advanced privacy consent.This
            is a read only attribute, if specified in the POST and PUT calls, it will
            be ignored.
        renewRefreshToken:
          type: string
          description: Should renew refresh token, true or false
        additionalConfig:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Additional OIDC configurations
        idTokenEncryptAlg:
          type: string
          description: ID token key management encryption algorithm. List of algorithms
            (id_token_encryption_alg_values_supported) available at  /oidc/endpoint/{definition_id}/.well-known/openid-configuration"
        idTokenEncryptEnc:
          type: string
          description: '"ID token content encryption algorithm. List of algorithms
            (id_token_encryption_enc_values_supported) available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration"'
        idTokenEncryptKey:
          type: string
          description: ID token encryption public key label.
    OIDCScopesBean:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    OIDCTokenBean:
      required:
      - accessTokenType
      type: object
      properties:
        accessTokenType:
          type: string
          description: Type of token
          enum:
          - default
          - jwt
        audiences:
          type: array
          description: List of audiences
          items:
            type: string
        attributeMappings:
          type: array
          description: List of attribute maps
          items:
            "$ref": "#/components/schemas/JWTAttributeMapBean"
    OwnerBean:
      type: object
      properties:
        id:
          type: string
          description: identifier of application Owner
        name:
          type: string
          description: name of application Owner
        email:
          type: string
          description: email of application Owner
        userName:
          type: string
          description: user name of application Owner
        realm:
          type: string
          description: realm name of application Owner
        userType:
          type: string
          description: identifies whether the application owner is federated or regular
        familyName:
          type: string
          description: family name of the application Owner
        givenName:
          type: string
          description: given name of the application Owner
    ProviderBean:
      required:
      - sso
      type: object
      properties:
        saml:
          "$ref": "#/components/schemas/SAMLBean"
        sso:
          "$ref": "#/components/schemas/SSOBean"
        bookmark:
          "$ref": "#/components/schemas/BookmarkBean"
        oidc:
          "$ref": "#/components/schemas/OIDCBean"
        wsfed:
          "$ref": "#/components/schemas/WsFedBean"
    ProvisioningAttrMappingsBean:
      type: object
      properties:
        targetName:
          type: string
          description: Name of the attribute
        sourceId:
          type: string
          description: Unique identifier of the attribute
        outboundTracking:
          type: boolean
          description: boolean flag representing whether any change in the attribute's
            value should be percolated to the target
        inboundTracking:
          type: boolean
          description: boolean flag indicating if any change in the attribute's value
            on the target should be propagated to cloud directory.
        applyTransformation:
          type: string
          description: Specify the ruleId to indicate the transformation that needs
            to be carried out. To be used when advanced scripting is to be used.
        ruleType:
          type: string
          description: Rule type to indicate custom or built in rules. Indicates if
            this is a built in predefined rule or a custom rule.
    ProvisioningAuthnBean:
      type: object
      properties:
        properties:
          type: object
          additionalProperties:
            type: string
    ProvisioningBean:
      type: object
      properties:
        authentication:
          "$ref": "#/components/schemas/ProvisioningAuthnBean"
        attributeMappings:
          type: array
          items:
            "$ref": "#/components/schemas/ProvisioningAttrMappingsBean"
        reverseAttributeMappings:
          type: array
          items:
            "$ref": "#/components/schemas/ProvisioningAttrMappingsBean"
        policies:
          "$ref": "#/components/schemas/ProvisioningPoliciesBean"
        extension:
          "$ref": "#/components/schemas/ProvisioningExtensionBean"
        provisioningState:
          type: string
    ProvisioningExtensionBean:
      type: object
      properties:
        properties:
          type: object
          additionalProperties:
            type: object
            properties: {}
    ProvisioningPoliciesBean:
      type: object
      properties:
        provPolicy:
          type: string
        deProvPolicy:
          type: string
        deProvAction:
          type: string
        passwordSync:
          type: string
        adoptionPolicy:
          "$ref": "#/components/schemas/AdoptionPolicyBean"
        gracePeriod:
          type: integer
          format: int64
    RemediationPolicyBean:
      type: object
      properties:
        policy:
          type: string
          description: Remediation policy. Has to be one of the following values ON_CI,
            NONE, ON_TARGET
        autoRemediateOnUpdate:
          type: boolean
          description: This flag indicates if automatic remediation be set to true
            when remediation policy is changed. Auto remediation will be triggered
            if this flag is set to true and when policy is changed from existing policy
            to either ON_CI or ON_TARGET
    SAMLBean:
      required:
      - assertionConsumerService
      - properties
      type: object
      properties:
        justInTimeProvisioning:
          type: string
          description: Boolean indicating if SAML JIT is enabled.
        properties:
          "$ref": "#/components/schemas/SAMLPropertiesBean"
        assertionConsumerService:
          type: array
          description: List, a collection of assertion consumer service url details.
          items:
            "$ref": "#/components/schemas/AssertionConsumerServiceBean"
        manageNameIDService:
          "$ref": "#/components/schemas/ManageNameIDService"
        singleLogoutService:
          type: array
          description: List, a collection of single logout service url details.
          items:
            "$ref": "#/components/schemas/SingleLogoutServiceBean"
        additionalProperties:
          type: array
          description: List, a collection of additional config for saml configuration.
          items:
            "$ref": "#/components/schemas/AdditionalPropertiesBean"
    SAMLPropertiesBean:
      required:
      - assertionConsumerServiceUrl
      - providerId
      type: object
      properties:
        generateUniqueID:
          type: string
          description: Boolean flag to indicate whether the "UniqueID" is used in
            combination with providerId for checking uniqueness at the federation
            level.
        signAuthnResponse:
          type: string
          description: Boolean flag to indicate whether IDP will sign the SAML authentication
            response sent to the service provider.
        signatureAlgorithm:
          type: string
          description: Signature algorithm to be used for signing the SAML response
            / assertion. Supported values are RSA-SHA1, RSA-SHA256, RSA-SHA512, ECDSA-SHA256,
            ECDSA-SHA384, ECDSA-SHA512
        validateAuthnRequest:
          type: string
          description: Boolean flag to indicate whether the IDP should validate the
            SAML request signature.
        encryptAssertion:
          type: string
          description: Boolean flag to indicate whether the SAML assertion will be
            encrypted.
        ici_reserved_subjectNameID:
          type: string
          description: Attribute source identifier.
        includeAllAttributes:
          type: string
          description: Boolean flag to indicate whether all known attributes of the
            user will be included in the SAML assertion.
        defaultNameIdFormat:
          type: string
          description: Default nameId format.
        companyName:
          type: string
          description: Name of the service provider company.
        providerId:
          type: string
          description: Unique identifier of the service provider. Also known as Entity
            Id or Issuer Id.
        assertionConsumerServiceUrl:
          type: string
          description: Service provider's assertion consumer service url.
        signatureValidationKeyIdentifier:
          type: string
          description: Identifier of the certificate that is used for validating the
            request signature.
        blockEncryptionAlgorithm:
          type: string
          description: Algorithm to be used for encryption.
        encryptionKeyIdentifier:
          type: string
          description: Identifier of the certificate that is used for encrypting the
            response.
        uniqueID:
          type: string
          description: 'Unique id generated. '
        sessionNotOnOrAfter:
          type: string
          description: SAML configuration for SessionNotOnOrAfter
        signingKeyIdentifier:
          type: string
          description: Value of the Signing certificate.
    SSOBean:
      required:
      - domainName
      type: object
      properties:
        domainName:
          type: string
          description: Domain Name for SSO
        spssoUrl:
          type: string
          description: String containing SPSSO URL
        targetUrl:
          type: string
          description: String containing Target URL
        idpInitiatedSSOSupport:
          type: string
          description: string representation for IDP initiated SSO Support
        userOptions:
          type: string
          description: string representation for User Options
    SingleLogoutServiceBean:
      required:
      - binding
      - url
      type: object
      properties:
        binding:
          type: string
          description: Single logout service binding
        url:
          type: string
          description: Single logout service url
    WsFedActiveProfileBean:
      type: object
      properties:
        defaultRealm:
          type: string
    WsFedAdditionalPropetties:
      type: object
      properties:
        name:
          type: string
        value:
          type: object
          properties: {}
    WsFedBean:
      type: object
      properties:
        properties:
          "$ref": "#/components/schemas/WsFedPropertiesBean"
    WsFedPropertiesBean:
      required:
      - additionalProperties
      type: object
      properties:
        callbackURL:
          type: string
        providerId:
          type: string
        multipleDomainsEnabled:
          type: string
        activeProfile:
          "$ref": "#/components/schemas/WsFedActiveProfileBean"
        signingSettings:
          "$ref": "#/components/schemas/WsFedSigningSettingsBean"
        ici_reserved_subjectNameID:
          type: string
        additionalProperties:
          type: array
          description: List of additional WSFed properties.
          items:
            "$ref": "#/components/schemas/WsFedAdditionalPropetties"
    WsFedSigningSettingsBean:
      type: object
      properties:
        signSamlAssertion:
          type: string
        keyLabel:
          type: string
        signatureAlgorithm:
          type: string
    AttributeForSwagger:
      type: object
      properties:
        attributeName:
          type: string
        oldValue:
          type: string
        newValue:
          type: string
    Details:
      type: object
      properties:
        accountId:
          type: string
        targetAccountStatus:
          type: string
        userStatus:
          type: string
        complianceStatus:
          type: string
        complianceStatusDetails:
          type: string
        attributes:
          type: array
          items:
            "$ref": "#/components/schemas/AttributeForSwagger"
        permissions:
          type: array
          items:
            "$ref": "#/components/schemas/PermissionForSwagger"
    GetReconciliationDeltaResponseBean:
      type: object
      properties:
        reconciliationId:
          type: string
          description: Unique identifier for reconciliation Operation.
        remediationPolicy:
          type: string
          description: Remediation policy for an application.
        timeStamp:
          type: integer
          description: Time stamp.
          format: int64
        details:
          "$ref": "#/components/schemas/Details"
    PermissionForSwagger:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        status:
          type: string
    AdoptionStat:
      type: object
      properties:
        compliant:
          type: string
          description: Number of the compliant account
        nonCompliant:
          type: string
          description: Number of the nonCompliant account
        unmatched:
          type: string
          description: Number of the unmatched account
        failed:
          type: string
          description: Number of the failed account
    GetAdoptionStatsResponseBean:
      type: object
      properties:
        reconciliationId:
          type: string
          description: Unique identifier for reconciliation Operation.
        applicationId:
          type: string
          description: Unique identifier for application.
        reconStartTime:
          type: string
          description: Reconciliation start time.
          format: date-time
        reconEndTime:
          type: string
          description: Reconciliation end time.
          format: date-time
        adoptionStatus:
          type: string
          description: Adoption Status for reconciliationId.
        reconStatus:
          type: string
          description: Reconciliation Status for reconciliationId.
        reconDetails:
          type: array
          description: Reconciliation details for reconciliationId.
          items:
            "$ref": "#/components/schemas/Operations"
        reconStats:
          "$ref": "#/components/schemas/Stats"
        aadoptionStats:
          "$ref": "#/components/schemas/AdoptionStat"
    Operations:
      type: object
      properties:
        resourceType:
          type: string
          description: 'Resource Type eg: Users, Groups and SupportingData'
        status:
          type: string
          description: 'Status of resource type eg: SUCCESS, FAILED, WARNING'
        detail:
          type: string
          description: Detail of error message if any
    Stats:
      type: object
      properties:
        totalAccounts:
          type: integer
          format: int32
        totalGroups:
          type: integer
          format: int32
        totalSupportingData:
          type: integer
          format: int32
        accounts:
          "$ref": "#/components/schemas/SubStats"
        groups:
          "$ref": "#/components/schemas/SubStats"
    SubStats:
      type: object
      properties:
        total:
          type: integer
          format: int32
        newer:
          type: integer
          format: int32
        modified:
          type: integer
          format: int32
        unchanged:
          type: integer
          format: int32
        markedAsDeleted:
          type: integer
          format: int32
    ApplicationCategories:
      type: object
      properties:
        accountLifecycle:
          type: integer
          description: Total Account lifecycle enabled application count for given
            tenant.
          format: int64
        saml:
          type: integer
          description: Total SAML provider application count for given tenant.
          format: int64
        oidc:
          type: integer
          description: Total OIDC provider application count for given tenant.
          format: int64
        bookmark:
          type: integer
          description: Total Bookmark provider application count for given tenant.
          format: int64
    GetAppsSummaryStatsResponseBean:
      type: object
      properties:
        tenantId:
          type: string
          description: Unique identifier of tenant.
        totalApplications:
          type: integer
          description: Total application count for given tenant.
          format: int64
        totalAppEnabled:
          type: integer
          description: Total enabled application count for given tenant.
          format: int64
        applicationCategories:
          "$ref": "#/components/schemas/ApplicationCategories"
    EmbeddedApplications:
      type: object
      properties:
        applications:
          type: array
          items:
            "$ref": "#/components/schemas/AdminApplicationWithoutProv"
    SearchAppsByIdentitySrcResponseBean:
      type: object
      properties:
        _embedded:
          "$ref": "#/components/schemas/EmbeddedApplications"
        _links:
          "$ref": "#/components/schemas/HALLink"
    ApplicationRequestBean:
      required:
      - name
      - providers
      - provisioning
      - templateId
      type: object
      properties:
        name:
          type: string
          description: Name of the Entity.
        properties:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: List[String], a list of application properties.
        templateId:
          type: string
          description: ID of the template for this application
        providers:
          "$ref": "#/components/schemas/ProviderBean"
        attributeMappings:
          type: array
          description: List[AttributeMapBean], collection of attributeMapping.
          items:
            "$ref": "#/components/schemas/AttributeMapBean"
        applicationState:
          type: boolean
          description: True if application is saved and False if it is in Draft State.
        description:
          type: string
          description: description about application
        authPolicy:
          "$ref": "#/components/schemas/AuthenticationPolicyBean"
        provisioningMode:
          type: string
          description: Mode of provisioning for example SAMLJIT etc
        identitySources:
          type: array
          description: List[String], a collection of application IdentitySources.
          items:
            type: string
        visibleOnLaunchpad:
          type: boolean
          description: Visibility flag for the application on launchpad.
        provisioning:
          "$ref": "#/components/schemas/ProvisioningBean"
        customization:
          "$ref": "#/components/schemas/CustomizationBean"
        devportalSettings:
          "$ref": "#/components/schemas/DevportalSettingsBean"
        apiAccessClients:
          type: array
          description: List of API access clients for application
          items:
            "$ref": "#/components/schemas/APIAccessClientBean"
        adaptiveAuthentication:
          "$ref": "#/components/schemas/AdaptiveAuthenticationBean"
        owners:
          type: array
          description: List[String] , a collection of owners of this application
          items:
            type: string
        target:
          type: object
          additionalProperties:
            type: boolean
          description: 'Map[String, Boolean] , a collection of target of this application. '
        customIcon:
          type: string
          description: Custom Icon file name if any
        defaultIcon:
          type: string
          description: Default Icon file name if any
    HALink:
      type: object
      properties:
        self:
          "$ref": "#/components/schemas/SelfLink"
    PostApplicationResponseBean:
      type: object
      properties:
        _links:
          "$ref": "#/components/schemas/HALink"
    SelfLink:
      required:
      - href
      - reconciliationId
      - title
      type: object
      properties:
        href:
          type: string
          description: URI of an application to get more details. This URI contains
            the unique identifier of the newly created application.
        title:
          type: string
          description: Name of the newly created application.
        reconciliationId:
          type: string
          description: Reconciliation id of the on-boarding recon operation.
    FilterApplicationResponseBean:
      type: object
      properties:
        totalResults:
          type: integer
          description: Number of application in response
          format: int32
          example: 1
        resources:
          type: array
          items:
            type: object
            additionalProperties:
              type: object
              properties: {}
    IBSupportingData:
      type: object
      properties:
        resources:
          type: array
          description: Resources array returned.
          items:
            "$ref": "#/components/schemas/Resource"
    Meta:
      type: object
      properties:
        resourceType:
          type: string
    Resource:
      type: object
      properties:
        displayName:
          type: string
          description: Display name.
        id:
          type: string
          description: Unique Identfier of the resource.
        type:
          type: string
          description: Type of the resource.
        meta:
          "$ref": "#/components/schemas/Meta"
        schemas:
          type: array
          description: Schema of the supporting data resource
          items:
            type: string
    PolicyApplicationsListBean:
      type: object
      properties:
        applications:
          uniqueItems: true
          type: array
          description: List of application IDs using a given auth. policy ID
          items:
            type: string
    HealthComponentBean:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
        details:
          type: string
        time:
          type: string
    AdoptionPolicyBeanForOwner:
      type: object
      properties:
        remediationPolicy:
          "$ref": "#/components/schemas/RemediationPolicyBeanForOwner"
    GetApplicationForOwnerResponseBean:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        icon:
          type: string
        provisioning:
          "$ref": "#/components/schemas/ProvisioningBeanForOwner"
        templateId:
          type: string
    ProvisioningBeanForOwner:
      type: object
      properties:
        policies:
          "$ref": "#/components/schemas/ProvisioningPoliciesBeanForOwner"
        provisioningState:
          type: string
    ProvisioningPoliciesBeanForOwner:
      required:
      - deProvAction
      - deProvPolicy
      - gracePeriod
      - provPolicy
      type: object
      properties:
        provPolicy:
          type: string
          description: Provisioning policy
          enum:
          - automatic
          - manual
          - disabled
        deProvPolicy:
          type: string
          description: Deprovisioning policy
          enum:
          - automatic
          - manual
          - disabled
        deProvAction:
          type: string
          description: Deprovisioning action
          enum:
          - Delete account
        gracePeriod:
          type: integer
          description: Deprovisioning grace period in days, applicable only if Deprovisioning
            action is set to automatic
          format: int64
        passwordSync:
          type: string
        adoptionPolicy:
          "$ref": "#/components/schemas/AdoptionPolicyBeanForOwner"
    RemediationPolicyBeanForOwner:
      type: object
      properties:
        policy:
          type: string
          description: Remediation policy set for the application.
          enum:
          - ON_TARGET
          - ON_CI
          - NONE
    AssigneeResponseBean:
      required:
      - displayName
      - subjectId
      - subjectType
      type: object
      properties:
        subjectId:
          type: string
          description: Unique identifier of the assignee
        subjectType:
          type: string
          description: Tells whether the assignee is user/group
        displayName:
          type: string
          description: Display name of the assignee
        email:
          type: string
          description: Email id of the assignee
        userName:
          type: string
          description: User name of the assignee
        realm:
          type: string
          description: Realm name of the assignee
        userType:
          type: string
          description: Tells whether the assignee is a regular user or federated
    AssignerResponseBean:
      required:
      - displayName
      - email
      - realm
      - userName
      - userType
      type: object
      properties:
        displayName:
          type: string
          description: Display name of the assignee
        email:
          type: string
          description: Email id of the assignee
        userName:
          type: string
          description: User name of the assignee
        realm:
          type: string
          description: Realm name of the assignee
        userType:
          type: string
          description: Tells whether the assignee is a regular user or federated
    EntitlementResponseBean:
      required:
      - assignee
      - assigner
      - created
      - grantType
      - id
      type: object
      properties:
        id:
          type: string
          description: Unique Identifier of entitlement
        created:
          type: integer
          description: 'Timestamp when the entitlement was assigned '
          format: int64
        assignee:
          "$ref": "#/components/schemas/AssigneeResponseBean"
        assigner:
          "$ref": "#/components/schemas/AssignerResponseBean"
        grantType:
          type: string
          description: Indicates grant type example BRT.
    GetEntitlementsForOwnerResponseBean:
      required:
      - birthRightAccess
      - requestAccess
      type: object
      properties:
        birthRightAccess:
          type: boolean
          description: A boolean flag indicating whether all users in the organization
            are entitled by default or not.
        entitlements:
          type: array
          items:
            "$ref": "#/components/schemas/EntitlementResponseBean"
        requestAccess:
          type: boolean
          description: A boolean flag indicating whether reqeust access is true or
            false.
    Application:
      required:
      - icon
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the application
        icon:
          type: string
          description: URI of the icon API for the application
        _links:
          "$ref": "#/components/schemas/HALLink"
        type:
          type: string
          description: Application type
        provisioning:
          "$ref": "#/components/schemas/Provisioning"
        applicationState:
          type: boolean
    Authentication:
      type: object
    Embedded:
      type: object
      properties:
        applications:
          type: array
          items:
            "$ref": "#/components/schemas/Application"
    Policies:
      type: object
      properties:
        passwordSync:
          type: string
        provPolicy:
          type: string
        deProvPolicy:
          type: string
        deProvAction:
          type: string
        gracePeriod:
          type: integer
          format: int32
    Provisioning:
      type: object
      properties:
        authentication:
          "$ref": "#/components/schemas/Authentication"
        attributeMappings:
          type: array
          items:
            "$ref": "#/components/schemas/SwgProvisioningAttrMappingsBean"
        policies:
          "$ref": "#/components/schemas/Policies"
        provisioningState:
          type: string
    SearchOwnerApplicationResponseBean:
      type: object
      properties:
        _embedded:
          "$ref": "#/components/schemas/Embedded"
        _links:
          "$ref": "#/components/schemas/HALLink"
        totalCount:
          type: integer
          format: int32
    SwgProvisioningAttrMappingsBean:
      type: object
    Assignee:
      required:
      - subjectId
      - subjectType
      type: object
      properties:
        subjectId:
          type: string
          description: Unique identifier of the assignee
        subjectType:
          type: string
          description: Tells whether the assignee is user/group/dynamicRole
    Entitlement:
      required:
      - assignee
      type: object
      properties:
        assignee:
          "$ref": "#/components/schemas/Assignee"
        grantType:
          type: string
          description: Used to determine whether the user is directly entitled to
            an application or he needs to request access to get the entitlement.Valid
            values are DISC and BRT.
    EntitlementBean:
      type: object
      properties:
        birthRightAccess:
          type: boolean
          description: A boolean flag indicating whether all users in the organization
            are entitled by default or not
        requestAccess:
          type: boolean
          description: A boolean flag indicating whether a user needs to raise a request
            to get the entitlement
        additions:
          uniqueItems: true
          type: array
          description: List containing information about user/group who will be granted
            entitlements
          items:
            "$ref": "#/components/schemas/Entitlement"
        deletions:
          uniqueItems: true
          type: array
          description: List of identifier associated with an entitlement which needs
            to be deleted
          items:
            type: string
    OwnerProvisioningApplicationUpdateBean:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the Entity.
        provisioning:
          "$ref": "#/components/schemas/OwnerProvisioningUpdateBean"
    OwnerProvisioningPoliciesBean:
      type: object
      properties:
        provPolicy:
          type: string
        deProvPolicy:
          type: string
        deProvAction:
          type: string
        gracePeriod:
          type: integer
          format: int64
        passwordSync:
          type: string
        adoptionPolicy:
          "$ref": "#/components/schemas/AdoptionPolicyBean"
    OwnerProvisioningUpdateBean:
      type: object
      properties:
        policies:
          "$ref": "#/components/schemas/OwnerProvisioningPoliciesBean"
        provisioningState:
          type: string
    PasswordSyncAppBean:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    PasswordSyncAppsResponseBean:
      type: object
      properties:
        totalResults:
          type: integer
          format: int32
        resources:
          type: array
          items:
            "$ref": "#/components/schemas/PasswordSyncAppBean"
    OperationRecordBean:
      required:
      - accountId
      - accountName
      - applicationId
      - applicationName
      - name
      - operationStatus
      - operationType
      - reconId
      - remediationPolicy
      type: object
      properties:
        name:
          type: string
          description: Name of the Entity.
        reconId:
          type: string
          description: A unique identifier for the reconciliation operation.
        applicationId:
          type: string
          description: Id of the application for which the reconciliation is being
            done
        applicationName:
          type: string
          description: Name of the application for which the reconciliation is being
            done
        accountId:
          type: string
          description: Id of the account for which the reconciliation is being done
        accountName:
          type: string
          description: Name of the user account for which the reconciliation is being
            done
        operationType:
          type: string
          description: Type of the reconciliation operation.
          enum:
          - REC (Reconciliation start or stop)
          - GP (Group permissions)
          - UAP (User attributes permissions)
          - UMOD (User modification)
        remediationPolicy:
          type: string
          description: Remediation policy used during the reconciliation
          enum:
          - ON_TARGET
          - ON_CI
        operationStatus:
          type: string
          description: Progress status of the operation
        reason:
          "$ref": "#/components/schemas/ReasonBean"
        groupInfo:
          "$ref": "#/components/schemas/ReconOpGroupInfoBean"
        timestamp:
          type: integer
          format: int64
    OperationRecordResultsBean:
      required:
      - operations
      - totalCount
      type: object
      properties:
        totalCount:
          type: integer
          description: Total number of records found.
          format: int64
        operations:
          type: array
          description: List of all the operations performed during a reconciliation.
          items:
            "$ref": "#/components/schemas/OperationRecordBean"
    ReasonBean:
      type: object
      properties:
        statusCode:
          type: string
        description:
          type: string
    ReconOpGroupInfoBean:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        status:
          type: string
    ReconStatusBean:
      type: object
      properties:
        reconciliation:
          type: array
          items:
            "$ref": "#/components/schemas/ReconciliationStatsBean"
        totalCount:
          type: integer
          format: int32
    ReconciliationStatsBean:
      required:
      - applicationId
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the Entity.
        applicationId:
          type: string
          description: Stats of reconciliation of all applications of given tenant
        applicationName:
          type: string
        applicationDesc:
          type: string
        applicationType:
          type: string
        templateId:
          type: string
        reconciliationId:
          type: string
        iconBean:
          type: string
        defaultIcon:
          type: string
        customIcon:
          type: string
        reconStats:
          "$ref": "#/components/schemas/reconStats"
    reconStats:
      type: object
      properties:
        adoptionStatus:
          type: string
        reconOpType:
          type: string
        reconStartTime:
          type: string
          format: date-time
        reconEndTime:
          type: string
          format: date-time
    Link:
      required:
      - icon
      - id
      - linkName
      - url
      type: object
      properties:
        icon:
          type: string
          description: URI of the icon API for the application
        id:
          type: string
          description: Unique identifier for an application
        linkName:
          type: string
          description: Name of the application or sub-application
        url:
          type: string
          description: URL associated with the application which will be used to trigger
            Single-Sign-On
        pendingRequest:
          type: boolean
          description: Indicates if access request is pending for the app, seen only
            with 'type=discretionary' query parameter
    SearchUserApplicationResponseBean:
      required:
      - applications
      type: object
      properties:
        applications:
          type: array
          description: List of applications that a user is entitled to
          items:
            "$ref": "#/components/schemas/UserApplicationBean"
    UserApplicationBean:
      required:
      - links
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the application
        links:
          type: array
          description: More information about the application
          items:
            "$ref": "#/components/schemas/Link"
        description:
          type: string
          description: Description for the application
        status:
          type: array
          description: Status of the application
          items:
            type: string
        category:
          type: array
          items:
            type: object
            properties: {}
        id:
          type: string
          description: Application identifier
    UserAuthorizationResponseBean:
      type: object
      properties:
        authPolicyId:
          type: string
          description: Unique identifier of the Access Policy
        entitled:
          type: boolean
          description: True if the user is entitled to access the application, else
            false
    Group:
      required:
      - uuid
      type: object
      properties:
        name:
          type: string
          description: Name of the Group.
        uuid:
          type: string
          description: A string containing UUID of the Group.
    TokenBean:
      required:
      - userId
      type: object
      properties:
        userId:
          type: string
          description: Unique Identifier of the user
        groups:
          type: array
          description: List of unique identifiers of the groups which the above user
            is a member
          items:
            "$ref": "#/components/schemas/Group"
    Chain:
      type: object
      properties:
        commands:
          type: array
          items:
            "$ref": "#/components/schemas/Command"
        name:
          type: string
        logger:
          "$ref": "#/components/schemas/FIMLogger"
        participatingInTelemetryFlag:
          type: boolean
    Command:
      type: object
    FIMLogger:
      type: object
      properties:
        tracing:
          type: boolean
    ContextParameter:
      type: object
      properties:
        key:
          type: string
        value:
          type: object
          properties: {}
    AttributeFunction:
      required:
      - description
      - displayName
      - name
      type: object
      properties:
        name:
          type: string
          description: The function name
          example: uppercase
        displayName:
          type: string
          description: Human-readable name for the function
          example: Uppercase
        description:
          type: string
          description: Description for the function
          example: Converts a string to uppercase.
    Constraints:
      type: object
      properties:
        readAccessForEndUser:
          type: boolean
        writeAccessForEndUser:
          type: boolean
        mandatory:
          type: boolean
        unique:
          type: boolean
        valueConstraint:
          "$ref": "#/components/schemas/ValueConstraint"
        valueConstraintFormat:
          type: string
        valueConstraintType:
          type: string
    Function:
      type: object
      properties:
        name:
          type: string
          description: The function name
          example: uppercase
        custom:
          type: string
          description: The custom function
          example: args.user.name.givenName
    ProfileAttribute:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the attribute in the application profile.
          example: username
    SchemaAttribute:
      required:
      - attributeName
      - customAttribute
      - name
      - scimName
      type: object
      properties:
        name:
          type: string
          description: The unique name for the attribute in the Cloud Directory schema.
            For custom schema attributes, the names are predefined and named customAttribute1
            through customAttribute150
          example: customAttribute5
        attributeName:
          type: string
          description: The attribute name in the schema that is associated with the
            attribute source
          example: car
        scimName:
          type: string
          description: The SCIM name that is associated with the schema attribute
          example: car
        customAttribute:
          type: boolean
          description: The flag that indicates whether this is a custom attribute
          example: true
    ValueConstraint:
      type: object
      properties:
        type:
          type: string
        value:
          type: object
          properties: {}
        format:
          type: string
    PatchSingleAttributeReqModel:
      type: object
      properties:
        name:
          type: string
          description: The human-readable name of the attribute. Maximum length is
            2048 characters
          example: Hobbies
        description:
          type: string
          description: The description of the attribute. Maximum length is 2048 characters
          example: The hobbies of the user
        sourceType:
          type: string
          description: The type of the attribute source from which the attribute value
            is derived
          example: static
          enum:
          - static
          - credential
          - schema
        datatype:
          type: string
          description: The type of derived data that is expected for the attribute.
            Defaults to string
          example: string[]
          enum:
          - string
          - boolean
          - integer
          - string[]
          - integer[]
        tags:
          type: array
          description: The tags used to categorize attributes. Maximum number of tags
            is 25
          example: sso
          items:
            type: string
        value:
          type: string
          description: The default value of the attribute. This value also refers
            to the fixed value for sourceType="static". Maximum length is 2048 characters
          example: Reading
        credName:
          type: string
          description: The name of the attribute in the login session credentials.
            Maximum length is 2048 characters
          example: user_hobbies
        credNameOverrides:
          type: object
          additionalProperties:
            type: string
          description: Realm specific name of the attribute in the login session credentials.
            This property is specified in the form of key-value pairs where the key
            is the name of the realm  and the value is the name of the attribute used
            to override the 'credName' property. Maximum length is 2048 characters
        function:
          "$ref": "#/components/schemas/Function"
        customProperties:
          type: object
          additionalProperties:
            type: string
          description: Identifies the attribute custom properties that is attached
            to this attribute. These custom properties can be any user-defined key-value
            pairs that help identify or categorize the attribute. The maximum number
            of custom properties that can be defined is 25
    PatchOperationResponse:
      required:
      - messageDescription
      - messageId
      - results
      type: object
      properties:
        messageId:
          type: string
          description: The error ID describing the overall status of the patch operation
        messageDescription:
          type: string
          description: The error message describing the overall status of the patch
            operation
        results:
          type: array
          description: The list of execution results for the patch operations requested
          items:
            "$ref": "#/components/schemas/PatchOperationResult"
    PatchOperationResult:
      required:
      - op
      - path
      - result
      type: object
      properties:
        op:
          type: string
          description: The patch operation to be executed
          enum:
          - remove
          - update
        path:
          type: string
          description: The attribute id for the patch operation
          example: 57d7581c-9e0a-4a9e-bfff-0ceab52d23aa
        value:
          type: string
          description: The values to update for the resource
        result:
          type: string
          description: The result of the operation
          enum:
          - success
          - failure
        errorID:
          type: string
          description: The error ID describing any failures or errors that occurred
        error:
          type: string
          description: The error message describing any failures or errors that occurred
    PatchOperation:
      required:
      - op
      - path
      type: object
      properties:
        op:
          type: string
          description: The patch operation to be executed
          enum:
          - remove
          - update
        path:
          type: string
          description: The attribute id for the patch operation
          example: 57d7581c-9e0a-4a9e-bfff-0ceab52d23aa
        value:
          type: object
          properties: {}
          description: 'The values to update for the resource.<br><br>For global attributes,
            the following values can be updated using the PATCH API: tags, value,
            credNameOverrides, function. <br><br>For custom attributes, the following
            values can be updated using the PATCH API: name, description, sourceType,
            datatype, tags, value, credName, credNameOverrides, function'
    Chain1:
      type: object
      properties:
        commands:
          type: array
          items:
            "$ref": "#/components/schemas/Command1"
        name:
          type: string
        logger:
          "$ref": "#/components/schemas/FIMLogger1"
        participatingInTelemetryFlag:
          type: boolean
    FIMLogger1:
      type: object
      properties:
        tracing:
          type: boolean
    Command1:
      type: object
    ContextParameter1:
      type: object
      properties:
        key:
          type: string
        value:
          type: object
          properties: {}
    QueryResultBean:
      type: object
      properties:
        errorCode:
          type: string
          description: The error code
        error:
          type: string
          description: Any error that occured during query
        name:
          type: string
          description: The name of the attribute
        credName:
          type: string
          description: The cred names of the attribute
        value:
          type: object
          properties: {}
          description: Value of the attribute obtained from the sources
        type:
          type: string
          description: Type of data of the value returned
        schemaAttribute:
          "$ref": "#/components/schemas/SchemaAttribute1"
    PreviewInputBean:
      required:
      - attribute
      type: object
      properties:
        uid:
          type: string
          description: Cloud Directory user identifier
          example: 50UCTG33KX
        user:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Cloud Directory user account in SCIM format. Refer to the response
            model specified in User Management Version 2.0 - /v2.0/Users/{id}. Use
            this to modify user information without modifying the user account.
        idsuser:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Identity source user token in a normalized Map of String ->
            String[] format.
        attribute:
          "$ref": "#/components/schemas/AttributeObject"
    JsonArray:
      type: object
      properties:
        empty:
          type: boolean
        asNumber:
          "$ref": "#/components/schemas/Number"
        asString:
          type: string
        asDouble:
          type: number
          format: double
        asBigDecimal:
          type: number
        asBigInteger:
          type: integer
        asFloat:
          type: number
          format: float
        asLong:
          type: integer
          format: int64
        asInt:
          type: integer
          format: int32
        asByte:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          format: byte
        asCharacter:
          type: string
        asShort:
          type: integer
          format: int32
        asBoolean:
          type: boolean
        jsonArray:
          type: boolean
        jsonObject:
          type: boolean
        jsonPrimitive:
          type: boolean
        jsonNull:
          type: boolean
        asJsonObject:
          "$ref": "#/components/schemas/JsonObject"
        asJsonArray:
          "$ref": "#/components/schemas/JsonArray"
        asJsonPrimitive:
          "$ref": "#/components/schemas/JsonPrimitive"
        asJsonNull:
          "$ref": "#/components/schemas/JsonNull"
    JsonNull:
      type: object
      properties:
        jsonArray:
          type: boolean
        jsonObject:
          type: boolean
        jsonPrimitive:
          type: boolean
        jsonNull:
          type: boolean
        asJsonObject:
          "$ref": "#/components/schemas/JsonObject"
        asJsonArray:
          "$ref": "#/components/schemas/JsonArray"
        asJsonPrimitive:
          "$ref": "#/components/schemas/JsonPrimitive"
        asJsonNull:
          "$ref": "#/components/schemas/JsonNull"
        asBoolean:
          type: boolean
        asNumber:
          "$ref": "#/components/schemas/Number"
        asString:
          type: string
        asDouble:
          type: number
          format: double
        asFloat:
          type: number
          format: float
        asLong:
          type: integer
          format: int64
        asInt:
          type: integer
          format: int32
        asByte:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          format: byte
        asCharacter:
          type: string
        asBigDecimal:
          type: number
        asBigInteger:
          type: integer
        asShort:
          type: integer
          format: int32
    JsonObject:
      type: object
      properties:
        jsonArray:
          type: boolean
        jsonObject:
          type: boolean
        jsonPrimitive:
          type: boolean
        jsonNull:
          type: boolean
        asJsonObject:
          "$ref": "#/components/schemas/JsonObject"
        asJsonArray:
          "$ref": "#/components/schemas/JsonArray"
        asJsonPrimitive:
          "$ref": "#/components/schemas/JsonPrimitive"
        asJsonNull:
          "$ref": "#/components/schemas/JsonNull"
        asBoolean:
          type: boolean
        asNumber:
          "$ref": "#/components/schemas/Number"
        asString:
          type: string
        asDouble:
          type: number
          format: double
        asFloat:
          type: number
          format: float
        asLong:
          type: integer
          format: int64
        asInt:
          type: integer
          format: int32
        asByte:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          format: byte
        asCharacter:
          type: string
        asBigDecimal:
          type: number
        asBigInteger:
          type: integer
        asShort:
          type: integer
          format: int32
    JsonPrimitive:
      type: object
      properties:
        boolean:
          type: boolean
        asBoolean:
          type: boolean
        number:
          type: boolean
        asNumber:
          "$ref": "#/components/schemas/Number"
        string:
          type: boolean
        asString:
          type: string
        asDouble:
          type: number
          format: double
        asBigDecimal:
          type: number
        asBigInteger:
          type: integer
        asFloat:
          type: number
          format: float
        asLong:
          type: integer
          format: int64
        asShort:
          type: integer
          format: int32
        asInt:
          type: integer
          format: int32
        asByte:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          format: byte
        asCharacter:
          type: string
        jsonArray:
          type: boolean
        jsonObject:
          type: boolean
        jsonPrimitive:
          type: boolean
        jsonNull:
          type: boolean
        asJsonObject:
          "$ref": "#/components/schemas/JsonObject"
        asJsonArray:
          "$ref": "#/components/schemas/JsonArray"
        asJsonPrimitive:
          "$ref": "#/components/schemas/JsonPrimitive"
        asJsonNull:
          "$ref": "#/components/schemas/JsonNull"
    Number:
      type: object
    QueryInputBean:
      required:
      - uid
      type: object
      properties:
        uid:
          type: string
          description: UID of the user.<br>UID is required for /attributequery API
            and not needed for /attributequery/preview API
          example: cd_uid
        user:
          type: object
          additionalProperties:
            type: string
          description: CD user object in SCIM format.
          example: '{"userName": "userName", "externalId": "externalId", "emails":
            [ { "type": "work", "value": "userobject@userobject.com" } ] }'
        ids:
          type: array
          description: List of attribute Ids.<br>Ids is optional for /attributequery
            API and not needed for /attributequery/preview API
          example: '["[email_id]"]'
          items:
            type: string
        names:
          type: array
          description: List of attribute names.<br>Names is optional for /attributequery
            API and not needed for /attributequery/preview API
          example: '["preferred_username"]'
          items:
            type: string
        idsuser:
          type: object
          additionalProperties:
            type: string
          description: The identity source user in the format of String key to a String
            array value.
          example: '{ "preferred_username": ["idsuser-preferred_username"] }'
        idsmappings:
          type: object
          additionalProperties:
            type: string
          description: The identity source profile mappings in the format of attribute
            ID to identity source attribute name.
          example: '{ "11": "phoneNumber" }'
        postEval:
          type: object
          additionalProperties:
            type: string
          description: Post function which applied to the existing value.<br>Posteval
            is optional for /attributequery API and not needed for /attributequery/preview
            API
          example: "{}"
        idsrealm:
          type: string
          description: The identity source realm name that should be used to derive
            values from the idsuser.<br>Idsrealm is optional for /attributequery API
            and not needed for /attributequery/preview API
          example: random_realm
        account:
          type: object
          additionalProperties:
            type: string
          description: The target user account details used for provisioning/recon
            scenarios.<br>Account is optional for /attributequery/preview API and
            not needed for /attributequery API
          example: '{ "name": "John" }'
        app:
          "$ref": "#/components/schemas/JsonObject"
        requestContext:
          "$ref": "#/components/schemas/JsonObject"
    MappingBean:
      required:
      - attrid
      - name
      type: object
      properties:
        name:
          type: string
          description: Name provided to be used as the key in the response
        attrid:
          type: string
          description: ID of the attribute to map to
    TransientLookupBean:
      required:
      - mappings
      - uid
      type: object
      properties:
        uid:
          type: string
          description: UID of the user
        mappings:
          type: array
          description: List of mappings, i.e. name and attribute ID
          items:
            "$ref": "#/components/schemas/MappingBean"
    UserQueryResultBean:
      type: object
      properties:
        uid:
          type: array
          description: The list of matching user(s) for the attributes searched
          example: "['60UN001']"
          items:
            type: string
        mappings:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/QueryResultBean"
          description: The attribute values queried for the user, only returned in
            the case of a single matching user
        messageDescription:
          type: string
          description: Message describing any status or errors from the user query
        messageId:
          type: string
          description: The message identifier
    UserQueryArgsBean:
      required:
      - account
      - attrIds
      - principalAttributes
      type: object
      properties:
        account:
          type: object
          additionalProperties:
            type: string
          description: The attributes of the account
          example: "{'emailAdd': 'example@test.com', 'userid': 'user01'}"
        principalAttributes:
          type: object
          additionalProperties:
            type: string
          description: The mapping of principal attributes to their corresponding
            attribute IDs
          example: "{'emailAdd': '3', 'userid': '5'}"
        attrIds:
          type: array
          description: The list of the attribute IDs to be queried
          example: "['1','5','7','11']"
          items:
            type: string
    UserQueryBean:
      required:
      - args
      type: object
      properties:
        args:
          "$ref": "#/components/schemas/UserQueryArgsBean"
    Chain2:
      type: object
      properties:
        commands:
          type: array
          items:
            "$ref": "#/components/schemas/Command2"
        name:
          type: string
        logger:
          "$ref": "#/components/schemas/FIMLogger2"
        participatingInTelemetryFlag:
          type: boolean
    Function1:
      type: object
      properties:
        name:
          type: string
          description: The function name
          example: uppercase
        custom:
          type: string
          description: The custom function
          example: args.user.name.givenName
    FIMLogger2:
      type: object
      properties:
        tracing:
          type: boolean
    Constraints1:
      type: object
      properties:
        readAccessForEndUser:
          type: boolean
        writeAccessForEndUser:
          type: boolean
        mandatory:
          type: boolean
        unique:
          type: boolean
        valueConstraint:
          "$ref": "#/components/schemas/ValueConstraint1"
        valueConstraintFormat:
          type: string
        valueConstraintType:
          type: string
    Command2:
      type: object
    AttributeObject:
      required:
      - datatype
      - name
      - sourceType
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the attribute
        name:
          type: string
          description: The human-readable name of the attribute. Maximum length is
            2048 characters
          example: externalId
        description:
          type: string
          description: The description of the attribute. Maximum length is 2048 characters
          example: The user's id.
        scope:
          type: string
          description: Identifies whether the attribute is defined globally by the
            system or specific to the tenant
          example: tenant
        sourceType:
          type: string
          description: The type of the attribute source from which the attribute value
            is derived
          example: schema
          enum:
          - static
          - credential
          - schema
          - profile
        datatype:
          type: string
          description: The type of derived data that is expected for the attribute.
            Defaults to string. The integer datatype is used for any numerical value.
          example: string
          enum:
          - string
          - boolean
          - integer
          - string[]
          - integer[]
        tags:
          type: array
          description: The tags used to categorize attributes. Maximum number of tags
            is 25
          items:
            type: string
        value:
          type: string
          description: The default value of the attribute. This value also refers
            to the fixed value for sourceType="static". Maximum length is 2048 characters
        credName:
          type: string
          description: The name of the attribute in the login session credentials.
            Maximum length is 2048 characters
          example: ibmid.uid
        credNameOverrides:
          type: object
          additionalProperties:
            type: string
          description: Realm specific name of the attribute in the login session credentials.
            This property is specified in the form of key-value pairs where the key
            is the name of the realm  and the value is the name of the attribute used
            to override the 'credName' property. Maximum length is 2048 characters
          example: '{ "auth0": "uid" }'
        schemaAttribute:
          "$ref": "#/components/schemas/SchemaAttribute1"
        profileAttribute:
          "$ref": "#/components/schemas/ProfileAttribute1"
        constraints:
          "$ref": "#/components/schemas/Constraints1"
        function:
          "$ref": "#/components/schemas/Function1"
        customProperties:
          type: object
          additionalProperties:
            type: string
          description: Identifies the attribute custom properties that are attached
            to this attribute
          example: '{ "customKey1": "customValue" }'
    VerifyError:
      required:
      - messageDescription
      - messageId
      type: object
      properties:
        messageId:
          type: string
          description: The message key identifier
          readOnly: true
        messageDescription:
          type: string
          description: The Locale specific descriptive message
          readOnly: true
    ProfileAttribute1:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the attribute in the application profile.
          example: username
    ContextParameter2:
      type: object
      properties:
        key:
          type: string
        value:
          type: object
          properties: {}
    ValueConstraint1:
      type: object
      properties:
        type:
          type: string
        value:
          type: object
          properties: {}
        format:
          type: string
    SchemaAttribute1:
      required:
      - attributeName
      - customAttribute
      - name
      - scimName
      type: object
      properties:
        name:
          type: string
          description: The unique name for the attribute in the Cloud Directory schema.
            For custom schema attributes, the names are predefined and named customAttribute1
            through customAttribute150
          example: customAttribute5
        attributeName:
          type: string
          description: The attribute name in the schema that is associated with the
            attribute source
          example: car
        scimName:
          type: string
          description: The SCIM name that is associated with the schema attribute
          example: car
        customAttribute:
          type: boolean
          description: The flag that indicates whether this is a custom attribute
          example: true
    Attribute_0:
      required:
      - datatype
      - name
      - sourceType
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the attribute
        name:
          type: string
          description: The human-readable name of the attribute. Maximum length is
            2048 characters
          example: externalId
        description:
          type: string
          description: The description of the attribute. Maximum length is 2048 characters
          example: The user's id.
        scope:
          type: string
          description: Identifies whether the attribute is defined globally by the
            system or specific to the tenant
          example: tenant
        sourceType:
          type: string
          description: The type of the attribute source from which the attribute value
            is derived
          example: schema
          enum:
          - static
          - credential
          - schema
          - profile
        datatype:
          type: string
          description: The type of derived data that is expected for the attribute.
            Defaults to string. The integer datatype is used for any numerical value.
          example: string
          enum:
          - string
          - boolean
          - integer
          - string[]
          - integer[]
        tags:
          type: array
          description: The tags used to categorize attributes. Maximum number of tags
            is 25
          items:
            type: string
        value:
          type: string
          description: The default value of the attribute. This value also refers
            to the fixed value for sourceType="static". Maximum length is 2048 characters
        credName:
          type: string
          description: The name of the attribute in the login session credentials.
            Maximum length is 2048 characters
          example: ibmid.uid
        credNameOverrides:
          type: object
          additionalProperties:
            type: string
          description: Realm specific name of the attribute in the login session credentials.
            This property is specified in the form of key-value pairs where the key
            is the name of the realm  and the value is the name of the attribute used
            to override the 'credName' property. Maximum length is 2048 characters
          example: '{ "auth0": "uid" }'
        schemaAttribute:
          "$ref": "#/components/schemas/SchemaAttribute"
        profileAttribute:
          "$ref": "#/components/schemas/ProfileAttribute"
        constraints:
          "$ref": "#/components/schemas/Constraints"
        function:
          "$ref": "#/components/schemas/Function"
        customProperties:
          type: object
          additionalProperties:
            type: string
          description: Identifies the attribute custom properties that are attached
            to this attribute
          example: '{ "customKey1": "customValue" }'
    ProvisionTenant:
      type: object
      properties:
        tenantId:
          type: string
        status:
          type: string
      xml:
        name: tenant
    Locale:
      type: object
      properties:
        language:
          type: string
        script:
          type: string
        country:
          type: string
        variant:
          type: string
        extensionKeys:
          uniqueItems: true
          type: array
          items:
            type: string
        unicodeLocaleAttributes:
          uniqueItems: true
          type: array
          items:
            type: string
        unicodeLocaleKeys:
          uniqueItems: true
          type: array
          items:
            type: string
        iso3Language:
          type: string
        iso3Country:
          type: string
        displayLanguage:
          type: string
        displayScript:
          type: string
        displayCountry:
          type: string
        displayVariant:
          type: string
        displayName:
          type: string
    AccountExpirationConfig:
      required:
      - policies
      type: object
      properties:
        policies:
          type: array
          description: The list of account expiration policies. Currently only one
            policy supported.
          items:
            "$ref": "#/components/schemas/Policy"
    Criteria:
      required:
      - loginInactivityInDays
      type: object
      properties:
        loginInactivityInDays:
          type: integer
          description: The duration of days between 7 and 1095 days.
          format: int32
    Policy:
      required:
      - criteria
      - scimFilter
      type: object
      properties:
        enabled:
          type: boolean
          description: If this policy is enabled or disabled. Defaults to false.
        scimFilter:
          type: string
          description: The value is a valid SCIM filter or empty string. If not specified
            or empty the policy will apply to the entire population of resource type
            (currently type is only 'user'.
        criteria:
          "$ref": "#/components/schemas/Criteria"
    FirstFactorPolicyConfig:
      required:
      - policies
      type: object
      properties:
        policies:
          type: array
          description: The list of policies. Currently only one policy supported.
          items:
            type: string
    Global:
      required:
      - allowedRealms
      - uniqueUserIdentifiers
      type: object
      properties:
        uniqueUserIdentifiers:
          type: array
          description: "'uniqueUserIdentifiers' is the list of attributes used for
            principal user identity linking."
          items:
            type: string
        allowedRealms:
          type: array
          description: "'allowedRealms' is the list of identity source realms for
            tenant. Existing identity source realm for the tenant will be present,
            excluding IBMid (www.ibm.com) and LDAP Passthrough."
          items:
            type: string
    IdentityLink:
      type: object
      properties:
        primaryRealms:
          type: string
          description: The primay realms available to be configured as default. Existing
            realms for the tenant will be present, excluding IBMid (www.ibm.com) and
            LDAP Passthrough. The first value in the sequence will be considered as
            default realm.
          example: "['cloudIdentityRealm', 'samlRealm1', 'www.facebook.com']"
          enum:
          - "['cloudIdentityRealm'"
          - "'samlRealm1'"
          - "'www.facebook.com'"
          - "'www.google.com'"
          - "'www.linkedin.com'"
          - "'www.twitter.com'"
          - "'www.yahoo.com']"
    AttributeMapping:
      required:
      - attrId
      - idsAttrName
      - jitpOption
      type: object
      properties:
        attrId:
          type: string
          description: The IBM Security Verify Cloud Directory attribute identifier.
          example: '12'
        jitpOption:
          type: string
          description: The IBM Security Verify Cloud Directory attribute identifier.
          example: ALWAYS
          enum:
          - ALWAYS
          - CREATE
          - DISABLED
          - NONE
        idsAttrName:
          type: string
          description: The external identity source attribute name. Only required
            if identity source is not Cloud Directory.
          example: dept
        postEval:
          "$ref": "#/components/schemas/PostEval"
    GroupSource:
      type: object
      properties:
        option:
          type: string
          description: Is the authoritative source of all group memberships. This
            can be Cloud Directory (CD) or an identity source (IDS) or a combination
            of both (CDIDS). This may also be a custom rule (custom).
          example: CDIDS
        custom:
          type: string
          description: The custom rule that will be referenced if the 'option' field
            is set to 'custom'. This is a script that can be authored to filter, say,
            certain groups like admin but more or less works like CDIDS.
    IdentitySourceAttributeMappings:
      required:
      - attributeMappings
      type: object
      properties:
        attributeMappings:
          type: array
          description: The list of attribute mapping objects.
          items:
            "$ref": "#/components/schemas/AttributeMapping"
        groupSource:
          "$ref": "#/components/schemas/GroupSource"
    PostEval:
      required:
      - custom
      - id
      type: object
      properties:
        id:
          type: string
          description: A valid attribute function. This will tranform the attribute
            mapping. Only one of 'id' or 'custom' can be set on an attribute mapping.
          example: uppercase
        custom:
          type: string
          description: A custom rule for transforming. This will tranform the attribute
            mapping. Only one of 'id' or 'custom' can be set on an attribute mapping.
    IdentitySourceInstancesPropertiesData:
      required:
      - key
      - sensitive
      - value
      type: object
      properties:
        sensitive:
          type: boolean
          description: Indicates whether this property holds any secrets that should
            not be disclosed.<br> If the property is sensitive, then the property
            value will be masked out with asterisk characters.
          example: false
        key:
          type: string
          description: Property key.
          example: realm
        value:
          type: string
          description: Property value. Secret values will be masked out with asterisk
            characters.
          example: cloudIdentityRealm
    IdentitySourceInstancesData:
      required:
      - enabled
      - instanceName
      - properties
      - sourceTypeId
      type: object
      properties:
        sourceTypeId:
          maximum: 17
          minimum: 1
          type: integer
          description: The numeric identifier of identity provider type.
          format: int32
          example: 5
        instanceName:
          type: string
          description: The instance name to be displayed on login selection page.
          example: Cloud Directory
        enabled:
          type: boolean
          description: 'A Boolean flag that indicates whether this instance is enabled
            or disabled. Only enabled identity source instances are displayed on the
            login selection page. '
          example: true
        status:
          type: string
          description: 'A string label that indicates whether this instance is configured.
            If specified, this property is ignored during creation. '
          example: 'configured '
          enum:
          - configured
          - unconfigured
        predefined:
          type: boolean
          description: |-
            This property is currently not in use. We do not support plugging-in any other custom types of identity providers.
             However, the purpose was to indicate that this instance is special; it neither be created and nor deleted.
          example: false
        properties:
          type: array
          description: |-
            A set of properties that are associated with the identity source instance.
              It is an array of properties of identity source instance that are required to perform the runtime login flow.
              The properties and the number of properties differ with the provider type.
          items:
            "$ref": "#/components/schemas/IdentitySourceInstancesPropertiesData"
        attributeMappings:
          type: array
          description: |-
            A set of attribute mappings that are associated with the identity source instance.
             It is an array of attribute mappings that are not required but an optional input for certain runtime login flows.
             The properties and the number of properties differe with the provider type.
          items:
            "$ref": "#/components/schemas/AttributeMapping"
    IdentitySourceIntancesDataList:
      required:
      - identitySources
      - total
      type: object
      properties:
        total:
          type: integer
          description: Total number of identity source intances configured for the
            tenant.
          format: int32
          example: 1
        identitySources:
          type: array
          description: A list of identity source intances configured for the tenant.
          items:
            "$ref": "#/components/schemas/IdentitySourceInstancesData"
    IdentitySourceTypesData:
      required:
      - description
      - displayName
      - enabled
      - id
      - multiInstance
      - predefined
      - properties
      - providerType
      - realmName
      - sourceCategory
      type: object
      properties:
        id:
          maximum: 12
          minimum: 1
          type: integer
          description: The numeric identifier of identity provider type.
          format: int32
          example: 1
        sourceCategory:
          type: string
          description: A broad category of identity provider depending on the underlying
            protocol.
          example: localregistry
          enum:
          - localregistry
          - saml
          - social
        providerType:
          type: string
          description: Short string identifier of identity provider type.
          example: ibmldap
          enum:
          - facebook
          - linkedin
          - google
          - saml20
          - ibmldap
          - github
          - zenkey
          - ibmid
          - maasconnect
          - yh
          - twitter
          - baidu
          - renren
          - weibo
          - wechat
          - qq
        displayName:
          type: string
          description: The string label of the provider type that is used for display
            purposes.
          example: Cloud Directory
        description:
          type: string
          description: A textual description of identity provider type.
          example: Login with Cloud Directory
        enabled:
          type: boolean
          description: A Boolean flag indicating whether it is enabled or disabled.
          example: true
        predefined:
          type: boolean
          description: Always true.  All the supported identity source types are predefined
            only. You cannot add a new type or update the existing type.
          example: true
        realmName:
          type: string
          description: The realm name that is associated with this provider type.  Usually
            it is a pre-determined fixed string, except for <i><b>saml</b></i> and
            <i><b>maasconnect</b></i> types of identity providers.
          example: cloudIdentityRealm
        multiInstance:
          type: boolean
          description: A flag that indicates whether multiple instances can be created
            of this provider type.
          example: false
        properties:
          type: array
          description: A set of properties that are associated with the identity provider
            type.  It is an array of properties of identity providers that are required
            to perform the runtime login flow.  The properties and the number of properties
            differ with the provider type.
          items:
            "$ref": "#/components/schemas/IdentitySourceTypesPropertiesData"
    IdentitySourceTypesDataList:
      required:
      - identitySourceTypes
      - totalCount
      type: object
      properties:
        totalCount:
          type: integer
          description: Total number of identity source types supported by IBM Security
            Verify.
          format: int32
          example: 1
        identitySourceTypes:
          type: array
          description: A list of identity source types supported by IBM Security Verify.
          items:
            "$ref": "#/components/schemas/IdentitySourceTypesData"
    IdentitySourceTypesPropertiesData:
      required:
      - key
      - value
      type: object
      properties:
        key:
          type: string
          description: A property key.
          example: policy_id
        value:
          type: string
          description: A property value.
          example: urn:ibm:security:authentication:asf:basicldapuser
        configMap:
          type: object
          additionalProperties:
            type: string
    MetaData:
      required:
      - metadata
      type: object
      properties:
        metadata:
          type: string
          description: The metadata XML of SAML Enterprise.
          example: "tenant_metadata.xml with the XML content similar to as below:
            <br><br>&lt?xml version=&quot1.0&quot encoding=&quotUTF-8&quot?&gt\n&ltmd:EntityDescriptor
            xmlns:md=&quoturn:oasis:names:tc:SAML:2.0:metadata&quot \n\tentityID=&quothttps://idp.iam.com/SAML/bridge/saml20&quot&gt\n\t\n\t&ltmd:IDPSSODescriptor
            protocolSupportEnumeration=&quoturn:oasis:names:tc:SAML:2.0:protocol&quot&gt\n\t\t&ltmd:KeyDescriptor
            use=&quotsigning&quot&gt\n\t\t\t&ltKeyInfo xmlns=&quothttp://www.w3.org/2000/09/xmldsig#&quot&gt\n\t\t\t\t&ltX509Data&gt\n\t\t\t\t\t&ltX509Certificate&gtMIIDGDCC
            ... YkA==&lt/X509Certificate&gt\n\t\t\t\t&lt/X509Data&gt\n\t\t\t&lt/KeyInfo&gt\n\t\t&lt/md:KeyDescriptor&gt\n\t\t&ltmd:KeyDescriptor
            use=&quotencryption&quot&gt\n\t\t\t&ltKeyInfo xmlns=&quothttp://www.w3.org/2000/09/xmldsig#&quot&gt\n\t\t\t\t&ltX509Data&gt\n\t\t\t\t\t&ltX509Certificate&gtMIIDGDCC
            ... YkA==&lt/X509Certificate&gt\n\t\t\t\t&lt/X509Data&gt\n\t\t\t&lt/KeyInfo&gt\n\t\t\t&ltmd:EncryptionMethod
            Algorithm=&quothttp://www.w3.org/2001/04/xmlenc#rsa-1_5&quot/&gt\n\t\t&lt/md:KeyDescriptor&gt\n\t\t&ltmd:NameIDFormat&gturn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress&lt/md:NameIDFormat&gt\n\t\t&ltmd:SingleSignOnService
            Binding=&quoturn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST&quot \n\t\t\t\tLocation=&quothttps://idp.iam.com/SAML/bridge/saml20/login&quot/&gt\n\t\t&ltmd:SingleSignOnService
            Binding=&quoturn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect&quot \n\t\t\t\tLocation=&quothttps://idp.iam.com/SAML/bridge/saml20/login&quot/&gt\n\t&lt/md:IDPSSODescriptor&gt\n\t&ltmd:Organization&gt\n\t\t&ltmd:OrganizationName
            xml:lang=&quoten&quot&gtiam-saml-ip&lt/md:OrganizationName&gt\n\t\t&ltmd:OrganizationDisplayName
            xml:lang=&quoten&quot&gtIAM SAML IP&lt/md:OrganizationDisplayName&gt\n\t\t&ltmd:OrganizationURL
            xml:lang=&quoten&quot/&gt\n\t&lt/md:Organization&gt\n&lt/md:EntityDescriptor&gt"
    MaaSConfiguration:
      required:
      - defaultidentitysource
      - jitpEnabled
      - realmname
      - uniqueuseridentifier
      - userProfileMapping
      type: object
      properties:
        uniqueuseridentifier:
          type: string
          description: Assign the unique user identifier to help identify IBM MaaS360
            users who access IBM Security Verify. The identifier is used as a reference
            together with the realm value to check for users in the IBM Security Verify
            Cloud Directory with this data. If no match is found, the identities of
            the IBM MaaS360 users are federated in the IBM Security Verify Cloud Directory.
            A user profile is created in the cloud directory when these users signs
            in for the first time to IBM Security Verify.
          example: email
        realmname:
          type: string
          description: The identity source that contains the shadow accounts for the
            linked identity sources.
          example: cloudIdentityRealm
        defaultidentitysource:
          type: string
          description: Assign the IBM MaaS360 identity source in IBM Security Verify
            to map the realm value of the IBM MaaS360 identity source with its corresponding
            identity source in IBM Security Verify. The realm value indicates the
            user registry where the users information is derived.
          example: d6ccfaf0-5584-4fc5-8553-b4dd555204c8
        jitpEnabled:
          type: boolean
          description: If your default identity source is not Cloud Directory, you
            can enable just-in-time provisioning.
          example: true
        userProfileMapping:
          type: object
          properties: {}
          description: The listing of just-in-time provisioning attribute mappings
            of IBM Security Verify Cloud Directory attributes to IBM MaaS360 identity
            source attributes
          example: '"attributeMappings": [ {"attrId":"12","jitpOption":"DISABLE","idsAttrName":"dept"},{"attrId":"7","jitpOption":"DISABLED","idsAttrName":"userLastName"},{"attrId":"8","jitpOption":"CREATE","idsAttrName":"userFullName"},{"attrId":"11","jitpOption":"ALWAYS","idsAttrName":"mobileNumber"}
            ]'
    IdentityProvider:
      required:
      - displayName
      - id
      - providerType
      type: object
      properties:
        displayName:
          type: string
          description: The display name of the identity source provider. This is most
            for the UI.
        id:
          type: string
          description: This is the unique ID for this identity source provider type.
            These are usually static values.
        providerType:
          type: string
          description: This is the type of provider. The providerType is a static
            value that directly relates to the 'id' property.
    SubTenantIdentityProvidersConfig:
      required:
      - identitySourceTypes
      type: object
      properties:
        identitySourceTypes:
          type: array
          description: The list of identity source providers for this sub-tenant.
          items:
            "$ref": "#/components/schemas/IdentityProvider"
    SessionExchangeConfigModel:
      required:
      - redirectUrls
      type: object
      properties:
        redirectUrls:
          type: array
          description: "'redirectUrls' the list of redirect URLs allowed to be passed
            to the Token Exchange API."
          items:
            type: string
    IdentitySource:
      required:
      - displayName
      - id
      - loginUrl
      - passwordless
      type: object
      properties:
        displayName:
          type: string
          description: The name of the identity source
          example: Identity Source Name
        id:
          type: string
          description: The ID of the identity source
          example: 00000000-1111-2222-3333-444444444444
        realm:
          type: string
          description: The realm name of the identity source
          example: www.example.com
        loginUrl:
          type: string
          description: The URL that is used to log in with the identity source
          example: "/idaas/mtfim/sps/idaas/login/ibmldap"
        passwordless:
          type: object
          properties:
            qr:
              type: boolean
              description: Is QR authentication allowed?
            fido:
              type: boolean
              description: Is FIDO2 authentication allowed?
          description: Are various passwordless methods allowed for the identity source?
    OIDCTokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: The access token
          example: 4ed14dd2-d4f3-4089-8f06-02ae42a08420
        token_type:
          type: string
          description: The type of the access token
          example: bearer
        refresh_token:
          type: string
          description: The refresh token
          example: c11fbcad-fb04-4444-abce-1fd3923bc611
        expires_in:
          type: integer
          description: The number of seconds until the token expires
          format: int32
          example: 7200
        scope:
          type: string
          description: The scope that the access token is valid for
          example: read
    JwtErrorResponse:
      type: object
      properties:
        messageId:
          type: string
          description: The message key identifier
          example: CSIAXXXXXX
        messageDescription:
          type: string
          description: Requester locale specific descriptive message
          example: This message informs the user that something has gone wrong.
        missingAttrName:
          type: string
          description: This message is returned if there is a missing attribute expected
            in the request JWT. The missing attribute name.
          example: phone_number
        state_id:
          type: string
          description: This message is returned if there is a missing attribute expected
            in the request JWT. The state ID that must be returned to the JwtExchange
            API with the missing attribute.
          example: '123458670'
    FailedSessionPatch:
      required:
      - operation
      - result
      - sessionId
      type: object
      properties:
        result:
          type: string
          description: The result of the operation requested.
          example: failed
        sessionId:
          type: string
          description: The IBM Security Verify user session identifier to take action
            on.
          example: isva-session-uAbCUW1JzErhRo7xfYBZ2YWQVL6kJSSxNbj0SLtiukU=
        operation:
          type: string
          description: The operation to perform on the IBM Security Verify user session
            specified in this object. Only operation currently supported if 'DELETE'
          example: DELETE
          enum:
          - DELETE
    FailedSessionsPatchObject:
      required:
      - sessions
      type: object
      properties:
        sessions:
          type: array
          description: The list of IBM Security Verify user sessions the operation
            failed.
          example: '{"operation":"DELETE","sessionId":"isva-session-ruT6DKhJRdcIEb6v+flpuKuKz84z7WqCmC6n5YNcckM=","result":"failed"},{"operation":"DELETE","sessionId":"isva-session-YIP6nOJpcnEqqpkrvQNHVEvEce3RKjU6/gtdIAmJBN8=","result":"failed"}'
          items:
            "$ref": "#/components/schemas/FailedSessionPatch"
    SessionPatch:
      required:
      - operation
      - revokeGrantsAndTokens
      - sessionId
      type: object
      properties:
        sessionId:
          type: string
          description: The IBM Security Verify user session identifier to take action
            on.
          example: isva-session-uAbCUW1JzErhRo7xfYBZ2YWQVL6kJSSxNbj0SLtiukU=
        operation:
          type: string
          description: The operation to perform on the IBM Security Verify user session
            specified in this object. Only operation currently supported if 'DELETE'
          example: DELETE
          enum:
          - DELETE
        revokeGrantsAndTokens:
          type: boolean
          description: If all tokens and grants associated with this session ID should
            be revoked as well. For most use cases this should be set to true unless
            the session is tied to some application or authenticator registration
            that is not wnated to be revoked.
          example: true
    SessionsPatchObject:
      required:
      - sessions
      type: object
      properties:
        sessions:
          type: array
          description: The list of IBM Security Verify user sessions to take action
            on.
          items:
            "$ref": "#/components/schemas/SessionPatch"
    SuccessSession:
      required:
      - expiryTime
      - lastAccessTime
      - sessionId
      type: object
      properties:
        sessionId:
          type: string
          description: The IBM Security Verify user session identifier to take action
            on.
          example: isva-session-uAbCUW1JzErhRo7xfYBZ2YWQVL6kJSSxNbj0SLtiukU=
        lastAccessTime:
          type: string
          description: The UTC time that the session was last accessed.
          example: 16/02/2024 03:56:57.000 UTC
        expiryTime:
          type: string
          description: The UTC time that the session will expire.
          example: 17/02/2024 09:50:16.000 UTC
    SuccessSessionInfo:
      required:
      - sessions
      type: object
      properties:
        sessions:
          type: array
          description: The list of IBM Security Verify user sessions.
          items:
            "$ref": "#/components/schemas/SuccessSession"
    AccessPolicyResult:
      required:
      - authnMethods
      - extendedAction
      type: object
      properties:
        extendedAction:
          "$ref": "#/components/schemas/AccessPolicyResultExtendedAction"
        authnMethods:
          type: array
          description: List of AuthnMethods Ex. sms, email, verify, urn:ibm:security:authentication:asf:macotp,
            etc
          items:
            type: string
    AccessPolicyResultExtendedAction:
      required:
      - action
      type: object
      properties:
        action:
          type: string
          example: ACTION_MFA_ALWAYS
          enum:
          - ACTION_DENY
          - ACTION_ALLOW
          - ACTION_MFA_ALWAYS
          - ACTION_MFA_PER_SESSION
          - ACTION_DENY_OVERRIDE
          - ACTION_MFA_OVERRIDE
          - ACTION_ALLOW_OVERRIDE
          - ACTION_DENY_AND_REDIRECT
          - ACTION_CONTINUE
    AccessPolicyRule:
      required:
      - conditions
      - id
      - name
      - result
      type: object
      properties:
        name:
          type: string
          description: Name of the rule.
          example: Test rule
        id:
          type: string
          description: ID of the rule.
          example: '12345'
        conditions:
          "$ref": "#/components/schemas/AccessPolicyRuleCondition"
        result:
          "$ref": "#/components/schemas/AccessPolicyResult"
        alwaysRun:
          type: boolean
          description: Always evaluate this rule
          example: true
        firstFactor:
          type: boolean
        valid:
          type: boolean
    AccessPolicyRuleCondition:
      type: object
      properties:
        subjectAttributes:
          "$ref": "#/components/schemas/SubjectAttributesCondition"
        ipAddress:
          "$ref": "#/components/schemas/IpAddressCondition"
        geoLocation:
          "$ref": "#/components/schemas/GeoLocationCondition"
    GeoLocationCondition:
      required:
      - enabled
      type: object
      properties:
        enabled:
          type: boolean
          description: Test the access geo location condition.
          example: true
        opCode:
          type: string
          description: 'Operator to match against this condition. Must be one of '
          example: IS or IS_NOT
          enum:
          - EQ
          - NEQ
          - IN
          - NOTIN
          - MATCH
          - NOMATCH
          - STARTS_WITH
          - ENDS_WITH
          - EXISTS
          - CONTAINS
          - IS
          - IS_NOT
    IpAddressCondition:
      required:
      - opCode
      - values
      type: object
      properties:
        opCode:
          type: string
          description: 'Operator to match ip address against this condition. Must
            be one of '
          example: MATCH
          enum:
          - MATCH
          - NOMATCH
        values:
          type: array
          description: List of IP addresses to match.
          items:
            type: string
    PolicyObjectModel:
      required:
      - name
      - rules
      type: object
      properties:
        name:
          type: string
          description: The string label of the policy that is used for display purposes.
          example: Auth Policy
        description:
          type: string
          description: A textual description of the policy.
          example: Policy for authentication.
        schemaVersion:
          type: string
          description: The schema version of the policy.
          example: urn:access:policy:4.0:schema
        rules:
          type: array
          description: The list of rules for the policy.
          items:
            "$ref": "#/components/schemas/AccessPolicyRule"
        containsFirstFactor:
          type: boolean
          description: Does this policy contain first factor rules.
        enforcementType:
          type: string
          description: Policy enforcement type, one of 'fedSSO', 'nativeApp', 'nativeAppMobile',
            'nativeAppWeb', 'adaptiveNativeAppWeb', 'adaptiveNativeAppMobile'
          example: fedSSO
          enum:
          - fedSSO
          - nativeApp
          - nativeAppMobile
          - nativeAppWeb
          - adaptiveNativeAppWeb
          - adaptiveNativeAppMobile
    SubjectAttributesCondition:
      required:
      - attributes
      type: object
      properties:
        attributes:
          type: array
          description: List of subject attributes to match
          items:
            "$ref": "#/components/schemas/Attribute_1"
    InvalidPolicyObject:
      type: object
      properties:
        id:
          type: integer
          description: The list of policies.
          format: int32
          example: 1234
        name:
          type: string
          description: Name of the policies.
          example: custom policy
        description:
          type: string
          description: Description of the policy.
          example: custom policy to access all application
        predefined:
          type: boolean
          description: Indicates whether the policy is a predefined policy.
          example: false
        rules:
          type: array
          description: The list of rules for the policy.
          example: "[{'name' : 'Platform Policy','conditions':{'devicePlatform': ['MACOS',
            'WINDOWS', 'OTHER_DESKTOP']},'actions': {'allowAccess': true} }]"
          items:
            type: object
            properties: {}
    PolicyVaultList:
      required:
      - policies
      type: object
      properties:
        policies:
          type: array
          description: The list of policies.
          items:
            "$ref": "#/components/schemas/PolicyVaultResponse"
        nonMigratedPolicies:
          type: array
          description: List of invalid / non migrated polices.
          items:
            "$ref": "#/components/schemas/InvalidPolicyObject"
        total:
          type: integer
          description: Total number of policies in response.
          format: int32
          example: 2
    PolicyVaultResponse:
      type: object
      properties:
        id:
          type: integer
          description: The uniqiue identifier of the policy.
          format: int64
          example: 123456
        name:
          type: string
          description: The string label of the policy that is used for display purposes.
          example: Common Authentication policy
        description:
          type: string
          description: A textual description of the policy.
          example: Policy for all applications
        creationTime:
          type: string
          description: Date on which policy got created.
          example: 2017-11-22-16.41.16
        author:
          type: string
          description: User IUI who created the policy.
          example: IUI-XXX123
        lastModifiedOn:
          type: string
          description: Latest date on which policy got updated.
          example: 2017-11-22-16.41.16
        lastModifiedBy:
          type: string
          description: User who updated the policy.
          example: IUI-XXX123
        predefined:
          type: boolean
          description: Indicates whether the policy is a predefined policy.
          example: false
        schemaVersion:
          type: string
          description: The schema version of the policy.
          example: urn:access:policy:3.0:schema
        validations:
          "$ref": "#/components/schemas/Validations"
        containsFirstFactor:
          type: boolean
          description: Indicates whether the policy contains any first factor rules.
          example: true
        enforcementType:
          type: string
          description: The policy enforcement type.
          example: fedSSO
        rules:
          type: array
          description: Rules of the policy.
          items:
            "$ref": "#/components/schemas/AccessPolicyRule"
    Validations:
      type: object
      properties:
        subscriptionsNeeded:
          type: array
          description: A list of tenant subscriptions.
          example: "['conditional.access', 'mfa.authn']"
          items:
            type: string
      description: The tenant subscription validation.
    Attribute_1:
      required:
      - name
      - opCode
      - values
      type: object
      properties:
        name:
          type: string
          description: 'Attribute type for a condition. Must be one of '
          example: groupIds
        opCode:
          type: string
          description: 'Operator to match attribute. Must be one of '
          example: EQ
          enum:
          - EQ
          - NEQ
          - IN
          - NOTIN
          - MATCH
          - NOMATCH
          - STARTS_WITH
          - ENDS_WITH
          - EXISTS
          - CONTAINS
          - IS
          - IS_NOT
        values:
          type: array
          description: Attribute list to match.
          items:
            type: string
    ListResponseCampaignConfigurationOutput:
      type: object
      properties:
        totalCount:
          type: integer
          description: Total number of objects
          format: int32
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/CampaignConfigurationOutput"
    CampaignStatsOutput:
      type: object
      properties:
        filterType:
          type: string
          description: The filterType
        count:
          type: integer
          description: The count of total number of occurrences of the returned associated
            object
          format: int32
        entity:
          type: string
          description: A string representing the aggregated object. It cannot be null
            if filterType is type, state, or priority
        user:
          "$ref": "#/components/schemas/UserGroup"
        group:
          "$ref": "#/components/schemas/UserGroup"
        application:
          "$ref": "#/components/schemas/Application_0"
        numApprovedItems:
          type: integer
          description: The number of approved records associated to the user represented
            in this object
          format: int32
        numRejectedItems:
          type: integer
          description: The number of rejected records associated to the user represented
            in this object
          format: int32
        numUnprocesedItems:
          type: integer
          description: The number of not processed records associated to the user
            represented in this object
          format: int32
        numNoMoreOnTargetItems:
          type: integer
          description: The number of not processed records associated to the user
            represented in this object
          format: int32
        completion:
          type: number
          description: The percentage of completion for the user represented in this
            object
          format: float
        delegators:
          type: array
          description: List of delegators who were delegated the duties for a given
            campaign instance
          items:
            "$ref": "#/components/schemas/UserGroup"
      description: Representation of aggregated information for campaign objects -
        REST APIs
    CampaignInstanceOutput:
      type: object
      properties:
        tenantId:
          type: string
          description: Tenant ID
        campaignConfigurationId:
          type: string
          description: The ID of the parent configuration
        priority:
          type: string
          description: The priority from the parent configuration
        name:
          type: string
          description: The campaign instance unique name
        assignmentSources:
          type: array
          description: The campaign instance assignment sources
          items:
            type: string
        timeLastStart:
          type: string
          description: The date representing the start of the instance
          format: date-time
        timeLastPause:
          type: string
          description: The date representing when the instance was paused, if any
          format: date-time
        timeClosed:
          type: string
          description: The date representing when the instance was closed, if any
          format: date-time
        timeRemaining:
          type: integer
          description: The date representing when the instance will complete, if any
          format: int64
        state:
          type: string
          description: A string representing the state of the campaign instance
        progress:
          type: integer
          description: Overall percentage progress done over this campaign instance
          format: int32
        assignmentsTotalCount:
          type: integer
          description: Overall number of assignments to be reviewed for this campaign
            instance
          format: int32
        assignmentsProcessedCount:
          type: integer
          description: Overall number of assignments to be reviewed for this campaign
            instance
          format: int32
        reviewersTotalCount:
          type: integer
          description: Overall number of reviewers
          format: int32
        reviewersCompletedCount:
          type: integer
          description: Overall number of reviewers that have completed the review
          format: int32
        continuous:
          type: boolean
          description: A flag saying that the campaign is a continuous campaign
        automaticRefreshContinuousCampaign:
          type: boolean
          description: A flag for a campaign to refresh the existing filter for building
            dataset. It is valid for continuous campaigns only.
        supervisors:
          type: array
          description: List of supervisors that have been identified for the campaign.
            If a group is selected as supervisor, this list contains the group members.
          items:
            "$ref": "#/components/schemas/UserGroup"
        delegators:
          type: array
          description: List of delegators who were delegated the duties for a given
            campaign instance.
          items:
            "$ref": "#/components/schemas/UserGroup"
        delegatees:
          type: array
          description: List of delegatees to whom duties for a given campaign instance
            were delegated.
          items:
            "$ref": "#/components/schemas/UserGroup"
        id:
          type: string
          description: Campaign instance id
        rev:
          type: string
          description: Campaign instance review
        campaignConfiguration:
          "$ref": "#/components/schemas/CampaignConfigurationOutput"
      description: Representation of a campaign instance for REST APIs
    CampaignFrequency:
      type: object
      properties:
        rate:
          type: integer
          format: int32
        unit:
          type: string
          enum:
          - MINUTES
          - DAYS
          - MONTHS
        cronString:
          type: string
    ListResponseCampaignStatsOutput:
      type: object
      properties:
        totalCount:
          type: integer
          description: Total number of objects
          format: int32
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/CampaignStatsOutput"
    SubjectAdditionalData:
      type: object
      properties:
        extId:
          type: string
          description: The subject identifier.
        name:
          type: string
          description: The entitlement name when the subject is an entitlement or
            the account name when subject is an account.
        type:
          type: string
          description: 'The subject type: possible values are ENTITLEMENT or ACCOUNT.'
        subType:
          type: string
          description: The entitlement type (ROLE or PERMISSION) when the subject
            is an entitlement or the account status (MATCHED, UNMATCHED, NON-COMPLIANT,
            COMPLIANT) when the subject is an account.
        assigner:
          "$ref": "#/components/schemas/UserGroup"
        creationDate:
          type: string
          description: Date when assignment was created
          format: date-time
        extRef:
          type: string
          description: External reference. It is valid only if type is ENTITLEMENT
        rightsRef:
          type: string
          description: Rights reference. It is valid only if type is ENTITLEMENT
    TenantLimitsOutput:
      type: object
      properties:
        max_active_campaign_instances:
          type: integer
          description: Maximum number of active campaign instances
          format: int32
        current_active_campaign_instances:
          type: integer
          description: Number of current active campaign instances
          format: int32
        max_active_campaign_assignments:
          type: integer
          description: Maximum number of active campaign assignments
          format: int64
        current_active_campaign_assignments:
          type: integer
          description: Number of current active campaign assignments
          format: int64
        max_total_campaign_assignments_in_db:
          type: integer
          description: Total campaign assignments in db
          format: int64
        current_total_campaign_assignments_in_db:
          type: integer
          description: Current total campaign assignments in db
          format: int64
      description: Representation of a limit in creating a new campaign for a tenant
    AssignmentOutput:
      type: object
      properties:
        id:
          type: string
          description: Id
        configId:
          type: string
          description: ID of the parent campaign configuration
        instanceId:
          type: string
          description: ID of the parent campaign instance
        tenantId:
          type: string
          description: Owning tenant ID
        application:
          "$ref": "#/components/schemas/Application_0"
        additionalData:
          "$ref": "#/components/schemas/SubjectAdditionalData"
        rights:
          type: array
          description: The rights associated to this assignment
          items:
            type: string
        assignmentId:
          type: string
          description: 'The ID of the assignment from the external system for certification
            (i.e. AuthZ) '
        reviewer:
          "$ref": "#/components/schemas/UserGroup"
        assignee:
          "$ref": "#/components/schemas/UserGroup"
        discretionaryGroup:
          "$ref": "#/components/schemas/UserGroup"
        lastOperation:
          type: string
          description: Last operation, if any, executed by the reviewer during this
            campaign
          enum:
          - all
          - none
          - approved
          - rejected
          - redirected
          - escalated
          - noMoreOnTarget
          - unmanage
        justification:
          type: string
          description: Justification text for the last operation, in case of rejections
            and redirections
        creationDate:
          type: string
          description: Date when the assignment was first imported inside certification
            manager
          format: date-time
        lastActionDate:
          type: string
          description: Date when last operation was performed
          format: date-time
        error:
          type: string
          description: A string that contains the back-end error that occurred during
            a bulk assignment update
        noMoreOnTargetSystem:
          type: boolean
          description: If true, the assignment was greyed-out
        delegators:
          "$ref": "#/components/schemas/UserGroup"
        isFulfilled:
          type: boolean
          description: If true the assignment operation has been fulfilled
        isLastOperationAutomatic:
          type: boolean
          description: If the value associated to the last operation was set internally
            and automatically by the microservice
      description: Representation of a campaign assignment for REST APIs
    AssignmentInput:
      required:
      - id
      - operation
      type: object
      properties:
        id:
          type: string
          description: Id
        reviewer:
          "$ref": "#/components/schemas/UserGroup"
        operation:
          type: string
          description: The operation executed by the reviewer
          enum:
          - none
          - approved
          - rejected
          - redirected
          - escalated
        justification:
          type: string
          description: Justification of the operation, in case of rejections and redirections
        doImmediateFulfillment:
          type: boolean
          description: If the campaign sign-off policy is manual and doImmediateFulfillment
            is set, the operation is run immediately.
        applicationId:
          type: string
          description: Application identifier
        toBeAdded:
          type: boolean
      description: Object used to create or replace an assignment
    JsonNode:
      type: object
      properties:
        empty:
          type: boolean
        valueNode:
          type: boolean
        containerNode:
          type: boolean
        missingNode:
          type: boolean
        array:
          type: boolean
        object:
          type: boolean
        nodeType:
          type: string
          enum:
          - ARRAY
          - BINARY
          - BOOLEAN
          - MISSING
          - 'NULL'
          - NUMBER
          - OBJECT
          - POJO
          - STRING
        pojo:
          type: boolean
        number:
          type: boolean
        integralNumber:
          type: boolean
        floatingPointNumber:
          type: boolean
        short:
          type: boolean
        int:
          type: boolean
        long:
          type: boolean
        float:
          type: boolean
        double:
          type: boolean
        bigDecimal:
          type: boolean
        bigInteger:
          type: boolean
        textual:
          type: boolean
        boolean:
          type: boolean
        'null':
          type: boolean
        binary:
          type: boolean
    MitigationAction:
      type: object
      properties:
        type:
          type: string
          enum:
          - none
          - reminder
        reminderInterval:
          type: integer
          format: int64
    ListResponseCampaignInstanceOutput:
      type: object
      properties:
        totalCount:
          type: integer
          description: Total number of objects
          format: int32
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/CampaignInstanceOutput"
    UserGroup:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        email:
          type: string
        formatted:
          type: string
        givenName:
          type: string
        familyName:
          type: string
        realm:
          type: string
        userType:
          type: string
    ErrorMessageForBulk:
      type: object
      properties:
        messageId:
          type: string
        messageDescription:
          type: string
        results:
          type: array
          items:
            "$ref": "#/components/schemas/BulkResultObject"
    AllowBlockListInputOutput:
      type: object
      properties:
        id:
          type: string
          description: The user identifier of the user to filter for
        name:
          type: string
          description: The userName or groupName of the user or group
        email:
          type: string
          description: email
        formatted:
          type: string
          description: formatted
        givenName:
          type: string
          description: givenName
        familyName:
          type: string
          description: familyName
        realm:
          type: string
          description: realm
        userType:
          type: string
          description: userType
        aGroup:
          type: boolean
          description: Specifies whether the filter refers to a group. The values
            are true or false.
        accountStatus:
          type: string
          description: The account status to filter for
          enum:
          - compliant
          - unmatched
          - non_compliant
      description: Object used to represent an allowlist and blocklist
    BulkResultObject:
      required:
      - op
      - path
      type: object
      properties:
        op:
          type: string
          description: op
          enum:
          - replace
          - remove
        path:
          type: string
          description: path
        value:
          type: object
          properties: {}
          description: value
        result:
          type: string
          description: result
          enum:
          - success
          - failure
        error:
          type: string
          description: error
      description: Representation of a generic response of a Bulk REST API
    BulkOperationJsonNode:
      required:
      - op
      - path
      type: object
      properties:
        op:
          type: string
          description: op
          enum:
          - replace
          - remove
        path:
          type: string
          description: path
        value:
          "$ref": "#/components/schemas/JsonNode"
      description: Representation of a generic payload of a Bulk REST API
    CampaignInstanceInput:
      required:
      - eventType
      type: object
      properties:
        id:
          type: string
          description: Campaign instance ID
        eventType:
          type: string
          description: This is the action to apply to the campaign
          enum:
          - delete
          - pause
          - restart
          - runnow
      description: Object used to create a new campaign instance
    AssignmentFilter:
      type: object
      properties:
        lastActions:
          type: array
          description: Last actions executed by the each reviewer
          items:
            type: string
        assigneesId:
          type: array
          description: IDs of the users
          items:
            type: string
        reviewersId:
          type: array
          description: IDs of the users having the assignments
          items:
            type: string
        appsId:
          type: array
          description: IDs of the applications the assignments are related to
          items:
            type: string
        assignmentTypes:
          type: array
          description: Assignment types
          items:
            type: string
        assignmentNames:
          type: array
          description: Assignment names
          items:
            type: string
        assignmentStatus:
          type: array
          description: Assignment compliance status (Account campaign case)
          items:
            type: string
        groupsId:
          type: array
          description: IDs of the groups having the assignments
          items:
            type: string
        filter:
          type: string
          description: Smart filter matched to assignee and application properties
            of each assignment
      description: Assignment-like object that uses filters to search assignments
    CampaignConfigurationInput:
      required:
      - applications
      - name
      - owner
      - priority
      - type
      type: object
      properties:
        owner:
          "$ref": "#/components/schemas/UserGroup"
        type:
          type: string
          description: Campaign type
          enum:
          - userassignment
          - groupassignment
          - account
          - all
        priority:
          type: string
          description: Campaign priority
          enum:
          - high
          - medium
          - low
          - all
        name:
          type: string
          description: Campaign name
        description:
          type: string
          description: Campaign description
        reviewer:
          "$ref": "#/components/schemas/UserGroup"
        applications:
          type: array
          description: List of applications the campaign certifies
          items:
            "$ref": "#/components/schemas/Application_0"
        allowlist:
          type: array
          description: List of users or groups allowed for the certification
          items:
            "$ref": "#/components/schemas/AllowBlockListInputOutput"
        blocklist:
          type: array
          description: List of users or groups denied for the certification
          items:
            "$ref": "#/components/schemas/AllowBlockListInputOutput"
        launchDate:
          type: string
          description: Date when the first instance of the campaign starts
          enum:
          - yyyy-MM-dd'T'HH:mm:ss
        creationDate:
          type: string
          description: Creation date of this campaign configuration
          enum:
          - yyyy-MM-dd'T'HH:mm:ss
        duration:
          type: integer
          description: The time in milliseconds how long each campaign instance remains
            open
          format: int64
        frequency:
          type: string
          description: A UNIX or Linux Cron-compatible string that defines the start
            of subsequent instances
        runEvery:
          "$ref": "#/components/schemas/CampaignFrequency"
        runNow:
          type: boolean
          description: A flag to start the campaign immediately
        nextRunDate:
          type: string
          description: Forecast run date for the next campaign instance
          enum:
          - yyyy-MM-dd'T'HH:mm:ss
        overdueAction:
          type: string
          description: The action to be done for open records when a campaign closes
          enum:
          - rejectAll
          - approveAll
          - doNothing
        mitigationAction:
          "$ref": "#/components/schemas/MitigationAction"
        defaultReviewer:
          "$ref": "#/components/schemas/UserGroup"
        preview:
          type: boolean
          description: A flag for a preview campaign, not opened to reviewers
        continuous:
          type: boolean
          description: A flag saying that the campaign is a continuous campaign
        automaticRefreshContinuousCampaign:
          type: boolean
          description: A flag for a campaign to refresh the existing filter for building
            dataset. It is valid for continuous campaigns only.
        signOff:
          type: string
          description: The campaign sign-off policy
          enum:
          - auto
          - manual
          - eoc
          - no_signoff
        supervisors:
          type: array
          description: List of supervisors that were identified for the campaign
          items:
            "$ref": "#/components/schemas/UserGroup"
        allowSupervisorEscalation:
          type: boolean
          description: Allow escalation to the supervisors
        id:
          type: string
          description: Campaign configuration ID
        rev:
          type: string
          description: Campaign configuration revision
        reviewerOverwritten:
          type: boolean
        whitelist:
          type: array
          description: List of users or groups allowed for the certification
          items:
            "$ref": "#/components/schemas/AllowBlockListInputOutput"
        blacklist:
          type: array
          description: List of users or groups denied for the certification
          items:
            "$ref": "#/components/schemas/AllowBlockListInputOutput"
      description: Object used to create a new campaign configuration
    CampaignConfigurationOutput:
      required:
      - applications
      - name
      - owner
      - priority
      - type
      type: object
      properties:
        tenantId:
          type: string
          description: tenantId
        owner:
          "$ref": "#/components/schemas/UserGroup"
        type:
          type: string
          description: Campaign type
          enum:
          - userassignment
          - groupassignment
          - account
          - all
        priority:
          type: string
          description: Campaign priority
          enum:
          - high
          - medium
          - low
        name:
          type: string
          description: Campaign name
        description:
          type: string
          description: Campaign description
        reviewer:
          "$ref": "#/components/schemas/UserGroup"
        applications:
          type: array
          description: List of applications the campaign certifies
          items:
            "$ref": "#/components/schemas/Application_0"
        allowlist:
          type: array
          description: List of users or groups allowed for the certification
          items:
            "$ref": "#/components/schemas/AllowBlockListInputOutput"
        blocklist:
          type: array
          description: List of users or groups denied for the certification
          items:
            "$ref": "#/components/schemas/AllowBlockListInputOutput"
        launchDate:
          type: string
          description: Date when the first instance of the campaign starts
        creationDate:
          type: string
          description: Creation date of the campaign configuration
        nextRunDate:
          type: string
          description: Estimated next run date for this configuration, if any
        duration:
          type: integer
          description: Time in milliseconds how long each campaign instance remains
            open
          format: int64
        frequency:
          type: string
          description: A UNIX or Linux Cron-compatible string that defines the start
            of subsequent instances
        runEvery:
          "$ref": "#/components/schemas/CampaignFrequency"
        runNow:
          type: boolean
          description: A flag to start the campaign immediately
        overdueAction:
          type: string
          description: The action to be done for open records when a campaign closes
          enum:
          - rejectAll
          - approveAll
          - doNothing
        mitigationAction:
          "$ref": "#/components/schemas/MitigationAction"
        defaultReviewer:
          "$ref": "#/components/schemas/UserGroup"
        preview:
          type: boolean
          description: A flag for a preview campaign, not opened to reviewers
        associatedPreviewCampaign:
          "$ref": "#/components/schemas/CampaignConfigurationOutput"
        continuous:
          type: boolean
          description: A flag for a continuous campaign
        automaticRefreshContinuousCampaign:
          type: boolean
          description: A flag for a campaign to refresh the existing filter for building
            dataset. It is valid for continuous campaigns only.
        isDeleted:
          type: boolean
          description: The campaign configuration was deleted
        signOff:
          type: string
          description: The campaign sign-off policy
          enum:
          - auto
          - manual
          - eoc
          - no_signoff
        tenantCreationLimits:
          "$ref": "#/components/schemas/TenantLimitsOutput"
        supervisors:
          type: array
          description: List of supervisors that were identified for the campaign
          items:
            "$ref": "#/components/schemas/UserGroup"
        allowSupervisorEscalation:
          type: boolean
          description: Allow escalation to the supervisors
        id:
          type: string
          description: Campaign configuration ID
        rev:
          type: string
          description: Campaign configuration review
        whitelist:
          type: array
          items:
            "$ref": "#/components/schemas/AllowBlockListInputOutput"
        blacklist:
          type: array
          items:
            "$ref": "#/components/schemas/AllowBlockListInputOutput"
      description: Representation of a campaign configuration for REST APIs
    BulkResult_0:
      required:
      - op
      - path
      type: object
      properties:
        op:
          type: string
          description: op
          enum:
          - replace
          - remove
        path:
          type: string
          description: path
        value:
          type: object
          properties: {}
          description: value
        result:
          type: string
          description: result
          enum:
          - success
          - failure
        error:
          type: string
          description: error
      description: Representation of a generic response of a Bulk REST API
    Application_0:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        icon:
          type: string
        url:
          type: string
        description:
          type: string
    ExternalErrorMessage:
      required:
      - schemas
      - status
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure.  The schema "urn:ietf:params:scim:api:messages:2.0:Error"
            is the URI as required by the SCIM specification.
          items:
            type: string
        status:
          type: string
          description: The HTTP status code expressed as a JSON string.
        detail:
          type: string
          description: A detailed human-readable message.
    PasswordPolicyResponse:
      required:
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure.  The schema "urn:ietf:params:scim:schemas:ibm:core:2.0:policy:Password"is
            returned.
          items:
            type: string
        passwordMinAlphaChars:
          type: integer
          description: Specifies the minimum number of alphabetic characters that
            the password string must have. If the server is unable to check the number
            of alphabetic characters, then the server continues processing depending
            on the value of the pwdCheckSyntax attribute.
          format: int32
        passwordMinOtherChars:
          type: integer
          description: Specifies the minimum number of numeric and special characters
            that the password string must have. If the server is unable to check the
            number of other characters, then the server continues processing depending
            on the value of the pwdCheckSyntax attribute.
          format: int32
        pwdMinAge:
          type: integer
          description: Specifies the number of days before a password can be modified
            again.
          format: int32
        pwdExpireWarning:
          type: integer
          description: Specifies the maximum number of days before a password expires
            that an expiration warning message is returned to an authenticating user.
          format: int32
        pwdInHistory:
          type: integer
          description: Specifies the number of passwords that are stored in the pwdHistory
            attribute.
          format: int32
        pwdLockout:
          type: boolean
          description: Indicates whether a password can be used to authenticate after
            a specified number of consecutive failed bind attempts. If the attribute
            is not provided, the behavior defaults to false.
        pwdLockoutDuration:
          type: integer
          description: Specifies the number of minutes that the password cannot be
            used to authenticate due to the specified 'pwdMaxFailure' failed bind
            attempts.
          format: int32
        pwdMaxAge:
          type: integer
          description: Specifies the number of days after which a password expires.
            (A value of 0 means that the password does not expire.)
          format: int32
        pwdMaxFailure:
          type: integer
          description: Specifies the maximum number of consecutive failed bind attempts
            after which the password will not be used for authentication. If a value
            of 0 is set for the pwdMaxFailure attribute, the value of pwdLockout is
            ignored.
          format: int32
        pwdMinLength:
          type: integer
          description: Specifies the minimum length for the password string. The server
            checks the minimum length depending upon the value of the pwdCheckSyntax
            attribute.
          format: int32
        pwdGraceLoginLimit:
          type: integer
          description: Specifies the number of times an expired password can be used
            to authenticate user. This value is read-only and is ignored on the PUT
            operation.
          format: int32
          readOnly: true
        pwdMustChange:
          type: boolean
          description: Specifies whether the users must change their passwords when
            they first bind to the directory after the administrator has reset their
            passwords. This value is read-only and is ignored on the PUT operation.
          readOnly: true
        pwdAllowUserChange:
          type: boolean
          description: Specifies whether the users are allowed to change their own
            passwords. This value is read-only and is ignored on the PUT operation.
          readOnly: true
        pwdFailureCountInterval:
          type: integer
          description: Specifies the number of seconds after which the password failures
            are removed from the failure counter even if no successful authentication
            has occurred. This value is read-only and is ignored on the PUT operation.
          format: int32
          readOnly: true
        passwordMaxRepeatedChars:
          type: integer
          description: Specifies the maximum number of times a character can be used
            in a password. If the server is unable to check the actual password characters,
            then the server continues processing depending on the value of the pwdCheckSyntax
            attribute. This value is read-only and is ignored on the PUT operation.
          format: int32
          readOnly: true
        pwdSafeModify:
          type: boolean
          description: Specifies whether the existing password must be sent when changing
            a password. This value is read-only and is ignored on the PUT operation.
          readOnly: true
        passwordMaxConsecutiveRepeatedChars:
          type: integer
          description: Used to restrict the maximum successive repetitions of a character
            in the password. This value is read-only and is ignored on the PUT operation.
          format: int32
          readOnly: true
        passwordMinDiffChars:
          type: integer
          description: Specifies the minimum number of characters in the new password
            that must be different from the characters in the old password, and any
            passwords stored in the pwdHistory. If the password was one-way encrypted,
            the server cannot check actual password characters. The server continues
            processing depending on the value of the pwdCheckSyntax attribute. This
            value is read-only and is ignored on the PUT operation.
          format: int32
          readOnly: true
        pwdCheckSyntax:
          type: integer
          description: 'Indicates whether the password is checked for syntax. The
            values of the pwdCheckSynatx attribute are: ''0'' means that syntax checking
            is not enforced. ''1'' means that the server checks the syntax. If the
            server cannot check the syntax (for example, because of a hashed password),
            the password is accepted. ''2'' means that the server checks the syntax.
            If the server cannot check the syntax (for example, because of a hashed
            password), it returns an error and the password is rejected. This value
            is read-only and is ignored on the PUT operation.'
          format: int32
          readOnly: true
        ibm_pwdPolicy:
          type: boolean
          description: Specifies whether to turn the password policy on or off. This
            value is read-only and is ignored on the PUT operation.
          readOnly: true
    PasswordPolicy:
      required:
      - passwordMinAlphaChars
      - passwordMinOtherChars
      - pwdExpireWarning
      - pwdInHistory
      - pwdLockout
      - pwdLockoutDuration
      - pwdMaxAge
      - pwdMaxFailure
      - pwdMinAge
      - pwdMinLength
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure.  The schema "urn:ietf:params:scim:schemas:ibm:core:2.0:policy:Password"
            is returned.
          items:
            type: string
        passwordMinAlphaChars:
          type: integer
          description: Specifies the minimum number of alphabetic characters that
            the password string must have. If the server is unable to check the number
            of alphabetic characters, then the server continues processing depending
            on the value of the pwdCheckSyntax attribute.
          format: int32
        passwordMinOtherChars:
          type: integer
          description: Specifies the minimum number of numeric and special characters
            that the password string must have. If the server is unable to check the
            number of other characters, then the server continues processing depending
            on the value of the pwdCheckSyntax attribute.
          format: int32
        pwdMinAge:
          type: integer
          description: Specifies the number of days before a password can be modified
            again.
          format: int32
        pwdExpireWarning:
          type: integer
          description: Specifies the maximum number of days before a password expires
            that an expiration warning message is returned to an authenticating user.
          format: int32
        pwdInHistory:
          type: integer
          description: Specifies the number of passwords that are stored in the pwdHistory
            attribute.
          format: int32
        pwdLockout:
          type: boolean
          description: Indicates whether a password can be used to authenticate after
            a specified number of consecutive failed bind attempts. If the attribute
            is not provided, the behavior defaults to false.
        pwdLockoutDuration:
          type: integer
          description: Specifies the number of minutes that the password cannot be
            used to authenticate due to the specified 'pwdMaxFailure' failed bind
            attempts.
          format: int32
        pwdMaxAge:
          type: integer
          description: Specifies the number of days after which a password will expire
            (0 means password does not expire)
          format: int32
        pwdMaxFailure:
          type: integer
          description: Specifies the maximum number of consecutive failed bind attempts
            after which the password cannot be used for authentication. If a value
            of 0 is set for the pwdMaxFailure attribute, the value of pwdLockout is
            ignored.
          format: int32
        pwdMinLength:
          type: integer
          description: Specifies the minimum length for the password string. The server
            checks the minimum length depending upon the value of the pwdCheckSyntax
            attribute.
          format: int32
    PasswordPolicyLabel:
      required:
      - key
      - ordinal
      - policyText
      type: object
      properties:
        key:
          type: string
          description: The internal key that is associated with this label.
        ordinal:
          type: integer
          description: The order in which labels are displayed when more than one
            is returned.
          format: int32
        policyText:
          type: string
          description: The text for this policy label.
    PasswordPolicyLabelsResponse:
      required:
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure. The schemas "urn:ietf:params:scim:schemas:ibm:core:2.0:policy:PasswordLabels"
            is returned.
          items:
            type: string
        labels:
          type: array
          items:
            "$ref": "#/components/schemas/PasswordPolicyLabel"
    DictPolicyResponseV3:
      required:
      - Sources
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure. The schema URI must be "urn:ietf:params:scim:schemas:ibm:core:3.0:policy:Dictionary"
            as required by the SCIM specification.
          items:
            type: string
        Sources:
          type: array
          description: Defines the list of bad password sources.
          items:
            "$ref": "#/components/schemas/Source"
        meta:
          "$ref": "#/components/schemas/MetaV1"
    MetaV1:
      type: object
      properties:
        resourceType:
          type: string
          description: The field that indicates the type of resource.
        lastModified:
          type: string
          description: A DateTime string that indicates when the resource was last
            modified.
        location:
          type: string
          description: The URI of the resource that is being returned.
    Source:
      required:
      - source
      type: object
      properties:
        source:
          type: string
          description: The name of the bad password source
          enum:
          - tenantDictionary
          - globalDictionary
        pwdChangeDict:
          type: string
          description: Specifies how the password dictionaries should affect password
            changes
          enum:
          - 'off'
          - audit
          - warn
          - enforce
        pwdAuthDict:
          type: string
          description: Specifies how the password dictionaries should affect password
            authentications
          enum:
          - 'off'
          - audit
          - warn
          - enforce
          - timed
        pwdAuthDictEnforceEndTime:
          type: string
          description: Specifies the end time of the timed pwdAuthDict enforcement
            (yyyy-mm-ddThh:mm:ssZ) UTC
    DictPolicyPatchRequestV3:
      required:
      - Sources
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure.  The schema "urn:ietf:params:scim:schemas:ibm:core:3.0:policy:Password"
            is required
          items:
            type: string
        Sources:
          type: array
          description: Defines the list of bad password sources.
          items:
            "$ref": "#/components/schemas/Source"
    PasswordDictionaryPatchRequestV3:
      required:
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure.  The schema "urn:ietf:params:scim:schemas:ibm:core:3.0:policy:Password:Dictionary"is
            used
          items:
            type: string
        passwords:
          type: array
          description: The password strings to add to, or remove from, the dictionary
          items:
            type: string
        operation:
          type: string
          description: Whether to add or remove the passwords
          enum:
          - add
          - remove
    CSVImportError:
      required:
      - failureReason
      - id
      - statusCode
      type: object
      properties:
        id:
          type: string
          description: The error that occurred while importing from a CSV file
        statusCode:
          type: string
          description: The status code for the error
        failureReason:
          type: string
          description: The detailed failure reason for the error
    CSVImportRecord:
      required:
      - state
      - tenant
      - tenantUUID
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the import request
        description:
          type: string
          description: A description for the import request
        tenant:
          type: string
          description: The tenant for the import request
        tenantUUID:
          type: string
          description: The tenant UUID for the import request
        state:
          type: string
          description: The state of the import request
          enum:
          - CANCELLED
          - COMPLETED
          - RUNNING
          - ABANDONED
        stats:
          "$ref": "#/components/schemas/CSVImportStats"
    CSVImportStats:
      required:
      - errorsCount
      - processedCount
      - startTime
      - totalCount
      - unprocessedCount
      type: object
      properties:
        startTime:
          type: string
          description: The time that the import request started
        endTime:
          type: string
          description: The time that the import request was completed or cancelled
        totalCount:
          type: integer
          description: The total number of CSV entries in the CSV file
          format: int32
        processedCount:
          type: integer
          description: The total number of CSV entries that were processed
          format: int32
        errorsCount:
          type: integer
          description: The total number of errors that occurred during the import
            request
          format: int32
        unprocessedCount:
          type: integer
          description: The total number of CSV entries that were not processed
          format: int32
        errors:
          type: array
          description: The list of errors that occurred during the CSV import request
          items:
            "$ref": "#/components/schemas/CSVImportError"
        unprocessed:
          type: array
          description: The list of unprocessed names that occurred during the CSV
            import request
          items:
            type: string
        lastUpdateTime:
          type: integer
          description: The last time we updated statistics for a job
          format: int64
        minutesToWait:
          type: integer
          description: The number of minutes before we write out stats
          format: int32
    CSVImportRecords:
      type: object
      properties:
        jobs:
          type: array
          description: A list of CSV import requests.
          items:
            "$ref": "#/components/schemas/CSVImportRecord"
    CSVImportJob:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier for the user import request.
    CSVImportHeader:
      required:
      - dataType
      - name
      - required
      type: object
      properties:
        name:
          type: string
          description: The name of the header.
        dataType:
          type: string
          description: The data type of the header value.
        required:
          type: boolean
          description: The header is required.
    CSVImportSCIMNames:
      type: object
      properties:
        headerNames:
          type: array
          description: List of header names allowed as CSV file headers
          items:
            "$ref": "#/components/schemas/CSVImportHeader"
    PasswordPolicyResponseV3:
      required:
      - id
      - passwordSecurity
      - passwordStrength
      type: object
      properties:
        id:
          type: string
          description: The unique id of this password policy.
        passwordStrength:
          "$ref": "#/components/schemas/PasswordStrengthV3"
        passwordSecurity:
          "$ref": "#/components/schemas/PasswordSecurityV3"
        name:
          type: string
        description:
          type: string
        predefined:
          type: boolean
    PasswordSecurityV3:
      type: object
      properties:
        pwdMinAge:
          type: integer
          description: Specifies the number of seconds before a password can be modified
            again.  Can't be larger than pwdMaxAge.
          format: int32
        pwdExpireWarning:
          type: integer
          description: Specifies the maximum number of seconds before a password expires
            that an expiration warning message is returned to an authenticating user.
          format: int32
        pwdInHistory:
          type: integer
          description: Specifies the number of passwords that are stored in the pwdHistory
            attribute.
          format: int32
        pwdLockout:
          type: boolean
          description: Indicates whether a password can be used to authenticate after
            a specified number of consecutive failed bind attempts. If the attribute
            is not provided, the behavior defaults to false.
        pwdLockoutDuration:
          type: integer
          description: Specifies the number of seconds that the password cannot be
            used to authenticate due to the specified 'pwdMaxFailure' failed bind
            attempts.
          format: int32
        pwdMaxAge:
          type: integer
          description: Specifies the number of seconds after which a password will
            expire (0 means password does not expire)Must be greater than or equal
            to pwdMinAge.
          format: int32
        pwdMaxFailure:
          type: integer
          format: int32
    PasswordStrengthV3:
      type: object
      properties:
        pwdMinLength:
          type: integer
          description: Specifies the minimum length for the password string. The server
            checks the minimum length depending upon the value of the pwdCheckSyntax
            attribute.Must be greater than or equal to the sum of 'passwordMinAlphaChars'
            and 'passwordMinOtherChars'
          format: int32
        passwordMaxConsecutiveRepeatedChars:
          type: integer
          description: Specifies the maximum successive repetitions of a given character
            in the password.
          format: int32
        passwordMaxRepeatedChars:
          type: integer
          description: Specifies the maximum number of times a given character can
            be used in a password. If the server is unable to check the actual password
            characters, then the server will continue processing depending on the
            value of the pwdCheckSyntax attribute.
          format: int32
        passwordMinAlphaChars:
          type: integer
          description: Specifies the minimum number of alphabetic characters that
            the password string must have. If the server is unable to check the number
            of alphabetic characters, then the server continues processing depending
            on the value of the pwdCheckSyntax attribute.
          format: int32
        passwordMinDiffChars:
          type: integer
          description: Specifies the minimum number of characters in the new password
            that must be different from the characters in the old password, and any
            passwords stored in the pwdHistory. If the password has been one-way encrypted
            the server is unable to check actual password characters, then the server
            will continue processing depending on the value of the pwdCheckSyntax
            attribute.
          format: int32
        passwordMinOtherChars:
          type: integer
          description: Specifies the minimum number of numeric and special characters
            that the password string must have. If the server is unable to check the
            number of other characters, then the server continues processing depending
            on the value of the pwdCheckSyntax attribute.
          format: int32
        passwordMinLowerCaseChars:
          type: integer
          description: Specifies the minimum number of lower case alphabetic characters
            that the password string must have.
          format: int32
        passwordMinUpperCaseChars:
          type: integer
          description: Specifies the minimum number of upper case alphabetic characters
            that the password string must have.
          format: int32
        passwordMinNumberChars:
          type: integer
          description: Specifies the minimum number of numeric characters that the
            password string must have.
          format: int32
        passwordMinSpecialChars:
          type: integer
          description: Specifies the minimum number of special characters that the
            password string must have.
          format: int32
    PasswordPoliciesResponseV3:
      required:
      - totalMembers
      type: object
      properties:
        totalMembers:
          type: integer
          description: The total number of password policies returned in the Resources
            array.
          format: int32
        Resources:
          type: array
          description: A list of password policies
          items:
            "$ref": "#/components/schemas/PasswordPolicyResponseV3"
    PasswordPolicyLabelsResponse3:
      required:
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure. The schemas "urn:ietf:params:scim:schemas:ibm:core:3.0:policy:PasswordLabels"
            is returned.
          items:
            type: string
        labels:
          type: array
          items:
            "$ref": "#/components/schemas/PasswordPolicyLabel"
    PasswordPolicyValidatePasswordRequest:
      required:
      - password
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure.  The schema "urn:ietf:params:scim:schemas:ibm:core:3.0:policy:Password"is
            returned.
          items:
            type: string
        password:
          type: string
          description: The password to validate
    PasswordPolicyCreateRequestV3:
      required:
      - passwordSecurity
      - passwordStrength
      - policyDescription
      - policyName
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure.  The schema "urn:ietf:params:scim:schemas:ibm:core:3.0:policy:Password"is
            returned.
          items:
            type: string
        policyName:
          type: string
          description: User defined name of the password policy
        policyDescription:
          type: string
          description: A description of the password policy
        passwordStrength:
          "$ref": "#/components/schemas/PasswordStrengthV3"
        passwordSecurity:
          "$ref": "#/components/schemas/PasswordSecurityV3"
    GeneratePasswordPolicyPasswordResponse:
      required:
      - password
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure.  The schema "urn:ietf:params:scim:schemas:ibm:core:3.0:policy:Password"is
            returned.
          items:
            type: string
        password:
          type: string
          description: The generated password that satisfies the password policy constraints
    PasswordPolicyPatchRequestV3:
      required:
      - policyName
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure.  The schema "urn:ietf:params:scim:schemas:ibm:core:3.0:policy:Password"is
            returned.
          items:
            type: string
        policyName:
          type: string
          description: The user defined name of the password policy.
        passwordStrength:
          "$ref": "#/components/schemas/PasswordStrengthV3"
        passwordSecurity:
          "$ref": "#/components/schemas/PasswordSecurityV3"
    ModifyLastloginResponse:
      required:
      - lastProcessedUserID
      - totalChanged
      type: object
      properties:
        totalChanged:
          type: integer
          description: The total number of users whose last login attribute was modified.
          format: int32
        lastProcessedUserID:
          type: string
          description: The last processed user id.
    LastLoginModel:
      required:
      - lastLogin
      type: object
      properties:
        lastLogin:
          type: string
          description: Indicates the time of the last login for the current user entry.  Value
            is a date and time of the form yyyy-mm-ddThh:mm:ssZ.
    AccountExpiryTenantStatus:
      required:
      - completed
      - tenantName
      - timeCompleted
      - timeStarted
      - totalExpired
      type: object
      properties:
        totalExpired:
          type: integer
          description: The total number of accounts that were expired.
          format: int32
        timeStarted:
          type: integer
          description: The time when account expiration processing started.
          format: int64
        timeCompleted:
          type: integer
          description: The time when account expiration processing completed.
          format: int64
        completed:
          type: boolean
          description: A flag indicating whether the overall status is completed.
        tenantName:
          type: string
          description: The tenant name
    DeactivatedResponse:
      required:
      - lastProcessedUserID
      - totalChanged
      type: object
      properties:
        totalChanged:
          type: integer
          description: The total number of users whose last login attribute was modified.
          format: int32
        lastProcessedUserID:
          type: string
          description: The last processed user id.
    AccountExpiryDateResponse:
      required:
      - lastProcessedUsername
      - totalChanged
      type: object
      properties:
        totalChanged:
          type: integer
          description: The total number of users whose accountExpires attribute was
            modified.
          format: int32
        lastProcessedUsername:
          type: string
          description: The last processed username.
    ExpirationTimeModel:
      type: object
      properties:
        accountExpires:
          type: string
          description: The date format must be in yyyy-mm-ddTHH:00:00Z.
          example: '2021-04-01T16:00:00Z'
    OperationResponse:
      required:
      - location
      - method
      - status
      type: object
      properties:
        location:
          type: string
          description: The resource endpoint URL.
        method:
          type: string
          description: The HTTP method of the current operation.
        status:
          type: string
          description: The HTTP status code for the requested operation. A status
            that indicates an error will includes a response with the details.
        response:
          "$ref": "#/components/schemas/ExternalErrorMessage1"
        bulkId:
          type: string
          description: The transient identifier of a newly created resource. It is
            created by the client and unique within a bulk request.  The bulkId serves
            as a surrogate resource ID that enables clients to uniquely identify newly
            created resources in the response and to cross-reference new resources
            in and across operations within a bulk request.  This attribute is required
            when the method is POST.
    Bulk:
      required:
      - Operations
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure. The schema URI must be "urn:ietf:params:scim:api:messages:2.0:BulkRequest"
            as required by the SCIM specification.
          items:
            type: string
        failOnErrors:
          type: integer
          description: An integer that specifies the number of errors that the service  provider
            accepts before the operation is terminated and an error response is returned.
          format: int32
        Operations:
          type: array
          description: Defines the operations within a bulk job. Each operation corresponds
            to a single HTTP request against a resource endpoint.
          items:
            "$ref": "#/components/schemas/Operation"
    Operation:
      required:
      - method
      - path
      type: object
      properties:
        method:
          type: string
          description: The method to perform.
          enum:
          - POST
          - PUT
          - PATCH
          - DELETE
        path:
          type: string
          description: The resource path. Example, /Users/5XP33222 for a PUT, PATCH,
            or DELETE method or /Users for a POST method.
        bulkId:
          type: string
          description: The transient identifier of a newly created resource. It is
            created by the client and unique within a bulk request. The  bulkId serves
            as a surrogate resource ID that enables clients to  uniquely identify
            newly created resources in the response and  to cross-reference new resources
            in and across operations within a  bulk request.  This attribute is required
            when the method is POST.
        data:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: The resource data as it appears for a single SCIM POST.This
            attribute is required in a request when the method is POST, PUT, or PATCH.
    PatchBody:
      required:
      - Operations
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: 'The body of each SCIM PATCH request must contain the "schemas"
            attribute with the URI value: "urn:ietf:params:scim:api:messages:2.0:PatchOp".'
          items:
            type: string
        Operations:
          type: array
          description: An array of operation objects to be performed.  Operation objects
            must have exactly one "op" member, whose value indicates the operation
            to perform. Its value must be one of "add", "remove", or "replace". Values
            are errors.
          items:
            "$ref": "#/components/schemas/PatchOperation_0"
    Address:
      type: object
      properties:
        locality:
          type: string
          description: The city or locality component. Maximum length is 128 characters.
        country:
          type: string
          description: The country name component. Maximum length is 128 characters.
        type:
          type: string
          description: A label that indicates the attribute's function; for example,
            "work" or "home".
          enum:
          - work
        streetAddress:
          type: string
          description: The street address. Maximum length is 128 characters.
        postalCode:
          type: string
          description: The postal code. Maximum length is 40 characters.
        formatted:
          type: string
          description: The formatted value of the address. Maximum length is 500 characters.
        primary:
          type: boolean
          description: Indicates whether this is address is the primary address for
            correspondence.
        region:
          type: string
          description: The region. Maximum length is 128 characters.
    CICCustomGroupResponse:
      required:
      - totalMembers
      type: object
      properties:
        description:
          type: string
          description: The description for the group.
        groupType:
          type: string
          description: The group type. This value is read-only.
          enum:
          - standard
          - reserved
        membersPerPage:
          type: integer
          description: Members per page.  For large group support, this property is
            the count of members returned in the members array.
          format: int32
        totalMembers:
          type: integer
          description: The total number of members that are in the group.
          format: int32
        memberStartIndex:
          type: integer
          description: The start index of members that are returned on the page.
          format: int32
        owners:
          type: array
          description: A list of owners for the group.  For large group support, the
            group ownership is automatically set and enforced when the request has
            restricted groups that are associated with the access token's user subject
            identifier.
          items:
            "$ref": "#/components/schemas/GroupOwner"
    CICCustomUserResponse:
      type: object
      properties:
        userCategory:
          type: string
          description: The user category.
          enum:
          - regular
          - federated
        emailVerified:
          type: string
          description: A timestamp that indicates when the user's email was verified.
        realm:
          type: string
          description: The realm to which the user belongs. It is always "cloudIdentityRealm"
            for non-federated users.
        unqualifiedUserName:
          type: string
          description: An unqualified, federated user name. This field is read-only.
        twoFactorAuthentication:
          type: boolean
          description: Indicates whether two factory authentication is required. It
            defaults to "false" if not provided.
        pwdReset:
          type: boolean
          description: Indicates whether the password is reset for the current user
            entry. This value is read-only.
        pwdChangedTime:
          type: integer
          description: Indicates the time when the password was changed for the current
            user entry. This value is read-only.
          format: int64
        pwdAccountLockedTime:
          type: string
          description: A field that indicates the timestamp at which the user's password
            was locked. The value of this field is in milliseconds and is read-only.
        pwdExpirationWarned:
          type: string
          description: A field that indicates the timestamp at which the user's password
            expiration is set. The value of this field is in milliseconds and is read-only.
        pwdFailureTime:
          type: array
          description: A field that indicates a list of timestamps at which the user
            attempted to log in with the wrong password The value of this field is
            in milliseconds and is read-only.
          items:
            type: string
        pwdGraceUseTime:
          type: array
          description: A field that indicates a list of timestamps at which the user
            attempted to see extended or grace time. The value of this field is in
            milliseconds and is read-only.
          items:
            type: string
        delegate:
          type: string
          description: The "id" of the entry to which approval and re-certification
            records assigned to this identity will be delegated.
        customAttributes:
          type: array
          description: The custom attributes for the user. For the GET /Users API,
            custom attributes can be referenced by using the fully qualified name.
            The schema URI is urn:ietf:params:scim:schemas:extension:ibm:2.0:User:customAttributes.scimName,
            where scimName is the SCIM name of the custom schema attribute that was
            created with the POST /Schema/attributes API.
          items:
            "$ref": "#/components/schemas/CustomAttribute"
        linkedAccounts:
          type: array
          description: The linked accounts for the user.
          items:
            "$ref": "#/components/schemas/LinkedAccount"
        lastLogin:
          type: string
          description: Indicates the time of the last login for the current user entry.  Value
            is a date and time of the form yyyy-mm-ddThh:mm:ssZ.
        lastLoginType:
          type: string
          description: Indicates the login type used for the last login for the current
            user entry.
        lastLoginRealm:
          type: string
          description: Indicates the realm used for the last login for the current
            user entry.
        lastMFA:
          type: array
          description: The last MFAs for the user.
          items:
            "$ref": "#/components/schemas/LastMFA"
        accountExpires:
          type: string
          description: 'The expiration date of the account.  The value is a date and
            time of the form  yyyy-mm-ddThh:mm:ssZ.  For example, an account expiration
            of 2021-04-01T16:00:00Z, expires on year 2021, April 1 at 16 hundred hours
            GMT.  When an account is expired, the account''s active flag is set to
            false to prevent login.The process that checks for expired accounts runs
            every 15 minutes at the top of the hour in GMT+0 time. '
    CustomAttribute:
      required:
      - name
      - values
      type: object
      properties:
        name:
          type: string
          description: 'The SCIM name of the custom attribute.  The SCIM name for
            a custom schema attribute is defined for the tenant by using the POST
            /Schema/attributes API.

            '
        values:
          type: array
          description: 'The values of the custom attribute. Maximum length is 1000
            characters.

            '
          items:
            type: string
    EmailAddress:
      required:
      - type
      - value
      type: object
      properties:
        value:
          type: string
          description: The e-mail addresses for the user. The value is canonicalized
            by the service provider. For example, bjensen@example.com instead of bjensen@EXAMPLE.COM.
            Must be RFC 2822 compliant. Maximum length is 128 characters.
        type:
          type: string
          description: A label that indicates the attribute function; for example,
            "work".  Only a single email is allowed.
          enum:
          - work
    EnterpriseUser:
      type: object
      properties:
        department:
          type: string
          description: 'Identifies the name of the department. Maximum length is 128
            characters.

            '
        employeeNumber:
          type: string
          description: 'A string identifier, typically numeric or alphanumeric, that
            is assigned to a person. Typically the number is based on the order of
            hire. Maximum length is 128 characters.

            '
        manager:
          "$ref": "#/components/schemas/Manager"
    GroupMembersResponse:
      required:
      - "$ref"
      - addresses
      - emails
      - name
      - type
      - userName
      - value
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the resource as defined by the service.
            This attribute is read-only and is sent by the service. Any value that
            is specified for this attribute in the JSON POST or PUT request payload
            is ignored.
        externalId:
          type: string
          description: Valid for user type members only. A unique identifier for the
            resource that is defined by the provisioning client. It identifies a resource
            between the provisioning client and the service provider. The client can
            use a filter to locate the resource with the identifier from the provisioning
            domain.
        userName:
          type: string
          description: Valid for user type members only. The unique identifier for
            the user that is typically used by the user to directly authenticate to
            the service provider. It is often displayed to the user as their unique
            identifier within the system (as opposed to the id or externalId attributes,
            which are generally opaque and not user-friendly identifiers). Each user
            must include a non-empty userName value. This identifier must be unique
            across the service consumer's entire set of users. It must be a stable
            ID that does not change when the same user is returned in subsequent requests.
        title:
          type: string
          description: Valid for user type members only. The user's title, such as
            "Vice President".
        name:
          "$ref": "#/components/schemas/Name"
        displayName:
          type: string
          description: The name of the user or group that is displayed to users. Each
            member returned may include a non-empty displayName value. For a user
            type member, typically it is the full name of the user that is being described,
            for example, Babs Jensen or Ms. Barbara J Jensen. However, if that information
            is unavailable, a username or handle can be used, for example, bjensen.
            The value is the primary textual label by which this user is normally
            displayed by the service provider when presenting information to users.
        preferredLanguage:
          type: string
          description: Valid for user type members only. The language code identifying
            the preferred language of this identity, for example, en-us or fr-ca.
        active:
          type: boolean
          description: Valid for user type members only. A Boolean value that indicates
            the user's administrative status. The definitive meaning of this attribute
            is determined by the service provider. For example, a value of true indicates
            that the user is, for example, able to log in, while a value of false
            indicates that the user's account has been suspended. If not specified,
            the value defaults to true.
        emails:
          type: array
          description: Valid for user type members only. A list of email addresses
            that are associated with the user.
          items:
            "$ref": "#/components/schemas/EmailAddress"
        addresses:
          type: array
          description: Valid for user type members only. A list of addresses that
            are associated with the user.
          items:
            "$ref": "#/components/schemas/Address"
        phoneNumbers:
          type: array
          description: Valid for user type members only. A list of phone numbers that
            are associated with the user.
          items:
            "$ref": "#/components/schemas/PhoneNumber"
        type:
          type: string
          description: The type of group member.
          enum:
          - user
          - group
        urn:ietf:params:scim:schemas:extension:ibm:2.0:User:
          "$ref": "#/components/schemas/CICCustomUserResponse"
        urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:
          "$ref": "#/components/schemas/EnterpriseUser"
        value:
          type: string
          description: A sub-attr required by the SCIM specification that contains
            the "id" of the SCIM resource.
        "$ref":
          type: string
          description: A sub-attr required by the SCIM specification the contains
            the URI of the SCIM resource.
    GroupOwner:
      required:
      - value
      type: object
      properties:
        value:
          type: string
          description: The id of the group owner
        "$ref":
          type: string
          description: "The URI of the SCIM resource representing the user.  This
            value is readonly. \n"
        displayName:
          type: string
          description: "The display name of the user. This value is readonly. \n"
    GroupResponseV2:
      required:
      - displayName
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure. The schemas "urn:ietf:params:scim:schemas:core:2.0:Group"   and
            "urn:ietf:params:scim:schemas:extension:ibm:2.0:Group" are returned in
            the response.
          items:
            type: string
        id:
          type: string
          description: The unique identifier for the resource as defined by the service.
            This attribute is read-only and will be sent by the service. Any value
            that is specified for this attribute in the JSON POST or PUT request payload
            is ignored.
        displayName:
          type: string
          description: A human-readable name for the group.
        bookmark:
          type: string
          description: An opaque string that is used by the system to get the next
            2500 members of this group.  The existence of this element in the GET
            /v2.0/Groups/{id} response payload indicates that more members exist that
            were not returned in the call.  To get the next set of members, the caller
            makes an additional call to the same endpoint, and passes the bookmark
            value as a query parameter named "nextPage". For example ?nextPage=XASDGAJDGKAWHGI=.  The
            caller can continue to make calls to the endpoint until no bookmark element
            are returned in the response payload, which indicates that all group members
            were returned.  A bookmark is generated from a membershipType query.  The
            bookmark feature is available for tenants that have large group support
            enabled.
        urn:ietf:params:scim:schemas:extension:ibm:2.0:Group:
          "$ref": "#/components/schemas/CICCustomGroupResponse"
        meta:
          "$ref": "#/components/schemas/MetaV2"
        members:
          type: array
          description: 'A list of members that belong to this group.  If the group
            has more than 10,000 members, then this array is empty, unless large group
            support is enabled for the tenant.  With large group support enabled,
            each call to the GET /v2.0/Groups/{id} endpoint returns at most 2,500
            members of the group.  If more members of the group exist that were not
            returned, a bookmark is returned in the response.  The bookmark is used
            to get the next set of group members.  See the "bookmark" property for
            more details. '
          items:
            "$ref": "#/components/schemas/GroupMembersResponse"
        externalId:
          type: string
          description: Identifier of the Group resource as defined by the provisioning
            client.
    LastMFA:
      required:
      - type
      - value
      type: object
      properties:
        type:
          type: string
          description: The type of MFA
        value:
          type: string
          description: The value for this type of MFA
    LinkedAccount:
      required:
      - externalId
      - realm
      type: object
      properties:
        externalId:
          type: string
          description: The ID of a user's external account The maximum length, in
            combination with realm, is 239 characters.
        realm:
          type: string
          description: The realm name of the user's external account The maximum length,
            in combination with externalId, is 239 characters.
    Manager:
      type: object
      properties:
        value:
          type: string
          description: "The \"id\" of the SCIM resource representing the user's manager.
            \ \n"
        "$ref":
          type: string
          description: "The URI of the SCIM resource representing the user's manager.
            \ This value is readonly. \n"
        displayName:
          type: string
          description: "The display name of the user's manager. This value is readonly.
            \n"
    MetaV2:
      type: object
      properties:
        resourceType:
          type: string
          description: The field that indicates the type of resource.
        created:
          type: string
          description: A DateTime string that indicates when the resource was created.
        lastModified:
          type: string
          description: A DateTime string that indicates when the resource was last
            modified.
        location:
          type: string
          description: The URI of the resource that is being returned.
        deactivated:
          type: string
          description: A readonly string that indicates why the account is deactivated.  Valid
            values are "api", "timestamp", and "cleanup".  The value "api" means that
            the user was deactivated by using an API.  The value "timestamp" means
            that the user was deactivated by the system because the account expired.  The
            value "cleanup" means that the user was deactivated by the system during
            account cleanup processing.
          enum:
          - api
          - timestamp
          - cleanup
    Name:
      type: object
      properties:
        formatted:
          type: string
          description: The full name of the user that includes all  user names, middle
            names, and suffixes, that are formatted for display. This value is returned
            by the service provider if it is not part of the POST or PUT payloads.
            If the POST or PUT JSON payload contains the value for this attribute,
            the value in the payload takes precedence. Maximum length is 240 characters.
        familyName:
          type: string
          description: The family name of the user, or the last name in most Western
            languages. For example, Jensen is the family name from the full name Ms.
            Barbara J Jensen, PhD. Maximum length is 80 characters.
        givenName:
          type: string
          description: The given name of the user, or first name in most Western languages.
            For example, Barbara is the given name from the full name Ms. Barbara
            J Jensen, PhD. Maximum length is 80 characters.
        middleName:
          type: string
          description: The middle name(s) of the user. Maximum length is 80 characters.
    PhoneNumber:
      required:
      - type
      - value
      type: object
      properties:
        value:
          type: string
          description: A list of phone numbers that are associated with the user.
            The value is be canonicalized by the service provider according to format
            in RFC3966, for example, "tel:+1-201-555-0123". Canonical type values
            are work, home, mobile, fax, and pager. Maximum length is 32 characters.
        type:
          type: string
          description: A label that indicates the attribute's function; for example,
            "work" or "home".
          enum:
          - work
          - home
          - mobile
          - pager
          - fax
    CICCustomGroup:
      type: object
      properties:
        description:
          type: string
          description: The description for the group that is being created.
        owners:
          type: array
          description: A list of owners for the group.  When the scope of an admin
            role restricts groups, the members of that role can access only those
            restricted groups and any other groups that they own.  Members of a scoped
            role are also automatically assigned as the group owner when creating
            the group by calling the POST /v2.0/Groups API.
          items:
            "$ref": "#/components/schemas/GroupOwner"
    GroupMembers:
      required:
      - type
      - value
      type: object
      properties:
        type:
          type: string
          description: The type of group member that is being added.
          enum:
          - user
        value:
          type: string
          description: The unique identifier of the member that is being added to
            the group.
    GroupV2:
      required:
      - displayName
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure.   The schemas "urn:ietf:params:scim:schemas:core:2.0:Group",
            urn:ietf:params:scim:schemas:extension:ibm:2.0:Group",  and "urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification"
            are valid.  The core group schema is required.
          items:
            type: string
        displayName:
          type: string
          description: The display name of the group. Maximum length is 255 characters.
        members:
          type: array
          description: A list of members that are being added.  When creating a group,
            the number of elements must be less than or equal to 10,000.
          items:
            "$ref": "#/components/schemas/GroupMembers"
        urn:ietf:params:scim:schemas:extension:ibm:2.0:Group:
          "$ref": "#/components/schemas/CICCustomGroup"
        urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification:
          "$ref": "#/components/schemas/Notifications"
        externalId:
          type: string
          description: Identifier of the Group resource as defined by the provisioning
            client. Maximum length is 240 characters.
        visible:
          type: boolean
    Notifications:
      type: object
      properties:
        notifyType:
          type: string
          description: The value that indicates the type of notification that is sent
            to the user. If not provided, the default value is EMAIL.
          enum:
          - EMAIL
          - NONE
        notifyPassword:
          type: boolean
          description: Indicates whether the user's password is included in the notification
            that is sent  to the user. If the attribute is not provided, the behavior
            defaults to true. This attribute does not apply if the notifyType attribute
            is set to NONE.
        notifyManager:
          type: boolean
          description: Indicates whether the notification should be sent to the user's
            manager (if one is set) when a user's password is set or modified. If
            the attribute is not provided, the behavior defaults to false. This attribute
            does not apply if the notifyType attribute is set to NONE.
    GroupsCardinalityResponse:
      required:
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate thenamespaces
            of the SCIM schemas that define the attributes in thecurrent JSON structure.  The
            schema "urn:ietf:params:scim:schemas:ibm:core:2.0:group:Cardinality"is
            returned.
          items:
            type: string
        totalGroups:
          type: integer
          description: Specifies the total number of groups for the tenant.
          format: int32
    CICCustomLargeGroupResponse:
      required:
      - totalMembers
      type: object
      properties:
        description:
          type: string
          description: The description for the group.
        groupType:
          type: string
          description: The group type. This value is read-only.
          enum:
          - standard
          - reserved
        totalMembers:
          type: integer
          description: The total number of members that are in the group.
          format: int32
    LargeGroupResponse:
      required:
      - displayName
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure. The schemas "urn:ietf:params:scim:schemas:core:2.0:Group"   and
            "urn:ietf:params:scim:schemas:extension:ibm:2.0:Group" are returned in
            the response.
          items:
            type: string
        id:
          type: string
          description: The unique identifier for the resource as defined by the service.
            This attribute is read-only and will be sent by the service. Any value
            that is specified for this attribute in the JSON POST or PUT request payload
            is ignored.
        displayName:
          type: string
          description: A human-readable name for the group.
        urn:ietf:params:scim:schemas:extension:ibm:2.0:Group:
          "$ref": "#/components/schemas/CICCustomLargeGroupResponse"
        meta:
          "$ref": "#/components/schemas/MetaV2"
        externalId:
          type: string
          description: Identifier of the Group resource as defined by the provisioning
            client.
    GetGroupsResponseV2:
      required:
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure. The schema "urn:ietf:params:scim:api:messages:2.0:ListResponse"
            is returned in the response.
          items:
            type: string
        Resources:
          type: array
          description: A list of groups.
          items:
            "$ref": "#/components/schemas/GroupResponseV2"
    ValidGroup:
      required:
      - displayName
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the resource as defined by the service.
            This attribute is read-only and is sent by the service. Any value that
            is specified for this attribute in the JSON POST or PUT request payload
            is ignored.
        displayName:
          type: string
          description: The display name of the group.
    ValidateGroupsResponse:
      required:
      - invalidGroups
      - schemas
      - validGroups
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure.  The schema "urn:ietf:params:scim:schemas:ibm:core:2.0:GroupsValidatorResponse"
            is returned.
          items:
            type: string
        validGroups:
          type: array
          description: An array of valid groups.
          items:
            "$ref": "#/components/schemas/ValidGroup"
        invalidGroups:
          type: array
          description: An array of strings that contain the IDs of the invalid groups.
          items:
            type: string
    ValidateGroups:
      required:
      - displayNames
      - ids
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure.  The schema URI must be "urn:ietf:params:scim:schemas:ibm:core:2.0:GroupsValidator"
            as required by the SCIM specification.
          items:
            type: string
        ids:
          type: array
          description: An array of strings that contain the group IDs that are validated.
          items:
            type: string
        displayNames:
          type: array
          description: An array of strings that contain the group display names that
            are validated.
          items:
            type: string
    HealthCheckResponseV2:
      required:
      - components
      - status
      type: object
      properties:
        components:
          type: array
          description: The health check status for all of the Cloud Directory components.
          items:
            "$ref": "#/components/schemas/Component_0"
        status:
          type: string
          description: The over all status result of the health check.
          example: good
          enum:
          - good
          - bad
          - marginal
    ChangePwdFailureErrorMessage:
      required:
      - schemas
      - status
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure.  The schema "urn:ietf:params:scim:api:messages:2.0:Error"
            is the URI as required by the SCIM specification.
          items:
            type: string
        status:
          type: string
          description: The HTTP status code expressed as a JSON string.
        detail:
          type: string
          description: A detailed human-readable message.
        scimType:
          type: string
          description: 'A SCIM detail error keyword. For a change password error,
            the possible return values are: PWD_TOO_SHORT: Password is too short.
            PWD_MIN_OTHERS_FAILED: Password does not meet minimum number of special
            characters. PWD_MAX_REPEATED_FAILED: Password does not meet maximum repeated
            characters.  PWD_MIN_ALPHA_FAILED: Password does not meet the minimum
            number of alphabetical characters. PWD_MAX_CONSECUTIVE_REPEATED_CHARS_FAILED:
            Password does not meet maximum consecutive repeated characters. PWD_IN_HISTORY:
            The password that you specified was used previously, and it cannot be
            reused. PWD_TOO_YOUNG: The minimum time has not elapsed between password
            changes. ACCOUNT_LOCKED: The user''s account is locked. PWD_EXPIRED: The
            user''s password is expired. INVALID_CREDS: The user name and/or password
            is not valid. ACCOUNT_NOT_ACTIVE: The user''s account is not active. PWD_IN_DICTIONARY:
            The password that you specified was marked as not appropriate. PWD_IN_GLOBAL_DICTIONARY:
            The password that you specified was marked as compromised by the xForce
            Red team. FAILURE_UNKNOWN: The system cannot determine the change password
            failure.'
    ChangePasswordV2:
      required:
      - currentPassword
      - newPassword
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that are used to
            indicate the namespaces of the SCIM schemas that define the attributes
            in the current JSON structure. The schema URIs must be "urn:ietf:params:scim:schemas:ibm:core:2.0:ChangePassword"
            and "urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification" as required
            by the SCIM specification.
          items:
            type: string
        currentPassword:
          type: string
          description: Specifies the user's existing password.If the password contains
            extended ASCII characters then you must add charset=utf-8 in the Content-Type
            header when making a REST API call.
        newPassword:
          type: string
          description: Specifies the new password that was set by the user.If the
            password contains extended ASCII characters then you must add charset=utf-8
            in the Content-Type header when making a REST API call.Cannot begin with
            the > character and end with the < character.
        urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification:
          "$ref": "#/components/schemas/Notifications"
    Groups:
      required:
      - "$ref"
      - value
      type: object
      properties:
        displayName:
          type: string
          description: The display name of the group that the user belongs to.
        id:
          type: string
          description: The identifier of the group that the user belongs to.
        value:
          type: string
          description: A sub-attr required by the SCIM specification that contains
            the "id" of the SCIM resource the user belongs to.
        "$ref":
          type: string
          description: A sub-attr required by the SCIM specification the contains
            the URI of the SCIM resource the user belongs to.
    UserResponseV2:
      required:
      - addresses
      - emails
      - id
      - name
      - schemas
      - userName
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure. The schemas "urn:ietf:params:scim:schemas:core:2.0:User",
            "urn:ietf:params:scim:schemas:extension:ibm:2.0:User" and "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User"
            are returned in the response.
          items:
            type: string
        id:
          type: string
          description: The unique identifier for the resource as defined by the service.
            This attribute is read-only and ise sent by the service. Any value that
            is specified for this attribute in the JSON POST or PUT request payload
            is ignored.
        externalId:
          type: string
          description: A unique identifier for the resource that is defined by the
            provisioning client. It identifies a resource between the provisioning
            client and the service provider. The client can use a filter to locate
            the resource with an identifier from the provisioning domain.
        meta:
          "$ref": "#/components/schemas/MetaV2"
        userName:
          type: string
          description: The unique identifier for the user that is typically used by
            the user to directly authenticate to the service provider. It is often
            displayed to the user as their unique identifier within the system (as
            opposed to the id or externalId attributes, which are generally opaque
            and not user-friendly identifiers). Each user must include a non-empty
            userName value. This identifier must be unique across the service consumer's
            entire set of users. It must be a stable ID that does not change when
            the same user is returned in subsequent requests.
        title:
          type: string
          description: The user's title, such as "Vice President."
        name:
          "$ref": "#/components/schemas/Name"
        displayName:
          type: string
          description: The name of the user that is displayed to users. Each user
            returned may include a non-empty displayName value. Typically it is the
            full name of the user being described, for example, Babs Jensen or Ms.
            Barbara J Jensen. However, if that information is unavailable, a username
            or handle can be used, for example, bjensen. The value is the primary
            textual label by which this user is normally displayed by the service
            provider when presenting information to users.
        preferredLanguage:
          type: string
          description: The language code identifying the preferred language of this
            identity, for example, en-us or fr-ca.
        active:
          type: boolean
          description: A Boolean value that indicates the user's administrative status.
            The definitive meaning of this attribute is determined by the service
            provider. For example, a value of true indicates that the user can, log
            in, while a value of false indicates that the user's account has been
            suspended. If not specified, the value defaults to true.
        emails:
          type: array
          description: A list of email addresses that are associated with the user.
            Only one is supported.
          items:
            "$ref": "#/components/schemas/EmailAddress"
        addresses:
          type: array
          description: A list of addresses that are associated with the user.
          items:
            "$ref": "#/components/schemas/Address"
        phoneNumbers:
          type: array
          description: A list of phone numbers that are associated with the user.
          items:
            "$ref": "#/components/schemas/PhoneNumber"
        groups:
          type: array
          description: The list of groups that the user belongs to. Any value that
            is specified for this attribute in the JSON POST or PUT request payload
            is ignored. Group membership is managed by using the /Groups API.
          items:
            "$ref": "#/components/schemas/Groups"
        urn:ietf:params:scim:schemas:extension:ibm:2.0:User:
          "$ref": "#/components/schemas/CICCustomUserResponse"
        urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:
          "$ref": "#/components/schemas/EnterpriseUser"
    CICCustomUser:
      type: object
      properties:
        userCategory:
          type: string
          description: The user category. If not provided, it defaults to "regular".
          enum:
          - regular
          - federated
        emailVerified:
          type: integer
          description: The field that indicates the timestamp at which the user's
            email was verified.
          format: int64
        realm:
          type: string
          description: The realm to which the user belongs. It is always "cloudIdentityRealm"
            for regular users. Maximum length is 240 characters.
        unqualifiedUserName:
          type: string
          description: An unqualified federated user name. This field is read-only.
        twoFactorAuthentication:
          type: boolean
          description: Indicates whether two factor authentication is required. It
            defaults to "false" if not provided.
        delegate:
          type: string
          description: The "ID" of the target entry to which the approval and re-certification
            records that are assigned to this identity are to be delegated.
        customAttributes:
          type: array
          description: The custom attributes for the user. For the GET /Users API,
            custom attributes can be referenced by using the fully qualified name.
            The schema URI is urn:ietf:params:scim:schemas:extension:ibm:2.0:User:customAttributes.scimName,
            where scimName is the SCIM name of the custom schema attribute that was
            created with the POST /Schema/attributes API.
          items:
            "$ref": "#/components/schemas/CustomAttribute"
        linkedAccounts:
          type: array
          description: The linked accounts for the user.
          items:
            "$ref": "#/components/schemas/LinkedAccount"
        accountExpires:
          type: string
          description: 'The expiration date of the account.  The value is a date and
            time of the form  yyyy-mm-ddThh:mm:ssZ.  For example, an account expiration
            of 2021-04-01T16:00:00Z, expires on year 2021, April 1 at 16 hundred hours
            GMT.  When an account is expired, the account''s active flag is set to
            false to prevent login.The process that checks for expired accounts runs
            every 15 minutes at the top of the hour in GMT+0 time. '
    UserV2:
      required:
      - schemas
      - userName
      type: object
      properties:
        schemas:
          type: array
          description: |-
            An array of strings that contain the URIs that indicate the namespaces of the SCIM schemas that define the attributes in the current JSON structure.
              The schemas ""urn:ietf:params:scim:schemas:core:2.0:User", "urn:ietf:params:scim:schemas:extension:ibm:2.0:User", "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User" and "urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification" are valid.  The core user schema is required.
          items:
            type: string
        userName:
          type: string
          description: The unique identifier for the user that is typically used by
            the user to directly authenticate to the service provider. It is often
            displayed to the user as their unique identifier within the system (as
            opposed to the id or externalId attributes, which are generally opaque
            and not user-friendly identifiers). Each user must include a non-empty
            userName value. This identifier must be unique across the service consumer's
            entire set of Users. It must be a stable ID that does not change when
            the same user is returned in subsequent requests.  Maximum length is 256
            characters.
        externalId:
          type: string
          description: The unique identifier for the resource that is defined by the
            provisioning client. It identifies a resource between the provisioning
            client and the service provider. The client can use a filter to locate
            the resource with that identifier from the provisioning domain. Maximum
            length is 240 characters.
        title:
          type: string
          description: The user's title, such as "Vice President." Maximum length
            is 128 characters.
        password:
          type: string
          description: The user's clear text password. This attribute is used to specify
            an initial password when a new user is created or to reset an existing
            user's password. Maximum length is 4096 characters. If the password contains
            extended ASCII characters then you must add charset=utf-8 in the Content-Type
            header when making a REST API call. Cannot begin with the > character
            and end with the < character.
        name:
          "$ref": "#/components/schemas/Name"
        displayName:
          type: string
          description: The name of the user that is displayed to users. Each user
            returned may include a non-empty displayName value. Typically it is the
            full name of the user that is being described, for example, Babs Jensen
            or Ms. Barbara J Jensen. However, if that information is unavailable,
            a username or handle can be used, for example, bjensen. The value is the
            primary textual label by which this User is normally displayed by the
            service provider when presenting information to users. Maximum length
            is 128 characters.
        preferredLanguage:
          type: string
          description: The language code identifying the preferred language of this
            identity, for example, en-us or fr-ca. Maximum length is 5 characters.
        active:
          type: boolean
          description: A Boolean value that indicates the user's administrative status.
            The definitive meaning of this attribute is determined by the service
            provider. For example, a value of true indicates that the user can log
            in, while a value of false indicates that the user's account has been
            suspended. If not specified, the value defaults to true.
        emails:
          type: array
          description: A list of email addresses that can be used to create a user.
          items:
            "$ref": "#/components/schemas/EmailAddress"
        addresses:
          type: array
          description: A list of addresses that can be used to create a user.
          items:
            "$ref": "#/components/schemas/Address"
        phoneNumbers:
          type: array
          description: A list of phone numbers that can be used to create a user.
          items:
            "$ref": "#/components/schemas/PhoneNumber"
        urn:ietf:params:scim:schemas:extension:ibm:2.0:User:
          "$ref": "#/components/schemas/CICCustomUser"
        urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:
          "$ref": "#/components/schemas/EnterpriseUser"
        urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification:
          "$ref": "#/components/schemas/Notifications"
    GetUsersResponseV2:
      required:
      - schemas
      - totalResults
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure. The schema "urn:ietf:params:scim:api:messages:2.0:ListResponse"
            is returned in the response.
          items:
            type: string
        totalResults:
          type: integer
          description: The total number of users that were found that match the specified
            search criteria for the specified tenant. An upper limit is imposed on
            this value, in that the total number of users that match the search criteria
            may be larger than this value.  A limit of 2500 users matching the search
            criteria will be returned.
          format: int32
        startIndex:
          type: integer
          description: The 1-based index of the first result in the current set of
            list results.
          format: int32
        itemsPerPage:
          type: integer
          description: The number of resources that are returned in a list response
            page.
          format: int32
        Resources:
          type: array
          description: A list of users.
          items:
            "$ref": "#/components/schemas/GetUsersUserResponseV2"
    GetUsersUserResponseV2:
      required:
      - addresses
      - emails
      - id
      - name
      - schemas
      - userName
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure. The schemas "urn:ietf:params:scim:schemas:core:2.0:User",
            "urn:ietf:params:scim:schemas:extension:ibm:2.0:User" and "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User"
            are returned in the response.
          items:
            type: string
        id:
          type: string
          description: The unique identifier for the resource as defined by the service.
            This attribute is read-only and ise sent by the service. Any value that
            is specified for this attribute in the JSON POST or PUT request payload
            is ignored.
        externalId:
          type: string
          description: A unique identifier for the resource that is defined by the
            provisioning client. It identifies a resource between the provisioning
            client and the service provider. The client can use a filter to locate
            the resource with an identifier from the provisioning domain.
        meta:
          "$ref": "#/components/schemas/MetaV2"
        userName:
          type: string
          description: The unique identifier for the user that is typically used by
            the user to directly authenticate to the service provider. It is often
            displayed to the user as their unique identifier within the system (as
            opposed to the id or externalId attributes, which are generally opaque
            and not user-friendly identifiers). Each user must include a non-empty
            userName value. This identifier must be unique across the service consumer's
            entire set of users. It must be a stable ID that does not change when
            the same user is returned in subsequent requests.
        title:
          type: string
          description: The user's title, such as "Vice President."
        name:
          "$ref": "#/components/schemas/Name"
        displayName:
          type: string
          description: The name of the user that is displayed to users. Each user
            returned may include a non-empty displayName value. Typically it is the
            full name of the user being described, for example, Babs Jensen or Ms.
            Barbara J Jensen. However, if that information is unavailable, a username
            or handle can be used, for example, bjensen. The value is the primary
            textual label by which this user is normally displayed by the service
            provider when presenting information to users.
        preferredLanguage:
          type: string
          description: The language code identifying the preferred language of this
            identity, for example, en-us or fr-ca.
        active:
          type: boolean
          description: A Boolean value that indicates the user's administrative status.
            The definitive meaning of this attribute is determined by the service
            provider. For example, a value of true indicates that the user can, log
            in, while a value of false indicates that the user's account has been
            suspended. If not specified, the value defaults to true.
        emails:
          type: array
          description: A list of email addresses that are associated with the user.
            Only one is supported.
          items:
            "$ref": "#/components/schemas/EmailAddress"
        addresses:
          type: array
          description: A list of addresses that are associated with the user.
          items:
            "$ref": "#/components/schemas/Address"
        phoneNumbers:
          type: array
          description: A list of phone numbers that are associated with the user.
          items:
            "$ref": "#/components/schemas/PhoneNumber"
        urn:ietf:params:scim:schemas:extension:ibm:2.0:User:
          "$ref": "#/components/schemas/CICCustomUserResponse"
        urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:
          "$ref": "#/components/schemas/EnterpriseUser"
    PasswordGeneratorResponse:
      required:
      - password
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure. The schema "urn:ietf:params:scim:schemas:ibm:core:2.0:PasswordGeneratorResponse"
            is returned in the response.
          items:
            type: string
        password:
          type: string
          description: A random generated password based on password policy.
    ResetPasswordUIDResult:
      required:
      - id
      - messageDescription
      - messageId
      - success
      type: object
      properties:
        success:
          type: boolean
          description: A Boolean value that indicates whether the password reset operation
            is successful.
        id:
          type: string
          description: The ID of the user whose password is being reset.
        messageId:
          type: string
          description: The message identifier of the message.
        messageDescription:
          type: string
          description: The message description that indicates the success or failure
            reason.
    ResetPasswordUIDSResponse:
      required:
      - results
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure.  The schema "urn:ietf:params:scim:schemas:ibm:core:2.0:PasswordResetterResponse"
            is returned.
          items:
            type: string
        results:
          type: array
          description: The result for each attempt to reset the password for a user
            ID.
          items:
            "$ref": "#/components/schemas/ResetPasswordUIDResult"
    ResetPasswordUIDS:
      required:
      - ids
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure.  The schema URI must contain "urn:ietf:params:scim:schemas:ibm:core:2.0:PasswordResetter"
            as required by the SCIM specification.  urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification
            is also supported.  The values in urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification
            apply to all user ids.
          items:
            type: string
        ids:
          type: array
          description: An array of strings that contain the user IDs for resetting
            the password.
          items:
            type: string
        urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification:
          "$ref": "#/components/schemas/Notifications"
    CustomSchemaResponseModel:
      type: object
      properties:
        pwdChangedTime:
          type: string
          description: 'Indicates the time when the password was changed for the current
            user entry. '
          example: '2020-01-19T16:07:00Z'
    GetPwdExpiryUsersResponse:
      required:
      - Resources
      - currentDateTime
      - totalResults
      type: object
      properties:
        currentDateTime:
          type: string
          description: The current UTC date time on the server.
          example: '2020-02-16T16:35:00.670Z'
        totalResults:
          type: integer
          description: The total number of users that were found. A limit of 2500
            users matching the search criteria will be returned.
          format: int32
        Resources:
          type: array
          description: A list of users.
          items:
            "$ref": "#/components/schemas/PwdExpiryUserResponse"
    PwdExpiryUserResponse:
      required:
      - active
      - emails
      - id
      - userName
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the resource as defined by the service.
        userName:
          type: string
          description: The user name.
        preferredLanguage:
          type: string
          description: The language code identifying the preferred language of this
            identity, for example, en-us or fr-ca.
        active:
          type: boolean
          description: A Boolean value that indicates the user's administrative status.
            The definitive meaning of this attribute is determined by the service
            provider. For example, a value of true indicates that the user can, log
            in, while a value of false indicates that the user's account has been
            suspended. If not specified, the value defaults to true.
        emails:
          type: array
          description: A list of email addresses that are associated with the user.
            Only one is supported.
          items:
            "$ref": "#/components/schemas/EmailAddress"
        urn:ietf:params:scim:schemas:extension:ibm:2.0:User:
          "$ref": "#/components/schemas/CustomSchemaResponseModel"
    NotificationDays:
      required:
      - days
      type: object
      properties:
        days:
          type: integer
          description: The number of days before the password is expired.  A value
            of 0 means the password is expired.
          format: int32
    NotificationProgress:
      required:
      - completed
      - lastProcessedUID
      - notification
      - timeCompleted
      - timeStarted
      - totalProcessed
      type: object
      properties:
        timeStarted:
          type: integer
          description: The time this tenant notification process started. The time
            is the epoch time in millis.
          format: int64
        timeCompleted:
          type: integer
          description: The time this tenant notification process completed. The time
            is the epoch time in millis.
          format: int64
        notification:
          "$ref": "#/components/schemas/NotificationDays"
        totalProcessed:
          type: integer
          description: The total number of users processed for this notification.
          format: int32
        lastProcessedUID:
          type: string
          description: The last processed user id.
        completed:
          type: boolean
          description: A flag indicating if the progress is completed.
    PwdExpiryNotifyOverallStatus:
      required:
      - completed
      - tenantsProgress
      - timeCompleted
      - timeStarted
      type: object
      properties:
        timeStarted:
          type: integer
          description: The time when password expiration notification processing started
            for all tenants.
          format: int64
        timeCompleted:
          type: integer
          description: The time when password expiration notification processing completed
            for all tenants.
          format: int64
        completed:
          type: boolean
          description: A flag indicating if the overall status is completed.
        errorMessage:
          type: string
          description: The error that occurred when a throwable was caught trying
            to kick off password expiry notifications.
        corrID:
          type: string
          description: The correlation ID
        tenantsProgress:
          type: array
          description: The list of tenants that were processed and the progress for
            each.
          items:
            "$ref": "#/components/schemas/PwdExpiryNotifyTenantProgress"
    PwdExpiryNotifyTenantProgress:
      required:
      - completed
      - notifyProgress
      - tenantName
      type: object
      properties:
        tenantName:
          type: string
          description: The tenant name.
        completed:
          type: boolean
          description: A flag indicating if all the notifications are complete for
            the tenant.
        notifyProgress:
          type: array
          description: The list of notifications configured for the tenant.
          items:
            "$ref": "#/components/schemas/NotificationProgress"
    PwdExpiryNotifyModel:
      required:
      - daysBeforeExpires
      - pwdMaxAgeDays
      type: object
      properties:
        runAsync:
          type: boolean
          description: Run asynchronously. Defaults to false if not specified.
          example: false
        pwdMaxAgeDays:
          type: integer
          description: Specify the password maximum age in days.
          format: int32
          example: 30
        daysBeforeExpires:
          type: integer
          description: Specify the number of days before the password expires to notify.
          format: int32
          example: 14
    PwdChangedTimeResponse:
      required:
      - totalChanged
      type: object
      properties:
        totalChanged:
          type: integer
          description: The total number of users whose pwdChangedTime was modified.
          format: int32
        lastProcessedUsername:
          type: string
    PwdChangeTimeModel:
      type: object
      properties:
        pwdChangedTime:
          type: string
          description: 'The LDAP UTC time in format: yyyyMMddHHmmss.SSSZ. If specified,
            it will be used instead of calculating it based on pwdMaxAgeDays and daysBeforeExpire.'
          example: 20200214194918.483Z
        pwdMaxAgeDays:
          type: integer
          description: Specify the password maximum age in days that will be used
            to calculate the pwdChangedTime
          format: int32
          example: 30
        daysBeforeExpires:
          type: integer
          description: Specify the number of days before the password expires to notify
            that will be used to calculate the pwdChangedTime.
          format: int32
          example: 14
    FilterValidatorModel:
      required:
      - filter
      - resourceType
      type: object
      properties:
        resourceType:
          type: string
          description: The resource type the SCIM filter applies to.  Valid values
            are "user" and "group".
        filter:
          type: string
          description: The SCIM filter to validate.
    PropertiesModel:
      required:
      - properties
      type: object
      properties:
        properties:
          type: array
          description: List of properties that start with Logger.logall. in SCIM.properties,
            which is used to override log level setting at the class level.
          items:
            type: string
    CapabilitiesResponse:
      required:
      - fullText
      - largeGroupSupport
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that are used to
            indicate the namespaces of the SCIM schemas that define the attributes
            in the current JSON structure. The schema URI must be "urn:ietf:params:scim:schemas:ibm:core:2.0:Capabilities"
            as required by the SCIM specification.
          items:
            type: string
        largeGroupSupport:
          type: boolean
          description: A flag to indicate whether large group support is enabled.
        fullText:
          "$ref": "#/components/schemas/FullTextSearchModel"
    FullTextSearchModel:
      required:
      - attrs
      - search
      type: object
      properties:
        search:
          type: string
          description: Indicates how the search is being performed.
          enum:
          - startsWith
          - contains
        attrs:
          type: string
          description: Indicates whether the fullText search is run against a full
            or partial set of attributes.
          enum:
          - full
          - partial
    GenerateFilterResponseModel:
      required:
      - ldapFilter
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that are used to
            indicate the namespaces of the SCIM schemas that define the attributes
            in the current JSON structure. The schema URI must be "urn:ietf:params:scim:schemas:ibm:core:2.0:Filter"
            as required by the SCIM specification.
          items:
            type: string
        ldapFilter:
          type: string
          description: The LDAP filter that is the equivalent of the input SCIM filter.
    GenerateFilterRequestModel:
      required:
      - filter
      - resourceType
      type: object
      properties:
        resourceType:
          type: string
          description: The resource type the SCIM filter applies to.  Valid values
            are "user" and "group".
        filter:
          type: string
          description: The SCIM filter to generate an equivalent LDAP filter from.
    TenantModel:
      required:
      - tenantPropertyV1
      - tenantUUID
      type: object
      properties:
        tenantUUID:
          type: string
          description: The existing tenant UUID of the tenant that has been exported.  Its
            a readonly value that is populated on export and should not be changed.
        newTenantUUID:
          type: string
          description: The new tenant UUID of the tenant that is being imported.  Its
            specified on import.  Its an optional field.
        tenantPropertyV1:
          type: string
          description: 'The tenant property data in ZK that is exported as a string. '
        userMapping:
          type: string
          description: 'The tenant custom attributes in ZK that is exported.  Its
            optional because a tenant may not have custom attributes. '
        featureFlags:
          type: array
          description: 'The tenant''s feature flags exported. '
          items:
            "$ref": "#/components/schemas/ZKNode"
    ZKNode:
      required:
      - path
      - value
      type: object
      properties:
        path:
          type: string
          description: The  node path
        value:
          type: string
          description: The node value.
    AttributeConstraints:
      type: object
      properties:
        readAccessForEndUser:
          type: boolean
          description: A boolean property that indicates whether the end-user has
            read access to the attribute.  Defaults to true, if not specified.
        writeAccessForEndUser:
          type: boolean
          description: A boolean property that indicates whether the end-user has
            write access to the attribute.  Defaults to true, if not specified.
        mandatory:
          type: boolean
          description: A boolean property that indicates whether the attribute's value
            is mandatory.  Defaults to false, if not specified.
        unique:
          type: boolean
          description: A boolean property that indicates whether the attribute's value
            must be unique across the tenant.  Defaults to false, if not specified.
        valueConstraint:
          "$ref": "#/components/schemas/ValueConstraint_0"
    SchemaProfileAttributeResponse:
      required:
      - name
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: 'The body of the request must contain the "schemas" attribute
            with the URI value: "urn:ietf:params:scim:schemas:ibm:core:2.0:SchemaProfileAttribute".'
          items:
            type: string
        name:
          type: string
          description: The schema profile attribute name.  The name must be a valid
            schema attribute name.  To get a list of valid schema attribute names
            assignable to a schema profile, run the "GET /v2.0/Schema/attributes?filter=addConstraints"
            REST API
        constraints:
          "$ref": "#/components/schemas/AttributeConstraints"
    SchemaProfileAttribute:
      required:
      - name
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: 'The body of the request must contain the "schemas" attribute
            with the URI value: "urn:ietf:params:scim:schemas:ibm:core:2.0:SchemaProfileAttribute".'
          items:
            type: string
        name:
          type: string
          description: The schema profile attribute name.  The name must be a valid
            schema attribute name.  To get a list of valid schema attribute names
            that are assignable to a schema profile, run the "GET /v2.0/Schema/attributes?filter=addConstraints"
            REST API
        constraints:
          "$ref": "#/components/schemas/AttributeConstraints"
    SchemaProfileResponse:
      required:
      - id
      - name
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: 'The body of the request must contain the "schemas" attribute
            with the URI value: "urn:ietf:params:scim:schemas:ibm:core:2.0:SchemaProfile".'
          items:
            type: string
        id:
          type: string
          description: The unique identifier for the resource as defined by the service.
            This attribute is read-only and is set by the service.
        name:
          type: string
          description: The name of the schema profile.
        description:
          type: string
          description: The description of the schema profile.
        meta:
          "$ref": "#/components/schemas/MetaV2"
        attributes:
          type: array
          description: The attributes contained in the schema profile.
          items:
            "$ref": "#/components/schemas/SchemaProfileAttributeResponse"
    SchemaProfile:
      required:
      - name
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: 'The body of the request must contain the "schemas" attribute
            with the URI value: "urn:ietf:params:scim:schemas:ibm:core:2.0:SchemaProfile".'
          items:
            type: string
        name:
          type: string
          description: The name of the schema profile.
        description:
          type: string
          description: The description of the schema profile.
        attributes:
          type: array
          description: The attributes contained in the schema profile.
          items:
            "$ref": "#/components/schemas/SchemaProfileAttribute"
    GetSchemaAttributesResponse:
      required:
      - schemas
      - totalResults
      type: object
      properties:
        schemas:
          type: array
          description: "An array of Strings containing URIs that are used to indicate
            the\nnamespaces of the SCIM schemas that define the attributes present
            in the\ncurrent JSON structure.\n  The schema \"urn:ietf:params:scim:schemas:ibm:core:2.0:SchemaAttributeListResponse\"
            \ is returned in the response. \n"
          items:
            type: string
        totalResults:
          type: integer
          description: Total number of schema attributes found matching the specified
            search criteria for the specified tenant.
          format: int32
        startIndex:
          type: integer
          description: The 1-based index of the first result in the current set of
            list results.
          format: int32
        itemsPerPage:
          type: integer
          description: The number of resources returned in a list response page.
          format: int32
        Resources:
          type: array
          description: List of schema attributes
          items:
            "$ref": "#/components/schemas/SchemaAttributeResponse"
    SchemaAttributeResponse:
      required:
      - name
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: "An array of strings that contains the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes present in the\ncurrent
            JSON structure.\n  The schema URI must be \"urn:ietf:params:scim:schemas:ibm:core:2.0:SchemaAttribute\"
            as required by the SCIM specification. \n"
          items:
            type: string
        name:
          type: string
          description: "The schema attribute name. \n"
        description:
          type: string
          description: "The description for the schema attribute. \n"
        displayName:
          type: string
          description: 'The display name for a custom attribute.  Its used to show
            the attribute name in the email that is sent to the end user when the
            attribute value changes.

            '
        type:
          type: string
          description: "The data type for the schema attribute. \n"
          enum:
          - string
          - boolean
          - integer
          - DN
        scimName:
          type: string
          description: "The SCIM name that is associated with the schema attribute.
            \n"
        attributeName:
          type: string
          description: "The attribute name that is associated with the attribute source.
            \n"
        multiValue:
          type: boolean
          description: 'A flag to indicate this schema attribute supports multiple
            values.

            '
        readOnly:
          type: boolean
          description: "A flag to indicate this schema attribute is read only.   Defaults
            to false.  Any value that is specified for a user in a read only attribute
            is ignored, except for custom attributes where it can be set on a POST.
            \ Values specified in a PUT or PATCH request payload for read only attributes
            are ignored. \n"
        customAttribute:
          type: boolean
          description: "A flag that indicates whether this is a custom attribute.
            \n"
        hashedAttribute:
          type: boolean
          description: "A flag that indicates whether this is a hashed custom attribute.
            \n"
    TenantTraceModel:
      required:
      - level
      - tenantName
      type: object
      properties:
        tenantName:
          type: string
          description: The tenant name.
        level:
          type: string
          description: The trace level to set.
          enum:
          - INFO
          - FINE
          - FINER
          - FINEST
    TraceLevelModel:
      required:
      - level
      type: object
      properties:
        microservice:
          type: string
          description: The microservice trace to set, that is the IAM_MSVC_NAME.  If
            not specified, the default is "profilemgmt".
        level:
          type: string
          description: The trace level to set.
          enum:
          - INFO
          - FINE
          - FINER
          - FINEST
        tenants:
          type: array
          description: The tenant trace levels to set.
          items:
            "$ref": "#/components/schemas/TenantTraceModel"
    CompareModel:
      required:
      - name
      - schemas
      - value
      type: object
      properties:
        schemas:
          type: array
          description: "An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure.\n  The schema \"urn:ietf:params:scim:schemas:ibm:core:2.0:user:Compare\"
            is valid.  "
          items:
            type: string
        name:
          type: string
          description: The hashed custom attribute name. Use the fully qualified SCIM
            name as shown in the example for passcode.
          example: urn:ietf:params:scim:schemas:extension:ibm:2.0:User:customAttributes.passcode
        value:
          type: string
          description: The value to compare.
    ResetPasswordOperation:
      required:
      - op
      - value
      type: object
      properties:
        op:
          type: string
          description: The operation to be performed.
          enum:
          - replace
        value:
          "$ref": "#/components/schemas/ResetPasswordOperationValue"
    ResetPasswordOperationValue:
      required:
      - password
      type: object
      properties:
        password:
          type: string
          description: Specify the value for the password or specify auto-generate
            to have the system generate a random password.
          example: auto-generate
        urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification:
          "$ref": "#/components/schemas/Notifications"
    ResetPasswordPatchBody:
      required:
      - Operations
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure. The schema URI must be "urn:ietf:params:scim:api:messages:2.0:PatchOp"   as
            required by the SCIM specification.
          items:
            type: string
        Operations:
          type: array
          description: An array of operation objects to be performed.  Operation objects
            must have exactly one "op" member, whose value indicates the operation
            to perform. Its value must be one of "add","remove", "replace", "move",
            "copy", or "test"; other values are errors. Additionally, operation objects
            must have exactly one "path" member. to the service provider. Often displayed
            to the user as their unique identifier within the system (as opposed to
            the id or externalId attributes, which are generally opaque and not user-friendly
            identifiers). Each user must include a non-empty userName value. This
            identifier must be unique across the service consumer's entire set of
            users. It must be a stable ID that does not change when the same user
            is returned in subsequent requests.
          items:
            "$ref": "#/components/schemas/ResetPasswordOperation"
    ChangeRealmV2:
      required:
      - currentRealm
      - newRealm
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure. The schema URI must be "urn:ietf:params:scim:schemas:ibm:core:2.0:ChangeRealm"
            as required by the SCIM specification.
          items:
            type: string
        currentRealm:
          type: string
          description: The user's existing realm.
        newRealm:
          type: string
          description: The user's new realm.
    UsersCardinalityResponse:
      required:
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate thenamespaces
            of the SCIM schemas that define the attributes in thecurrent JSON structure.  The
            schema "urn:ietf:params:scim:schemas:ibm:core:2.0:user:Cardinality"is
            returned.
          items:
            type: string
        totalUsers:
          type: integer
          description: Specifies the total number of users for the tenant.
          format: int32
    AuthenticationExternalErrorMessage:
      required:
      - schemas
      - status
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure.  The schema "urn:ietf:params:scim:api:messages:2.0:Error"
            is the URI as required by the SCIM specification.
          items:
            type: string
        status:
          type: string
          description: The HTTP status code expressed as a JSON string.
        detail:
          type: string
          description: A detailed human-readable message.
        scimType:
          type: string
          description: 'A SCIM detail error keyword. For an authentication error,
            the possible return values are: INVALID_CREDS: The user name and/or password
            is not valid. PWD_EXPIRED: The user''s password is expired. ACCOUNT_LOCKED:
            The user''s account is locked. LOCKED_PWD_FAILURES: The user''s account
            is locked because of too many password failures. USER_NOT_ACTIVE: The
            user is not active. PWD_IN_DICTIONARY: The password is present in the
            per-tenant bad password dictionary. PWD_IN_GLOBAL_DICTIONARY: The password
            is present in the Global bad password dicationary. AUTHFAIL_UNKNOWN: The
            system cannot determine authentication failure.'
    AuthenticateUserResponseV2:
      required:
      - id
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure. The schema "urn:ietf:params:scim:schemas:core:2.0:User"
            is returned in the response.
          items:
            type: string
        id:
          type: string
          description: The unique identifier for the resource as defined by the service.
            This attribute is read-only and is sent by the service. Any value that
            is specified for this attribute in the JSON POST or PUT request payload
            is ignored.
    AuthenticateUserV2:
      required:
      - password
      - schemas
      - userName
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that are used to
            indicate the namespaces of the SCIM schemas that define the attributes
            in the current JSON structure. The schemas "urn:ietf:params:scim:schemas:ibm:core:2.0:AuthenticateUser"
            and "urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification" are
            valid.  The AuthenticateUser schema is required.
          items:
            type: string
        userName:
          type: string
          description: The user's name.
        password:
          type: string
          description: The user's password.If the password contains extended ASCII
            characters then you must add charset=utf-8 in the Content-Type header
            when making a REST API call.
        urn:ietf:params:scim:schemas:extension:ibm:2.0:Notification:
          "$ref": "#/components/schemas/Notifications"
    ValidUser:
      required:
      - addresses
      - emails
      - name
      - userName
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the resource as defined by the service.
            This attribute is read-only and is sent by the service. Any value that
            is specified for this attribute in the JSON POST or PUT request payload
            is ignored.
        externalId:
          type: string
          description: A unique identifier for the resource that is defined by the
            provisioning client. It identifies a resource between the provisioning
            client and the service provider. The client can use a filter to locate
            the resource with that identifier from the provisioning domain.
        userName:
          type: string
          description: The unique identifier for the user that is typically used by
            the user to directly authenticate to the service provider.
        title:
          type: string
          description: The user's title, such as "Vice President."
        name:
          "$ref": "#/components/schemas/Name"
        displayName:
          type: string
          description: The name of the user that is displayed to users. Each user
            returned may include a non-empty displayName value. Typically it is the
            full name of the user being described, for example, Babs Jensen or Ms.
            Barbara J Jensen. However, if that information is unavailable, a username
            or handle can be used, for example, bjensen. The value is be the primary
            textual label by which this user is normally displayed by the service
            provider when presenting information to users.
        preferredLanguage:
          type: string
          description: The language code identifying the preferred language of this
            identity, for example, en-us or fr-ca.
        active:
          type: boolean
          description: A Boolean value that indicates the user's administrative status.
            The definitive meaning of this attribute is determined by the service
            provider. For example, a value of true indicates that the user can, log
            in, while a value of false indicates that the user's account has been
            suspended. If not specified, the value defaults to true.
        emails:
          type: array
          description: A list of email addresses that are associated with the user.
            Only one is supported.
          items:
            "$ref": "#/components/schemas/EmailAddress"
        addresses:
          type: array
          description: A list of addresses that are associated with the user.
          items:
            "$ref": "#/components/schemas/Address"
        phoneNumbers:
          type: array
          description: A list of phone numbers that are associated with the user.
          items:
            "$ref": "#/components/schemas/PhoneNumber"
        urn:ietf:params:scim:schemas:extension:ibm:2.0:User:
          "$ref": "#/components/schemas/CICCustomUserResponse"
        urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:
          "$ref": "#/components/schemas/EnterpriseUser"
    ValidateUIDSResponse:
      required:
      - invalidUsers
      - schemas
      - validUsers
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure.  The schema "urn:ietf:params:scim:schemas:ibm:core:2.0:UsersValidatorResponse"
            is returned.
          items:
            type: string
        validUsers:
          type: array
          description: An array of valid users.
          items:
            "$ref": "#/components/schemas/ValidUser"
        invalidUsers:
          type: array
          description: An array of strings that contain the IDs of the invalid users.
          items:
            type: string
    ValidateUIDS:
      required:
      - ids
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure.  The schema URI must be "urn:ietf:params:scim:schemas:ibm:core:2.0:UsersValidator"
            as required by the SCIM specification.
          items:
            type: string
        ids:
          type: array
          description: An array of strings that contain the user IDs that are validated.
          items:
            type: string
    ExternalErrorMessage1:
      required:
      - schemas
      - status
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure.  The schema "urn:ietf:params:scim:api:messages:2.0:Error"
            is the URI as required by the SCIM specification.
          items:
            type: string
        status:
          type: string
          description: The HTTP status code expressed as a JSON string.
        detail:
          type: string
          description: A detailed human-readable message.
    CSVImportError1:
      required:
      - failureReason
      - id
      - statusCode
      type: object
      properties:
        id:
          type: string
          description: The error that occurred while importing from a CSV file
        statusCode:
          type: string
          description: The status code for the error
        failureReason:
          type: string
          description: The detailed failure reason for the error
    CSVImportJob1:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier for the user import request.
    CSVImportRecords1:
      type: object
      properties:
        jobs:
          type: array
          description: A list of CSV import requests.
          items:
            "$ref": "#/components/schemas/CSVImportRecord1"
    PasswordPolicyLabel1:
      required:
      - key
      - ordinal
      - policyText
      type: object
      properties:
        key:
          type: string
          description: The internal key that is associated with this label.
        ordinal:
          type: integer
          description: The order in which labels are displayed when more than one
            is returned.
          format: int32
        policyText:
          type: string
          description: The text for this policy label.
    CSVImportRecord1:
      required:
      - state
      - tenant
      - tenantUUID
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the import request
        description:
          type: string
          description: A description for the import request
        tenant:
          type: string
          description: The tenant for the import request
        tenantUUID:
          type: string
          description: The tenant UUID for the import request
        state:
          type: string
          description: The state of the import request
          enum:
          - CANCELLED
          - COMPLETED
          - RUNNING
          - ABANDONED
        stats:
          "$ref": "#/components/schemas/CSVImportStats1"
    PasswordPolicyResponseV31:
      required:
      - id
      - passwordSecurity
      - passwordStrength
      type: object
      properties:
        id:
          type: string
          description: The unique id of this password policy.
        passwordStrength:
          "$ref": "#/components/schemas/PasswordStrengthV31"
        passwordSecurity:
          "$ref": "#/components/schemas/PasswordSecurityV31"
        name:
          type: string
        description:
          type: string
        predefined:
          type: boolean
    PasswordSecurityV31:
      type: object
      properties:
        pwdMinAge:
          type: integer
          description: Specifies the number of seconds before a password can be modified
            again.  Can't be larger than pwdMaxAge.
          format: int32
        pwdExpireWarning:
          type: integer
          description: Specifies the maximum number of seconds before a password expires
            that an expiration warning message is returned to an authenticating user.
          format: int32
        pwdInHistory:
          type: integer
          description: Specifies the number of passwords that are stored in the pwdHistory
            attribute.
          format: int32
        pwdLockout:
          type: boolean
          description: Indicates whether a password can be used to authenticate after
            a specified number of consecutive failed bind attempts. If the attribute
            is not provided, the behavior defaults to false.
        pwdLockoutDuration:
          type: integer
          description: Specifies the number of seconds that the password cannot be
            used to authenticate due to the specified 'pwdMaxFailure' failed bind
            attempts.
          format: int32
        pwdMaxAge:
          type: integer
          description: Specifies the number of seconds after which a password will
            expire (0 means password does not expire)Must be greater than or equal
            to pwdMinAge.
          format: int32
        pwdMaxFailure:
          type: integer
          format: int32
    PasswordStrengthV31:
      type: object
      properties:
        pwdMinLength:
          type: integer
          description: Specifies the minimum length for the password string. The server
            checks the minimum length depending upon the value of the pwdCheckSyntax
            attribute.Must be greater than or equal to the sum of 'passwordMinAlphaChars'
            and 'passwordMinOtherChars'
          format: int32
        passwordMaxConsecutiveRepeatedChars:
          type: integer
          description: Specifies the maximum successive repetitions of a given character
            in the password.
          format: int32
        passwordMaxRepeatedChars:
          type: integer
          description: Specifies the maximum number of times a given character can
            be used in a password. If the server is unable to check the actual password
            characters, then the server will continue processing depending on the
            value of the pwdCheckSyntax attribute.
          format: int32
        passwordMinAlphaChars:
          type: integer
          description: Specifies the minimum number of alphabetic characters that
            the password string must have. If the server is unable to check the number
            of alphabetic characters, then the server continues processing depending
            on the value of the pwdCheckSyntax attribute.
          format: int32
        passwordMinDiffChars:
          type: integer
          description: Specifies the minimum number of characters in the new password
            that must be different from the characters in the old password, and any
            passwords stored in the pwdHistory. If the password has been one-way encrypted
            the server is unable to check actual password characters, then the server
            will continue processing depending on the value of the pwdCheckSyntax
            attribute.
          format: int32
        passwordMinOtherChars:
          type: integer
          description: Specifies the minimum number of numeric and special characters
            that the password string must have. If the server is unable to check the
            number of other characters, then the server continues processing depending
            on the value of the pwdCheckSyntax attribute.
          format: int32
        passwordMinLowerCaseChars:
          type: integer
          description: Specifies the minimum number of lower case alphabetic characters
            that the password string must have.
          format: int32
        passwordMinUpperCaseChars:
          type: integer
          description: Specifies the minimum number of upper case alphabetic characters
            that the password string must have.
          format: int32
        passwordMinNumberChars:
          type: integer
          description: Specifies the minimum number of numeric characters that the
            password string must have.
          format: int32
        passwordMinSpecialChars:
          type: integer
          description: Specifies the minimum number of special characters that the
            password string must have.
          format: int32
    CSVImportSCIMNames1:
      type: object
      properties:
        headerNames:
          type: array
          description: List of header names allowed as CSV file headers
          items:
            "$ref": "#/components/schemas/CSVImportHeader1"
    CSVImportStats1:
      required:
      - errorsCount
      - processedCount
      - startTime
      - totalCount
      - unprocessedCount
      type: object
      properties:
        startTime:
          type: string
          description: The time that the import request started
        endTime:
          type: string
          description: The time that the import request was completed or cancelled
        totalCount:
          type: integer
          description: The total number of CSV entries in the CSV file
          format: int32
        processedCount:
          type: integer
          description: The total number of CSV entries that were processed
          format: int32
        errorsCount:
          type: integer
          description: The total number of errors that occurred during the import
            request
          format: int32
        unprocessedCount:
          type: integer
          description: The total number of CSV entries that were not processed
          format: int32
        errors:
          type: array
          description: The list of errors that occurred during the CSV import request
          items:
            "$ref": "#/components/schemas/CSVImportError1"
        unprocessed:
          type: array
          description: The list of unprocessed names that occurred during the CSV
            import request
          items:
            type: string
        lastUpdateTime:
          type: integer
          description: The last time we updated statistics for a job
          format: int64
        minutesToWait:
          type: integer
          description: The number of minutes before we write out stats
          format: int32
    PasswordPolicyLabelsResponse31:
      required:
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure. The schemas "urn:ietf:params:scim:schemas:ibm:core:3.0:policy:PasswordLabels"
            is returned.
          items:
            type: string
        labels:
          type: array
          items:
            "$ref": "#/components/schemas/PasswordPolicyLabel1"
    CSVImportHeader1:
      required:
      - dataType
      - name
      - required
      type: object
      properties:
        name:
          type: string
          description: The name of the header.
        dataType:
          type: string
          description: The data type of the header value.
        required:
          type: boolean
          description: The header is required.
    PasswordPolicyValidatePasswordRequest1:
      required:
      - password
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure.  The schema "urn:ietf:params:scim:schemas:ibm:core:3.0:policy:Password"is
            returned.
          items:
            type: string
        password:
          type: string
          description: The password to validate
    BulkResponse_0:
      required:
      - Operations
      - schemas
      type: object
      properties:
        schemas:
          type: array
          description: An array of strings that contain the URIs that are used to
            indicate the namespaces of the SCIM schemas that define the attributes
            in the current JSON structure.  The schema "urn:ietf:params:scim:api:messages:2.0:BulkResponse"
            is the URI as required by the SCIM specification.
          items:
            type: string
        Operations:
          type: array
          description: The response for each operation.
          items:
            "$ref": "#/components/schemas/OperationResponse"
    PatchOperation_0:
      required:
      - op
      - path
      type: object
      properties:
        op:
          type: string
          description: The operation to be performed.
          example: add
          enum:
          - add
          - remove
          - replace
        path:
          type: string
          description: 'The string that contains an attribute path that describes
            the target of the operation.The "path" attribute is required for all operations.Examples
            of valid "path" specification formats include: <br> <br>     "path":"title"
            <br>     "path":"name.formatted" <br>     "path":"phoneNumbers[type eq
            \"work\"]" <br>     "path":"emails[type eq \"work\"].value" <br> <br>As
            shown, "section filters" (ex: [type eq \"work\"]) can be used to allow
            selection of specific values of multi-valued attributes. The supported
            filter operators include: <br> <br>     eq: The attribute and operation
            values must be identical for a match. <br>     ne: Matches if the attribute
            and operation values are not identical. <br>     co: The entire operation
            value must be a substring of the attribute value. <br>     sw: The entire
            operation value must be a substring of the attribute value, matching from
            the beginning. <br>     ew: The entire operation value must be a substring
            of the attribute value, matching from the end. <br>     pr: If the attribute
            value is present, there is a match. <br>     gt: If the attribute value
            is greater than the operation value, there is a match. <br>     ge: If
            the attribute value is greater than or equal to the operation value, there
            is a match. <br>     lt: If the attribute value is less than the operator
            value, there is a match. <br>     le: If the attribute value is less than
            or equal to the operator value, there is a match. <br>Only a single, simple
            filter can be specified.'
          example: title
        value:
          type: string
          description: 'The attribute content used for the operation. The "value"
            attribute is required for the "add" and "replace" operations. The "value"
            attribute is allowed with "remove" operations only when the "path" identifies  a
            single object (specified by a selection filter), and the attribute path
            identifies an array attribute.  Currently, this usage is for removing
            values from a custom attribute''s values array only. <br> <br> The following
            example shows a patch operation removing a single value from "customAttributeNameA"  and
            multiple values from "customAttributeNameB": <br>  <table> <tr><td> {  "schemas":["urn:ietf:params:scim:api:messages:2.0:PatchOp"],
            "Operations":  [    {      "op":"remove",      "path":"urn:ietf:params:scim:schemas:extension:ibm:2.0:User:customAttributes[name
            eq "customAttributeNameA"].values",      "value":"customAttributeValueToRemoveA1"    },    {      "op":"remove",      "path":"urn:ietf:params:scim:schemas:extension:ibm:2.0:User:customAttributes[name
            eq "customAttributeNameB"].values",      "value":          [             "customAttributeValueToRemoveB1",             "customAttributeValueToRemoveB2"          ]    }  ]}</td></tr></table>'
          example: Vice President
    Component_0:
      required:
      - details
      - name
      - status
      type: object
      properties:
        name:
          type: string
          description: The name of the component that is being checked.
          example: LDAP connectivity
        status:
          type: string
          description: The status result of the health check.
          example: good
        details:
          type: string
          description: A message about what was checked.
          example: The connection to LDAP is successful.
          enum:
          - good
          - bad
          - marginal
    ValueConstraint_0:
      type: object
      properties:
        format:
          type: string
          description: Indicates that the attribute value is an "email" address.  A
            format of "email" is required to use the "allowedEmailDomains" or the
            "blockedEmailDomains" constraint types.
          enum:
          - email
        type:
          type: string
          description: The type of constraint to apply to the attribute's value.
          enum:
          - regex
          - allowedValues
          - noValue
          - allowedEmailDomains
          - blockedEmailDomains
          - rule
        value:
          type: string
          description: A value that depends on the type.  If the type is "regex",
            then the value must be a valid regular expression string.  If the type
            is "allowedValues", then the value is an array of strings.  If the type
            is "noValue", then the value is empty.  If the type is "allowedEmailDomains"
            or "blockedEmailDomains", the value must be a list of domains.  For example
            "value":{"domains":["mailinator[0-9]?.com", "zzz.com"]} where each domain
            can be a regular expression string. If the type is "rule", then the value
            must be a valid CEL rule.
    SchemaAttribute_0:
      required:
      - description
      - displayName
      - name
      - schemas
      - scimName
      - type
      type: object
      properties:
        schemas:
          type: array
          description: "An array of strings that contains the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes present in the\ncurrent
            JSON structure.\n  The schema URI must be \"urn:ietf:params:scim:schemas:ibm:core:2.0:SchemaAttribute\"
            as required by the SCIM specification. \n"
          items:
            type: string
        name:
          type: string
          description: "The schema attribute name. \n"
          enum:
          - customAttribute1
          - customAttribute2
          - customAttribute3
          - customAttribute4
          - customAttribute5
          - customAttribute6
          - customAttribute7
          - customAttribute8
          - customAttribute9
          - customAttribute10
          - customAttribute11
          - customAttribute12
          - customAttribute13
          - customAttribute14
          - customAttribute15
          - customAttribute16
          - customAttribute17
          - customAttribute18
          - customAttribute19
          - customAttribute20
          - customAttribute21
          - customAttribute22
          - customAttribute23
          - customAttribute24
          - customAttribute25
          - customAttribute26
          - customAttribute27
          - customAttribute28
          - customAttribute29
          - customAttribute30
          - customAttribute31
          - customAttribute32
          - customAttribute33
          - customAttribute34
          - customAttribute35
          - customAttribute36
          - customAttribute37
          - customAttribute38
          - customAttribute39
          - customAttribute40
          - customAttribute41
          - customAttribute42
          - customAttribute43
          - customAttribute44
          - customAttribute45
          - customAttribute46
          - customAttribute47
          - customAttribute48
          - customAttribute49
          - customAttribute50
          - customAttribute51
          - customAttribute52
          - customAttribute53
          - customAttribute54
          - customAttribute55
          - customAttribute56
          - customAttribute57
          - customAttribute58
          - customAttribute59
          - customAttribute60
          - customAttribute61
          - customAttribute62
          - customAttribute63
          - customAttribute64
          - customAttribute65
          - customAttribute66
          - customAttribute67
          - customAttribute68
          - customAttribute69
          - customAttribute70
          - customAttribute71
          - customAttribute72
          - customAttribute73
          - customAttribute74
          - customAttribute75
          - customAttribute76
          - customAttribute77
          - customAttribute78
          - customAttribute79
          - customAttribute80
          - customAttribute81
          - customAttribute82
          - customAttribute83
          - customAttribute84
          - customAttribute85
          - customAttribute86
          - customAttribute87
          - customAttribute88
          - customAttribute89
          - customAttribute90
          - customAttribute91
          - customAttribute92
          - customAttribute93
          - customAttribute94
          - customAttribute95
          - customAttribute96
          - customAttribute97
          - customAttribute98
          - customAttribute99
          - customAttribute100
          - customAttribute101
          - customAttribute102
          - customAttribute103
          - customAttribute104
          - customAttribute105
          - customAttribute106
          - customAttribute107
          - customAttribute108
          - customAttribute109
          - customAttribute110
          - customAttribute111
          - customAttribute112
          - customAttribute113
          - customAttribute114
          - customAttribute115
          - customAttribute116
          - customAttribute117
          - customAttribute118
          - customAttribute119
          - customAttribute120
          - customAttribute121
          - customAttribute122
          - customAttribute123
          - customAttribute124
          - customAttribute125
          - customAttribute126
          - customAttribute127
          - customAttribute128
          - customAttribute129
          - customAttribute130
          - customAttribute131
          - customAttribute132
          - customAttribute133
          - customAttribute134
          - customAttribute135
          - customAttribute136
          - customAttribute137
          - customAttribute138
          - customAttribute139
          - customAttribute140
          - customAttribute141
          - customAttribute142
          - customAttribute143
          - customAttribute144
          - customAttribute145
          - customAttribute146
          - customAttribute147
          - customAttribute148
          - customAttribute149
          - customAttribute150
          - hashedCustomAttribute1
          - hashedCustomAttribute2
          - hashedCustomAttribute3
          - hashedCustomAttribute4
          - hashedCustomAttribute5
          - hashedCustomAttribute6
          - hashedCustomAttribute7
          - hashedCustomAttribute8
          - hashedCustomAttribute9
          - hashedCustomAttribute10
        description:
          type: string
          description: "The description for the schema attribute. \n"
        displayName:
          type: string
          description: 'The display name for a custom attribute.  Its used to show
            the attribute name in the email that is sent to the end user when the
            attribute value changes.

            '
        type:
          type: string
          description: "The data type for the schema attribute.  For a custom attribute
            the allowed type is \"string\". \n"
          enum:
          - string
        scimName:
          type: string
          description: 'The unqualified SCIM name that is associated with the schema
            attribute.  For a custom attribute, the SCIM name must be unique and use
            the alphanumeric character set.

            '
        attributeName:
          type: string
          description: "The attribute name that is associated with the attribute source.
            \ The attribute name must be unique and use the alphanumeric character
            set and underscore.  The attribute name defaults to the SCIM name if not
            specified. \n"
        multiValue:
          type: boolean
          description: "A flag to indicate this schema attribute supports multiple
            values.  Defaults to false.  The flag is set to false for hashed custom
            attributes which support a single value. \n"
        readOnly:
          type: boolean
          description: "A flag to indicate this schema attribute is read only.   Defaults
            to false.  Any value that is specified for a user in a read only attribute
            is ignored, except for custom attributes where it can be set on a POST.
            \ Values specified in a PUT or PATCH request payload for read only attributes
            are ignored. \n"
    innerResult:
      type: object
      properties:
        approved:
          type: boolean
          description: True or false based on rule evaluation and consent.
        reason:
          type: object
          $ref: '#/components/schemas/VerifyError'
        trace:
          title: Trace
          type: object
          properties:
            rule:
              title: Rule
              type: object
              properties:
                id:
                  type: string
                  description: Id of rule that has a decision. In case of no rule
                    matched, null will returned
                decision:
                  type: string
                  description: Decision returned by the rule evaluation,  ALLOW /
                    DENY / ASSENT_IMPLICIT / ASSENT_EXPLICIT, default is ASSENT_EXPLICIT
                reason:
                  type: string
                  description: Reason associated with a rule.
            consent:
              title: Consent
              type: object
              properties:
                id:
                  type: string
                  description: Id of consent that has a decision. In case of no consent
                    matched, null will returned
                state:
                  type: integer
                  description: "state of consent that has a decision : \n* 1 - Consent
                    allow,\n* 2 - Consent deny,\n* 3 - Opt in,\n* 4 - Opt out,\n*
                    5 - Transparency"
                purposeVersion:
                  type: integer
                  description: Version of purpose that the record was given to
        attributeId:
          type: string
          description: Reference to the attributeId to which the result corresponds.
            If the purpose has attributes, but the incoming request is not specific
            to an attribute. The result will be provided for every attribute in the
            purpose.
    DUAResult:
      title: Data Usage Approval result
      type: object
      properties:
        purposeId:
          type: string
          description: Reference to the purposeId for which DUA was requested.
        accessTypeId:
          type: string
          description: Reference to the accessTypeId for which DUA was requested.
            If not provided the default accessTypeId is used.
        attributeId:
          type: string
          description: Reference to the attributeId for which DUA was requested.
        attributeValue:
          type: string
          description: Reference to the attributeValue for which DUA was requested.
        result:
          type: array
          description: Reference to the result array.
          items:
            "$ref": "#/components/schemas/innerResult"
    DUAResultArray:
      type: array
      items:
        "$ref": "#/components/schemas/DUAResult"
    InitiatePushNotification:
      required:
      - message
      - send
      type: object
      properties:
        message:
          type: string
          description: The context message sent in the push notification. This message
            should not contain any sensitve information. This message is displayed
            as the notification message when it arrives at the device
          example: You have a pending authentication challenge
        title:
          type: string
          description: The title message sent in the push notification. This message
            should not contain any sensitve information. This message is displayed
            as the notification title when it arrives at the device
          example: IBM Verify
        send:
          type: boolean
          description: If false, a push notification will not be sent to the registered
            authenticator
          example: true
        useDevCreds:
          type: boolean
          description: If true, the push notification sent will use devevelopment
            credentials
          example: true
        sound:
          type: string
          description: The sound the device will make when the push notification arrives
          example: default
      description: The push notification parameters.
    AuthenticationMethod:
      required:
      - id
      - methodType
      - subType
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the authentication method enrollment
          example: f867dceb-a360-44f4-883f-70723272d27f
        methodType:
          type: string
          description: The type of authentication method
          example: signature
        subType:
          type: string
          description: The specific sub type of the authentication method. Support
            values
          example: fingerprint
          enum:
          - userPresence
          - fingerprint
          - face
        additionalData:
          type: array
          description: Additional data associated with the authentication method enrollment
            to be included with authentication challenges
          items:
            "$ref": "#/components/schemas/NameValuePair"
      description: The JSON representation of authentication methods for the verification
        transaction.
    CreateTotpEnrollmentResponse_2.0:
      required:
      - attributes
      - created
      - enabled
      - id
      - type
      - updated
      - userId
      - validated
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the enrollment
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        userId:
          type: string
          description: The unique identifier of the associated user
          readOnly: true
          example: 50CP15KFD3
        type:
          type: string
          description: The type of authentication factor enrollment
          readOnly: true
          example: totp
        created:
          type: string
          description: The creation time of the enrollment
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The time the enrollment was last updated
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        attempted:
          type: string
          description: The time the enrollment was last used for verification
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        enabled:
          type: boolean
          description: The enabled state of the enrollment to be used in runtime flows
          example: true
        validated:
          type: boolean
          description: The validation state of the enrollment
          readOnly: true
          example: true
        attributes:
          "$ref": "#/components/schemas/CreateTotpEnrollmentAttributes_2.0"
      description: A time-based one-time password enrollment.
    VoiceotpVerification_2.0:
      required:
      - attempts
      - correlation
      - created
      - expiry
      - id
      - phoneNumber
      - retries
      - state
      - type
      - updated
      - userId
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the verification
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        userId:
          type: string
          description: The unique identifier of the associated user
          readOnly: true
          example: 50CP15KFD3
        type:
          type: string
          description: The type of authentication factor enrollment
          readOnly: true
          example: voiceotp
        created:
          type: string
          description: The time when the verification was created
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The time when the verification was last updated
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        expiry:
          type: string
          description: The time when the verification expires
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        state:
          type: string
          description: The current state of the verification
          readOnly: true
          example: PENDING
          enum:
          - PENDING
          - TIMEOUT
          - CANCELED
          - FAILED
          - SUCCESS
        updatedBy:
          type: string
          description: The identifier of the user that last updated the verification
          readOnly: true
          example: 50CP15KFD3
        correlation:
          type: string
          description: A value to be associated with the verification. It will be
            prefixed to the one-time password in the phone call to be sent.
          readOnly: true
          example: '4567'
        phoneNumber:
          type: string
          description: The phone number to be used to deliver one-time password values
          readOnly: true
          example: "+15345678911"
        attempts:
          type: integer
          description: The number of attempts that have been made against the verification
          format: int32
          readOnly: true
          example: 0
        retries:
          type: integer
          description: The maximum number of retry attempts before the verification
            is marked as failed
          format: int32
          readOnly: true
          example: 4
      description: A voice one-time password verification.
    CreateOtpVerification_2.0:
      type: object
      properties:
        correlation:
          type: string
          description: A value to be associated with the verification.
          example: '4567'
        useEmailotpConfig:
          type: boolean
        useSmsotpConfig:
          type: boolean
      description: The creation data for a one-time password verification.
    UserAction:
      required:
      - id
      - userAction
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the authentication method enrollment
          example: f867dceb-a360-44f4-883f-70723272d27f
        userAction:
          type: string
          description: The user wishes to complete the transaction with one of the
            following state changes:<br> CANCELED - The transaction has been cancelled
            by the end user or administrator,<br> USER_DENIED - The user has denied
            or rejected the transaction using the authenticator,<br> USER_FRAUDULENT
            - The user has denied the transaction using the authenticator and marked
            it as fraudulent,<br> BIOMETRY_FAILED - The user attempted to verify the
            transaction but biometry authentication failed,<br> VERIFY_ATTEMPT - The
            user wishes to attempt to verify the transaction. The request MUST also
            include a value for 'signedData'.<br>Support values
          example: VERIFY_ATTEMPT
          enum:
          - CANCELED
          - USER_DENIED
          - USER_FRAUDULENT
          - BIOMETRY_FAILED
          - VERIFY_ATTEMPT
        signedData:
          type: string
          description: The base64 encoded value of the data as a result of signing
            the 'transactionData' with the private key created for this enrollment.
            This is required when 'userAction' is VERIFY_ATTEMPT
          example: 563r324F3214==
      description: The JSON representation of the user action in response to a verification
        transaction.
    PasswordReset:
      required:
      - username
      type: object
      properties:
        username:
          type: string
          description: The username to reset password for
          example: jessica
        newPassword:
          type: string
          description: The new password to update to
          example: Passw0rd1
    AttestationOptionsRequest_2.0:
      type: object
      properties:
        userId:
          type: string
          description: The identifier of the end user that is performing the attestation
            ceremony. If it is not provided, the context that was used for authorization
            is used
          example: 00010YE
        displayName:
          type: string
          description: The display name of the end user. If it is not provided, the
            value is retrieved from the user's profile
          example: Jessica
        authenticatorSelection:
          "$ref": "#/components/schemas/AuthenticatorSelection_2.0"
        attestation:
          type: string
          description: The level of attestation that the authenticatior is expected
            to perform
          example: none
        extensions:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Additional parameters requesting additional processing by the
            client and authenticator
      description: The options that are presented when starting a FIDO 2.0 registration.
    GrantAuthenticatorResponse:
      required:
      - accessToken
      - expiresIn
      - id
      - refreshToken
      - version
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the registration
          readOnly: true
          example: 7b676daa-8725-472d-a7f2-88f05c0b798b
        accessToken:
          type: string
          description: The access token value
          readOnly: true
          example: 2YotnFZFEjr1zCsicMWpAA
        expiresIn:
          type: integer
          description: The valid lifetime of the access token
          format: int32
          readOnly: true
          example: 3600
        refreshToken:
          type: string
          description: The refresh token which may used to obtain a new access token
          readOnly: true
          example: tGzv3JOkF0XG5Qx2TlKWIA
        version:
          "$ref": "#/components/schemas/InterfaceVersion"
        metadata:
          "$ref": "#/components/schemas/AuthenticatorMetadata"
      description: The JSON representation of the response data of a registered authenticator
        instance.
    AssertionResultRequestResponse:
      required:
      - authenticatorData
      - clientDataJSON
      - signature
      type: object
      properties:
        clientDataJSON:
          type: string
          description: The base64Url-encoded clientDataJson that was received from
            the WebAuthn client
          example: ey....
        signature:
          type: string
          description: The base64Url-encoded bytes of the signature of the challenge
            data that was produced by the authenticator
          example: VGhpcyBpcyBhIHNpZ25lZCBjaGFsbGVuZ2UK
        authenticatorData:
          type: string
          description: Information about the authentication that was produced by the
            authenticator and verified by the signature
        userHandle:
          type: string
          description: The opaque identifier for the user who owns this authenticator.
            It must be presented when a login without a username is being performed.
            It identifies the user to be logged in
    TotpConfiguration_2.0:
      required:
      - algorithm
      - digits
      - enabled
      - keyUri
      - oneTimeUse
      - period
      - periodSkew
      type: object
      properties:
        algorithm:
          type: string
          description: The algorithm that is used to generate the one-time password
          example: SHA1
          enum:
          - SHA1
          - SHA256
          - SHA512
        digits:
          maximum: 12
          minimum: 6
          type: integer
          description: The number of digits of the one-time password
          format: int32
          example: 6
        enabled:
          type: boolean
          description: The enabled state of time-based one-time password to be used
            in runtime flows
          example: true
        keyUri:
          type: string
          description: The URI format to use when providing secret keys
          example: otpauth://totp/IBM%20Security%20Verify:@USER_NAME@?secret=@SECRET_KEY@&issuer=IBM%20Security%20Verify&algorithm=@ALGORITHM@
        oneTimeUse:
          type: boolean
          description: Whether one-time password values can only be used once within
            the given period
          example: true
        period:
          maximum: 1800
          minimum: 1
          type: integer
          description: The number of seconds until the one-time password expires
          format: int32
          example: 30
        periodSkew:
          maximum: 5
          minimum: 0
          type: integer
          description: The period skew intervals to consider for synchronization delay
            between the server and client generating the one-time password. For example,
            a skew interval of 2 means a one-time password in up to two intervals
            in the past, or two in the future will be valid
          format: int32
          example: 1
        enrollments:
          maximum: 5
          minimum: 1
          type: integer
          description: The maximum number of enrollments a specific user may enroll
          format: int32
          example: 1
      description: The time-based one-time password configuration.
    DiscoverClients:
      required:
      - clients
      type: object
      properties:
        clients:
          type: array
          description: The list of available authenticator clients
          items:
            "$ref": "#/components/schemas/DiscoverableClient"
      description: A list of authenticator clients which is enabled for runtime flows.
    QuestionsConfigurations_2.0:
      required:
      - questions
      type: object
      properties:
        questions:
          type: array
          description: The list of knowledge questions configurations
          items:
            "$ref": "#/components/schemas/KnowledgeQuestionsConfiguration_2.0"
      description: The list of knowledge questions configurations.
    QuestionsLocale_2.0:
      required:
      - en
      type: object
      properties:
        en:
          type: string
          description: The locale-specific knowledge question text
          example: What is your mother's maiden name?
      description: A knowledge question's locale-specific question text.
    QuestionsEnrollmentsProfile_2.0:
      required:
      - maxAnswerLength
      - minAnswerLength
      - minRequiredAnswers
      - regexMatch
      - requireUniqueAnswers
      type: object
      properties:
        minRequiredAnswers:
          type: integer
          description: The minimum number of required enrolled answers
          format: int32
          example: 3
        requireUniqueAnswers:
          type: boolean
          description: Whether unique answers are required
          example: true
        minAnswerLength:
          type: integer
          description: The minimum answer length
          format: int32
          example: 1
        maxAnswerLength:
          type: integer
          description: The maximum answer length
          format: int32
          example: 128
        regexMatch:
          type: string
          description: Regex of permitted characters in an enrolled answer
          example: "^[a-zA-Z0-9_ ]+$"
      description: The enrollment specific configuration options for knowledge questions.
    RecaptchaReference:
      required:
      - created
      - id
      - location
      - name
      type: object
      properties:
        id:
          type: string
          description: The identifier of the reCAPTCHA reference
          readOnly: true
          example: b2aa663c-c935-4b9c-ab5e-c19b77ae18e5
        name:
          type: string
          description: The name of the reference
          readOnly: true
          example: User Registration
        location:
          type: string
          description: The location of the reference
          readOnly: true
          example: "/v2.0/flows/e0076f18-356b-43cd-8544-f9a93b8e795e"
        created:
          type: string
          description: The time when the reference was created
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
      description: A reCAPTCHA configuration reference.
    OtpConfiguration_2.0:
      required:
      - charset
      - enabled
      - expiry
      - length
      - retries
      type: object
      properties:
        charset:
          type: string
          description: The allowed alphanumeric character set for one-time password
            generation
          example: '0123456789'
        enabled:
          type: boolean
          description: The enabled state of one-time password to be used in runtime
            flows
          example: true
        expiry:
          maximum: 1800
          minimum: 1
          type: integer
          description: The number of seconds until the one-time password expires
          format: int32
          example: 300
        length:
          maximum: 20
          minimum: 1
          type: integer
          description: The length of the one-time password
          format: int32
          example: 6
        retries:
          maximum: 10
          minimum: 0
          type: integer
          description: The number of retry attempts before the verification is marked
            as failed
          format: int32
          example: 2
      description: The one-time password configuration.
    CreateRecaptchaConfiguration:
      required:
      - name
      - secretKey
      - siteKey
      - type
      type: object
      properties:
        name:
          type: string
          description: The name of the reCAPTCHA configuration
          example: reCAPTCHA
        secretKey:
          type: string
          description: The reCAPTCHA secret key
          example: 1uAENDAQPPA7ZUF-XR7jJNpoua7aTypI0QTCf4e3
        siteKey:
          type: string
          description: The reCAPTCHA site key
          example: 1uAENDAQPPA7ZUF-m3GQfGvIkkK5jAhIHbYDKbT7
        type:
          type: string
          description: The type of reCAPTCHA configuration
          example: v3
          enum:
          - v3
      description: The reCAPTCHA configuration.
    CreateFidoMetadata_2.0:
      required:
      - metadataStatement
      - name
      - type
      type: object
      properties:
        category:
          type: string
          description: The administrator-assigned category for the metadata statement
          example: Recommended
        name:
          type: string
          description: The friendly name of the metadata entry
          example: Generic Key v5
        metadataStatement:
          type: string
          description: The metadata statement. It is mutually exclusive with a certificate
        enabled:
          type: boolean
          description: Specifies whether this metadata entry is enabled. Disabled
            metadata is not used regardless of whether it is referenced by a relying
            party
          example: true
        type:
          type: string
          description: The type of the metadata statement
          enum:
          - FIDO2
          - YUBICO
      description: A FIDO metadata creation document.
    SmsotpEnrollmentAttributes_2.0:
      required:
      - phoneNumber
      type: object
      properties:
        phoneNumber:
          type: string
          description: The phone number to be used to deliver one-time password values
          example: "+15345678911"
      description: A SMS one-time password enrollment attributes.
    AssertionResultRequest_2.0:
      required:
      - id
      - rawId
      - response
      - type
      type: object
      properties:
        response:
          "$ref": "#/components/schemas/AssertionResultRequestResponse"
        id:
          type: string
          description: The credential identifier that is received from the WebAuthn
            client
          example: VGhpcyBpcyBhbiBJRAo=
        rawId:
          type: string
          description: The credential identifier that is received from the WebAuthn
            client
          example: VGhpcyBpcyBhbiBJRAo=
        type:
          type: string
          description: The credential type. It must be 'public-key' for FIDO
          example: public-key
        getClientExtensionResults:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: The results of processing client extensions requested by the
            Relying Party
        authenticatorAttachment:
          type: string
          description: The authenticator's attachment modality
          example: platform
    EmailotpTransient_2.0:
      required:
      - attempts
      - correlation
      - created
      - emailAddress
      - expiry
      - id
      - retries
      - state
      - type
      - updated
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the verification
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        type:
          type: string
          description: The type of authentication factor enrollment
          readOnly: true
          example: emailotp
        created:
          type: string
          description: The time when the verification was created
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The time when the verification was last updated
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        expiry:
          type: string
          description: The time when the verification expires
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        state:
          type: string
          description: The current state of the verification
          readOnly: true
          example: PENDING
          enum:
          - PENDING
          - TIMEOUT
          - CANCELED
          - FAILED
          - SUCCESS
        updatedBy:
          type: string
          description: The identifier of the user that last updated the verification
          readOnly: true
          example: 50CP15KFD3
        correlation:
          type: string
          description: A value to be associated with the verification. It will be
            prefixed to the one-time password in the email to be sent.
          readOnly: true
          example: '4567'
        emailAddress:
          type: string
          description: The email address to be used to deliver one-time password values
          readOnly: true
          example: jessica@mail.com
        attempts:
          type: integer
          description: The number of attempts that have been made against the verification
          format: int32
          readOnly: true
          example: 0
        retries:
          type: integer
          description: The maximum number of retry attempts before the verification
            is marked as failed
          format: int32
          readOnly: true
          example: 4
      description: A transient email one-time password verification.
    FidoRelyingPartyConfig_2.0:
      required:
      - allowedAttestationFormats
      - allowedAttestationTypes
      - enabled
      - id
      - metadataConfig
      - name
      - origins
      - rpId
      - webAuthn
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the relying party
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        rpId:
          type: string
          description: The FIDO relying party identifier
          readOnly: true
          example: fido.ice.ibm.com
        origins:
          uniqueItems: true
          type: array
          description: The origins that are considered valid under the relying party
            identifier
          items:
            type: string
        name:
          type: string
          description: The friendly name for the relying party
          example: Cloud Relying Party
        allowedAttestationFormats:
          type: array
          description: The attestation formats that are accepted by this relying party
          items:
            type: string
            enum:
            - PACKED
            - TPM
            - FIDO_U2F
            - ANDROID_SAFETYNET
            - ANDROID_KEY
            - NONE
            - APPLE
        allowedAttestationTypes:
          type: array
          description: The attestation types that are accepted by this relying party
          items:
            type: string
            enum:
            - BASIC
            - ATTCA
            - SELF
            - ANONCA
            - NONE
        metadataConfig:
          "$ref": "#/components/schemas/FidoRpMetadataConfig_2.0"
        attestationCredProtect:
          type: string
          description: The default credProtect option enforced for attestations
          example: userVerificationOptional
          enum:
          - none
          - userVerificationOptional
          - userVerificationOptionalWithCredentialIDList
          - userVerificationRequired
        pubKeyCredParams:
          type: array
          description: An ordered list of valid public key formats presented at registration
          items:
            "$ref": "#/components/schemas/PublicKeyCredParams"
        enabled:
          type: boolean
          description: Specifies whether this relying party is available for use at
            runtime
          example: true
        webAuthn:
          type: boolean
          description: Is this relying party enforcing strict WebAuthn
          example: true
      description: A configured FIDO relying party.
    VerifyQrVerification_2.0:
      required:
      - lsi
      type: object
      properties:
        lsi:
          type: string
          description: The login service index
          example: vu6Jak84Uhv1MkFFjglRB00rm
      description: A QR code login verification creation response.
    DiscoverableTotp_2.0:
      required:
      - enabled
      - enrollments
      - path
      type: object
      properties:
        path:
          type: string
          description: The endpoint path of the authentication factor
          example: "/v2.0/factors/totp"
        enabled:
          type: boolean
          description: The enabled state of the authentication factor
          example: true
        enrollments:
          type: integer
          description: The maximum number of enrollments a specific user may enroll
          format: int32
          example: 1
      description: The availability and runtime configuration of totp.
    EnrollmentsAndTransient_2.0:
      required:
      - enrollments
      - totalUniqueEnrollments
      - transient
      - userId
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier of the associated user
          readOnly: true
          example: 50CP15KFD3
        enrollments:
          type: array
          description: The list of authentication factor enrollments
          items:
            "$ref": "#/components/schemas/Enrollment_2.0"
        transient:
          type: array
          description: The list of transient factors
          items:
            "$ref": "#/components/schemas/TransientFactor_2.0"
        totalUniqueEnrollments:
          type: integer
          description: The number of unique authentication factors
          format: int32
          readOnly: true
          example: 2
      description: A users authentication factor enrollments and transient attributes.
    Metadata:
      required:
      - serviceName
      type: object
      properties:
        serviceName:
          type: string
          description: The name of the tenant service
          example: Cloud Bank
        customAttributes:
          type: object
          additionalProperties:
            type: string
          description: Custom defined attributes. Attribute keys and values must be
            of string type
      description: The configurable metadata for an authenticator client.
    UpdateQuestionsEnrollment_2.0:
      required:
      - attributes
      - created
      - enabled
      - id
      - references
      - type
      - updated
      - userId
      - validated
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the enrollment
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        userId:
          type: string
          description: The unique identifier of the associated user
          readOnly: true
          example: 50CP15KFD3
        type:
          type: string
          description: The type of authentication factor enrollment
          readOnly: true
          example: "<type>"
        created:
          type: string
          description: The creation time of the enrollment
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The time the enrollment was last updated
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        attempted:
          type: string
          description: The time the enrollment was last used for verification
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        enabled:
          type: boolean
          description: The enabled state of the enrollment to be used in runtime flows
          example: true
        validated:
          type: boolean
          description: The validation state of the enrollment
          readOnly: true
          example: true
        attributes:
          "$ref": "#/components/schemas/UpdateQuestionsEnrollmentAttributes_2.0"
        references:
          "$ref": "#/components/schemas/QuestionsEnrollmentIndvReferences_2.0"
      description: A knowledge questions enrollment.
    InitiateAuthenticatorResponse:
      required:
      - accountName
      - code
      - registrationUri
      - version
      type: object
      properties:
        version:
          "$ref": "#/components/schemas/InterfaceVersion"
        code:
          type: string
          description: The authorization code which can be used at the registration
            endpoint to complete the authenticator registration
          readOnly: true
          example: rNxkpy2TSdv3pFgVW9kq
        registrationUri:
          type: string
          description: The location of the registration endpoint
          readOnly: true
          example: https://tenant.ice.ibmcloud.com/v1.0/authenticators/registration
        accountName:
          type: string
          description: A user friendly name for the registration
          example: Savings Account
        openAppRegistrationUri:
          type: string
          description: The verifiable link to be consumed by a mobile app to invoke
            the registration without QR code
          readOnly: true
          example: https://idaas.ice.ibmcloud.com/registration?code=ABC123&...
        qrcode:
          type: string
          description: The base64 encoded representation the the QR Code. This attribute
            is included only when the 'qrcodeInResponse' query parameter is 'true’
          readOnly: true
          example: c2FtcGxlCg==
      description: The JSON representation of data useful to authenticators to enable
        registration and other data discovery.
    CreateQuestionsVerification_2.0:
      type: object
      description: The creation data of a knowledge question verification.
    KnowledgeQuestionsConfiguration_2.0:
      required:
      - enabled
      - enrollments
      - id
      - name
      - questions
      - verifications
      type: object
      properties:
        id:
          type: string
          description: The configuration identifier
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        name:
          type: string
          description: The friendly configuration name
          example: default
        enabled:
          type: boolean
          description: Specifies whether the configuration is enabled
          example: true
        enrollments:
          "$ref": "#/components/schemas/QuestionsEnrollmentsConfig_2.0"
        verifications:
          "$ref": "#/components/schemas/KnowledgeQuestionsVerificationsConfig_2.0"
        questions:
          type: array
          description: The questions that are configured for use in this profile
          items:
            "$ref": "#/components/schemas/QuestionsQuestion_2.0"
      description: The knowledge questions configuration options.
    QrVerification_2.0:
      required:
      - created
      - expiry
      - id
      - location
      - profileId
      - serviceName
      - state
      - tenant
      - type
      - updated
      - userId
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the verification
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        userId:
          type: string
          description: The unique identifier of the associated user
          readOnly: true
          example: 50CP15KFD3
        type:
          type: string
          description: The type of authentication factor enrollment
          readOnly: true
          example: qr
        created:
          type: string
          description: The time when the verification was created
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The time when the verification was last updated
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        expiry:
          type: string
          description: The time when the verification expires
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        state:
          type: string
          description: The current state of the verification
          readOnly: true
          example: PENDING
          enum:
          - PENDING
          - TIMEOUT
          - CANCELED
          - FAILED
          - SUCCESS
        updatedBy:
          type: string
          description: The identifier of the user that last updated the verification
          readOnly: true
          example: 50CP15KFD3
        location:
          type: string
          description: The URL for this verification
          readOnly: true
          example: "/v2.0/factors/qr/1e5fa156-3754-4265-8796-1a2f0a6f036f"
        profileId:
          type: string
          description: The authenticator profile identifier. Verifications will need
            to be completed using an authenticator registration associated with this
            profile
          readOnly: true
          example: ecb2bbbb-fd45-4ce9-957f-f18eaf65dfe8
        serviceName:
          type: string
          description: The service name associated with the authenticator profile
            metadata
          readOnly: true
          example: Cloud Security
        tenant:
          type: string
          description: The name of the tenant
          readOnly: true
          example: tenant.example.com
        assertion:
          type: string
          description: A JWT which serves as proof that this factor has been performed
          readOnly: true
          example: ey...
      description: A QR code login verification.
    PwdvaultEnrollmentResourceData:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
          description: The username associated with the resource
          example: john
        password:
          type: string
          description: The password associated with the resource
          example: "{jwe}sdfklj3e98"
        created:
          type: string
          description: The date on which the resource data was created.  Please note
            that this data is read-only and will be ignored for updates.
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The date on which the resource was last updated.  Please note
            that this data is read-only and will be ignored for updates.
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
      description: A password vault enrollment's resource data.
    TransactionData:
      required:
      - message
      - originIpAddress
      - originUserAgent
      type: object
      properties:
        message:
          type: string
          description: The context message describing specific or potentially sensitive
            information about the transaction. This message is not sent with the push
            notification, instead it is retrieved by the authenticator after the push
            notification has been received. It may be displayed by the authenticator
            on the transaction screen
          example: You have a pending authentication challenge
        originIpAddress:
          type: string
          description: The source IP address that is initiating transaction
          example: 192.168.222.222
        originUserAgent:
          type: string
          description: The user agent that is initiating transaction
          example: Mozilla Firefox 11
        additionalData:
          type: array
          description: Additional contextual attributes
          items:
            "$ref": "#/components/schemas/NameValuePair"
      description: The JSON representation of the transactional data to be signed.
    TotpEnrollments_2.0:
      required:
      - count
      - limit
      - page
      - total
      - totp
      type: object
      properties:
        totp:
          type: array
          description: The list of time-based one-time password enrollments
          items:
            "$ref": "#/components/schemas/TotpEnrollment_2.0"
        count:
          type: integer
          description: The total number of results that are returned per page
          format: int32
          example: 200
        limit:
          type: integer
          description: The total number of results that are returned per page
          format: int32
          example: 200
        page:
          type: integer
          description: The requested page, or the offset
          format: int32
          example: 1
        total:
          type: integer
          description: The number of results returned in the page
          format: int32
          example: 153
      description: The list of time-based one-time password enrollments.
    PwdvaultEnrollmentResource:
      required:
      - name
      - resource
      type: object
      properties:
        name:
          type: string
          description: The name of the resource
          example: resource_a
        resource:
          "$ref": "#/components/schemas/PwdvaultEnrollmentResourceData"
      description: A password vault enrollment's resource.
    ResolveRelyingPartyRequest:
      required:
      - origin
      type: object
      properties:
        origin:
          type: string
          description: The origin used to resolve the relying parties
          example: https://login.fido.example.com
    AttestationResultRequestResponse_2.0:
      required:
      - attestationObject
      - clientDataJSON
      type: object
      properties:
        clientDataJSON:
          type: string
          description: The base64Url-encoded clientDataJSON that is received from
            the WebAuthn client
          example: ey....
        attestationObject:
          type: string
          description: 'The base64Url-encoded attestationObject that is received from
            the WebAuthn client '
          example: o2....
    CreateTotpEnrollmentAttributes_2.0:
      required:
      - accountName
      - algorithm
      - digits
      - period
      - secret
      type: object
      properties:
        algorithm:
          type: string
          description: The hashing algorithm of the one-time password
          readOnly: true
          example: SHA1
        digits:
          type: integer
          description: The number of digits in the one-time password
          format: int32
          readOnly: true
          example: 6
        period:
          type: integer
          description: The time period for the one-time password
          format: int32
          readOnly: true
          example: 30
        accountName:
          type: string
          description: The account name that the one-time password is associated with
          readOnly: true
          example: Jessica
        secret:
          type: string
          description: The shared secret value to be used to seed the one-time password
            algorithm
          readOnly: true
          example: HCVUT426LRSLLP4M
        qrCode:
          type: string
          description: A base64 encoded representation of the QR code
          readOnly: true
          example: iVBORw0KGgoAAA==
      description: A time-based one-time password enrollments attributes.
    DiscoverableEmailotp_2.0:
      required:
      - allowlist
      - denylist
      - enabled
      - path
      type: object
      properties:
        path:
          type: string
          description: The endpoint path of the authentication factor
          example: "/v2.0/factors/emailotp"
        enabled:
          type: boolean
          description: The enabled state of the authentication factor
          example: true
        allowlist:
          type: array
          description: The list of email domains that are to be allowed. Supported
            entries can be defined as literal strings and/or regex patterns.
          items:
            type: string
        denylist:
          type: array
          description: The list of email domains that are to be denied. Supported
            entries can be defined as literal strings and/or regex patterns.
          items:
            type: string
      description: The availability and runtime configuration of emailotp.
    OtpVerification_2.0:
      required:
      - attempts
      - correlation
      - created
      - expiry
      - id
      - retries
      - state
      - type
      - updated
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the verification
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        type:
          type: string
          description: The type of authentication factor enrollment
          readOnly: true
          example: otp
        created:
          type: string
          description: The time when the verification was created
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The time when the verification was last updated
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        expiry:
          type: string
          description: The time when the verification expires
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        state:
          type: string
          description: The current state of the verification
          readOnly: true
          example: PENDING
          enum:
          - PENDING
          - TIMEOUT
          - CANCELED
          - FAILED
          - SUCCESS
        updatedBy:
          type: string
          description: The identifier of the user that last updated the verification
          readOnly: true
          example: 50CP15KFD3
        correlation:
          type: string
          description: A value to be associated with the verification
          readOnly: true
          example: '4567'
        attempts:
          type: integer
          description: The number of attempts that have been made against the verification
          format: int32
          readOnly: true
          example: 0
        retries:
          type: integer
          description: The maximum number of retry attempts before the verification
            is marked as failed
          format: int32
          readOnly: true
          example: 4
      description: A one-time password verification.
    VerifyVoiceotpVerification_2.0:
      required:
      - otp
      type: object
      properties:
        otp:
          type: string
          description: The one-time password value
          example: '123456'
      description: A voice one-time password verification attempt.
    DiscoveredRP_2.0:
      required:
      - assertionOptionsPath
      - assertionResultPath
      - attestationOptionsPath
      - attestationResultPath
      - displayName
      - id
      - origins
      - rpId
      type: object
      properties:
        id:
          type: string
          description: The issued relying party identifier
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        rpId:
          type: string
          description: The relying party FIDO2 identifier
          example: fido.example.com
        origins:
          uniqueItems: true
          type: array
          description: The origins that are considered valid under the relying party
            identifier
          items:
            type: string
        displayName:
          type: string
          description: The relying party friendly name
          example: My Relying Party
        attestationOptionsPath:
          type: string
          description: The registration initiation endpoint
          example: "/v2.0/factors/fido2/relyingparties/1e5fa156-3754-4265-8796-1a2f0a6f036f/attestation/options"
        attestationResultPath:
          type: string
          description: The registration completion endpoint
          example: "/v2.0/factors/fido2/relyingparties/1e5fa156-3754-4265-8796-1a2f0a6f036f/attestation/result"
        assertionOptionsPath:
          type: string
          description: The authentication initiation endpoint
          example: "/v2.0/factors/fido2/relyingparties/1e5fa156-3754-4265-8796-1a2f0a6f036f/assertion/options"
        assertionResultPath:
          type: string
          description: The authentication completion endpoint
          example: "/v2.0/factors/fido/relyingparties/1e5fa156-3754-4265-8796-1a2f0a6f036f/assertion/result"
      description: The details of a given relying party.
    Authenticators:
      required:
      - authenticators
      type: object
      properties:
        authenticators:
          type: array
          description: The list of authenticator registrations
          items:
            "$ref": "#/components/schemas/Authenticator"
      description: The list of authenticator registrations.
    QuestionAnswer_2.0:
      required:
      - questionKey
      type: object
      properties:
        questionKey:
          type: string
          description: The question identifier key
          readOnly: true
          example: mothersMaidenName
        answer:
          type: string
          description: The question answer
          example: smith
      description: A knowledge questions question.
    Discoverable_2.0:
      required:
      - enabled
      - path
      type: object
      properties:
        path:
          type: string
          description: The endpoint path of the authentication factor
          readOnly: true
          example: "/v2.0/factors/<type>"
        enabled:
          type: boolean
          description: The enabled state of the authentication factor
          example: true
      description: The availability of an authentication factor.
    VerifiableLinksDigitalAssetLinksConfiguration:
      type: object
      properties:
        relation:
          type: array
          description: A list of strings that defines the relation rules for how URLs
            are handled on this domain
          example: delegate_permission/common.handle_all_urls
          items:
            type: string
        target:
          "$ref": "#/components/schemas/VerifiableLinksDigitalAssetLinksTarget"
    AttestationOptionsResponse_2.0:
      required:
      - challenge
      - excludeCredentials
      - pubKeyCredParams
      - rp
      - timeout
      - user
      type: object
      properties:
        attestation:
          type: string
          description: The attestation requirements of this registration
          example: none
        authenticatorSelection:
          "$ref": "#/components/schemas/AuthenticatorSelection_2.0"
        pubKeyCredParams:
          type: array
          description: The valid public key formats in this attestation
          items:
            "$ref": "#/components/schemas/Fido2PublicKeyParams"
        excludeCredentials:
          type: array
          description: The credentials that must not be used for this registration
          items:
            "$ref": "#/components/schemas/FidoCredential_2.0"
        challenge:
          type: string
          description: The unique challenge that is used as part of this registration
            attempt
          example: Q29uZ3JhdHVsYXRpb25zIFlvdSBmb3VuZCBpdAo
        timeout:
          type: integer
          description: How long the WebAuthn client should wait for the user before
            timing out
          format: int64
          example: 30000
        user:
          "$ref": "#/components/schemas/FidoUser_2.0"
        rp:
          "$ref": "#/components/schemas/RelyingParty_2.0"
        extensions:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/JsonValue"
          description: Additional parameters requesting additional processing by the
            client and authenticator
      description: A set of attestation options.
    PwdvaultConfiguration:
      required:
      - enabled
      - publicKey
      - resources
      type: object
      properties:
        enabled:
          type: boolean
          description: The enabled state of the password vault
          example: true
        publicKey:
          "$ref": "#/components/schemas/PwdvaultPublicKey"
        resources:
          type: array
          description: The list of configured resources
          items:
            type: string
      description: The password vault configuration.
    AuthenticatorSelection_2.0:
      type: object
      properties:
        authenticatorAttachment:
          type: string
          description: The sort of authenticator attachment that is allowed
          example: cross-platform
        residentKey:
          type: string
          description: Specifies the extent to which the Relying Party desires to
            create a client-side discoverable credential
          example: preferred
          enum:
          - discouraged
          - preferred
          - required
        requireResidentKey:
          type: boolean
          description: Whether registration requires a resident key
        userVerification:
          type: string
          description: The extent to which the user must verify
          example: preferred
    VoiceotpConfiguration_2.0:
      required:
      - charset
      - enabled
      - expiry
      - length
      - retries
      type: object
      properties:
        charset:
          type: string
          description: The allowed alphanumeric character set for one-time password
            generation. Only uppercase letters are supported
          example: '0123456789'
        enabled:
          type: boolean
          description: The enabled state of voice one-time password to be used in
            runtime flows
          example: true
        expiry:
          maximum: 1800
          minimum: 1
          type: integer
          description: The number of seconds until the one-time password expires
          format: int32
          example: 300
        length:
          maximum: 20
          minimum: 1
          type: integer
          description: The length of the one-time password
          format: int32
          example: 6
        retries:
          maximum: 10
          minimum: 0
          type: integer
          description: The number of retry attempts before the verification is marked
            as failed
          format: int32
          example: 2
      description: The voice one-time password configuration.
    AttestationResultRequest_2.0:
      required:
      - id
      - nickname
      - rawId
      - response
      - type
      type: object
      properties:
        response:
          "$ref": "#/components/schemas/AttestationResultRequestResponse_2.0"
        id:
          type: string
          description: The credential identifier that is received from the WebAuthn
            client
          example: VGhpcyBpcyBhbiBJRAo=
        nickname:
          type: string
          description: The friendly name for the registration
          example: Jessica's FIDO key
        rawId:
          type: string
          description: The credential identifier that is received from the WebAuthn
            client
          example: VGhpcyBpcyBhbiBJRAo=
        type:
          type: string
          description: The credential type. It must be 'public-key' for FIDO
          example: public-key
        enabled:
          type: boolean
          description: The enabled state of the enrollment to be used in runtime flows
          example: true
        getTransports:
          type: array
          description: The transports supported by the authenticator
          items:
            type: string
        getClientExtensionResults:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: The results of processing client extensions requested by the
            Relying Party
        authenticatorAttachment:
          type: string
          description: The authenticator's attachment modality
          example: platform
    CreateFidoRelyingPartyConfig_2.0:
      required:
      - metadataConfig
      - name
      - origins
      - rpId
      type: object
      properties:
        rpId:
          type: string
          description: The FIDO relying party identifier
          example: fido.ice.ibm.com
        origins:
          uniqueItems: true
          type: array
          description: The origins that are considered valid under the relying party
            identifier
          items:
            type: string
        name:
          type: string
          description: The friendly name for the relying party
          example: Cloud Relying Party
        allowedAttestationFormats:
          type: array
          description: The attestation formats that are accepted by this relying party
          items:
            type: string
            enum:
            - PACKED
            - TPM
            - FIDO_U2F
            - ANDROID_SAFETYNET
            - ANDROID_KEY
            - NONE
            - APPLE
        allowedAttestationTypes:
          type: array
          description: The attestation types that are accepted by this relying party
          items:
            type: string
            enum:
            - BASIC
            - ATTCA
            - SELF
            - ANONCA
            - NONE
        metadataConfig:
          "$ref": "#/components/schemas/FidoRpMetadataConfig_2.0"
        pubKeyCredParams:
          type: array
          description: An ordered list of valid public key formats presented at registration
          items:
            "$ref": "#/components/schemas/PublicKeyCredParams"
        enabled:
          type: boolean
          description: Specifies whether this relying party is available for use at
            runtime
          example: true
        webAuthn:
          type: boolean
          description: Is this relying party enforcing strict WebAuthn
          example: true
        attestationCredProtect:
          type: string
          description: The default credProtect option enforced for attestations
          example: userVerificationOptional
          enum:
          - none
          - userVerificationOptional
          - userVerificationOptionalWithCredentialIDList
          - userVerificationRequired
      description: A configured FIDO relying party creation request.
    FidoRpMetadataConfig_2.0:
      required:
      - enforcement
      - includeAll
      - includedMetadata
      - includedMetadataServices
      type: object
      properties:
        enforcement:
          type: boolean
          description: Specifies whether matching and valid metadata is required when
            verifying attestations
          example: true
        includeAll:
          type: boolean
          description: Specifies whether all the available metadata is included when
            enumerating metadata for a match
          example: true
        includedMetadata:
          type: array
          description: A list of metadata identifiers to be included when looking
            for metadata. The attribute is ignored if all metadata is included
          items:
            type: string
        includedMetadataServices:
          type: array
          description: A list of metadata service identifiers to be included when
            looking for metadata. The attribute is ignored if all metadata is included
          items:
            type: string
      description: The metadata settings for a FIDO relying party.
    PwdvaultPublicKey:
      required:
      - id
      - key
      type: object
      properties:
        id:
          type: string
          description: The identifier for the public key
          example: mykey
        key:
          type: string
          description: The public key which is used to protect the passwords
          example: |-
            -----BEGIN PUBLIC KEY-----
            MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwFd794Bjt...
            -----END PUBLIC KEY-----
      description: The public key configuration for the password vault.
    Authenticator:
      required:
      - attributes
      - clientId
      - creationTime
      - enabled
      - id
      - owner
      - state
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the registration
          readOnly: true
          example: 7b676daa-8725-472d-a7f2-88f05c0b798b
        owner:
          type: string
          description: The unique identifier of the owner of the registration
          readOnly: true
          example: 50TPV1B8Q9
        creationTime:
          type: string
          description: The time at which this registration was created
          readOnly: true
          example: '2018-04-19T09:21:38.414Z'
        clientId:
          type: string
          description: The unique identifier of the authenticator client associated
            with the registration
          readOnly: true
          example: 64f20377-6041-47ec-a47f-d9bd0a5095e7
        enabled:
          type: boolean
          description: The enabled state of the registration to be used for runtime
            flows
          example: true
        state:
          type: string
          description: The overall state of the authenticator registration. After
            initial registration, the state will be ENROLLING. The ENROLLING state
            is the only state in which a registration may enroll in authentication
            methods. The value will change from ENROLLING to ACTIVE after the first
            registration refresh
          readOnly: true
          example: ACTIVE
        attributes:
          "$ref": "#/components/schemas/AuthenticatorAttributes"
      description: The JSON representation of an authenticator registration.
    SubType:
      required:
      - algorithm
      - enabled
      - supportedAlgorithms
      type: object
      properties:
        enabled:
          type: boolean
          description: The enabled state of the authentication method subtype to be
            used for runtime flows
          example: true
        algorithm:
          type: string
          description: The preferred cryptographic key generation algorithm
          example: RSASHA256
        supportedAlgorithms:
          type: array
          description: List of supported cryptographic key generation algorithms
          items:
            type: string
    EnrollSignatureMethodFailedResponse:
      required:
      - messageDescription
      - messageId
      - requestObject
      type: object
      properties:
        messageId:
          type: string
          description: The message key identifier.
          example: CSIBH1234X
        messageDescription:
          type: string
          description: Requester locale specific descriptive message.
          example: CSIBH1234X The access token included in the request is not valid.
        requestObject:
          "$ref": "#/components/schemas/EnrollSignatureMethod"
      description: The JSON representation of a failed signature enrollment.
    CreateEmailRecovery_2.0:
      required:
      - userId
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier of the associated user
          example: 50CP15KFD3
        baseVerificationUrl:
          type: string
          description: The base URL of the password reset URL that will be sent to
            the user in email. The recovery code will be appended to this URL in the
            email as a query parameter.
          example: https://tenant/authsvc/mtfim/sps/authsvc
        themeId:
          type: string
          description: The ID of the theme template to be applied to the email.
          example: covg2ivod6ml8xwl
      description: The creation data of email-based password recovery.
    FulfillVerification:
      required:
      - id
      - userAction
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the authentication method enrollment
          example: f867dceb-a360-44f4-883f-70723272d27f
        userAction:
          type: string
          description: The user wishes to complete the transaction with one of the
            following state changes:<br> CANCELED - The transaction has been cancelled
            by the end user or administrator,<br> USER_DENIED - The user has denied
            or rejected the transaction using the authenticator,<br> USER_FRAUDULENT
            - The user has denied the transaction using the authenticator and marked
            it as fraudulent,<br> BIOMETRY_FAILED - The user attempted to verify the
            transaction but biometry authentication failed,<br> VERIFY_ATTEMPT - The
            user wishes to attempt to verify the transaction. The request MUST also
            include a value for 'signedData'.<br>Support values
          example: VERIFY_ATTEMPT
          enum:
          - CANCELED
          - USER_DENIED
          - USER_FRAUDULENT
          - BIOMETRY_FAILED
          - VERIFY_ATTEMPT
        signedData:
          type: string
          description: The base64 encoded value of the data as a result of signing
            the 'transactionData' with the private key created for this enrollment.
            This is required when 'userAction' is VERIFY_ATTEMPT
          example: 563r324F3214==
      description: The JSON representation of a verification attempt.
    QuestionKey_2.0:
      required:
      - questionKey
      type: object
      properties:
        questionKey:
          type: string
          description: The question identifier key
          readOnly: true
          example: mothersMaidenName
      description: A knowledge question.
    PushNotification:
      required:
      - completionTime
      - message
      - pushToken
      - send
      - sendState
      - startTime
      type: object
      properties:
        message:
          type: string
          description: The context message sent in the push notification. This message
            should not contain any sensitve information. This message is displayed
            as the notification message when it arrives at the device
          example: You have a pending authentication challenge
        title:
          type: string
          description: The title message sent in the push notification. This message
            should not contain any sensitve information. This message is displayed
            as the notification title when it arrives at the device
          example: IBM Verify
        send:
          type: boolean
          description: If false, a push notification will not be sent to the registered
            authenticator
          example: true
        sendState:
          type: string
          description: The status of delivery of the push notification. Support values
          example: SENDING
          enum:
          - SENDING
          - SUCCESS
          - FAILED
          - DISABLED
        pushToken:
          type: string
          description: The push token used as the 'send to' device destination identifier
          example: 5fw75HqyXnivkpmb%3AudWNSI7s
        startTime:
          type: string
          description: The time at which the sending of the notification attempt commenced
          example: '2018-04-19T09:21:38.414Z'
        completionTime:
          type: string
          description: The time at which the sending of the notification attempt concluded
          example: '2018-04-19T09:21:38.414Z'
      description: The JSON representation of the push notifications attributes.
    AllEnrollments_2.0:
      required:
      - count
      - factors
      - limit
      - page
      - total
      type: object
      properties:
        factors:
          type: array
          description: The list of authentication factor enrollments
          items:
            "$ref": "#/components/schemas/Enrollment_2.0"
        count:
          type: integer
          description: The total number of results that are returned per page
          format: int32
          example: 200
        limit:
          type: integer
          description: The total number of results that are returned per page
          format: int32
          example: 200
        page:
          type: integer
          description: The requested page, or the offset
          format: int32
          example: 1
        total:
          type: integer
          description: The number of results returned in the page
          format: int32
          example: 153
      description: The list of authentication factor enrollments.
    QuestionsEnrollment_2.0:
      required:
      - attributes
      - created
      - enabled
      - id
      - references
      - type
      - updated
      - userId
      - validated
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the enrollment
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        userId:
          type: string
          description: The unique identifier of the associated user
          readOnly: true
          example: 50CP15KFD3
        type:
          type: string
          description: The type of authentication factor enrollment
          readOnly: true
          example: "<type>"
        created:
          type: string
          description: The creation time of the enrollment
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The time the enrollment was last updated
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        attempted:
          type: string
          description: The time the enrollment was last used for verification
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        enabled:
          type: boolean
          description: The enabled state of the enrollment to be used in runtime flows
          example: true
        validated:
          type: boolean
          description: The validation state of the enrollment
          readOnly: true
          example: true
        attributes:
          "$ref": "#/components/schemas/QuestionsEnrollmentAttributes_2.0"
        references:
          "$ref": "#/components/schemas/QuestionsEnrollmentIndvReferences_2.0"
      description: A knowledge questions enrollment.
    CreateVoiceotpTransient_2.0:
      required:
      - phoneNumber
      type: object
      properties:
        correlation:
          type: string
          description: A value to be associated with the verification. It will be
            prefixed to the one-time password in the phone call to be sent.
          example: '4567'
        phoneNumber:
          type: string
          description: The phone number to be used to deliver one-time password values
          example: "+15345678911"
      description: The creation data for a voice one-time password verification.
    KnowledgeQuestionsVerificationsConfig_2.0:
      required:
      - expiry
      - requiredAnswers
      type: object
      properties:
        expiry:
          maximum: 300
          minimum: 1
          type: integer
          description: The number of seconds until the verification expires
          format: int32
          example: 120
        requiredAnswers:
          minimum: 1
          type: integer
          description: The number of answers that are required
          format: int32
          example: 3
      description: The verification-specific configuration options for knowledge questions
    FidoAllMetadataServices_2.0:
      required:
      - mds
      type: object
      properties:
        mds:
          type: array
          description: The list of FIDO metadata service entries
          items:
            "$ref": "#/components/schemas/FidoMetadataService_2.0"
      description: The list of FIDO metadata service entries.
    IdentitySourceResponse:
      required:
      - id
      - location
      - name
      - type
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the identity source
          example: bd45bba8-a1d4-4de2-bc80-be2855589363
        name:
          type: string
          description: The name of the identity source
          example: My Identity Source
        type:
          type: string
          description: The type of the identity source. Supported values =
          example: maasconnect
          enum:
          - maasconnect
          - ibmldap
          - onpremldap
        location:
          type: string
          description: The URL of the identity source
          example: https://tenant.ice.ibmcloud.com/verify/v1.0/authnmethods/password/bd45bba8-a1d4-4de2-bc80-be2855589363
    MfaProvidersResult:
      required:
      - capability
      - created
      - id
      - status
      type: object
      properties:
        attributes:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: The associated enrollment attribute as a key-value pair
        capability:
          type: string
          description: The external MFA provider authentication capability
          readOnly: true
          example: duo:push
        id:
          type: string
          description: The external MFA provider enrollment identifier
          readOnly: true
          example: 59ccdb55-0103-4498-8dc6-3fda9deebe25
        transactionId:
          type: string
          description: The action transation identifier
          readOnly: true
          example: d24e3904-02aa-430b-b4fb-92cec8c643fd
        created:
          type: string
          description: The time when the action was created
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The time when the action was last updated
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        message:
          type: string
          description: The associated message from the external MFA provider
          readOnly: true
          example: " "
        status:
          type: string
          description: The current status of the action
          readOnly: true
          example: PENDING
          enum:
          - PENDING
          - TIMEOUT
          - CANCELED
          - FAILED
          - SUCCESS
        assertion:
          type: string
          description: A JWT which serves as proof that this factor has been performed
          readOnly: true
      description: The external MFA providers result.
    VerifiableLinksAppSiteAssociationApplinks:
      required:
      - details
      type: object
      properties:
        details:
          type: array
          description: The list of applications and the supported verifiable links
            for the domain.
          items:
            "$ref": "#/components/schemas/VerifiableLinksAppSiteAssociationDetails"
        defaults:
          "$ref": "#/components/schemas/VerifiableLinksAppSiteAssociationComponent"
        substitutionVariables:
          type: object
          properties: {}
          description: The default configuration that will manage verifiable links
            pattern matching.
    SmsotpTransient_2.0:
      required:
      - attempts
      - correlation
      - created
      - expiry
      - id
      - phoneNumber
      - retries
      - state
      - type
      - updated
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the verification
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        type:
          type: string
          description: The type of authentication factor enrollment
          readOnly: true
          example: smsotp
        created:
          type: string
          description: The time when the verification was created
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The time when the verification was last updated
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        expiry:
          type: string
          description: The time when the verification expires
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        state:
          type: string
          description: The current state of the verification
          readOnly: true
          example: PENDING
          enum:
          - PENDING
          - TIMEOUT
          - CANCELED
          - FAILED
          - SUCCESS
        updatedBy:
          type: string
          description: The identifier of the user that last updated the verification
          readOnly: true
          example: 50CP15KFD3
        correlation:
          type: string
          description: A value to be associated with the verification. It will be
            prefixed to the one-time password in the SMS to be sent.
          readOnly: true
          example: '4567'
        phoneNumber:
          type: string
          description: The phone number to be used to deliver one-time password values
          readOnly: true
          example: "+15345678911"
        attempts:
          type: integer
          description: The number of attempts that have been made against the verification
          format: int32
          readOnly: true
          example: 0
        retries:
          type: integer
          description: The maximum number of retry attempts before the verification
            is marked as failed
          format: int32
          readOnly: true
          example: 4
      description: A transient SMS one-time password verification.
    VerifyEmailRecovery_2.0:
      required:
      - code
      type: object
      properties:
        code:
          type: string
          description: The code that was provided when initiating the recovery flow.
          example: befb3cae91484c1dbd8aa8dd7d7bbc88
      description: A password recovery transaction verification attempt.
    QuestionsVerification_2.0:
      required:
      - created
      - expiry
      - id
      - questions
      - state
      - type
      - updated
      - userId
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the verification
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        userId:
          type: string
          description: The unique identifier of the associated user
          readOnly: true
          example: 50CP15KFD3
        type:
          type: string
          description: The type of authentication factor
          readOnly: true
          example: "<type>"
        created:
          type: string
          description: The time when the verification was created
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The time when the verification was last updated
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        expiry:
          type: string
          description: The time when the verification expires
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        state:
          type: string
          description: The current state of the verification
          readOnly: true
          example: PENDING
          enum:
          - PENDING
          - TIMEOUT
          - CANCELED
          - FAILED
          - SUCCESS
        updatedBy:
          type: string
          description: The identifier of the user that last updated the verification
          readOnly: true
          example: 50CP15KFD3
        questions:
          type: array
          description: The list of verification question challenges
          items:
            "$ref": "#/components/schemas/QuestionQuestion_2.0"
      description: A knowledge questions verification.
    GetSignatureMethodResponse:
      required:
      - attributes
      - creationTime
      - enabled
      - enrollmentUri
      - id
      - methodType
      - owner
      - subType
      - validated
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the enrollment
          readOnly: true
          example: f867dceb-a360-44f4-883f-70723272d27f
        owner:
          type: string
          description: The unique identifier of the owner of the enrollment
          readOnly: true
          example: 50TPV1B8Q9
        creationTime:
          type: string
          description: The time at which this enrollment was created
          readOnly: true
          example: '2018-04-19T09:21:38.414Z'
        enabled:
          type: boolean
          description: The enabled state of the enrollment to be used for runtime
            flows
          example: false
        enrollmentUri:
          type: string
          description: The location of the enrollment
          readOnly: true
          example: https://tenant.ice.ibmcloud.com/v1.0/authnmethods/signature/{id}
        methodType:
          type: string
          description: The type of authentication method
          readOnly: true
          example: signature
        subType:
          type: string
          description: The specific sub-type of the enrollment. Support values
          readOnly: true
          example: fingerprint
          enum:
          - userPresence
          - fingerprint
          - face
        attributes:
          "$ref": "#/components/schemas/SignatureAttributes"
        _embedded:
          "$ref": "#/components/schemas/Authenticator"
        validated:
          type: boolean
          description: The validated attribute of the signature factor enromment
          example: false
      description: A specific signature authentication method enrollment.
    AssertionOptionsResponse_2.0:
      required:
      - challenge
      - rpId
      - timeout
      type: object
      properties:
        rpId:
          type: string
          description: The relying party ID
          example: fido.verify.ibm.com
        timeout:
          type: integer
          description: The time for the client to wait for user interaction
          format: int64
          example: 30000
        challenge:
          type: string
          description: The unique challenge used as part of this authentication attempt
          example: Q29uZ3JhdHVsYXRpb25zIFlvdSBmb3VuZCBpdAo
        allowCredentials:
          type: array
          description: The credentials allowed to perform authentication. Can be empty
            when performing login without a username
          items:
            "$ref": "#/components/schemas/FidoCredential_2.0"
        userVerification:
          type: string
          description: The extent to which the user must verify
          example: preferred
        extensions:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/JsonValue"
          description: Additional parameters requesting additional processing by the
            client and authenticator
    InitiateVerification:
      required:
      - authenticationMethods
      - expiresIn
      - logic
      - pushNotification
      - transactionData
      type: object
      properties:
        transactionData:
          "$ref": "#/components/schemas/TransactionData"
        pushNotification:
          "$ref": "#/components/schemas/InitiatePushNotification"
        authenticationMethods:
          type: array
          description: The authentication methods allowed for the transaction
          items:
            "$ref": "#/components/schemas/InitiateAuthenticationMethod"
        logic:
          type: string
          description: The logical operator to apply to the list of authentication
            methods
          example: OR
        expiresIn:
          type: integer
          description: The length of time, in seconds, the transaction will be valid
          format: int32
          example: 120
      description: The JSON representation of the request data to initiate a verification
        transaction.
    DiscoverableFido2_2.0:
      required:
      - enabled
      - path
      - relyingParties
      type: object
      properties:
        path:
          type: string
          description: The endpoint path of the authentication factor
          example: "/v2.0/factors/fido2"
        enabled:
          type: boolean
          description: The enabled state of the authentication factor
          example: true
        relyingParties:
          type: array
          description: A collection of relying parties available for use
          items:
            "$ref": "#/components/schemas/DiscoveredRP_2.0"
      description: The availability of FIDO2.
    QrConfiguration_2.0:
      required:
      - dsi
      - enabled
      - expiry
      - lsi
      type: object
      properties:
        lsi:
          "$ref": "#/components/schemas/ServiceIndexOptions_2.0"
        dsi:
          "$ref": "#/components/schemas/ServiceIndexOptions_2.0"
        expiry:
          maximum: 1800
          minimum: 30
          type: integer
          description: The number of seconds until the code expires
          format: int32
          example: 120
        enabled:
          type: boolean
          description: The enabled state of QR code login to be used in runtime flows
          example: true
      description: The QR code login configuration options.
    VerifyEmailotpVerification_2.0:
      required:
      - otp
      type: object
      properties:
        otp:
          type: string
          description: The one-time password value
          example: '123456'
      description: A email one-time password verification attempt.
    SmsotpEnrollment_2.0:
      required:
      - attributes
      - created
      - enabled
      - id
      - type
      - updated
      - userId
      - validated
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the enrollment
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        userId:
          type: string
          description: The unique identifier of the associated user
          readOnly: true
          example: 50CP15KFD3
        type:
          type: string
          description: The type of authentication factor enrollment
          readOnly: true
          example: smsotp
        created:
          type: string
          description: The creation time of the enrollment
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The time the enrollment was last updated
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        attempted:
          type: string
          description: The time the enrollment was last used for verification
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        enabled:
          type: boolean
          description: The enabled state of the enrollment to be used in runtime flows
          example: true
        validated:
          type: boolean
          description: The validation state of the enrollment
          readOnly: true
          example: true
        attributes:
          "$ref": "#/components/schemas/SmsotpEnrollmentAttributes_2.0"
      description: A SMS one-time password enrollment.
    EmailotpConfiguration_2.0:
      required:
      - charset
      - enabled
      - expiry
      - length
      - retries
      type: object
      properties:
        charset:
          type: string
          description: The allowed alphanumeric character set for one-time password
            generation
          example: '0123456789'
        enabled:
          type: boolean
          description: The enabled state of email one-time password to be used in
            runtime flows
          example: true
        expiry:
          maximum: 1800
          minimum: 1
          type: integer
          description: The number of seconds until the one-time password expires
          format: int32
          example: 300
        length:
          maximum: 20
          minimum: 1
          type: integer
          description: The length of the one-time password
          format: int32
          example: 6
        retries:
          maximum: 10
          minimum: 0
          type: integer
          description: The number of retry attempts before the verification is marked
            as failed
          format: int32
          example: 2
        allowlist:
          type: array
          description: The list of email domains that are to be allowed. Supported
            entries can be defined as literal strings and/or regex patterns.
          items:
            type: string
        denylist:
          type: array
          description: The list of email domains that are to be denied. Supported
            entries can be defined as literal strings and/or regex patterns.
          items:
            type: string
      description: The email one-time password configuration.
    EmailRecovery:
      required:
      - attempts
      - baseVerificationUrl
      - created
      - id
      - state
      - type
      - updated
      - userId
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of this instance
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        userId:
          type: string
          description: The unique identifier of the associated user
          readOnly: true
          example: 50CP15KFD3
        created:
          type: string
          description: The time when the verification was created
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The time when the verification was last updated
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        expiry:
          type: string
          description: The time when the verification expires
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        state:
          type: string
          description: The current state of the verification
          readOnly: true
          example: PENDING
          enum:
          - PENDING
          - TIMEOUT
          - CANCELED
          - FAILED
          - SUCCESS
        updatedBy:
          type: string
          description: The identifier of the user that last updated the verification
          readOnly: true
          example: 50CP15KFD3
        baseVerificationUrl:
          type: string
          description: The base URL of the password reset URL that will be sent to
            the user in email. The recovery code will be appended to this URL in the
            email as a query parameter.
          readOnly: true
          example: https://hostname/authsvc/mtfim/sps/authsvc?PolicyId=urn:ibm:security:authentication:asf:forgotpassword&stage=reset
        themeId:
          type: string
          description: The identifier of the theme template to be applied to the email
          readOnly: true
          example: covg2ivod6ml8xwl
        attempts:
          type: integer
          description: The number of times the reset password link has been accessed.
          format: int64
          readOnly: true
          example: 0
        type:
          type: string
          description: The type of recovery
          readOnly: true
          example: email
      description: The password recovery via email link.
    InterfaceVersion:
      required:
      - number
      - platform
      type: object
      properties:
        number:
          type: string
          description: The interface version number
          readOnly: true
          example: 1.0.1
        platform:
          type: string
          description: The product platform identifier
          readOnly: true
          example: com.ibm.security.access.verify
      description: The platform and interface version information.
    RecaptchaConfiguration:
      required:
      - id
      - name
      - references
      - secretKey
      - siteKey
      - type
      type: object
      properties:
        id:
          type: string
          description: The identifier of the reCAPTCHA configuration
          readOnly: true
          example: 0ab4d7a1-a2ce-4430-8dea-471d341669f1
        name:
          type: string
          description: The name of the reCAPTCHA configuration
          example: reCAPTCHA
        secretKey:
          type: string
          description: The reCAPTCHA secret key
          readOnly: true
          example: "*******"
        siteKey:
          type: string
          description: The reCAPTCHA site key
          readOnly: true
          example: "*******"
        type:
          type: string
          description: The type of reCAPTCHA configuration
          readOnly: true
          example: v3
          enum:
          - v3
        references:
          type: array
          description: The list of entities referencing the configuration
          items:
            "$ref": "#/components/schemas/RecaptchaConfigurationReference"
      description: The reCAPTCHA configuration.
    MfaProvidersObject:
      required:
      - capability
      - id
      type: object
      properties:
        attributes:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: The associated enrollment attribute as a key-value pair
        capability:
          type: string
          description: The external MFA provider authentication capability
          readOnly: true
          example: duo:push
        id:
          type: string
          description: The external MFA provider enrollment identifier
          readOnly: true
          example: 59ccdb55-0103-4498-8dc6-3fda9deebe25
      description: The external MFA providers object.
    InitiateAuthenticator:
      required:
      - accountName
      - clientId
      type: object
      properties:
        owner:
          type: string
          description: The unique identifier of the owner who will own the registration.
            If not specified, the request owner will be owner of the registration
          example: 50TPV1B8Q9
        clientId:
          type: string
          description: The unique identifier of the authenticator client to be associated
            with the registration
          example: 64f20377-6041-47ec-a47f-d9bd0a5095e7
        accountName:
          type: string
          description: A user friendly name for the registration
          example: Savings Account
      description: The JSON representation of the request data to initiate an authenticator
        registration.
    FidoMetadata_2.0:
      required:
      - category
      - enabled
      - id
      - inUse
      - metadataStatement
      - name
      - type
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the metadata entry
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        category:
          type: string
          description: The administrator-assigned category for the metadata entry
          example: Recommended
        name:
          type: string
          description: The friendly name of the metadata entry
          example: Generic Key v5
        metadataStatement:
          type: string
          description: The metadata statement. It is mutually exclusive with a certificate
        type:
          type: string
          description: The type of the metadata statement
          enum:
          - FIDO2
          - YUBICO
        inUse:
          type: boolean
          description: This metadata entry is explicitly in use by any relying party
          readOnly: true
          example: false
        enabled:
          type: boolean
          description: Specifies whether this metadata is entry enabled. Disabled
            metadata is not used, regardless of whether it is referenced by a relying
            party
          example: false
      description: A FIDO metadata document.
    CreateOtpVerificationResponse_2.0:
      required:
      - attempts
      - correlation
      - created
      - expiry
      - id
      - otp
      - retries
      - state
      - type
      - updated
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the verification
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        type:
          type: string
          description: The type of authentication factor enrollment
          readOnly: true
          example: otp
        created:
          type: string
          description: The time when the verification was created
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The time when the verification was last updated
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        expiry:
          type: string
          description: The time when the verification expires
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        state:
          type: string
          description: The current state of the verification
          readOnly: true
          example: PENDING
          enum:
          - PENDING
          - TIMEOUT
          - CANCELED
          - FAILED
          - SUCCESS
        updatedBy:
          type: string
          description: The identifier of the user that last updated the verification
          readOnly: true
          example: 50CP15KFD3
        correlation:
          type: string
          description: A value to be associated with the verification
          readOnly: true
          example: '4567'
        attempts:
          type: integer
          description: The number of attempts that have been made against the verification
          format: int32
          readOnly: true
          example: 0
        retries:
          type: integer
          description: The maximum number of retry attempts before the verification
            is marked as failed
          format: int32
          readOnly: true
          example: 4
        otp:
          type: string
          description: The one-time password value
          readOnly: true
          example: '123456'
      description: A one-time password verification.
    CreateEmailotpTransient_2.0:
      required:
      - emailAddress
      type: object
      properties:
        correlation:
          type: string
          description: A value to be associated with the verification. It will be
            prefixed to the one-time password in the email to be sent.
          example: '4567'
        emailAddress:
          type: string
          description: The email address to be used to deliver one-time password values
          example: jessica@mail.com
      description: The creation data for a email one-time password verification.
    FidoRelyingParties_2.0:
      required:
      - relyingparties
      type: object
      properties:
        relyingparties:
          type: array
          description: The list of FIDO relying party configurations
          items:
            "$ref": "#/components/schemas/FidoRelyingPartyConfig_2.0"
      description: The list of FIDO relying parties.
    AuthenticatorMetadata:
      required:
      - authenticationMethods
      - customAttributes
      - registrationUri
      - serviceName
      type: object
      properties:
        serviceName:
          type: string
          description: The name of the tenant service
          example: Cloud Bank
        customAttributes:
          type: object
          additionalProperties:
            type: string
          description: Custom defined attributes. Attribute keys and values are of
            string type
        registrationUri:
          type: string
          description: The location of the registration endpoint
          readOnly: true
          example: https://tenant.ice.ibmcloud.com/v1.0/authenticators/registration
        authenticationMethods:
          "$ref": "#/components/schemas/AuthenticationMethods"
      description: The metadata of a registration.
    VoiceotpTransient_2.0:
      required:
      - attempts
      - correlation
      - created
      - expiry
      - id
      - phoneNumber
      - retries
      - state
      - type
      - updated
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the verification
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        type:
          type: string
          description: The type of authentication factor enrollment
          readOnly: true
          example: voiceotp
        created:
          type: string
          description: The time when the verification was created
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The time when the verification was last updated
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        expiry:
          type: string
          description: The time when the verification expires
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        state:
          type: string
          description: The current state of the verification
          readOnly: true
          example: PENDING
          enum:
          - PENDING
          - TIMEOUT
          - CANCELED
          - FAILED
          - SUCCESS
        updatedBy:
          type: string
          description: The identifier of the user that last updated the verification
          readOnly: true
          example: 50CP15KFD3
        correlation:
          type: string
          description: A value to be associated with the verification. It will be
            prefixed to the one-time password in the phone call to be sent.
          readOnly: true
          example: '4567'
        phoneNumber:
          type: string
          description: The phone number to be used to deliver one-time password values
          readOnly: true
          example: "+15345678911"
        attempts:
          type: integer
          description: The number of attempts that have been made against the verification
          format: int32
          readOnly: true
          example: 0
        retries:
          type: integer
          description: The maximum number of retry attempts before the verification
            is marked as failed
          format: int32
          readOnly: true
          example: 4
      description: A transient voice one-time password verification.
    Enrollment_2.0:
      required:
      - created
      - enabled
      - id
      - type
      - updated
      - userId
      - validated
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the enrollment
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        userId:
          type: string
          description: The unique identifier of the associated user
          readOnly: true
          example: 50CP15KFD3
        type:
          type: string
          description: The type of authentication factor enrollment
          readOnly: true
          example: "<type>"
        created:
          type: string
          description: The creation time of the enrollment
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The time the enrollment was last updated
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        attempted:
          type: string
          description: The time the enrollment was last used for verification
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        enabled:
          type: boolean
          description: The enabled state of the enrollment to be used in runtime flows
          example: true
        validated:
          type: boolean
          description: The validation state of the enrollment
          readOnly: true
          example: true
      description: An authentication factor enrollment.
    PasswordChange:
      required:
      - newPassword
      - oldPassword
      - username
      type: object
      properties:
        username:
          type: string
          description: The username to change password for
          example: jessica
        oldPassword:
          type: string
          description: The current password
          example: Passw0rd
        newPassword:
          type: string
          description: The new password to update to
          example: Passw0rd1
    AssertionOptionsRequest:
      type: object
      properties:
        userId:
          type: string
          description: The identifier of the end user that is performing this verification.
            If it is not provided, the context that was used for authorization is
            used.
          example: 00010YE
        userVerification:
          type: string
          description: The extent to which the user must verify
          example: preferred
        extensions:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Additional parameters requesting additional processing by the
            client and authenticator
      description: The options that are presented when initiating a FIDO 2.0 registration.
    KnowledgeQuestionsProfile_2.0:
      required:
      - enabled
      - enrollments
      - id
      - name
      - questions
      type: object
      properties:
        id:
          type: string
          description: The configuration identifier
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        name:
          type: string
          description: The friendly configuration name
          example: default
        enabled:
          type: boolean
          description: Whether the configuration is enabled or not
          example: true
        enrollments:
          "$ref": "#/components/schemas/QuestionsEnrollmentsProfile_2.0"
        questions:
          type: array
          description: The questions configured for use in this profile
          items:
            "$ref": "#/components/schemas/QuestionQuestion_2.0"
      description: The knowledge questions configuration options.
    SignatureAuthenticationMethod:
      required:
      - attributes
      - enabled
      - enrollmentUri
      type: object
      properties:
        enabled:
          type: boolean
          description: Indicates if the authentication method is enabled
          readOnly: true
          example: true
        enrollmentUri:
          type: string
          description: The location of the authentication method enrollment endpoint
          readOnly: true
          example: https://tenant.ice.ibmcloud.com/v1.0/authnmethods/signature
        attributes:
          "$ref": "#/components/schemas/SignatureMethodAttributes"
      description: The enrollment information for signature based authentication method.
    CreateQrVerificationResponse_2.0:
      required:
      - created
      - dsi
      - expiry
      - id
      - location
      - lsi
      - profileId
      - serviceName
      - state
      - tenant
      - type
      - updated
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the verification
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        type:
          type: string
          description: The type of authentication factor enrollment
          readOnly: true
          example: qr
        created:
          type: string
          description: The time when the verification was created
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The time when the verification was last updated
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        expiry:
          type: string
          description: The time when the verification expires
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        state:
          type: string
          description: The current state of the verification
          readOnly: true
          example: PENDING
          enum:
          - PENDING
          - TIMEOUT
          - CANCELED
          - FAILED
          - SUCCESS
        location:
          type: string
          description: The URL for this verification
          readOnly: true
          example: "/v2.0/factors/qr/1e5fa156-3754-4265-8796-1a2f0a6f036f"
        profileId:
          type: string
          description: The authenticator profile identifier. Verifications will need
            to be completed using an authenticator registration associated with this
            profile
          readOnly: true
          example: ecb2bbbb-fd45-4ce9-957f-f18eaf65dfe8
        serviceName:
          type: string
          description: The service name associated with the authenticator profile
            metadata
          readOnly: true
          example: Cloud Security
        tenant:
          type: string
          description: The name of the tenant
          readOnly: true
          example: tenant.example.com
        assertion:
          type: string
          description: A JWT which serves as proof that this factor has been performed
          readOnly: true
          example: ey...
        lsi:
          type: string
          description: The login service index to be used by the authenticator registration
            on subsequent verification attempt
          readOnly: true
          example: vu6Jak84Uhv1MkFFjglRB00rm
        dsi:
          type: string
          description: The device service index to be used for quering the completion
            state
          readOnly: true
          example: vyRs27v4DWLaKixvuBmN9DxAR
        qrCode:
          type: array
          description: A base64 encoded representation of the QR code
          example: iVBORw0KGgoAAA==
          items:
            pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            type: string
            format: byte
        openAppLoginUrl:
          type: string
          description: The verifiable link to be consumed by a mobile app to invoke
            the login without QR code
          readOnly: true
          example: https://idaas.ice.ibmcloud.com/login?code=ABC123&...
      description: A QR code login verification creation response.
    EmailotpVerification_2.0:
      required:
      - attempts
      - correlation
      - created
      - emailAddress
      - expiry
      - id
      - retries
      - state
      - type
      - updated
      - userId
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the verification
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        userId:
          type: string
          description: The unique identifier of the associated user
          readOnly: true
          example: 50CP15KFD3
        type:
          type: string
          description: The type of authentication factor enrollment
          readOnly: true
          example: emailotp
        created:
          type: string
          description: The time when the verification was created
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The time when the verification was last updated
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        expiry:
          type: string
          description: The time when the verification expires
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        state:
          type: string
          description: The current state of the verification
          readOnly: true
          example: PENDING
          enum:
          - PENDING
          - TIMEOUT
          - CANCELED
          - FAILED
          - SUCCESS
        updatedBy:
          type: string
          description: The identifier of the user that last updated the verification
          readOnly: true
          example: 50CP15KFD3
        correlation:
          type: string
          description: A value to be associated with the verification. It will be
            prefixed to the one-time password in the email to be sent.
          readOnly: true
          example: '4567'
        emailAddress:
          type: string
          description: The email address to be used to deliver one-time password values
          readOnly: true
          example: jessica@mail.com
        attempts:
          type: integer
          description: The number of attempts that have been made against the verification
          format: int32
          readOnly: true
          example: 0
        retries:
          type: integer
          description: The maximum number of retry attempts before the verification
            is marked as failed
          format: int32
          readOnly: true
          example: 4
      description: A email one-time password verification.
    MfaProvidersEntities:
      required:
      - capabilities
      type: object
      properties:
        capabilities:
          type: array
          description: The list of external MFA providers entities
          items:
            "$ref": "#/components/schemas/MfaProvidersEntity"
      description: The list of external MFA providers entities.
    VerifiableLinksDigitalAssetLinksTarget:
      required:
      - namespace
      type: object
      properties:
        namespace:
          type: string
          description: A string representing the type of the target being described
            by this object
          example: android_app
          enum:
          - web
          - android_app
        site:
          type: string
          description: A string value that contains the site that is authorised to
            handle verifiable link redirection from this domain. Required when 'namespace'
            field is set to 'web'
        package_name:
          type: string
          description: A string value that contains the package name of the application
            that is authorised to handle verifiable link redirection from this domain.
            Required when 'namespace' field is set to 'android_app'
          example: com.ibm.security.verifyapp
        sha256_cert_fingerprints:
          type: array
          description: An array of string values that contains the sha 256 cert fingerprints
            of the application described in 'package_name'. Required when 'namespace'
            field is set to 'android_app'
          example: 20:45:C1:BF:49:E7:7B:C5:40:9D:AF:39:2A:42:D8:65:69:06:30:20:8B:7A:29:76:D6:3A:E7:DC:3E:71:DD:C3
          items:
            type: string
    QuestionsEnrollments_2.0:
      required:
      - questions
      type: object
      properties:
        questions:
          type: array
          description: The list of knowledge questions enrollments
          items:
            "$ref": "#/components/schemas/QuestionsEnrollment_2.0"
      description: The list of knowledge questions enrollments.
    EnrollSignatureAttributes:
      required:
      - algorithm
      - publicKey
      - signedData
      type: object
      properties:
        algorithm:
          type: string
          description: The algorithm of the public key
          example: RSASHA256
        deviceSecurity:
          type: boolean
          description: Indicates if device based authentication protected secure storage
            is used
          example: true
        publicKey:
          type: string
          description: The base64 encoded X.509 SubjectPublicKeyInfo public key to
            use in signature verification
          example: 12ewdDE12==
        signedData:
          type: string
          description: The base64 encoded value of the data as a result of signing
            the authenticator ID. Currently only PKCS#1 v1.5 padding is supported
            for RSA signatures.
          example: 563r324F3214==
        additionalData:
          type: array
          description: This value will be included with authentication challenges
            and can be used by the signing party. It is not interpreted or validated
            by the server
          items:
            "$ref": "#/components/schemas/NameValuePair"
      description: Attributes to be associated with an enrollment
    VerifyOtpVerification_2.0:
      required:
      - otp
      type: object
      properties:
        otp:
          type: string
          description: The one-time password value
          example: '123456'
      description: A one-time password verification attempt.
    CreateFidoMetadataService_2.0:
      required:
      - enabled
      - trustAnchorIds
      - url
      type: object
      properties:
        url:
          type: string
          description: The URL of the Metadata Service.
          example: https://mds3.fidoalliance.org/
        enabled:
          type: boolean
          description: Specifies whether this Metadata Service entry is enabled. Disabled
            entries will not have their contents fetched and will not present the
            contained documents for processing.
          example: true
        trustAnchorIds:
          uniqueItems: true
          type: array
          description: The list of friendly names of configured signer certificates
            which will be used for validation of the Metadata Service. Currently this
            expects the root certificate of the JWT signature returned by the Metadata
            Service.
          example: '["FIDO MDS JWT cert"]'
          items:
            type: string
      description: A FIDO metadata service configuration.
    FidoAllMetadata_2.0:
      required:
      - metadata
      type: object
      properties:
        metadata:
          type: array
          description: The list of FIDO metadata entries
          items:
            "$ref": "#/components/schemas/FidoMetadata_2.0"
      description: The list of FIDO metadata entries.
    VoiceotpEnrollment_2.0:
      required:
      - attributes
      - created
      - enabled
      - id
      - type
      - updated
      - userId
      - validated
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the enrollment
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        userId:
          type: string
          description: The unique identifier of the associated user
          readOnly: true
          example: 50CP15KFD3
        type:
          type: string
          description: The type of authentication factor enrollment
          readOnly: true
          example: voiceotp
        created:
          type: string
          description: The creation time of the enrollment
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The time the enrollment was last updated
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        attempted:
          type: string
          description: The time the enrollment was last used for verification
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        enabled:
          type: boolean
          description: The enabled state of the enrollment to be used in runtime flows
          example: true
        validated:
          type: boolean
          description: The validation state of the enrollment
          readOnly: true
          example: true
        attributes:
          "$ref": "#/components/schemas/VoiceotpEnrollmentAttributes_2.0"
      description: A voice one-time password enrollment.
    DiscoverableClient:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the authenticator client
          readOnly: true
          example: ecb2bbbb-fd45-4ce9-957f-f18eaf65dfe8
        name:
          type: string
          description: The display name of the client
          readOnly: true
          example: VerifyAuthenticator
      description: An authenticator client which is enabled for runtime flows.
    CreateEmailotpEnrollment_2.0:
      required:
      - emailAddress
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier of the associated user
          example: 50CP15KFD3
        enabled:
          type: boolean
          description: The enabled state of the enrollment to be used in runtime flows
          example: true
        emailAddress:
          type: string
          description: The email address to be used to deliver one-time password values
          example: jessica@mail.com
      description: The creation data of a email one-time password enrollment.
    CreateVoiceotpEnrollment_2.0:
      required:
      - phoneNumber
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier of the associated user
          example: 50CP15KFD3
        enabled:
          type: boolean
          description: The enabled state of the enrollment to be used in runtime flows
          example: true
        phoneNumber:
          type: string
          description: The phone number to be used to deliver one-time password values
          example: "+15345678911"
      description: The creation data of a voice one-time password enrollment.
    MfaProviderDefinition:
      required:
      - capabilities
      - credentialPrefix
      - id
      - name
      type: object
      properties:
        capabilities:
          type: array
          description: The factor capabilities permitted with this provider instance
          items:
            type: string
        credentialPrefix:
          type: string
          description: The credential identifier prefix
          readOnly: true
          example: ext
        description:
          type: string
          description: A friendly description
          example: Our external MFA integration
        id:
          type: string
          description: The external MFA provider configuration identifier
          readOnly: true
          example: 0ab4d7a1-a2ce-4430-8dea-471d341669f1
        name:
          type: string
          description: The name of the external MFA provider
          example: External Security
        type:
          type: string
          description: The type of external MFA integration
          readOnly: true
          example: generic
          enum:
          - generic
          - duo
      description: The external MFA providers definition.
    EmailotpEnrollment_2.0:
      required:
      - attributes
      - created
      - enabled
      - id
      - type
      - updated
      - userId
      - validated
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the enrollment
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        userId:
          type: string
          description: The unique identifier of the associated user
          readOnly: true
          example: 50CP15KFD3
        type:
          type: string
          description: The type of authentication factor enrollment
          readOnly: true
          example: emailotp
        created:
          type: string
          description: The creation time of the enrollment
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The time the enrollment was last updated
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        attempted:
          type: string
          description: The time the enrollment was last used for verification
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        enabled:
          type: boolean
          description: The enabled state of the enrollment to be used in runtime flows
          example: true
        validated:
          type: boolean
          description: The validation state of the enrollment
          readOnly: true
          example: true
        attributes:
          "$ref": "#/components/schemas/EmailotpEnrollmentAttributes_2.0"
      description: A email one-time password enrollment.
    PasswordAuthentication:
      type: object
      properties:
        username:
          type: string
          description: The username to authenticate as
          example: jessica
        password:
          type: string
          description: The password to authenticate with
          example: Passw0rd
    FidoCredential_2.0:
      required:
      - id
      - type
      type: object
      properties:
        id:
          type: string
          description: The credential identifier
          example: SSBhbSBhIGNyZWRlbnRpYWwK
        type:
          type: string
          description: The type of the credential. It must be 'public-key' for FIDO
          example: public-key
      description: A FIDO 2.0 credential.
    CreateQuestionsEnrollmentAttributes_2.0:
      required:
      - questions
      type: object
      properties:
        questions:
          type: array
          description: The list of questions with answers
          items:
            "$ref": "#/components/schemas/QuestionAnswer_2.0"
      description: A knowledge questions enrollment's attributes.
    GrantAuthenticator:
      required:
      - attributes
      type: object
      properties:
        code:
          type: string
          description: The authorization code provided by an initiation request. Required
            for completing a registration
          example: rNxkpy2TSdv3pFgVW9kq
        refreshToken:
          type: string
          description: The refresh token of the existing authenticator registration.
            Required for refreshing a registration
          example: tGzv3JOkF0XG5Qx2TlKWIA
        attributes:
          "$ref": "#/components/schemas/GrantAuthenticatorAttributes"
      description: The JSON representation of the request data to register or refresh
        an authenticator.
    QuestionsEnrollmentIndvReferences_2.0:
      required:
      - profileId
      type: object
      properties:
        profileId:
          type: string
          description: The configuration profile identifier
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        questions:
          type: array
          description: The list of available questions
          items:
            "$ref": "#/components/schemas/QuestionQuestion_2.0"
      description: A knowledge questions enrollment's references.
    AttemptQuestionsVerification_2.0:
      required:
      - questions
      type: object
      properties:
        questions:
          type: array
          description: The list of questions with answers
          items:
            "$ref": "#/components/schemas/QuestionAnswer_2.0"
      description: The data of a knowledge question verification attempt.
    JsonValue:
      type: object
      properties:
        valueType:
          type: string
          enum:
          - ARRAY
          - OBJECT
          - STRING
          - NUMBER
          - 'TRUE'
          - 'FALSE'
          - 'NULL'
    VoiceotpEnrollmentAttributes_2.0:
      required:
      - phoneNumber
      type: object
      properties:
        phoneNumber:
          type: string
          description: The phone number to be used to deliver one-time password values
          example: "+15345678911"
      description: A voice one-time password enrollment attributes.
    MfaProviderConfiguration:
      required:
      - capabilities
      - capabilityCacheTtl
      - credentialPrefix
      - description
      - enabled
      - id
      - name
      - type
      - uniqueNameAttribute
      - webhookId
      type: object
      properties:
        capabilities:
          type: array
          description: The factor capabilities permitted with this provider instance
          items:
            type: string
        capabilityCacheTtl:
          type: integer
          description: The number of seconds cached capability enrollments will be
            stored
          format: int32
          example: 0
        credentialPrefix:
          type: string
          description: The credential identifier prefix
          readOnly: true
          example: ext
        description:
          type: string
          description: A friendly description
          example: Our external MFA integration
        enabled:
          type: boolean
          description: The enabled state of external MFA provider to be used in runtime
            flows
          example: true
        id:
          type: string
          description: The external MFA provider configuration identifier
          readOnly: true
          example: 0ab4d7a1-a2ce-4430-8dea-471d341669f1
        name:
          type: string
          description: The name of the external MFA provider
          example: External Security
        type:
          type: string
          description: The type of external MFA integration
          readOnly: true
          example: generic
          enum:
          - generic
          - duo
        uniqueNameAttribute:
          type: string
          description: The account attribute that identifies the user in the external
            provider system
          example: email
        webhookId:
          type: string
          description: The webhook configuration identifier
          readOnly: true
          example: 87e0cd55-366a-45b6-a401-243f9bd5ab7f
      description: The external MFA providers configuration.
    UpdateQuestionsEnrollmentAttributes_2.0:
      required:
      - questions
      type: object
      properties:
        questions:
          type: array
          description: The list of enrolled questions
          items:
            "$ref": "#/components/schemas/QuestionAnswer_2.0"
      description: A set of knowledge questions enrollment attribute.
    MfaProvidersEntity:
      required:
      - capability
      - id
      - providerId
      - providerName
      type: object
      properties:
        attributes:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: The associated enrollment attribute as a key-value pair
        capability:
          type: string
          description: The external MFA provider authentication capability
          readOnly: true
          example: duo:push
        id:
          type: string
          description: The external MFA provider enrollment identifier
          readOnly: true
          example: 59ccdb55-0103-4498-8dc6-3fda9deebe25
        providerId:
          type: string
          description: The external MFA provider configuration identifier
          readOnly: true
          example: 0ab4d7a1-a2ce-4430-8dea-471d341669f1
        providerName:
          type: string
          description: The name of the external MFA provider
          example: External Security
      description: The external MFA providers entity.
    TotpEnrollment_2.0:
      required:
      - attributes
      - created
      - enabled
      - id
      - type
      - updated
      - userId
      - validated
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the enrollment
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        userId:
          type: string
          description: The unique identifier of the associated user
          readOnly: true
          example: 50CP15KFD3
        type:
          type: string
          description: The type of authentication factor enrollment
          readOnly: true
          example: totp
        created:
          type: string
          description: The creation time of the enrollment
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The time the enrollment was last updated
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        attempted:
          type: string
          description: The time the enrollment was last used for verification
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        enabled:
          type: boolean
          description: The enabled state of the enrollment to be used in runtime flows
          example: true
        validated:
          type: boolean
          description: The validation state of the enrollment
          readOnly: true
          example: true
        attributes:
          "$ref": "#/components/schemas/TotpEnrollmentAttributes_2.0"
      description: A time-based one-time password enrollment.
    SignatureMethod:
      required:
      - attributes
      - creationTime
      - enabled
      - enrollmentUri
      - id
      - methodType
      - owner
      - subType
      - validated
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the enrollment
          readOnly: true
          example: f867dceb-a360-44f4-883f-70723272d27f
        owner:
          type: string
          description: The unique identifier of the owner of the enrollment
          readOnly: true
          example: 50TPV1B8Q9
        creationTime:
          type: string
          description: The time at which this enrollment was created
          readOnly: true
          example: '2018-04-19T09:21:38.414Z'
        enabled:
          type: boolean
          description: The enabled state of the enrollment to be used for runtime
            flows
          example: false
        enrollmentUri:
          type: string
          description: The location of the enrollment
          readOnly: true
          example: https://tenant.ice.ibmcloud.com/v1.0/authnmethods/signature/{id}
        methodType:
          type: string
          description: The type of authentication method
          readOnly: true
          example: signature
        subType:
          type: string
          description: The specific sub-type of the enrollment. Support values
          readOnly: true
          example: fingerprint
          enum:
          - userPresence
          - fingerprint
          - face
        attributes:
          "$ref": "#/components/schemas/SignatureAttributes"
        validated:
          type: boolean
          description: The validated attribute of the signature factor enromment
          example: false
      description: The JSON representation of a signature enrollment.
    Fido2PublicKeyParams:
      type: object
      properties:
        alg:
          type: integer
          format: int64
        type:
          type: string
    DiscoverableQuestions_2.0:
      required:
      - enabled
      - path
      - profiles
      type: object
      properties:
        path:
          type: string
          description: The endpoint path of the authentication factor
          example: "/v2.0/factors/questions"
        enabled:
          type: boolean
          description: The enabled state of the authentication factor
          example: true
        profiles:
          type: array
          description: The enabled knowledge questions configuration profiles
          items:
            "$ref": "#/components/schemas/KnowledgeQuestionsProfile_2.0"
      description: The knowledge questions discovery configuration.
    QuestionsEnrollmentsConfig_2.0:
      required:
      - maxAnswerLength
      - minAnswerLength
      - minRequiredAnswers
      - regexMatch
      - requireUniqueAnswers
      type: object
      properties:
        minRequiredAnswers:
          minimum: 1
          type: integer
          description: The minimum number of required enrolled answers
          format: int32
          example: 3
        requireUniqueAnswers:
          type: boolean
          description: Specifies whether unique answers are required
          example: true
        minAnswerLength:
          maximum: 256
          minimum: 1
          type: integer
          description: The minimum answer length
          format: int32
          example: 1
        maxAnswerLength:
          maximum: 256
          minimum: 1
          type: integer
          description: The maximum answer length
          format: int32
          example: 128
        regexMatch:
          type: string
          description: Regex of permitted characters in an enrolled answer
          example: "^[a-zA-Z0-9_ ]+$"
      description: The enrollment specific configuration options for knowledge questions.
    AuthenticationMethods:
      type: object
      properties:
        totp:
          "$ref": "#/components/schemas/TotpAuthenticationMethod"
        signature_fingerprint:
          "$ref": "#/components/schemas/SignatureAuthenticationMethod"
        signature_userPresence:
          "$ref": "#/components/schemas/SignatureAuthenticationMethod"
        signature_face:
          "$ref": "#/components/schemas/SignatureAuthenticationMethod"
      description: The enabled authentication methods for this tenant.
    Verifications:
      required:
      - verifications
      type: object
      properties:
        verifications:
          type: array
          description: The list of verification transactions
          items:
            "$ref": "#/components/schemas/Verification"
      description: The list of verification transactions.
    FidoReferences_2.0:
      required:
      - rpUuid
      type: object
      properties:
        rpUuid:
          type: string
          description: The relying party unique identifier for this enrollment
          readOnly: true
    SmsotpVerification_2.0:
      required:
      - attempts
      - correlation
      - created
      - expiry
      - id
      - phoneNumber
      - retries
      - state
      - type
      - updated
      - userId
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the verification
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        userId:
          type: string
          description: The unique identifier of the associated user
          readOnly: true
          example: 50CP15KFD3
        type:
          type: string
          description: The type of authentication factor enrollment
          readOnly: true
          example: smsotp
        created:
          type: string
          description: The time when the verification was created
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The time when the verification was last updated
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        expiry:
          type: string
          description: The time when the verification expires
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        state:
          type: string
          description: The current state of the verification
          readOnly: true
          example: PENDING
          enum:
          - PENDING
          - TIMEOUT
          - CANCELED
          - FAILED
          - SUCCESS
        updatedBy:
          type: string
          description: The identifier of the user that last updated the verification
          readOnly: true
          example: 50CP15KFD3
        correlation:
          type: string
          description: A value to be associated with the verification. It will be
            prefixed to the one-time password in the SMS to be sent.
          readOnly: true
          example: '4567'
        phoneNumber:
          type: string
          description: The phone number to be used to deliver one-time password values
          readOnly: true
          example: "+15345678911"
        attempts:
          type: integer
          description: The number of attempts that have been made against the verification
          format: int32
          readOnly: true
          example: 0
        retries:
          type: integer
          description: The maximum number of retry attempts before the verification
            is marked as failed
          format: int32
          readOnly: true
          example: 4
      description: A SMS one-time password verification.
    CreateRecaptchaReference:
      required:
      - location
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the reference
          example: User Registration
        location:
          type: string
          description: The location of the reference
          example: "/v2.0/flows/e0076f18-356b-43cd-8544-f9a93b8e795e"
      description: The reCAPTCHA reference.
    EmailotpEnrollmentAttributes_2.0:
      required:
      - emailAddress
      type: object
      properties:
        emailAddress:
          type: string
          description: The email address to be used to deliver one-time password values
          example: jessica@mail.com
      description: A email one-time password enrollment attributes.
    DiscoverableFactors_2.0:
      required:
      - emailotp
      - fido2
      - qr
      - questions
      - restrictions
      - signatures
      - smsotp
      - totp
      - voiceotp
      type: object
      properties:
        emailotp:
          "$ref": "#/components/schemas/DiscoverableEmailotp_2.0"
        fido2:
          "$ref": "#/components/schemas/DiscoverableFido2_2.0"
        qr:
          "$ref": "#/components/schemas/Discoverable_2.0"
        questions:
          "$ref": "#/components/schemas/DiscoverableQuestions_2.0"
        signatures:
          "$ref": "#/components/schemas/Discoverable_2.0"
        smsotp:
          "$ref": "#/components/schemas/Discoverable_2.0"
        totp:
          "$ref": "#/components/schemas/DiscoverableTotp_2.0"
        voiceotp:
          "$ref": "#/components/schemas/Discoverable_2.0"
        restrictions:
          "$ref": "#/components/schemas/Restrictions_2.0"
      description: The availability of all authentication factors.
    CreateQuestionsEnrollment_2.0:
      required:
      - attributes
      - references
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier of the associated user
          example: 50CP15KFD3
        enabled:
          type: boolean
          description: The enabled state of the enrollment that is used in the runtime
            flows
          example: true
        attributes:
          "$ref": "#/components/schemas/CreateQuestionsEnrollmentAttributes_2.0"
        references:
          "$ref": "#/components/schemas/CreateQuestionsEnrollmentReferences_2.0"
      description: The creation data of a knowledge question enrollment.
    TotpMethodAttributes:
      required:
      - algorithm
      - digits
      - period
      - secret
      type: object
      properties:
        digits:
          type: integer
          description: The length of the one-time password
          format: int32
          readOnly: true
          example: 6
        secret:
          type: string
          description: The shared secret value to be used to seed the algorithm
          readOnly: true
          example: HCVUT426LRSLLP4M
        period:
          type: integer
          description: The number of seconds a code will be valid for
          format: int32
          readOnly: true
          example: 30
        algorithm:
          type: string
          description: The hashing algorithm
          readOnly: true
          example: SHA256
      description: Additional attributes for a TOTP based authentication method.
    VerifyTotpEnrollment_2.0:
      required:
      - otp
      type: object
      properties:
        otp:
          type: string
          description: The one-time password value
          example: '123456'
      description: A time-based one-time password verification attempt.
    TotpAuthenticationMethod:
      required:
      - enabled
      - enrollmentUri
      type: object
      properties:
        enabled:
          type: boolean
          description: Indicates if the authentication method is enabled
          readOnly: true
          example: true
        enrollmentUri:
          type: string
          description: The location of the authentication method enrollment endpoint
          readOnly: true
          example: https://tenant.ice.ibmcloud.com/v1.0/authnmethods/totp
        id:
          type: string
          description: The unique identifier of the TOTP enrollment
          readOnly: true
          example: f0cf603f-ae9b-49ce-ad07-70f5777377db
        attributes:
          "$ref": "#/components/schemas/TotpMethodAttributes"
      description: The enrollment information for a TOTP authentication method.
    Verification:
      required:
      - authenticationMethods
      - authenticatorId
      - completionTime
      - creationTime
      - expiryTime
      - id
      - logic
      - owner
      - pushNotification
      - state
      - transactionData
      - transactionUri
      - userActions
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the transaction
          example: a5f562cb-684b-4918-bca6-def6f6c4a81b
        owner:
          type: string
          description: The unique identifier of the owner of the transaction
          example: 50TPV1B8Q9
        creationTime:
          type: string
          description: The time at which the transaction was created
          example: '2018-04-19T09:21:38.414Z'
        completionTime:
          type: string
          description: The time at which the transaction entered a completion state
          example: '2018-04-19T09:21:38.414Z'
        expiryTime:
          type: string
          description: The time at which the transaction will expire and cease to
            be valid
          example: '2018-04-19T09:21:38.414Z'
        authenticatorId:
          type: string
          description: The unique identifier for the associated authenticator registration
          example: 7b676daa-8725-472d-a7f2-88f05c0b798b
        transactionUri:
          type: string
          description: The location of the transaction
          example: https://tenant.ice.ibmcloud.com/v1.0/authenticators/{id}/verification/{trxnId}
        state:
          type: string
          description: This is the overall completion state of the transaction. After
            initial creation of the transaction, the state will be PENDING. The value
            may change from PENDING to any one of the other enumerated values. However,
            this value becomes immutable once it has been changed from PENDING. The
            values are as follows:<br> PENDING - The transaction is waiting for the
            user to use the authenticator to complete the authentication challenge,<br>
            TIMEOUT - The transaction has expired. No attempt to verify, cancel, or
            deny the transaction has been received within the expiry period,<br> CANCELED
            - The transaction has been cancelled by the end user or administrator,<br>
            USER_DENIED - The user has denied or rejected the transaction using the
            authenticator,<br> USER_FRAUDULENT - The user has denied the transaction
            using the authenticator and marked it as fraudulent,<br> BIOMETRY_FAILED
            - The user attempted to verify the transaction but biometry authentication
            failed,<br> VERIFY_FAILED - An attempt to verify the transaction has failed,<br>
            VERIFY_SUCCESS - An attempt to verify the transaction has succeeded.<br>Support
            values
          example: PENDING
          enum:
          - PENDING
          - TIMEOUT
          - CANCELED
          - USER_DENIED
          - USER_FRAUDULENT
          - BIOMETRY_FAILED
          - VERIFY_FAILED
          - VERIFY_SUCCESS
        transactionData:
          type: string
          description: The transactional data to be signed
          example: '{\"originIpAddress\":\"192.168.222.222\",\"originUserAgent\":\"Mozilla
            Firefox 11\",\"additionalData\":[{\"name\":\"foo\",\"value\":\"bar\"}],\"message\":\"There
            is an action that needs your attention.\",\"timestamp\":\"2018-04-19T09:21:38.414Z\"}'
        pushNotification:
          "$ref": "#/components/schemas/PushNotification"
        authenticationMethods:
          type: array
          description: The authentication methods allowed for the transaction
          items:
            "$ref": "#/components/schemas/AuthenticationMethod"
        logic:
          type: string
          description: The logical operator to apply to the list of authentication
            methods
          example: OR
        userActions:
          type: array
          description: The user action data sent from the authenticator in response
            to the transaction
          items:
            "$ref": "#/components/schemas/UserAction"
        assertion:
          type: string
          description: A JWT which serves as proof that this factor has been performed
          readOnly: true
          example: ey...
      description: The JSON representation of a verification transaction.
    Clients:
      required:
      - clients
      type: object
      properties:
        clients:
          type: array
          description: The list of client instances
          items:
            "$ref": "#/components/schemas/OIDCClient"
      description: A list of authenticator clients which is valid for runtime flows
        supporting registrations.
    CreateSmsotpVerification_2.0:
      type: object
      properties:
        correlation:
          type: string
          description: A value to be associated with the verification. It will be
            prefixed to the one-time password in the SMS to be sent.
          example: '4567'
      description: The creation data for a SMS one-time password verification.
    PublicKeyCredParams:
      required:
      - alg
      - type
      type: object
      properties:
        alg:
          type: integer
          description: COSE algorithm identifier
          format: int64
          example: -7
          enum:
          - -7
          - -8
          - -35
          - -36
          - -37
          - -38
          - -39
          - -257
          - -258
          - -259
          - -65535
        type:
          type: string
          description: Algorithm type
          example: public-key
          enum:
          - public-key
      description: Allowed COSE key types in their WebaAuthn form
    VerifyEmailRecoveryResponse_2.0:
      required:
      - userId
      type: object
      properties:
        userId:
          type: string
          description: The user for whom the recovery flow was completed.
          example: 600000ZRY1
      description: A password recovery transaction verification attempt response.
    FidoUser_2.0:
      required:
      - displayName
      - id
      - name
      type: object
      properties:
        id:
          type: string
          description: The IBM unique identifier (IUI) of the user that is to perform
            the operation
        displayName:
          type: string
          description: The friendly name of the user that is to perform the operation
          example: Jessica User
        name:
          type: string
          description: The username of the user that is to perform the operation
          example: jessica
      description: A user that is performing FIDO 2.0 operations.
    VerifiableLinksDigitalAssetLinks:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          description: The list of items in a digital asset link file configuration
            array
          items:
            "$ref": "#/components/schemas/VerifiableLinksDigitalAssetLinksConfiguration"
      description: A digital assetlink file configuration.
    Restrictions_2.0:
      required:
      - appliedOn
      - appliedToIDS
      - deadline
      - reqFactors
      type: object
      properties:
        reqFactors:
          type: integer
          description: The number of factors a user is required to have enrolled
          format: int32
          readOnly: true
          example: 2
        appliedOn:
          type: string
          description: The epoch time this restriction was applied
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        deadline:
          type: string
          description: The epoch time this restriction will start being enforced
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        appliedToIDS:
          type: string
          description: The comma separated list of identity sources this restriction
            is applied to
          readOnly: true
          example: ids1.realm1.com,ids2.realm2.com
      description: The restrictions applied to factor enrollment.
    RelyingParty_2.0:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
          description: " The relying party ID"
          example: fido.example.com
        name:
          type: string
          description: The friendly name of the relying party
          example: FIDO Relying Party
      description: A FIDO 2.0 relying party entity.
    VerifiableLinksAppSiteAssociationDetails:
      type: object
      properties:
        appIDs:
          type: array
          description: A list of applications IDs that can handle URLs from this domain
            as per the rules defined in components.
          items:
            type: string
        components:
          type: array
          description: A list of component objects that define the URL handling rules
            for this domain.
          items:
            "$ref": "#/components/schemas/VerifiableLinksAppSiteAssociationComponent"
        appID:
          type: string
          description: An application id that is authorised to handle URLs defined
            in the paths array.
        paths:
          type: array
          description: A list of path strings to match for verifiable link redirection
            for the application defined in appID.
          items:
            type: string
    CreateTotpEnrollment_2.0:
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier of the associated user
          example: 50CP15KFD3
        accountName:
          type: string
          description: The account name that the one-time password is associated with
          example: Jessica
        enabled:
          type: boolean
          description: The enabled state of the enrollment to be used in runtime flows
          example: true
      description: The creation data of a time-based one-time password enrollment.
    GetSignatureMethodsResponse:
      required:
      - signatures
      type: object
      properties:
        signatures:
          type: array
          description: The list of signature authentication method enrollments
          items:
            "$ref": "#/components/schemas/GetSignatureMethodResponse"
      description: The list of signature authentication method enrollments.
    Fido2EnrollmentList_2.0:
      required:
      - fido2
      type: object
      properties:
        fido2:
          type: array
          description: The list of FIDO2 enrollments
          items:
            "$ref": "#/components/schemas/FidoEnrollment_2.0"
      description: The list of FIDO2 enrollments.
    UserAttribute:
      type: object
      properties:
        name:
          type: string
          description: The name of the attribute
          example: metadata
        values:
          type: array
          description: The values of the attributes
          items:
            type: string
    ResolvedRP_2.0:
      required:
      - fido2
      - origin
      type: object
      properties:
        origin:
          type: string
          description: The origin used to resolve the relying parties
          example: https://login.fido.example.com
        fido2:
          type: array
          description: The resolved relying parties
          items:
            "$ref": "#/components/schemas/DiscoveredRP_2.0"
      description: The details of a given Relying party.
    BHUser:
      type: object
      properties:
        id:
          type: string
          description: The id of the user
          example: 504FCQMC8H
        attributes:
          type: array
          description: The attributes of the user
          items:
            "$ref": "#/components/schemas/UserAttribute"
        groups:
          type: array
          description: The groups of the user
          items:
            "$ref": "#/components/schemas/UserGroup_0"
        assertion:
          type: string
          description: A JWT which serves as proof that this factor has been performed.
    AuthenticatorAttributes:
      required:
      - accountName
      - applicationId
      - applicationVersion
      - deviceId
      - deviceName
      - deviceType
      - faceSupport
      - fingerprintSupport
      - frontCameraSupport
      - osVersion
      - pushToken
      - verifySdkVersion
      type: object
      properties:
        pushToken:
          type: string
          description: The token used to send push notifications to the authenticator
          readOnly: true
          example: 5fw75HqyXnivkpmb%3AudWNSI7s
        accountName:
          type: string
          description: A user friendly name for the registration
          readOnly: true
          example: Savings Account
        applicationId:
          type: string
          description: The mobile application identifier assigned or registered with
            the mobile platform provider
          readOnly: true
          example: com.ibm.security.verifyapp
        applicationVersion:
          type: string
          description: The version of the registering mobile application
          readOnly: true
          example: 1.0.5
        verifySdkVersion:
          type: string
          description: The version of the IBM Verify SDK
          readOnly: true
          example: 1.0.1
        deviceName:
          type: string
          description: The mobile device manufacturer device name
          readOnly: true
          example: John's iPhone
        deviceType:
          type: string
          description: The mobile device type
          readOnly: true
          example: iPhone
        platformType:
          type: string
          description: The mobile device platform type. Support values
          readOnly: true
          example: IOS
          enum:
          - Android
          - IOS
          - IPADOS
          - Other
        deviceId:
          type: string
          description: The mobile device identifier
          readOnly: true
          example: 3f9821f4-b79f-47e3-9efc-51a48cf00ea7
        osVersion:
          type: string
          description: The version of the mobile operating system
          readOnly: true
          example: 11.2.1
        faceSupport:
          type: boolean
          description: Whether the mobile device supports facial recognition
          readOnly: true
          example: false
        fingerprintSupport:
          type: boolean
          description: Whether the mobile device supports a fingerprint sensor
          readOnly: true
          example: true
        frontCameraSupport:
          type: boolean
          description: Whether the mobile device support a front facing camera
          readOnly: true
          example: true
        mdmDeviceId:
          type: string
          description: The MDM device identifier
          readOnly: true
          example: 8fea710e-88a5-4658-ab8a-66a3bf49e4a1
        deviceInsecure:
          type: boolean
          description: Whether the mobile device is deemed insecure; jailbroken or
            rooted
          readOnly: true
          example: true
      description: Additional attributes to be associated with the registration. All
        values must be URL encoded.
    CreateClient:
      required:
      - accessTokenLifetime
      - authorizationCodeLifetime
      - enabled
      - name
      - refreshTokenLifetime
      type: object
      properties:
        name:
          type: string
          description: The display name of the OAuth client
          example: VerifyAuthenticator
        enabled:
          type: boolean
          description: Whether the OAuth client is enabled for runtime use
        accessTokenLifetime:
          type: integer
          description: The length of time, in seconds, an access token will be valid
          format: int32
          example: 3600
        refreshTokenLifetime:
          type: integer
          description: The length of time, in seconds, a refresh token will be valid
          format: int32
          example: 63115200
        authorizationCodeLifetime:
          type: integer
          description: The length of time, in seconds, an authorization code will
            be valid
          format: int32
          example: 120
    CreateMfaProviderConfiguration:
      required:
      - capabilities
      - credentialPrefix
      - name
      - uniqueNameAttribute
      - webhookId
      type: object
      properties:
        capabilities:
          type: array
          description: The factor capabilities permitted with this provider instance
          items:
            type: string
        capabilityCacheTtl:
          type: integer
          description: The number of seconds cached capability enrollments will be
            stored
          format: int32
          example: 0
        credentialPrefix:
          type: string
          description: The credential identifier prefix
          example: ext
        description:
          type: string
          description: A friendly description
          example: Our external MFA integration
        enabled:
          type: boolean
          description: The enabled state of external MFA provider to be used in runtime
            flows
          example: true
        name:
          type: string
          description: The name of the external MFA provider
          example: External Security
        type:
          type: string
          description: The type of external MFA integration
          example: generic
          enum:
          - generic
          - duo
        uniqueNameAttribute:
          type: string
          description: The account attribute that identifies the user in the external
            provider system
          example: email
        webhookId:
          type: string
          description: The webhook configuration identifier
          example: 87e0cd55-366a-45b6-a401-243f9bd5ab7f
      description: The external MFA providers configuration.
    OIDCClient:
      required:
      - accessTokenLifetime
      - authorizationCodeLifetime
      - enabled
      - id
      - name
      - refreshTokenLifetime
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the authenticator client
          readOnly: true
          example: ecb2bbbb-fd45-4ce9-957f-f18eaf65dfe8
        name:
          type: string
          description: The display name of the client
          example: VerifyAuthenticator
        enabled:
          type: boolean
          description: Whether the client is enabled for runtime use
        accessTokenLifetime:
          type: integer
          description: The length of time, in seconds, an access token will be valid
          format: int32
          example: 3600
        refreshTokenLifetime:
          type: integer
          description: The length of time, in seconds, a refresh token will be valid
          format: int32
          example: 63115200
        authorizationCodeLifetime:
          type: integer
          description: The length of time, in seconds, an authorization code will
            be valid
          format: int32
          example: 120
      description: An authenticator client which is valid for runtime flows supporting
        registrations.
    VerifiableLinksAppSiteAssociationComponent:
      type: object
      properties:
        "/":
          type: string
          description: A regex pattern for matching with the URL path.
          example: "/${path_var}*"
          x-go-name: Slash
        "?":
          type: object
          additionalProperties:
            type: string
          description: A regex pattern for matching with the URL query component.
          x-go-name: Question
        "#":
          type: string
          description: A regex pattern for matching with the URL fragment component.
          example: "*"
          x-go-name: Hash
        exclude:
          type: boolean
          description: A boolean which represents if verifiable link routing will
            be denied if a match is made against URLs handled by this component.
          example: false
        comment:
          type: string
          description: A string ignored by the verifiable links system which is used
            to provide information about the component.
          example: This is an example comment on an example component.
        caseSensitive:
          type: boolean
          description: A boolean which represents if URLs handled by this component
            require case sensitive matching.
          example: true
        percentEncoded:
          type: boolean
          description: A boolean which represents if URLs handled by this component
            are percent-encoded.
          example: true
    EnrollSignatureMethodsPartialResponse:
      type: object
      properties:
        successes:
          type: array
          description: List of successful signature enrollments
          items:
            "$ref": "#/components/schemas/SignatureMethod"
        failures:
          type: array
          description: List of signature enrollment failures
          items:
            "$ref": "#/components/schemas/EnrollSignatureMethodFailedResponse"
      description: The JSON representation of a partial signature enrollment.
    CreateEmailotpVerification_2.0:
      type: object
      properties:
        correlation:
          type: string
          description: A value to be associated with the verification. It will be
            prefixed to the one-time password in the email to be sent.
          example: '4567'
      description: The creation data for a email one-time password verification.
    ServiceIndexOptions_2.0:
      required:
      - charset
      - length
      type: object
      properties:
        length:
          maximum: 45
          minimum: 25
          type: integer
          description: The length of the service index identifier
          format: int32
          example: 25
        charset:
          type: string
          description: The character set that is used to generate the alphanumeric
            identifier. A minimum of 8 unique characters is required.
          example: ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789
      description: The configuration options for a service index identifier.
    CreateVoiceotpVerification_2.0:
      type: object
      properties:
        correlation:
          type: string
          description: A value to be associated with the verification. It will be
            prefixed to the one-time password in the phone call to be sent.
          example: '4567'
      description: The creation data for a voice one-time password verification.
    EnrollSignatureMethod:
      required:
      - attributes
      - subType
      type: object
      properties:
        subType:
          type: string
          description: The specific sub-type of the enrollment. Support values
          example: fingerprint
          enum:
          - userPresence
          - fingerprint
          - face
        enabled:
          type: boolean
          description: The enabled state of the enrollment to be used for runtime
            flows
          example: false
        attributes:
          "$ref": "#/components/schemas/EnrollSignatureAttributes"
      description: The JSON representation of the request data to enroll a signature
        authentication method
    QuestionsQuestion_2.0:
      required:
      - question
      - questionKey
      type: object
      properties:
        questionKey:
          type: string
          description: The question identifier key
          example: mothersMaidenName
        question:
          "$ref": "#/components/schemas/QuestionsLocale_2.0"
      description: A set of knowledge question translations for a specific question.
    QuestionsEnrollmentAttributes_2.0:
      required:
      - questions
      type: object
      properties:
        questions:
          type: array
          description: The list of enrolled questions
          items:
            "$ref": "#/components/schemas/QuestionKey_2.0"
      description: A knowledge questions enrollment attributes.
    SignatureMethodAttributes:
      required:
      - algorithm
      - supportedAlgorithms
      type: object
      properties:
        algorithm:
          type: string
          description: The preferred signing algorithm
          readOnly: true
          example: RSASHA256
        supportedAlgorithms:
          type: array
          description: A list of supported signing algorithms
          items:
            type: string
      description: Additional attributes for a signature based authentication method.
    FulfillVerificationFailedResponse:
      required:
      - messageDescription
      - messageId
      - requestObject
      type: object
      properties:
        messageId:
          type: string
          description: The message key identifier.
          example: CSIBH1234X
        messageDescription:
          type: string
          description: Requester locale specific descriptive message.
          example: CSIBH1234X The access token included in the request is not valid.
        requestObject:
          "$ref": "#/components/schemas/FulfillVerification"
      description: The JSON representation of a failed verification attempt.
    UsernameRecovered:
      required:
      - username
      type: object
      properties:
        username:
          type: string
          description: The username of the associated user
          readOnly: true
          example: jessica
      description: The username recovery response.
    RecaptchaConfigurations:
      required:
      - recaptcha
      type: object
      properties:
        recaptcha:
          type: array
          description: The list of reCAPTCHA configurations
          items:
            "$ref": "#/components/schemas/RecaptchaConfiguration"
      description: The list of reCAPTCHA configurations.
    VerifiableLinksEntryData:
      type: object
      properties:
        datafile:
          type: object
          properties: {}
        filetype:
          type: string
        created:
          type: string
          format: date-time
        hostname:
          type: string
        tenantUuid:
          type: string
          format: uuid
    InitiateAuthenticationMethod:
      required:
      - id
      - methodType
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the authentication method enrollment
          example: f867dceb-a360-44f4-883f-70723272d27f
        methodType:
          type: string
          description: The type of authentication method
          example: signature
      description: The list of authentication method enrollments allowed for the authentication
        challenge.
    SmsotpConfiguration_2.0:
      required:
      - charset
      - enabled
      - expiry
      - length
      - retries
      type: object
      properties:
        charset:
          type: string
          description: The allowed alphanumeric character set for one-time password
            generation
          example: '0123456789'
        enabled:
          type: boolean
          description: The enabled state of SMS one-time password to be used in runtime
            flows
          example: true
        expiry:
          maximum: 1800
          minimum: 1
          type: integer
          description: The number of seconds until the one-time password expires
          format: int32
          example: 300
        length:
          maximum: 20
          minimum: 1
          type: integer
          description: The length of the one-time password
          format: int32
          example: 6
        retries:
          maximum: 10
          minimum: 0
          type: integer
          description: The number of retry attempts before the verification is marked
            as failed
          format: int32
          example: 2
      description: The SMS one-time password configuration.
    FidoAttributes_2.0:
      required:
      - attestationFormat
      - attestationType
      - counter
      - credentialId
      - credentialPublicKey
      - nickname
      - rpId
      - userPresent
      - userVerified
      type: object
      properties:
        attestationType:
          type: string
          description: The type of attestation that was performed
          readOnly: true
          example: Basic
        attestationFormat:
          type: string
          description: The format of attestation that was performed
          readOnly: true
          example: packed
        nickname:
          type: string
          description: The friendly name of the registration record
          readOnly: true
          example: My FIDO Authenticator
        aaGuid:
          type: string
          description: The AAGuid of the authenticator used
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        userVerified:
          type: boolean
          description: Whether the user verification was performed by the authenticator
          readOnly: true
          example: true
        userPresent:
          type: boolean
          description: Whether the user presence was performed by the authenticator
          readOnly: true
          example: true
        icon:
          type: string
          description: The metadata icon of the authenticator
          readOnly: true
        description:
          type: string
          description: The metadata description of the authenticator
          readOnly: true
        credentialId:
          type: string
          description: The credential ID of the authenticator
          readOnly: true
        credentialPublicKey:
          type: string
          description: The Base64 encoded CBOR bytes of the COSE public key issued
            by the authenticator
          readOnly: true
        rpId:
          type: string
          description: The relying party ID this enrollment belongs to
          readOnly: true
        counter:
          type: integer
          description: The counter of this authenticator
          format: int64
          readOnly: true
          example: 0
        transports:
          type: array
          description: The transports supported by the authenticator
          items:
            type: string
        x5c:
          type: array
          description: The attestation trust path of the authenticator
          items:
            type: string
        backupEligibility:
          type: boolean
          description: The backup eligibility of the enrollment
          readOnly: true
          example: false
        backupState:
          type: boolean
          description: The backup state of the enrollment
          readOnly: true
          example: false
    EmailotpEnrollments_2.0:
      required:
      - count
      - emailotp
      - limit
      - page
      - total
      type: object
      properties:
        emailotp:
          type: array
          description: The list of email one-time password enrollments
          items:
            "$ref": "#/components/schemas/EmailotpEnrollment_2.0"
        count:
          type: integer
          description: The total number of results that are returned per page
          format: int32
          example: 200
        limit:
          type: integer
          description: The total number of results that are returned per page
          format: int32
          example: 200
        page:
          type: integer
          description: The requested page, or the offset
          format: int32
          example: 1
        total:
          type: integer
          description: The number of results returned in the page
          format: int32
          example: 153
      description: The list of email one-time password enrollments.
    SmsotpEnrollments_2.0:
      required:
      - count
      - limit
      - page
      - smsotp
      - total
      type: object
      properties:
        smsotp:
          type: array
          description: The list of SMS one-time password enrollments
          items:
            "$ref": "#/components/schemas/SmsotpEnrollment_2.0"
        count:
          type: integer
          description: The total number of results that are returned per page
          format: int32
          example: 200
        limit:
          type: integer
          description: The total number of results that are returned per page
          format: int32
          example: 200
        page:
          type: integer
          description: The requested page, or the offset
          format: int32
          example: 1
        total:
          type: integer
          description: The number of results returned in the page
          format: int32
          example: 153
      description: The list of SMS one-time password enrollments.
    QuestionQuestion_2.0:
      required:
      - question
      - questionKey
      type: object
      properties:
        questionKey:
          type: string
          description: The question identifier key
          readOnly: true
          example: mothersMaidenName
        question:
          type: string
          description: Question text
          readOnly: true
          example: What is your mother's maiden name?
      description: A knowledge question.
    TransientFactor_2.0:
      required:
      - attributes
      - enabled
      - type
      type: object
      properties:
        type:
          type: string
          description: The type of authentication factor
          readOnly: true
          example: "<type>"
        enabled:
          type: boolean
          description: The enabled state of the transient factor
          example: true
        attributes:
          "$ref": "#/components/schemas/TransientFactorAttributes_2.0"
      description: A transient authentication factor.
    VerifiableLinksAppSiteAssociationAppList:
      type: object
      properties:
        apps:
          type: array
          description: A list of application IDs that are authorised to use the service
            on this domain.
          items:
            type: string
    VoiceotpEnrollments_2.0:
      required:
      - count
      - limit
      - page
      - total
      - voiceotp
      type: object
      properties:
        voiceotp:
          type: array
          description: The list of voice one-time password enrollments
          items:
            "$ref": "#/components/schemas/VoiceotpEnrollment_2.0"
        count:
          type: integer
          description: The total number of results that are returned per page
          format: int32
          example: 200
        limit:
          type: integer
          description: The total number of results that are returned per page
          format: int32
          example: 200
        page:
          type: integer
          description: The requested page, or the offset
          format: int32
          example: 1
        total:
          type: integer
          description: The number of results returned in the page
          format: int32
          example: 153
      description: The list of voice one-time password enrollments.
    IdentitySources:
      required:
      - password
      type: object
      properties:
        password:
          type: array
          description: The list of identity sources
          items:
            "$ref": "#/components/schemas/IdentitySourceResponse"
      description: The list of identity sources.
    FidoEnrollment_2.0:
      required:
      - attributes
      - created
      - enabled
      - id
      - references
      - type
      - updated
      - userId
      - validated
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the enrollment
          readOnly: true
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
        userId:
          type: string
          description: The unique identifier of the associated user
          readOnly: true
          example: 50CP15KFD3
        type:
          type: string
          description: The type of authentication factor enrollment
          readOnly: true
          example: "<type>"
        created:
          type: string
          description: The creation time of the enrollment
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        updated:
          type: string
          description: The time the enrollment was last updated
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        attempted:
          type: string
          description: The time the enrollment was last used for verification
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
        enabled:
          type: boolean
          description: The enabled state of the enrollment to be used in runtime flows
          example: true
        validated:
          type: boolean
          description: The validation state of the enrollment
          readOnly: true
          example: true
        attributes:
          "$ref": "#/components/schemas/FidoAttributes_2.0"
        references:
          "$ref": "#/components/schemas/FidoReferences_2.0"
        assertion:
          type: string
          description: A JWT which serves as proof that this factor has been performed
          readOnly: true
    NameValuePair:
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
          description: The name of the pair
          example: foo
        value:
          type: string
          description: The value of the pair
          example: bar
      description: An pair of values to represent an attribute.
    TransientFactorAttributes_2.0:
      required:
      - emailAddress
      - phoneNumber
      type: object
      properties:
        phoneNumber:
          type: string
          description: The phone number to which OTP values are delivered
          example: "+15345678911"
        emailAddress:
          type: string
          description: The email address to which the OTP values are delivered
          example: jessica@mail.com
      description: Transient factor attributes.
    TotpEnrollmentAttributes_2.0:
      required:
      - accountName
      - algorithm
      - digits
      - period
      type: object
      properties:
        algorithm:
          type: string
          description: The hashing algorithm of the one-time password
          readOnly: true
          example: SHA1
        digits:
          type: integer
          description: The number of digits in the one-time password
          format: int32
          readOnly: true
          example: 6
        period:
          type: integer
          description: The time period for the one-time password
          format: int32
          readOnly: true
          example: 30
        accountName:
          type: string
          description: The account name that the one-time password is associated with
          readOnly: true
          example: Jessica
      description: A time-based one-time password enrollment attributes.
    FidoMetadataService_2.0:
      required:
      - enabled
      - id
      - lastUpdate
      - nextUpdate
      - predefined
      - revision
      - status
      - trustAnchorIds
      - url
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the metadata service configuration
            entry
          readOnly: true
          example: 2f6462e0-3544-4a45-a418-85edd59269a1
        url:
          type: string
          description: The URL of the Metadata Service referenced by this entry
          readOnly: true
          example: https://mds3.fidoalliance.org/
        predefined:
          type: boolean
          description: Has this Metadata Service entry been predefined
          readOnly: true
          example: false
        enabled:
          type: boolean
          description: Is this Metadata Service entry currently enabled for use with
            authentication devices
          readOnly: true
          example: false
        revision:
          type: integer
          description: The current revision number of the data hosted on the Metadata
            Service
          format: int32
          readOnly: true
          example: 13
        nextUpdate:
          type: integer
          description: The timestamp representing the date at which the Metadata Service
            should next be probed for an update
          format: int64
          readOnly: true
        lastUpdate:
          type: integer
          description: The timestamp representing the date at which the Metadata Service
            was last probed for an update
          format: int64
          readOnly: true
        status:
          type: string
          description: The status of the last attempt to fetch the data hosted at
            this Metadata Service
          readOnly: true
          example: SUCCESS
          enum:
          - SUCCESS
          - FAILED
          - PENDING
        trustAnchorIds:
          uniqueItems: true
          type: array
          description: The set of friendly names of configured signer certificates
            which will be used for validation of the Metadata Service. Currently this
            expects the root certificate of the JWT signature retrieved from the Metadata
            Service.
          example: '["FIDO MDS JWT cert"]'
          items:
            type: string
      description: A FIDO metadata service configuration.
    CreateSmsotpTransient_2.0:
      required:
      - phoneNumber
      type: object
      properties:
        correlation:
          type: string
          description: A value to be associated with the verification. It will be
            prefixed to the one-time password in the SMS to be sent.
          example: '4567'
        phoneNumber:
          type: string
          description: The phone number to be used to deliver one-time password values
          example: "+15345678911"
      description: The creation data for a SMS one-time password verification.
    MfaProviderDefinitions:
      required:
      - mfaproviders
      type: object
      properties:
        mfaproviders:
          type: array
          description: The list of external MFA providers definitions
          items:
            "$ref": "#/components/schemas/MfaProviderDefinition"
      description: The list of external MFA providers definitions.
    VerifiableLinksAppSiteAssociation:
      required:
      - applinks
      type: object
      properties:
        applinks:
          "$ref": "#/components/schemas/VerifiableLinksAppSiteAssociationApplinks"
        webcredentials:
          "$ref": "#/components/schemas/VerifiableLinksAppSiteAssociationAppList"
        appclips:
          "$ref": "#/components/schemas/VerifiableLinksAppSiteAssociationAppList"
      description: An apple app site association file configuration.
    RecaptchaConfigurationReference:
      required:
      - created
      - location
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the reference
          readOnly: true
          example: User Registration
        location:
          type: string
          description: The location of the reference
          readOnly: true
          example: "/v2.0/flows/e0076f18-356b-43cd-8544-f9a93b8e795e"
        created:
          type: string
          description: The time when the reference was created
          readOnly: true
          example: '2018-07-16T02:13:47.719Z'
      description: A reCAPTCHA configuration reference.
    CreateSmsotpEnrollment_2.0:
      required:
      - phoneNumber
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier of the associated user
          example: 50CP15KFD3
        enabled:
          type: boolean
          description: The enabled state of the enrollment to be used in runtime flows
          example: true
        phoneNumber:
          type: string
          description: The phone number to be used to deliver one-time password values
          example: "+15345678911"
      description: The creation data of a SMS one-time password enrollment.
    MfaProviderConfigurations:
      required:
      - mfaproviders
      type: object
      properties:
        mfaproviders:
          type: array
          description: The list of external MFA providers configuration
          items:
            "$ref": "#/components/schemas/MfaProviderConfiguration"
      description: The list of external MFA providers configuration.
    VerifySmsotpVerification_2.0:
      required:
      - otp
      type: object
      properties:
        otp:
          type: string
          description: The one-time password value
          example: '123456'
      description: A SMS one-time password verification attempt.
    Signature:
      required:
      - enabled
      type: object
      properties:
        enabled:
          type: boolean
          description: The enabled state of signature authentication methods. If 'false'
            this will override any subtype enabled states
          example: true
        userPresence:
          "$ref": "#/components/schemas/SubType"
        fingerprint:
          "$ref": "#/components/schemas/SubType"
        face:
          "$ref": "#/components/schemas/SubType"
    GrantAuthenticatorAttributes:
      required:
      - accountName
      - applicationId
      - applicationVersion
      - deviceId
      - deviceName
      - deviceType
      - faceSupport
      - fingerprintSupport
      - frontCameraSupport
      - osVersion
      - pushToken
      - verifySdkVersion
      type: object
      properties:
        pushToken:
          type: string
          description: The token used to send push notifications to the authenticator
          example: 5fw75HqyXnivkpmb%3AudWNSI7s
        accountName:
          type: string
          description: A user friendly name for the registration
          example: Savings Account
        applicationId:
          type: string
          description: The mobile application identifier assigned or registered with
            the mobile platform provider
          readOnly: true
          example: com.ibm.security.verifyapp
        applicationVersion:
          type: string
          description: The version of the registering mobile application
          example: 1.0.5
        verifySdkVersion:
          type: string
          description: The version of the IBM Verify SDK
          example: 1.0.1
        deviceName:
          type: string
          description: The mobile device manufacturer device name
          example: John's iPhone
        deviceType:
          type: string
          description: The mobile device type
          readOnly: true
          example: iPhone
        platformType:
          type: string
          description: The mobile device platform type. Support values
          readOnly: true
          example: IOS
          enum:
          - Android
          - IOS
          - IPADOS
          - Other
        deviceId:
          type: string
          description: The mobile device identifier
          readOnly: true
          example: 3f9821f4-b79f-47e3-9efc-51a48cf00ea7
        osVersion:
          type: string
          description: The version of the mobile operating system
          example: 11.2.1
        faceSupport:
          type: boolean
          description: Whether the mobile device supports facial recognition
          readOnly: true
          example: false
        fingerprintSupport:
          type: boolean
          description: Whether the mobile device supports a fingerprint sensor
          readOnly: true
          example: true
        frontCameraSupport:
          type: boolean
          description: Whether the mobile device support a front facing camera
          readOnly: true
          example: true
        mdmDeviceId:
          type: string
          description: The MDM device identifier
          readOnly: true
          example: 8fea710e-88a5-4658-ab8a-66a3bf49e4a1
        deviceInsecure:
          type: boolean
          description: Whether the mobile device is deemed insecure; jailbroken or
            rooted
          readOnly: true
          example: true
      description: Additional attributes to be associated with the registration. All
        values must be URL encoded.
    UsernameRecovery:
      required:
      - attributes
      - id
      type: object
      properties:
        id:
          type: string
          description: The identity source identifier
          example: 2492f190-0d9f-4c80-8a0e-fafd44666ca8
        attributes:
          type: object
          additionalProperties:
            type: string
          description: The attributes on which to recover the username
      description: The username recovery request.
    CreateQuestionsEnrollmentReferences_2.0:
      required:
      - profileId
      type: object
      properties:
        profileId:
          type: string
          description: The configuration profile identifier
          example: 1e5fa156-3754-4265-8796-1a2f0a6f036f
      description: A knowledge questions enrollment's references.
    SignatureAttributes:
      required:
      - additionalData
      - algorithm
      - authenticatorId
      - authenticatorUri
      - deviceSecurity
      type: object
      properties:
        algorithm:
          type: string
          description: The algorithm of the public key
          readOnly: true
          example: RSASHA256
        authenticatorId:
          type: string
          description: The unique identifier for the associated authenticator registration
          readOnly: true
          example: 7b676daa-8725-472d-a7f2-88f05c0b798b
        authenticatorUri:
          type: string
          description: The location of the associated authenticator registration
          readOnly: true
          example: https://tenant.ice.ibmcloud.com/v1.0/authenticators/{id}
        additionalData:
          type: array
          description: Additional data to be included with authentication challenges
          items:
            "$ref": "#/components/schemas/NameValuePair"
        deviceSecurity:
          type: boolean
          description: Indicates if device based authentication protected secure storage
            is used
          readOnly: true
          example: true
      description: Attributes to be associated with an enrollment
    PwdvaultEnrollment:
      required:
      - resources
      type: object
      properties:
        resources:
          type: array
          description: The resources
          items:
            "$ref": "#/components/schemas/PwdvaultEnrollmentResource"
      description: The data of a password vault enrollment.
    PatchOperation_1:
      required:
      - op
      - path
      type: object
      properties:
        op:
          type: string
          description: The operation to be performed. The value must be one of the
            following values "add", "remove", "replace", "move", "copy", or "test"
          example: replace
        path:
          type: string
          description: The reference location in the target document that is to be
            altered
          example: "/a/b/c"
        from:
          type: string
          description: The reference location in the target document from which to
            copy or move the value
          example: "/a/b/b"
        value:
          type: string
          description: The value to use in an add, replace, or test operation. The
            data type of the specified value is the type to be stored at the reference
            location
          example: foo
      description: The operation that is to be performed.
    Component_1:
      required:
      - details
      - name
      - status
      - time
      type: object
      properties:
        name:
          type: string
          description: The name of the evaluated component
          example: ZooKeeper
        status:
          type: string
          description: The status of the evaluated component
          example: good
        details:
          type: string
          description: A descriptive message about the health status
          example: Successfully connected to ZooKeeper
        others:
          type: object
          additionalProperties:
            type: object
            properties: {}
        time:
          type: string
          description: The time that was taken to evaluate the health status of the
            component
          example: 4ms
      description: The health status of a component.
    UserGroup_0:
      type: object
      properties:
        name:
          type: string
          description: The name of the group
          example: admin
        displayName:
          type: string
          description: The display name of the group
          example: Administrators
        sourceId:
          type: string
          description: The source identifier of the group
          example: bd45bba8-a1d4-4de2-bc80-be2855589363
    HealthCheckModel:
      required:
      - components
      - status
      type: object
      properties:
        components:
          type: array
          description: The health check status for all of the GTA components.
          items:
            "$ref": "#/components/schemas/Component_2"
        status:
          type: string
          description: The over all resulting status of the health check.
          example: good
          enum:
          - good
          - bad
          - marginal
    Tenant:
      required:
      - companyName
      - enabled
      - friendlyName
      - properties
      - status
      - tenantId
      - tenantType
      - uuid
      type: object
      properties:
        tenantId:
          type: string
          description: The unique tenant identifier. Required for a create operation
            only. Once created, this becomes a read-only value.
          example: webui-dev-ite-firefox-5-15.ite1.idng.ibmcloudsecurity.com
        tenantType:
          type: string
          description: The type of tenant this is. Valid values are SSO_SVC_1.0 or
            ICE_1.0
          example: SSO_SVC_1.0
        friendlyName:
          type: string
          description: The short name or human readable name of the tenant.
          example: webui-dev-ite-firefox-5-15
        companyName:
          type: string
          description: The company name that is associated with the tenant.
          example: Hooli
        companyEmail:
          type: string
          description: The optional company email contact that is associated with
            the tenant.
          example: shiba@suchwow.amaze
        enabled:
          type: boolean
          description: Is this tenant enabled?
          example: true
        status:
          type: string
          description: What is the status of this tenant? Is it configured or unconfigured?
          example: configured
        instanceAdminURL:
          type: string
          description: The tenant instance administration URL. This is generated and
            is a read-only property.
          example: https://webui-dev-ite-firefox-5-15.ite1.idng.ibmcloudsecurity.com:9543/v1/mgmt/idaas
        endpointURLs:
          "$ref": "#/components/schemas/TenantEndpointURLsModel"
        properties:
          type: array
          description: The list of tenant properties
          items:
            "$ref": "#/components/schemas/TenantProperty"
        uuid:
          type: string
          description: The tenants unique identifier. This is generated and is a read-only
            property.
          example: 0b31832c-b732-492e-8526-821be356a5fc
      xml:
        name: tenant
    TenantEndpointURLsModel:
      type: object
      properties:
        authorization:
          type: string
          description: The authorization endpoint.
          example: https://webui-dev-ite-firefox-5-15.ite1.idng.ibmcloudsecurity.com/idaas/oidc/endpoint/default/authorize
        userinfo:
          type: string
          description: The user info endpoint.
          example: https://webui-dev-ite-firefox-5-15.ite1.idng.ibmcloudsecurity.com/idaas/oidc/endpoint/default/userinfo
        token:
          type: string
          description: The token endpoint.
          example: https://webui-dev-ite-firefox-5-15.ite1.idng.ibmcloudsecurity.com/idaas/oidc/endpoint/default/token
    TenantProperty:
      type: object
      xml:
        name: property
    User:
      required:
      - addresses
      - emails
      - id
      - name
      - schemas
      - userName
      type: object
      properties:
        schemas:
          type: array
          description: |-
            An array of Strings containing URIs that are used to indicate the
            namespaces of the SCIM schemas that define the attributes present in the
            current JSON structure.
              The schemas "urn:ietf:params:scim:schemas:core:2.0:User"  and "urn:ietf:params:scim:schemas:extension:ibm:2.0:User" are returned in the response.
          items:
            type: string
        id:
          type: string
          description: "Unique identifier for the Resource as defined by the Service.
            \nThis attribute is readonly and will be sent by the service. \n Any value
            specified for this attribute in the JSON POST or \nPUT request payload
            will be ignored"
        externalId:
          type: string
          description: "Unique identifier for the Resource as defined by the Provisioning
            Client. \nThis attribute is the identification of a resource between the
            provisioning client and the service provider \nby allowing the client
            to use a filter to locate the resource with an identifier from the provisioning
            domain. \n"
        meta:
          "$ref": "#/components/schemas/MetaV2_0"
        userName:
          type: string
          description: "Unique identifier for the User, typically used by the user
            to directly authenticate \n to the service provider. Often displayed to
            the user as their unique identifier within \n the system (as opposed to
            id or externalId, which are generally opaque and not user-friendly \n
            identifiers). Each User MUST include a non-empty userName value. This
            identifier MUST be \n unique across the Service Consumer's entire set
            of Users. It MUST be a stable ID that does \n not change when the same
            User is returned in subsequent requests."
        title:
          type: string
          description: The user's title, such as "Vice President."
        name:
          "$ref": "#/components/schemas/Name_0"
        displayName:
          type: string
          description: "The name of the User, suitable for display to end-users. Each
            User returned MAY include a \nnon-empty displayName value. The name SHOULD
            be the full name of the User being described \nif known (e.g. Babs Jensen
            or Ms. Barbara J Jensen, III), but MAY be a username or handle, \nif that
            is all that is available (e.g. bjensen). The value provided SHOULD be
            the primary \ntextual label by which this User is normally displayed by
            the Service Provider when presenting \nit to end-users"
        active:
          type: boolean
          description: "A Boolean value indicating the User's administrative status.
            The definitive meaning of this \nattribute is determined by the Service
            Provider though a value of true infers the User is, \nfor example, able
            to login while a value of false implies the User's account has been suspended.
            \nA missing vaue implies that the value is true"
        emails:
          type: array
          description: List of emails for the user.  Only one is supported.
          items:
            "$ref": "#/components/schemas/EmailAddress_0"
        addresses:
          type: array
          description: List of addresses for the user.
          items:
            "$ref": "#/components/schemas/Address_0"
        phoneNumbers:
          type: array
          description: List of phone numbers for the user.
          items:
            "$ref": "#/components/schemas/PhoneNumber_0"
        groups:
          type: array
          description: "List of Groups that the User is a member of. \n Any value
            specified for this attribute in the JSON POST or \nPUT request payload
            will be ignored.  Group membership is managed using the /Groups API."
          items:
            "$ref": "#/components/schemas/Groups_0"
        urn:ietf:params:scim:schemas:extension:ibm:2.0:User:
          "$ref": "#/components/schemas/CICCustomUserResponse_0"
    ExternalErrorMessageModel:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          description: The error message.
          example: CTJMS0000E The translated error message from the catalog
    AdminUser:
      required:
      - addresses
      - emails
      - id
      - name
      - schemas
      - userName
      type: object
      properties:
        schemas:
          type: array
          description: |-
            An array of Strings containing URIs that are used to indicate the
            namespaces of the SCIM schemas that define the attributes present in the
            current JSON structure.
              The schemas "urn:ietf:params:scim:schemas:core:2.0:User"  and "urn:ietf:params:scim:schemas:extension:ibm:2.0:User" are returned in the response.
          items:
            type: string
        id:
          type: string
          description: "Unique identifier for the Resource as defined by the Service.
            \nThis attribute is readonly and will be sent by the service. \n Any value
            specified for this attribute in the JSON POST or \nPUT request payload
            will be ignored"
        externalId:
          type: string
          description: "Unique identifier for the Resource as defined by the Provisioning
            Client. \nThis attribute is the identification of a resource between the
            provisioning client and the service provider \nby allowing the client
            to use a filter to locate the resource with an identifier from the provisioning
            domain. \n"
        meta:
          "$ref": "#/components/schemas/MetaV2_0"
        userName:
          type: string
          description: "Unique identifier for the User, typically used by the user
            to directly authenticate \n to the service provider. Often displayed to
            the user as their unique identifier within \n the system (as opposed to
            id or externalId, which are generally opaque and not user-friendly \n
            identifiers). Each User MUST include a non-empty userName value. This
            identifier MUST be \n unique across the Service Consumer's entire set
            of Users. It MUST be a stable ID that does \n not change when the same
            User is returned in subsequent requests."
        title:
          type: string
          description: The user's title, such as "Vice President."
        name:
          "$ref": "#/components/schemas/Name_0"
        displayName:
          type: string
          description: "The name of the User, suitable for display to end-users. Each
            User returned MAY include a \nnon-empty displayName value. The name SHOULD
            be the full name of the User being described \nif known (e.g. Babs Jensen
            or Ms. Barbara J Jensen, III), but MAY be a username or handle, \nif that
            is all that is available (e.g. bjensen). The value provided SHOULD be
            the primary \ntextual label by which this User is normally displayed by
            the Service Provider when presenting \nit to end-users"
        active:
          type: boolean
          description: "A Boolean value indicating the User's administrative status.
            The definitive meaning of this \nattribute is determined by the Service
            Provider though a value of true infers the User is, \nfor example, able
            to login while a value of false implies the User's account has been suspended.
            \nA missing vaue implies that the value is true"
        emails:
          type: array
          description: List of emails for the user.  Only one is supported.
          items:
            "$ref": "#/components/schemas/EmailAddress_0"
        addresses:
          type: array
          description: List of addresses for the user.
          items:
            "$ref": "#/components/schemas/Address_0"
        phoneNumbers:
          type: array
          description: List of phone numbers for the user.
          items:
            "$ref": "#/components/schemas/PhoneNumber_0"
        groups:
          type: array
          description: "List of Groups that the User is a member of. \n Any value
            specified for this attribute in the JSON POST or \nPUT request payload
            will be ignored.  Group membership is managed using the /Groups API."
          items:
            "$ref": "#/components/schemas/Groups_0"
        urn:ietf:params:scim:schemas:extension:ibm:2.0:User:
          "$ref": "#/components/schemas/CICCustomUserResponse_0"
    CreateAdminUser:
      required:
      - emailAddress
      type: object
      properties:
        emailAddress:
          type: string
          description: The email address of the IBM ID account.
          example: someuser@somedomain.com
    Properties:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    UserIdentitySourcesModel:
      required:
      - enabled
      - id
      - instanceName
      - predefined
      - properties
      - providerType
      - status
      type: object
      properties:
        instanceName:
          type: string
          example: Cloud Directory
        id:
          type: string
          example: 97887284-1cf5-4fe6-b1f4-5ab83123d69e
        providerType:
          type: string
          example: ibmldap
        enabled:
          type: boolean
          example: true
        predefined:
          type: boolean
          example: true
        status:
          type: string
          example: configured
        properties:
          type: array
          example: "[{'key': 'redirect_url', 'value': 'https://test.tenant.ibm.com/idaas/mtfim/sps/idaas/login/ibmldap?identity_source_id=4'}]"
          items:
            "$ref": "#/components/schemas/Properties"
    RestWebApplicationExceptionModel:
      required:
      - result
      type: object
      properties:
        result:
          type: string
          description: The error message.
          example: CTJMS0000E The translated error message from the catalog
    PostIdentityFilterInput:
      required:
      - user
      type: object
      properties:
        user:
          type: string
          description: The username.
          example: someuser@somedomain.com
        oidcUrl:
          type: boolean
          description: Send the local redirect URL if oidcUrl is false, else send
            the OIDC redirect URL.
        type:
          type: string
          description: The identity source type (e.g. ibmldap)
          example: ibmldap
          enum:
          - ibmldap|ibmid|saml20|facebook|linkedin|google|github|social
        clientId:
          type: string
          description: The client ID.
          example: someid
    UserStatusResponseModel:
      required:
      - user
      type: object
      properties:
        user:
          type: string
          description: The user that is currently authenticated, otherwise "unauthenticated"
          example: some.user@mailserver.com
        realmName:
          type: string
          description: The real name of the authenticated user
          example: www.ibm.com
        isFederated:
          type: boolean
          description: Whether or not the authenticated user is a federated user
          example: false
    USCAddressesModel:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          example: work
          enum:
          - work
        locality:
          type: string
          example: The city or locality component.
        streetAddress:
          type: string
          example: The street address.
        postalCode:
          type: string
          example: The postal code.
        country:
          type: string
          description: The country code.
          example: US
    USCEmailsModel:
      required:
      - type
      - value
      type: object
      properties:
        type:
          type: string
          description: A label that indicates the attribute function; for example,
            "work".  Only a single email is allowed.
          enum:
          - work
        value:
          type: string
          description: The e-mail addresses for the user. The value is canonicalized
            by the service provider. For example, bjensen@example.com instead of bjensen@EXAMPLE.COM.
    USCNameModel:
      type: object
      properties:
        familyName:
          type: string
          description: The family name of the user, or the last name in most Western
            languages. For example, Jensen is the family name from the full name Ms.
            Barbara J Jensen, PhD.
        givenName:
          type: string
          description: The given name of the user, or first name in most Western languages.
            For example, Barbara is the given name from the full name Ms. Barbara
            J Jensen, PhD.
    USCPhoneNumbersModel:
      required:
      - type
      - value
      type: object
      properties:
        type:
          type: string
          description: A label that indicates the attribute's function; for example,
            "work" or "home".
          example: work
          enum:
          - work
          - fax
          - home
          - mobile
          - pager
        value:
          type: string
          description: A list of phone numbers that are associated with the user.
            The value is be canonicalized by the service provider according to format
            in RFC3966, for example, "tel:+1-201-555-0123". Canonical type values
            are work, home, mobile, fax, and pager.
    USCUserResponseModel:
      required:
      - id
      - schemas
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the resource as defined by the service.
            This attribute is read-only and ise sent by the service. Any value that
            is specified for this attribute in the JSON POST or PUT request payload
            is ignored.
        schemas:
          type: array
          description: An array of strings that contain the URIs that indicate the
            namespaces of the SCIM schemas that define the attributes in the current
            JSON structure. The schemas "urn:scim:schemas:core:1.0" are returned in
            the response.
          example: urn:scim:schemas:core:1.0
          items:
            type: string
        externalId:
          type: string
          description: A unique identifier for the resource that is defined by the
            provisioning client. It identifies a resource between the provisioning
            client and the service provider. The client can use a filter to locate
            the resource with an identifier from the provisioning domain.
        groups:
          type: array
          description: The list of groups that the user belongs to.
          items:
            "$ref": "#/components/schemas/Groups_0"
        meta:
          type: array
          description: The user meta data.
          items:
            "$ref": "#/components/schemas/Meta_0"
        pwdChangedTime:
          type: string
          description: Indicates the time when the password was changed for the current
            user entry.
          example: 20150331204436.707773Z
        emailVerified:
          type: string
          description: When the user's email was verified. Specified in seconds past
            the epoch.
          example: '1586206429'
        userName:
          type: string
          description: The username. Must be unique.
          example: someuser@abc.com
        name:
          "$ref": "#/components/schemas/USCNameModel"
        active:
          type: boolean
          description: A Boolean value that indicates the user's administrative status.
          example: true
        emails:
          type: array
          description: A list of email addresses that are associated with the user.
            Only one is supported.
          items:
            "$ref": "#/components/schemas/USCEmailsModel"
        emailId:
          type: string
          description: An identifier that maps to a section in the email template
            for email delivery. This can be used for sending a different email based
            on the identifier passed in. If the emailId is not present, the 'default'
            email identifier in the template is used.
          example: default
        phoneNumbers:
          type: array
          description: A list of phone numbers that are associated with the user.
          items:
            "$ref": "#/components/schemas/USCPhoneNumbersModel"
        addresses:
          type: array
          description: A list of addresses that are associated with the user.
          items:
            "$ref": "#/components/schemas/USCAddressesModel"
        stateId:
          type: string
          description: The state identifier associated with the registration request.
            The default is 'default' if not specified.
          example: stateID
    USCMacrosModel:
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
          description: The macro name must begin and end with a @ sign.
          example: "@MACRO1@"
        value:
          type: string
          description: The string to replace for the macro.
          example: Some string
    USCRegistrationCompleteModel:
      required:
      - emails
      - password
      - userName
      type: object
      properties:
        token:
          type: string
          description: The token to validate.  This field is required for registrationType
            'normal'.
          example: '349765'
        userName:
          type: string
          description: The username. Must be unique.
          example: someuser@abc.com
        password:
          type: string
          description: The password
          example: secret
        name:
          "$ref": "#/components/schemas/USCNameModel"
        emails:
          type: array
          description: This is a list of email addresses.
          items:
            "$ref": "#/components/schemas/USCEmailsModel"
        active:
          type: boolean
          description: 'Set to FALSE to lock the account. The default is TRUE if not
            present. '
          example: true
        phoneNumbers:
          type: array
          description: This is a list of phone numbers.
          items:
            "$ref": "#/components/schemas/USCPhoneNumbersModel"
        addresses:
          type: array
          description: This is a list of addresses.
          items:
            "$ref": "#/components/schemas/USCAddressesModel"
        companyName:
          type: string
          example: IBM
        sendEmail:
          type: boolean
          description: Send an email that registration is complete. The default is
            TRUE if not present.
          example: true
        emailId:
          type: string
          description: An identifier that maps to a section in the email template
            for email delivery. This can be used for sending a different email based
            on the identifier passed in. If the emailId is not present, the 'default'
            email identifier in the template is used.
          example: default
        macros:
          type: array
          description: An array of email macros. The macro name must start and end
            with a @ sign.
          items:
            "$ref": "#/components/schemas/USCMacrosModel"
    USCRegistrationModel:
      required:
      - emailAddress
      type: object
      properties:
        emailAddress:
          type: string
          description: The user's email address.
          example: someone@abc.com
        stateId:
          type: string
          description: The state identifier associated with the registration request.
            The default is 'default' if not specified.
          example: stateID
        emailId:
          type: string
          description: An identifier that maps to a section in the email template
            for email delivery. This can be used for sending a different email based
            on the identifier passed in. If the emailId is not present, the 'default'
            email identifier in the template is used.
          example: default
        adopterId:
          type: string
          description: 'An identifier that can be used to customize the token length,
            expiration in minutes, and the character set. See the /adopter/adopter.properties
            template file for an example. '
          example: adopterID
        macros:
          type: array
          description: An array of email macros. The macro name must start and end
            with a @ sign.
          items:
            "$ref": "#/components/schemas/USCMacrosModel"
    USCPreverifyModel:
      required:
      - emails
      - password
      - userName
      type: object
      properties:
        userName:
          type: string
          description: The username. Must be unique.
          example: someuser@abc.com
        id:
          type: string
          description: The IBM unique identifier. Must be unique.
          example: A1B2C3D4E5
        password:
          type: string
          description: The password
          example: secret
        name:
          "$ref": "#/components/schemas/USCNameModel"
        emails:
          type: array
          description: This is a list of email addresses.
          items:
            "$ref": "#/components/schemas/USCEmailsModel"
        active:
          type: boolean
          description: 'Set to FALSE to lock the account. The default is TRUE if not
            present. '
          example: true
        phoneNumbers:
          type: array
          description: This is a list of phone numbers.
          items:
            "$ref": "#/components/schemas/USCPhoneNumbersModel"
        addresses:
          type: array
          description: This is a list of addresses.
          items:
            "$ref": "#/components/schemas/USCAddressesModel"
        companyName:
          type: string
          example: IBM
        sendEmail:
          type: boolean
          description: Send an email that registration is complete. The default is
            TRUE if not present.
          example: true
        emailId:
          type: string
          description: An identifier that maps to a section in the email template
            for email delivery. This can be used for sending a different email based
            on the identifier passed in. If the emailId is not present, the 'default'
            email identifier in the template is used.
          example: default
        macros:
          type: array
          description: An array of email macros. The macro name must start and end
            with a @ sign.
          items:
            "$ref": "#/components/schemas/USCMacrosModel"
    USCTokenValidationResponseModel:
      required:
      - stateId
      - userId
      type: object
      properties:
        userId:
          type: string
          description: 'The user identifier associated with the validation token. '
          example: someone@abc.com
        stateId:
          type: string
          description: The state identifier associated with the token.
          example: stateID
    USCEmailValidationCompleteModel:
      required:
      - token
      type: object
      properties:
        token:
          type: string
          description: The token to validate.
          example: '349765'
    USCForgotPasswordModel:
      required:
      - userName
      type: object
      properties:
        userName:
          type: string
          description: The username.
          example: someuser@abc.com
        stateId:
          type: string
          description: The state identifier associated with the forgot password request.
            The default is 'default' if not specified.
          example: stateID
        emailId:
          type: string
          description: An identifier that maps to a section in the email template
            for email delivery. This can be used for sending a different email based
            on the identifier passed in. If the emailId is not present, the 'default'
            email identifier in the template is used.
          example: default
        adopterId:
          type: string
          description: 'An identifier that can be used to customize the token length,
            expiration in minutes, and the character set. See the /adopter/adopter.properties
            template file for an example. '
          example: adopterID
        macros:
          type: array
          description: An array of email macros. The macro name must start and end
            with a @ sign.
          items:
            "$ref": "#/components/schemas/USCMacrosModel"
    USCGenerateTokenModel:
      required:
      - emailAddress
      type: object
      properties:
        emailAddress:
          type: string
          description: The email address to generate the token for.
          example: someone@abc.com
        stateId:
          type: string
          description: The state identifier associated with the request. The default
            is 'default' if not specified.
          example: stateID
        emailId:
          type: string
          description: An identifier that maps to a section in the email template
            for email delivery. This can be used for sending a different email based
            on the identifier passed in. If the emailId is not present, the 'default'
            email identifier in the template is used.
          example: default
        adopterId:
          type: string
          description: 'An identifier that can be used to customize the token length,
            expiration in minutes, and the character set. See the /adopter/adopter.properties
            template file for an example. '
          example: adopterID
        macros:
          type: array
          description: An array of email macros. The macro name must start and end
            with a @ sign.
          items:
            "$ref": "#/components/schemas/USCMacrosModel"
    USCForgotPasswordCompleteModel:
      required:
      - password
      - token
      type: object
      properties:
        token:
          type: string
          description: The token to validate.
          example: '349765'
        password:
          type: string
          description: The new password
          example: secret
        emailId:
          type: string
          description: An identifier that maps to a section in the email template
            for email delivery. This can be used for sending a different email based
            on the identifier passed in. If the emailId is not present, the 'default'
            email identifier in the template is used.
          example: default
    USCTokenValidationModel:
      required:
      - token
      type: object
      properties:
        token:
          type: string
          description: The token to validate.
          example: '349765'
        delete:
          type: boolean
          description: A value of true deletes the token after successful validation.
            Defaults to false if not specified.
          example: true
    TenantPropertiesModel:
      required:
      - properties
      type: object
      properties:
        properties:
          type: array
          description: The tenant properties are a list of key,value pairs.
          items:
            "$ref": "#/components/schemas/TenantPropertyModel"
    TenantPropertyModel:
      required:
      - key
      - value
      type: object
      properties:
        key:
          type: string
          description: The name of the tenant property.
        value:
          type: string
          description: The value of the tenant property.
    NextPwdResetStepResponseModel:
      required:
      - httpMethod
      - method
      - uri
      type: object
      properties:
        method:
          type: string
          description: The method that is used to verify the user's identity.
          example: emailotp
          enum:
          - emailLink
          - emailotp
          - smsotp
          - totp
          - fingerprint
          - userpresence
        httpMethod:
          type: string
          description: The HTTP method for the next step's API call to verify the
            user's identity.
          example: POST
          enum:
          - POST
          - PUT
        creationTime:
          type: string
          description: The created time for the method.
          example: '2024-02-09T11:19:42.12Z'
        expiryTime:
          type: string
          description: The expiry time for the method.
          example: '2024-02-09T11:24:42.12Z'
        uri:
          type: string
          description: The HTTP URI for the next step's API call to verify the user's
            identity.
          example: "/v1.0/usc/password/resetter/{trxId}/validator"
    PwdResetResponseModel:
      required:
      - nextStep
      - stepsRemaining
      - trxId
      type: object
      properties:
        trxId:
          type: string
          description: The transaction ID of the request.
        stepsRemaining:
          type: integer
          description: The number of steps that remain to verify the user's identity.
          format: int32
          example: 2
        nextStep:
          "$ref": "#/components/schemas/NextPwdResetStepResponseModel"
    Data:
      type: object
      properties:
        correlation:
          type: string
          description: The correlation to prepend to the OTP that is sent to the user.  An
            example is 3235-126543, where the correlation is 3235, and 126543 is the
            OTP.
          example: '3235'
        baseVerificationUrl:
          type: string
          description: Valid for the emailLink method.  The baseVerificationUrl specifies
            the URL link that is sent in the email to complete the flow.  If the value
            is not specified, the email includes a built-in URL link that goes to
            the tenant page to complete the flow.   Query parameters that include
            the USC transaction ID and factors transaction ID (OTP) are automatically
            appended to the URL.
        targetUrl:
          type: string
          description: Valid for user invitations and password resetter operations.
            IBM Security Verify will redirect to this location. The redirect will
            occur when the baseVerificationUrl is not specified which indicates the
            email link goes to IBM Security Verify for processing. The attribute value
            has no effect when the baseVerificationUrl is specified.
          example: https://myapplication.com
        enrollmentId:
          type: string
          description: Valid for the password resetter and username recovery operations.
            Specify the user's enrollment ID for the method that is used to verify
            the user's identity or specify "transient" to usethe user's profile data.  For
            the methods that support multiple enrollments for a user, the ID indicates
            which one of them to use. If not specified, the first user enrollment
            found for the method is used. If the user is not enrolled for the method
            and authentication factors tenant configuration indicates to use "User-enrolled
            methods only", then the request will fail. The keyword "transient" can
            be used when the tenant configuration indicates to use "User profile attributes
            and enrolled methods" and the method of verification is emailotp, smsotp,
            or voiceotp.
        transientValue:
          type: string
          description: Valid for the password resetter and username recovery operations.
            Specify the user's email address or phone number when using the transient
            factor for emailotp, smsotp, or voiceotp. The enrollmentId using the keyword
            "transient" must be specified and then the transientValue will be used.  If
            the transient value is not specified, the user's mobile phone number or
            work email address will be used depending on the type of factor used.
            The transient value specified must match the work email address or one
            of the phone numbers in the user's profile.
    PwdResetModel:
      required:
      - steps
      - userName
      type: object
      properties:
        userName:
          type: string
          description: The user's user name.
          example: someuser@abc.com
        steps:
          type: array
          description: The steps that are required to verify the user's identity before
            the password can be reset.
          items:
            "$ref": "#/components/schemas/PwdResetStep"
        stateId:
          type: string
          description: The state identifier that is associated with the reset password
            request.
          example: default
    PwdResetStep:
      required:
      - method
      type: object
      properties:
        method:
          type: string
          description: The method that is used to verify the user's identity.
          example: emailLink
          enum:
          - emailLink
          - emailotp
          - smsotp
          - voiceotp
          - totp
          - fingerprint
          - userpresence
        data:
          "$ref": "#/components/schemas/Data"
    GetInviteResponseModel:
      required:
      - email
      - expiration
      - trxId
      type: object
      properties:
        trxId:
          type: string
          description: The transaction ID of the request.
        email:
          type: string
          description: The email address of the user to invite.
        realm:
          type: string
          description: The realm name.
          example: cloudIdentityRealm
        adopterId:
          type: string
          description: An identifier that is used to make an invitation to an adopterId
            + email unique.  When you resend the unique invitation, the existing unique
            invitation with that adopterId + email combination is replaced.
        stateId:
          type: string
          description: An identier that is associated with the transaction.
        groups:
          type: array
          description: The list of group IDs that are used to add the user as a member.
          items:
            type: string
        expiration:
          type: string
          description: The expiration date of the invitation in UTC format.
    GetInvitesResponseModel:
      required:
      - limit
      - page
      - total
      type: object
      properties:
        total:
          type: integer
          description: The total number of invitations that matched the query.
          format: int32
        limit:
          type: integer
          description: The limit of invitations that are returned.
          format: int32
        page:
          type: integer
          description: The page number.
          format: int32
        invitations:
          type: array
          items:
            "$ref": "#/components/schemas/GetInviteResponseModel"
    NextUsernameRecoveryStepResponseModel:
      required:
      - httpMethod
      - method
      - uri
      type: object
      properties:
        method:
          type: string
          description: The method that is used to verify the user's identity.
          example: emailotp
          enum:
          - emailotp
          - smsotp
          - totp
          - fingerprint
          - userpresence
        httpMethod:
          type: string
          description: The HTTP method for the next step's API call to verify the
            user's identity.
          example: POST
          enum:
          - POST
          - PUT
        uri:
          type: string
          description: The HTTP URI for the next step's API call to verify the user's
            identity.
          example: "/v1.0/usc/username/recovery/{trxId}/validator"
    UsernameRecoveryResponseModel:
      required:
      - nextStep
      - stepsRemaining
      - trxId
      type: object
      properties:
        trxId:
          type: string
          description: The transaction ID of the request.
        stepsRemaining:
          type: integer
          description: The number of steps that remain to verify the user's identity.
          format: int32
          example: 2
        nextStep:
          "$ref": "#/components/schemas/NextUsernameRecoveryStepResponseModel"
    UsernameRecoveryModel:
      required:
      - attributes
      - steps
      type: object
      properties:
        attributes:
          type: array
          description: The name and value of the attributes to use to find the user's
            account information.  The attributes are combined together with an AND
            to find the user's account.
          items:
            "$ref": "#/components/schemas/UserAttribute_0"
        steps:
          type: array
          description: The steps that are required to verify the user's identity before
            the user name can be recovered.
          items:
            "$ref": "#/components/schemas/UsernameRecoveryStep"
        stateId:
          type: string
          description: The state identifier that is associated with the forgot user
            name request.
          example: default
    UsernameRecoveryStep:
      required:
      - method
      type: object
      properties:
        method:
          type: string
          description: The method that is used to verify the user's identity.
          example: emailotp
          enum:
          - email
          - emailotp
          - smsotp
          - voiceotp
          - totp
          - fingerprint
          - userpresence
        data:
          "$ref": "#/components/schemas/Data"
    InviteUserCompleteResponseModel:
      required:
      - stateId
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier for the user.
          example: 50X3534334
        stateId:
          type: string
          description: The state identifier that is associated with the transaction
            ID.
          example: default
    InviteCompleteResultModel:
      required:
      - op
      - path
      - result
      type: object
      properties:
        result:
          type: string
          description: The result.  If the result is a failure, then an error message
            is returned.
          enum:
          - success
          - failure
        op:
          type: string
          description: The operation.
          example: PATCH
        path:
          type: string
          description: The resource path.
          example: https://mytenant.com/v2.0/Groups/6013434334
        error:
          type: string
          description: The error message.
          example: CSIAI0051E Cannot find group with ID [6013434334].
    InviteUserCompleteMultiStatusResponseModel:
      required:
      - stateId
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier for the user.
          example: 50X3534334
        stateId:
          type: string
          description: The state identifier that is associated with the transaction
            ID.
          example: default
        results:
          type: array
          description: If present, then one or more errors occurred while adding the
            user to groups.  Each element in the array represents the result of adding
            the user to the group.
          items:
            "$ref": "#/components/schemas/InviteCompleteResultModel"
    InviteUserCompleteModel:
      required:
      - otp
      - user
      type: object
      properties:
        otp:
          type: string
          description: The OTP string from the email link.  In the email link, the
            factorTrnxId query parameter is the OTP.
        notifyComplete:
          type: boolean
          description: Notify the user that the invitation is complete. If the attribute
            is not specified, the email notification is sent.
        user:
          type: string
          description: The user data that is used to create the account or the user's
            ID to update an existing account.  See the POST /v2.0/Users API for the
            JSON payload that passes to this API for creating an account.
    UsernameRecoveryCompleteResponseModel:
      required:
      - userName
      type: object
      properties:
        userName:
          type: string
          description: The user's recovered user name.
          example: bob
        stateId:
          type: string
          description: The state identifier that is associated with the user name
            recovery request.
          example: default
    UsernameRecoveryCompleteModel:
      type: object
      properties:
        otp:
          type: string
          description: The OTP string for the last step to verify the user's identify
            before recovering the user name.
    PwdResetCompleteResponseModel:
      required:
      - userId
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier for the user.
          example: 50X3534334
        stateId:
          type: string
          description: The state identifier that is associated with the reset password
            request.
          example: default
    PwdResetCompleteModel:
      required:
      - password
      type: object
      properties:
        otp:
          type: string
          description: The OTP string for the last step to verify the user's identify
            before allowing the password to be reset.
        password:
          type: string
          description: The new password for the user.
    PwdResetValidatorResponseModel:
      required:
      - nextStep
      - stepsRemaining
      - trxId
      - userId
      type: object
      properties:
        trxId:
          type: string
          description: The transaction ID of the request.
        stepsRemaining:
          type: integer
          description: The number of steps that remain to verify the user's identity.
          format: int32
          example: 2
        nextStep:
          "$ref": "#/components/schemas/NextPwdResetStepResponseModel"
        userId:
          type: string
          description: The unique identifier for the user resource as defined by the
            service.
    ValidatorModel:
      type: object
      properties:
        otp:
          type: string
          description: The OTP string that is used to verify the user's identify.
    InviteUserValidatorResponseModel:
      required:
      - nextStep
      - stepsRemaining
      - trxId
      type: object
      properties:
        trxId:
          type: string
          description: The transaction ID of the request.
        targetUrl:
          type: string
          description: The target URL.
        stepsRemaining:
          type: integer
          description: The number of steps that remain.
          format: int32
          example: 1
        nextStep:
          "$ref": "#/components/schemas/NextInviteUserStepResponseModel"
        stateId:
          type: string
          description: The state identifier that is associated with the invitation.
          example: default
        realmName:
          type: string
          description: The realm associated with the invitation.
          example: cloudIdentityRealm
        groups:
          type: array
          description: The list of groups associated with the invitation.
          items:
            "$ref": "#/components/schemas/Group_0"
    NextInviteUserStepResponseModel:
      required:
      - httpMethod
      - uri
      type: object
      properties:
        httpMethod:
          type: string
          description: The HTTP method for the next step's API call.
          example: PUT
          enum:
          - PUT
        uri:
          type: string
          description: The HTTP URI for the next step's API call.
          example: "/v1.0/usc/user/invitation/{trxId}"
    InviteUserMultiStatusResponseModel:
      required:
      - messageDescription
      - messageId
      - results
      type: object
      properties:
        messageId:
          type: string
          description: The ID of the message.
        messageDescription:
          type: string
          description: The message description.
        results:
          type: array
          description: The result of each invitation.
          items:
            "$ref": "#/components/schemas/InviteUserResultModel"
    InviteUserResultModel:
      required:
      - email
      - result
      type: object
      properties:
        trxId:
          type: string
          description: The transaction ID.
        expiration:
          type: string
          description: The expiration date of the invitation in UTC format.
        error:
          type: string
          description: The error message.
        email:
          type: string
          description: The email address.
        result:
          type: string
          description: The result of sending the invitation.  If the result is a failure,
            an error message is returned.
          enum:
          - failure
          - success
    InvitationModel:
      required:
      - email
      type: object
      properties:
        email:
          type: string
          description: The email address of the user to invite.
        name:
          type: string
          description: The name of the user to invite that is sent in the email.
        stateId:
          type: string
          description: An identier that gets associated with each transaction.  If
            not present, it defaults to "default".
    InviteUserModel:
      required:
      - invitations
      - steps
      type: object
      properties:
        invitations:
          type: array
          description: An array of email, name, and state ID for each invitation.  For
            each invitation, a transaction ID is generated and returned in the response.
          items:
            "$ref": "#/components/schemas/InvitationModel"
        realm:
          type: string
          description: The realm name.  If not present, it defaults to the cloudIdentityRealm.
          example: cloudIdentityRealm
        expirationInDays:
          type: integer
          description: The number of days before the invitation expires.  The range
            is 1 to 30.  If not specified, the default is 30.
          format: int32
          example: 7
        groups:
          type: array
          description: The list of group IDs to add the user as a member.
          items:
            type: string
        steps:
          type: array
          description: An array of MFA steps to perform. Only a single factor of type
            "emailLink" is supported
          items:
            "$ref": "#/components/schemas/InviteUserStep"
        adopterId:
          type: string
          description: An identifier that is used to make an invitation to an adopterId
            + email unique. When you resend the unique invitation, the existing unique
            invitation with that adopterId + email combination is replaced.  If not
            present, defaults to "default".
    InviteUserStep:
      required:
      - method
      type: object
      properties:
        method:
          type: string
          description: The method that is used to verify the user's identity.
          example: emailLink
          enum:
          - emailLink
        data:
          "$ref": "#/components/schemas/Data"
    AccessControlAllowOrigin:
      required:
      - origin
      - regex
      type: object
      properties:
        origin:
          type: string
          description: Allowed domain or a regular expression for allowed domains.
          example: https://www.ibm.com
        regex:
          type: boolean
          description: Boolean that indicates if the specified origin is a regular
            expression.
    TargetUrlAllowedHost:
      required:
      - regex
      - targetUrl
      type: object
      properties:
        targetUrl:
          type: string
          description: Target URL or a regular expression for allowed hosts.
          example: https://www.ibm.com
        regex:
          type: boolean
          description: Boolean that indicates if the specified target URL is a regular
            expression.
    TenantPropertiesModelV2:
      type: object
      properties:
        accessControlAllowOrigin:
          type: array
          description: A list of allowed domains or regular expressions for allowed
            domains.
          example: '[{"regex": false,"origin": "https://www.ibm.com"},{"regex": true,"origin":
            "^https"}]'
          items:
            "$ref": "#/components/schemas/AccessControlAllowOrigin"
        targetUrlAllowedHostV2:
          type: array
          description: A list of target URLs or regular expressions for allowed hosts.
          example: '[{"regex": false,"targetUrl": "https://tenantname.com"},{"regex":
            true,"targetUrl": "^https"}]'
          items:
            "$ref": "#/components/schemas/TargetUrlAllowedHost"
        securityHeaderContentSecurityPolicy:
          type: string
          description: A string for the Content Security Policy (CSP) header.
          example: default-src 'self' example.com *.example.com
    Component_2:
      required:
      - details
      - name
      - status
      type: object
      properties:
        name:
          type: string
          description: The name of the component being checked.
          example: DB connectivity
        status:
          type: string
          description: The resulting status of the health check.
          example: good
        details:
          type: string
          description: A message about what was checked.
          example: Connectivity to 'Config store' is good.
          enum:
          - good
          - bad
          - marginal
    TenantModel_0:
      required:
      - tenantUUID
      - zkTenant
      type: object
      properties:
        tenantUUID:
          type: string
          description: The existing tenant UUID of the tenant that has been exported.  Its
            a readonly value that is populated on export and should not be changed.
        newTenantUUID:
          type: string
          description: The new tenant UUID of the tenant that is being imported.  Its
            specified on import.  Its an optional field.
        zkTenant:
          "$ref": "#/components/schemas/Tenant"
    Address_0:
      type: object
      properties:
        locality:
          type: string
          description: The city or locality component.
        country:
          type: string
          description: The country name component.
        type:
          type: string
          description: A label indicating the attribute's function; e.g., "work" or
            "home".
          enum:
          - work
        streetAddress:
          type: string
          description: The street address.
        postalCode:
          type: string
          description: The postal code.
        formatted:
          type: string
          description: The formatted value of the address.
        primary:
          type: boolean
          description: Indicates whether this is the primdary address for correspondence.
        region:
          type: string
          description: The region.
    CICCustomUserResponse_0:
      type: object
      properties:
        userCategory:
          type: string
          description: "The user category. \n"
          enum:
          - regular
          - federated
        emailVerified:
          type: integer
          description: "A timestamp indicating when the user's email was verified.
            \n"
          format: int64
        realm:
          type: string
          description: 'Realm to which the user belongs. Always "cloudIdentityRealm"
            for non-federated users

            '
        unqualifiedUserName:
          type: string
          description: "Unqualified federated user name. \n"
        twoFactorAuthentication:
          type: boolean
          description: "Indicates if two factory authentication is required.  Defaults
            to \"false\" if not provided.  Applies to regular users only. \n"
        pwdReset:
          type: boolean
          description: 'Indicates the password is reset for the current user entry.
            This value is readonly.

            '
        pwdChangedTime:
          type: integer
          description: |-
            Indicates the time when the password changed for the current user entry. This value is readonly.
            was changed.
          format: int64
        pwdAccountLockedTime:
          type: string
          description: |-
            Field indicating timestamp at which the user's password was locked. This value is readonly.
             The value of this field is in milliseconds
        pwdExpirationWarned:
          type: string
          description: |-
            Field indicating timestamp at which the user's password expiration is set. This value is readonly.
             The value of this field is in milliseconds
        pwdFailureTime:
          type: array
          description: "Field indicating a list of timestamp at which the user attempted
            to login with wrong password \n The value of this field is in milliseconds.
            This value is readonly."
          items:
            type: string
        pwdGraceUseTime:
          type: array
          description: "Field indicating a list of timestamp at which the user attempted
            to see extended or grace time \n The value of this field is in milliseconds.
            This value is readonly."
          items:
            type: string
    EmailAddress_0:
      required:
      - type
      - value
      type: object
      properties:
        value:
          type: string
          description: "E-mail addresses for the user. The value SHOULD be canonicalized
            by the Service Provider, \n e.g. bjensen@example.com instead of bjensen@EXAMPLE.COM"
        type:
          type: string
          description: A label indicating the attribute's function; e.g., "work".  Only
            a single email will be allowed
          enum:
          - work
    Groups_0:
      type: object
      properties:
        value:
          type: string
          description: The display name of the group that the user belongs to.
    MetaV2_0:
      type: object
      properties:
        resourceType:
          type: string
          description: "Field indicating the type of resource. \n"
        created:
          type: string
          description: "A DateTime string indicating when the user was created. \n"
        lastModified:
          type: string
          description: "A DateTime string indicating when the user was last modified.
            \n"
        location:
          type: string
          description: "The URI of the resource being returned. \n"
    Name_0:
      type: object
      properties:
        formatted:
          type: string
          description: "The full name including all  username, middle names, and suffixes
            as appropriate, formatted for display. \nThis value is returned by the
            Service Provider if  it is not part of the POST payload.  If the POST,
            PUT  JSON Payload  contains the value for this attribute, the  value in
            the payload will take precedence."
        familyName:
          type: string
          description: "The family name of the User, or Last Name in most Western
            languages \n(e.g. Jensen given the full name Ms. Barbara J Jensen, III.)."
        givenName:
          type: string
          description: "The given name of the User, or First Name in most Western
            languages \n(e.g. Barbara given the full name Ms. Barbara J Jensen, III.)."
    PhoneNumber_0:
      required:
      - type
      - value
      type: object
      properties:
        value:
          type: string
          description: "Phone numbers for the User. The value SHOULD be canonicalized
            by the Service Provider \naccording to format in RFC3966 e.g. \"tel:+1-201-555-0123\".
            Canonical Type values of \nwork, home, mobile, fax, and pager."
        type:
          type: string
          description: A label indicating the attribute's function; e.g., "work" or
            "home".
          enum:
          - work
          - home
          - mobile
          - pager
          - fax
    Meta_0:
      type: object
      properties:
        created:
          type: string
          description: A DateTime string that indicates when the user was created.
        modified:
          type: string
          description: A DateTime string that indicates when the user was last modified.
    ExternalErrorMessage_0:
      type: object
      properties:
        code:
          type: string
          description: The error code.
        messageId:
          type: string
          description: The ID of the message.
        messageDescription:
          type: string
          description: The message description.
    UserAttribute_0:
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
          description: The name of the attribute that is used to find the user's account
            information.  Choose an attribute name that has a unique value for the
            user. Attribute names for a user record can be retrieved by using the
            GET /v2.0/Schema/attributes API.
          example: email
        value:
          type: string
          description: The value of the attribute that is used to find the user's
            account information.
          example: someuser@somewhere.com
    Group_0:
      required:
      - displayName
      - id
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the resource as defined by the service.
          example: 6X1000000M
        displayName:
          type: string
          description: The display name for the group.
          example: Test Group
    UserGroupToEntitlementRevoke:
      type: object
      properties:
        users:
          type: array
          description: List of users to whom the entitlement will be revoked.
          items:
            "$ref": "#/components/schemas/UserToEntitlementRevoke"
        groups:
          type: array
          description: List of groups to whom the entitlement will be revoked.
          items:
            "$ref": "#/components/schemas/GroupToEntitlementRevoke"
      description: Bulk object used to revoke one or more users and groups to an entitlement.
    ListBulkGrantRevokeEntitlementToUserAddEntitlementToUserRemove:
      type: object
      properties:
        grant:
          type: array
          description: List of entitlements to grant
          items:
            "$ref": "#/components/schemas/EntitlementToUserAdd"
        revoke:
          type: array
          description: List of entitlements to revoke
          items:
            "$ref": "#/components/schemas/EntitlementToUserRemove"
      description: Bulk object used to grant / revoke one or more entitlements
    ListResponseReviewAdminAssignment:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/ReviewAdminAssignment"
    UpdateAssignmentRight:
      required:
      - op
      - value
      type: object
      properties:
        op:
          type: string
          description: The operation to be performed.
          enum:
          - add
          - remove
          - replace
        value:
          type: string
          description: The attribute content used for the operation.
        oldValue:
          type: string
          description: The old value to replace. This field is mandatory only if the
            operation is <b>"replace"</b>.
      description: Rest representation to update an assignment right value.
    ListResponse:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            type: object
            properties: {}
      description: Object used to return a list of objects
    ListResponseAccessStatistics:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/AccessStatistics"
      description: Object used to return a list of objects
    EntitlementSearch:
      type: object
      properties:
        accessInfo:
          "$ref": "#/components/schemas/AccessInfo"
        accessType:
          uniqueItems: true
          type: array
          description: Type of the access
          items:
            type: string
        application:
          uniqueItems: true
          type: array
          description: Unique identifier of the application
          items:
            type: string
        sort:
          "$ref": "#/components/schemas/Sort"
    ListResponseApplicationAssignment:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/ApplicationAssignmentResult"
    ListResponseSelfAdminAssignment:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/SelfAdminAssignment"
    PermissionRemediationInput:
      required:
      - category
      - ext_ref
      - rights
      type: object
      properties:
        category:
          type: string
          description: Category of the permission
          example: attribute
          enum:
          - attribute
          - group
          - default
        ext_ref:
          type: string
          description: Unique identifier of the permission in the target system
          example: profile
        rights:
          uniqueItems: true
          type: array
          description: Right values of the permission
          items:
            type: string
    EntitlementPropertyBean:
      type: object
      properties:
        code:
          type: string
        entitlementCode:
          type: string
        tenant:
          type: string
        name:
          type: string
        value:
          type: string
        dataType:
          type: string
        creationUser:
          type: string
        creationDate:
          type: string
          format: date-time
        lastModUser:
          type: string
        lastModTime:
          type: string
          format: date-time
        attr1:
          type: string
        attr2:
          type: string
        attr3:
          type: string
        attr4:
          type: string
        attr5:
          type: string
    Assignment:
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the assignment.
          example: f165f244-43dc-4a54-bb6d-fe3dyd81d8233
        type:
          type: string
          description: Type of the assignment.
          example: USER
          enum:
          - USER
          - GROUP
        entitlement:
          type: string
          description: Code of the entitlement.
          example: d865f244-43dc-4a54-bb6d-fe31ed81d821
        entitlementName:
          type: string
          description: Name of the entitlement.
          example: read
        entitlementType:
          type: string
          description: Type of the entitlement.
          example: role
        entitlementSubType:
          type: string
          description: Sub type of the entitlement.
          example: regular
        entitlementExtRef:
          type: string
          description: Unique identifier of the mapped object in the connected application.
          example: "<unique_identifier>"
        application:
          type: string
          description: Id of the application.
          example: '5519128428712589829'
        rights:
          type: boolean
          description: Indicate if the entitlement has rights
          readOnly: true
          example: false
        rightValues:
          type: array
          description: List of rights values
          example: "[read, write, read_write]"
          items:
            type: string
        properties:
          "$ref": "#/components/schemas/EntitlementProperties"
        user:
          type: string
          description: Code of the user.
          example: 6000005EKH
        group:
          type: string
          description: Code of the group.
          example: 50CFD1VTR1
        vv:
          type: boolean
          description: Indicate if the entitlement is in visibility violation.
        brt:
          type: boolean
          description: If true the entitlement is granted for each users in the group.
        creationUser:
          type: string
          description: Indicate the id of who is the creator of the entitlement.
          readOnly: true
          example: 6000005EKH
        creationDate:
          type: string
          description: Indicate the creation date of the entitlement.
          format: date-time
          readOnly: true
        lastModUser:
          type: string
          description: Indicate the id of who is the last user that has changed the
            entitlement.
          readOnly: true
          example: 6000005EKH
        lastModTime:
          type: string
          description: Indicate the last modification date of the entitlement.
          format: date-time
          readOnly: true
        justification:
          type: string
          description: Justification for the delegation
      description: Rest representation for an assignment.
    AccessRequestSubmitResponse:
      type: object
      properties:
        success:
          type: boolean
          description: True if the operation was performed correctly, false otherwise
          readOnly: true
        code:
          type: string
          description: Unique identifier
          readOnly: true
          example: "<unique_identifier>"
        messageId:
          type: string
          description: Unique identifier of the message error.
          readOnly: true
          example: "<message_error_id>"
        messageDescription:
          type: string
          description: Description of the error.
          readOnly: true
          example: "<message_text>"
        group:
          type: string
          description: Code of the group
          example: 50CFD1VTR1
        entitlement:
          type: string
          description: Unique identifier of the entitlement.
          example: d866d244-43dc-4a54-bb6d-fe31ed81d822
      description: Response for submit access request.
    ListBulkGrantRevokeGrantEntitlementToGroupRevokeEntitlementToGroup:
      type: object
      properties:
        grant:
          type: array
          description: List of entitlements to grant
          items:
            "$ref": "#/components/schemas/GrantEntitlementToGroup"
        revoke:
          type: array
          description: List of entitlements to revoke
          items:
            "$ref": "#/components/schemas/RevokeEntitlementToGroup"
      description: Bulk object used to grant / revoke one or more entitlements
    PermissionRemediationOutput:
      type: object
      properties:
        compliantList:
          type: array
          description: List of compliant permissions
          items:
            "$ref": "#/components/schemas/PermissionRemediationResult"
        notFoundInAuthZ:
          type: array
          description: List of permissions not found in AuthZ
          items:
            "$ref": "#/components/schemas/PermissionRemediationResult"
        moreInAuthZ:
          type: array
          description: List of permissions present only in AuthZ
          items:
            "$ref": "#/components/schemas/PermissionRemediationResultWithRight"
        diffInAuthZList:
          type: array
          description: List of right values present in AuthZ
          items:
            "$ref": "#/components/schemas/PermissionRemediationResultWithRight"
    ReportConfigOffline:
      type: object
      properties:
        application:
          type: string
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time
        columns:
          type: array
          items:
            "$ref": "#/components/schemas/ReportColumn"
    RevokeEntitlementToGroup:
      required:
      - entitlement
      type: object
      properties:
        entitlement:
          type: string
          description: Unique identifier of the entitlement.
          example: d866d244-43dc-4a54-bb6d-fe31ed81d822
        delete_visibility_violation:
          type: boolean
          description: If true all the direct assignments in visibility violation
            will be delete.
          example: false
      description: Object used to revoke an entitlement to a group
    PatchEntitlement:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the entitlement. Unique accross the application
          example: Test entitlement unique name
        description:
          type: string
          description: Description
          example: Test entitlement description
        owner:
          type: string
          description: Id of the user owner of the entitlement
          example: "<unique ID>"
        conditionSet:
          type: array
          description: Condition set to determine the users that belong to this role.
            And, Example value:[{"erDepartment":[{"op":"eq","vl":"Security"},{"op":"ne","vl":"Sales"}],"erPersonType":[{"op":"sw","vl":"Employee"},{"op":"ne","vl":"Contractor"}]},{"erDepartment":[{"op":"eq","vl":"Marketing"}]}]
          items:
            type: object
            additionalProperties:
              type: array
              items:
                "$ref": "#/components/schemas/Operation_and_Value"
      description: Rest representation for an application entitlement to be updated.
    ListResponseDelegateeAdminAssignment:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/DelegateeAdminAssignment"
    EntitlementFindResponse:
      type: object
      properties:
        success:
          type: boolean
          description: True if the provided entitlement is found, false otherwise
          readOnly: true
        code:
          type: string
          description: Unique identifier of the entitlement.
          example: d866d244-43dc-4a54-bb6d-fe31ed81d822
        entitlementName:
          type: string
          description: Name of the entitlement
          readOnly: true
          example: Basic Access
        type:
          type: string
          description: Type of the entitlement
          readOnly: true
          enum:
          - role
          - permission
        application:
          type: string
          description: Unique identifier of the application.
          example: e966d244-ab6d-ab6d-4a54-d866d244d822
        applicationDetails:
          "$ref": "#/components/schemas/ApplicationDetails"
        messageId:
          type: string
          description: Unique identifier of the message error.
          readOnly: true
          example: "<message_error_id>"
        messageDescription:
          type: string
          description: Description of the error.
          readOnly: true
          example: "<message_text>"
      description: Response for a entitlement find request.
    AdminAssignment:
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the assignment.
          example: f165f244-43dc-4a54-bb6d-fe3dyd81d8233
        type:
          type: string
          description: Type of the assignment.
          example: USER
          enum:
          - USER
          - GROUP
        reserved:
          type: boolean
          description: Indicate it is a reserved default authorization that can't
            be deleted.
          readOnly: true
          example: false
        entitlement:
          type: string
          description: Code of the entitlement.
          example: d865f244-43dc-4a54-bb6d-fe31ed81d821
        entitlementName:
          type: string
          description: Name of the entitlement.
          example: read
        entitlementType:
          type: string
          description: Type of the entitlement.
          example: role
        entitlementSubType:
          type: string
          description: Sub type of the entitlement.
          example: regular
        user:
          type: string
          description: Code of the user.
          example: 6000005EKH
        group:
          type: string
          description: Code of the group.
          example: 50CFD1VTR1
        delegator:
          type: string
          description: Code of the delegator.
          example: 50CFD1VTR1
        enable:
          type: boolean
          description: Indicate if the assignment is enabled or not.
        vv:
          type: boolean
          description: Indicate if the entitlement is in visibility violation.
        brt:
          type: boolean
          description: If true the entitlement is granted for each users in the group.
        startDate:
          type: string
          description: Indicate the start date of the assignment.
          format: date-time
          readOnly: true
        endDate:
          type: string
          description: Indicate the end date of the assignment.
          format: date-time
          readOnly: true
        creationUser:
          type: string
          description: Indicate the id of who is the creator of the entitlement.
          readOnly: true
          example: 6000005EKH
        creationDate:
          type: string
          description: Indicate the creation date of the entitlement.
          format: date-time
          readOnly: true
        lastModUser:
          type: string
          description: Indicate the id of who is the last user that has changed the
            entitlement.
          readOnly: true
          example: 6000005EKH
        lastModTime:
          type: string
          description: Indicate the last modification date of the entitlement.
          format: date-time
          readOnly: true
        userDetails:
          "$ref": "#/components/schemas/User_0"
        groupDetails:
          "$ref": "#/components/schemas/Group_1"
        delegatorDetails:
          "$ref": "#/components/schemas/User_0"
        creationUserDetails:
          "$ref": "#/components/schemas/User_0"
        lastModUserDetails:
          "$ref": "#/components/schemas/User_0"
      description: Rest representation for an admin assignment.
    ApplicationDetails:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        icon:
          type: string
      description: Rest representation for an application with few details.
    ProvCfgResult:
      required:
      - provisioning
      - targetId
      - targetKey
      - targetType
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the provisioning configuration
          readOnly: true
          example: d865f244-43dc-4a54-bb6d-fe31ed81d821
        targetId:
          type: string
          description: Identifier of the target system
          example: '6096872148'
        targetKey:
          type: string
          description: Key of the target system
          example: 549c70ea-89fd-4611-9ccb-d4ce58ec78d0
        targetType:
          type: string
          description: Type of the target system
          example: Salesforce
        application:
          type: string
          description: Id of the application
          example: '5519383071221766610'
        provisioning:
          type: integer
          description: Enable or disable provisioning
          format: int32
          enum:
          - 0
          - 1
        creationUser:
          type: string
          description: Indicate the id of who is the creator of the entitlement
          readOnly: true
          example: 6000005EKH
        creationDate:
          type: string
          description: Indicate the creation date of the entitlement
          format: date-time
          readOnly: true
        lastModUser:
          type: string
          description: Indicate the id of who is the last user that has changed the
            entitlement
          readOnly: true
          example: 6000005EKH
        lastModTime:
          type: string
          description: Indicate the last modification date of the entitlement
          format: date-time
          readOnly: true
      description: Rest representation for an application provisioning policy.
    AssignmentRight:
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the assignment
          example: f165f244-43dc-4a54-bb6d-fe3dyd81d8233
        type:
          type: string
          description: Type of the assignment
          enum:
          - USER
          - GROUP
        entitlement:
          type: string
          description: Unique identifier of the entitlement
          example: d865f244-43dc-4a54-bb6d-fe31ed81d821
        path:
          type: string
          description: Path of the entitlement
          readOnly: true
          example: "/<parent_code>/<child_code>/"
        value:
          type: string
          description: Value of the right
          example: d865f244-43dc-4a54-bb6d-fe31ed81d821
        creationUser:
          type: string
          description: Indicate the id of who is the creator of the entitlement
          readOnly: true
          example: 6000005EKH
        creationDate:
          type: string
          description: Indicate the creation date of the entitlement
          format: date-time
          readOnly: true
        lastModUser:
          type: string
          description: Indicate the id of who is the last user that has changed the
            entitlement
          readOnly: true
          example: 6000005EKH
        lastModTime:
          type: string
          description: Indicate the last modification date of the entitlement
          format: date-time
          readOnly: true
      description: Rest representation for a generic assignment with right value.
    ListResponseAccessAssignment:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/AccessAssignment"
    GroupToEntitlementGrant:
      required:
      - brt
      - group
      type: object
      properties:
        group:
          type: string
          description: Unique identifier of the group.
          example: 50CFD1VTR1
        brt:
          type: boolean
          description: If true the entitlement will be granted to each users in the
            group
          example: false
        rights:
          uniqueItems: true
          type: array
          description: Right values
          items:
            type: string
      description: Object used to grant an entitlement to a group.
    UpdateAssignmentRightResult:
      type: object
      properties:
        op:
          type: string
          description: The operation to be performed.
          enum:
          - add
          - remove
          - replace
        oldValue:
          type: string
          description: The old value to replace. This field will not be null if the
            operation is <b>"replace"</b>.
        value:
          type: string
          description: The attribute content used for the operation.
        success:
          type: boolean
          description: Boolean to indicate if the operation has been done correctly.
        messageId:
          type: string
          description: Unique identifier of the admin entitlement.
          example: "<message_error_id>"
        messageDescription:
          type: string
          description: Unique identifier of the admin entitlement.
          example: "<message_text>"
    ApplicationAssignmentResult:
      required:
      - name
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the application entitlement.
          readOnly: true
          example: d866d244-43dc-4a54-bb6d-fe31ed81d822
        name:
          type: string
          description: Name of the application entitlement.
          example: appEntitlement
        application:
          type: string
          description: Id of the application
          example: '5519383071221766610'
        hasRights:
          type: integer
          description: Does this entitlement have rights associated with it.
          format: int32
          readOnly: true
          example: 0
    GroupToEntitlementRevoke:
      required:
      - delete_visibility_violation
      - group
      type: object
      properties:
        group:
          type: string
          description: Unique identifier of the group.
          example: 50CFD1VTR1
        delete_visibility_violation:
          type: boolean
          description: If true the direct assignemnt of the entitlements will be removed
          example: false
      description: Object used to revoke an entitlement to a group.
    ListResponseAdminAssignment:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/AdminAssignment"
    ListResponseApplicationPermission:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/ApplicationPermission"
    ListResponseGroup:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/Group_1"
    RestrictedAssignmentSearch:
      type: object
      properties:
        accessInfo:
          "$ref": "#/components/schemas/AccessInfo"
        status:
          uniqueItems: true
          type: array
          description: Status of the access assignment
          items:
            type: string
        sort:
          "$ref": "#/components/schemas/Sort"
    EntitlementWithChildren:
      required:
      - application
      - name
      - type
      type: object
      properties:
        name:
          type: string
          description: Name of the entitlement. Unique accross the application
          example: Test entitlement unique name
        description:
          type: string
          description: Description
          example: Test entitlement description
        type:
          type: string
          description: Type of the entitlement
          enum:
          - role
          - permission
        subType:
          type: string
          description: Sub type of the entitlement.
          enum:
          - regular
          - dynamic
        application:
          type: string
          description: Unique identifier of the application
          example: "<unique identifier>"
        category:
          type: string
          description: Category of the entitlement.
          example: Test category
        extRef:
          type: string
          description: Unique identifier of the mapped object in the connected application.
          example: "<unique_identifier>"
        conditionSet:
          type: array
          description: Condition set to determine the users that belong to this role.
            And, Example value:[{"erDepartment":[{"op":"eq","vl":"Security"},{"op":"ne","vl":"Sales"}],"erPersonType":[{"op":"sw","vl":"Employee"},{"op":"ne","vl":"Contractor"}]},{"erDepartment":[{"op":"eq","vl":"Marketing"}]}]
          items:
            type: object
            additionalProperties:
              type: array
              items:
                "$ref": "#/components/schemas/Operation_and_Value"
        rightsValues:
          type: array
          description: Fixed right values associated to child permissions
          items:
            "$ref": "#/components/schemas/EntitlementRight"
    UserTargetRemediationOutput:
      required:
      - permissions
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier of the user
          example: 50T65SKD8C
        compliant:
          type: boolean
          description: Indicate if the data in the microservice are compliant with
            the input
          example: true
        message:
          type: string
          description: Details of why the compare/remediation operation is not performed
          example: "<error_code> - <error_message>"
        permissions:
          "$ref": "#/components/schemas/PermissionRemediationOutput"
    ListResponseAdminPermission:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/AdminPermission"
    EntitlementStatistics:
      required:
      - count
      type: object
      properties:
        count:
          type: integer
          description: Count
          format: int32
        application:
          "$ref": "#/components/schemas/ApplicationInfo"
        accessType:
          type: string
          description: Type of the access
          readOnly: true
          enum:
          - permission
          - app role
          - admin role
          - dynamic role
      description: Statistics of the requestable accesses.
    EntitlementWithProperties:
      type: object
      properties:
        entitlement:
          "$ref": "#/components/schemas/EntitlementBean_0"
        properties:
          type: array
          items:
            "$ref": "#/components/schemas/EntitlementPropertyBean"
    UserTargetRemediationInput:
      required:
      - permissions
      - userId
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier of the user
          example: 50T65SKD8C
        permissions:
          uniqueItems: true
          type: array
          description: List of permissions
          items:
            "$ref": "#/components/schemas/PermissionRemediationInput"
    GroupToAdminEntitlementGrant:
      required:
      - brt
      - group
      type: object
      properties:
        group:
          type: string
          description: Unique identifier of the group.
          example: 50CFD1VTR1
        brt:
          type: boolean
          description: If true the entitlement will be granted to each users in the
            group
          example: false
      description: Object used to grant an entitlement to a group.
    ListResponseAdminEntitlementRelation:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/AdminEntitlementRelation"
    DelegatorDelegateeAccessAssignment:
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the assignment.
          example: f165f244-43dc-4a54-bb6d-fe3dyd81d8233
        user:
          type: string
          description: Code of the user.
          example: 6000005EKH
        userDetails:
          "$ref": "#/components/schemas/User_0"
        startDate:
          type: string
          description: Indicate the start date of the assignment.
          format: date-time
          readOnly: true
        endDate:
          type: string
          description: Indicate the end date of the assignment.
          format: date-time
          readOnly: true
        justification:
          type: string
          description: Reason for this delegation.
          readOnly: true
      description: Rest representation for delegatee or delgator of an admin assignment.
    RemediationInput:
      required:
      - applicationId
      - user
      type: object
      properties:
        applicationId:
          type: string
          description: Unique identifier of the application
          example: '4293929112744398435'
        user:
          "$ref": "#/components/schemas/UserTargetRemediationInput"
    AdminEntitlementProperties:
      type: object
      properties:
        resourceType:
          type: string
          description: Indicate the resource type of the entitlement
          readOnly: true
    UserGroupToEntitlementGrant:
      type: object
      properties:
        users:
          type: array
          description: List of users to whom the entitlement will be assigned.
          items:
            "$ref": "#/components/schemas/UserToEntitlementGrant"
        groups:
          type: array
          description: List of groups to whom the entitlement will be assigned.
          items:
            "$ref": "#/components/schemas/GroupToEntitlementGrant"
      description: Bulk object used to grant one or more users and groups to an entitlement.
    AdminResource:
      type: object
      properties:
        type:
          type: string
          description: Resource type.
          readOnly: true
          enum:
          - user
          - group
          - application
        value:
          type: string
          description: ID of the resource.
          readOnly: true
          example: 600000Y7XF
    ListResponseRestrictedEntitlementChildren:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/RestrictedEntitlementChildren"
    AdminEntitlement:
      required:
      - name
      - type
      type: object
      properties:
        name:
          type: string
          description: Name of the admin entitlement.
          example: adminEntitlement
        description:
          type: string
          description: Description of the admin entitlement.
          example: Admin Entitlement
        type:
          type: string
          description: Type of the admin entitlement.
          enum:
          - role
          - permission
        subType:
          type: string
          description: Sub type of the admin entitlement.
          enum:
          - regular
          - dynamic
        properties:
          "$ref": "#/components/schemas/AdminEntitlementProperties"
      description: Rest representation for an admin entitlement.
    ListResponseAssignmentRight:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/AssignmentRight"
    ListResponseAdminEntitlementChildren:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/AdminEntitlementChildren"
    ListResponseAssignment:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/Assignment"
    UserGroupList:
      type: object
      properties:
        groups:
          type: array
          items:
            type: string
    PatchAdminEntitlement:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the entitlement. Unique accross the application
          example: Test entitlement unique name
        description:
          type: string
          description: Description
          example: Test entitlement description
        hasScope:
          type: boolean
          description: hasScope
        conditionSet:
          type: array
          description: Condition set to determine the users that belong to this role.
            And, Example value:[{"erDepartment":[{"op":"eq","vl":"Security"},{"op":"ne","vl":"Sales"}],"erPersonType":[{"op":"sw","vl":"Employee"},{"op":"ne","vl":"Contractor"}]},{"erDepartment":[{"op":"eq","vl":"Marketing"}]}]
          items:
            type: object
            additionalProperties:
              type: array
              items:
                "$ref": "#/components/schemas/Operation_and_Value"
      description: Rest representation for an admin entitlement to be updated.
    EntitlementRight:
      type: object
      properties:
        entitlement:
          type: string
          description: Unique identifier of the permission
          example: "<unique identifier>"
        values:
          uniqueItems: true
          type: array
          description: Values of the rights
          items:
            type: string
    ApplicationResult:
      type: object
      properties:
        applicationId:
          type: string
          description: Unique identifier of the application
          readOnly: true
          example: '2041609960875394734'
    BulkGrantRevokeResponse:
      type: object
      properties:
        success:
          type: boolean
          description: True if the operation was performed correctly, false otherwise
          readOnly: true
        code:
          type: string
          description: Unique identifier
          readOnly: true
          example: "<unique_identifier>"
        operation:
          type: string
          description: Operation type
          readOnly: true
          enum:
          - grant
          - revoke
        messageId:
          type: string
          description: Unique identifier of the message error.
          readOnly: true
          example: "<message_error_id>"
        messageDescription:
          type: string
          description: Description of the error.
          readOnly: true
          example: "<message_text>"
      description: Object used to return a bulk result for the grant / revoke operation.
    AdminDelegation:
      required:
      - assignment
      - user
      type: object
      properties:
        assignment:
          type: string
          description: Unique identifier of the admin assignment.
          example: d166d244-43dc-4454-bb6d-ff31ed81d822
        user:
          type: string
          description: Id of the delegatee
          example: 6000005EKH
        startDate:
          type: string
          description: Indicate the start date of the delegation
          format: date-time
        expireDate:
          type: string
          description: Indicate the expire date of the delegation
          format: date-time
        justification:
          type: string
      description: Rest representation for an admin delegation.
    EntitlementRightResult:
      required:
      - code
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the right
          readOnly: true
          example: "<unique_identifier>"
        value:
          type: string
          description: Value of the right
          example: "<value>"
      description: Rest representation for an application entitlement right.
    AdminPermission:
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the admin permission.
          readOnly: true
          example: adminPermission
        name:
          type: string
          description: Name of the admin permission.
          readOnly: true
          example: AdminPermission
    UserGroupToAdminEntitlementGrant:
      type: object
      properties:
        users:
          type: array
          description: List of users to whom the entitlement will be assigned.
          items:
            "$ref": "#/components/schemas/UserToAdminEntitlementGrant"
        groups:
          type: array
          description: List of groups to whom the entitlement will be assigned.
          items:
            "$ref": "#/components/schemas/GroupToAdminEntitlementGrant"
      description: Bulk object used to grant one or more users and groups to an entitlement.
    EntitlementChildren:
      required:
      - application
      - name
      - type
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the entitlement
          readOnly: true
          example: d865f244-43dc-4a54-bb6d-fe31ed81d821
        name:
          type: string
          description: Name of the entitlement. Unique accross the application
          example: Test entitlement unique name
        description:
          type: string
          description: Description
          example: Test entitlement description
        type:
          type: string
          description: Type of the entitlement
          enum:
          - role
          - permission
        subType:
          type: string
          description: Sub type of the entitlement.
          enum:
          - regular
          - dynamic
        disabled:
          type: boolean
          description: Indicate if the entitlement is disabled.
          readOnly: true
          example: false
        status:
          type: string
          description: Status of a dynamic entitlement
          readOnly: true
          example: active
          enum:
          - waiting
          - inprogress
          - reviewpublish
          - active
          - active_waiting
          - active_inprogress
          - active_reviewpublish
          - inactive
        application:
          type: string
          description: Unique identifier of the application
          example: "<unique identifier>"
        category:
          type: string
          description: Category of the entitlement.
          example: Test category
        rights:
          type: boolean
          description: Indicate if the entitlement has rights
          readOnly: true
        extRef:
          type: string
          description: Unique identifier of the mapped object in the connected application.
          example: "<unique_identifier>"
        assignPolicy:
          type: integer
          description: Indicate the assign policy of the entitlement. If the value
            is 0 the entitlement can be assigned manually, otherwise the entitlement
            can not be assigned by the user.
          format: int32
          readOnly: true
          example: 0
          enum:
          - 0
          - 1
        properties:
          "$ref": "#/components/schemas/EntitlementProperties"
        lvl:
          type: integer
          description: Indicate the level of the entitlement.
          format: int32
          readOnly: true
        path:
          type: string
          description: Indicate the path of the entitlement.
          readOnly: true
          example: "/<parent_code>/<child_code>/"
        creationUser:
          type: string
          description: Indicate the id of who is the creator of the entitlement
          readOnly: true
          example: 6000005EKH
        creationDate:
          type: string
          description: Indicate the creation date of the entitlement
          format: date-time
          readOnly: true
        lastModUser:
          type: string
          description: Indicate the id of who is the last user that has changed the
            entitlement
          readOnly: true
          example: 6000005EKH
        lastModTime:
          type: string
          description: Indicate the last modification date of the entitlement
          format: date-time
          readOnly: true
    GrantAdminEntitlementToGroup:
      required:
      - brt
      - entitlement
      type: object
      properties:
        entitlement:
          type: string
          description: Unique identifier of the entitlement.
          example: d866d244-43dc-4a54-bb6d-fe31ed81d822
        brt:
          type: boolean
          description: If true the entitlement will be granted to each users in the
            group.
          example: false
    EntitlementRightCanonicalValues:
      type: object
      properties:
        entitlement:
          type: string
          description: Unique identifier of the entitlement
          example: d865f244-43dc-4a54-bb6d-fe31ed81d821
        canonicalValues:
          type: array
          description: Canonical values of the rights
          items:
            "$ref": "#/components/schemas/EntitlementRightResult"
    RestrictedEntitlementChildren:
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the entitlement
          readOnly: true
          example: "<unique identifier>"
        name:
          type: string
          description: Name of the entitlement. Unique accross the application
          example: Test entitlement unique name
        label:
          type: string
          description: Localization name of the entitlement.
          example: Admin Entitlement
        type:
          type: string
          description: Type of the entitlement
          enum:
          - role
          - permission
        hasScope:
          type: integer
          description: Indicate the the entitlement has scope. If the value is 0 the
            entitlement doesn't have scope, otherwise the entitlement has scope.
          format: int32
          readOnly: true
          example: 0
          enum:
          - 0
          - 1
        rights:
          type: boolean
          description: Indicate if the entitlement has rights.
          readOnly: true
        rightsValues:
          uniqueItems: true
          type: array
          description: Rights values associated to this child in the role
          items:
            type: string
        extRef:
          type: string
          description: Unique identifier of the mapped object in the connected application.
          example: "<unique_identifier>"
        lvl:
          type: integer
          description: Indicate the level of the entitlement.
          format: int32
          readOnly: true
        path:
          type: string
          description: Indicate the path of the entitlement.
          readOnly: true
          example: "/<parent_code>/<child_code>/"
        countChildren:
          type: integer
          description: Number of children.
          format: int32
          readOnly: true
        properties:
          "$ref": "#/components/schemas/EntitlementProperties"
      description: Rest representation for entitlement children.
    ListResponseUser:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/User_0"
    ApplicationPermission:
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the admin permission.
          readOnly: true
          example: adminPermission
        name:
          type: string
          description: Name of the admin permission.
          readOnly: true
          example: AdminPermission
        application:
          type: string
          description: Unique identifier of the application
          readOnly: true
          example: "<unique identifier>"
    EntitlementRightsValue:
      type: object
      properties:
        id:
          type: string
          description: unique identifier of right.
          example: "<unique_identifier>"
        displayName:
          type: string
          description: display name of right.
          example: Admin
      description: contains list of right objects.
    ListBulkGrantRevokeAdminEntitlementToUserAdminEntitlementToUser:
      type: object
      properties:
        grant:
          type: array
          description: List of entitlements to grant
          items:
            "$ref": "#/components/schemas/AdminEntitlementToUser"
        revoke:
          type: array
          description: List of entitlements to revoke
          items:
            "$ref": "#/components/schemas/AdminEntitlementToUser"
      description: Bulk object used to grant / revoke one or more entitlements
    HealthStatusComponent:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
        details:
          type: string
        time:
          type: string
    ListBulkGrantRevokeAdminResourceAdminResource:
      type: object
      properties:
        grant:
          type: array
          description: List of entitlements to grant
          items:
            "$ref": "#/components/schemas/AdminResource"
        revoke:
          type: array
          description: List of entitlements to revoke
          items:
            "$ref": "#/components/schemas/AdminResource"
      description: Bulk object used to grant / revoke one or more entitlements
    IBGroupResource:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: Code of IB group resource.
          example: '2041609960875394734'
        displayName:
          type: string
          description: Display name of entitlement.
          example: Basic access
        resourceSubType:
          type: string
          description: Entitlement category.
          example: group
        rightsRef:
          type: string
          description: Rights reference to lookup rights values.
          example: role
        rightsLabel:
          type: string
          description: Rights lable to display on UI.
          example: Scope
        isMandatory:
          type: boolean
          description: Rights are mandatory or not for the entitlement.
          example: true
        isMultiValue:
          type: boolean
          description: Multi value allowed or not for the entitlement.
          example: true
        type:
          type: string
          description: Type of rights for the entitlement.
          example: reference
    PermissionRemediationResultWithRight:
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the permission
          example: d865f244-43dc-4a54-bb6d-fe31ed81d821
        name:
          type: string
          description: Name of the permission
          example: profile
        category:
          type: string
          description: Category of the permission
          example: attribute
        ext_ref:
          type: string
          description: Unique identifier of the permission in the target system
          example: profile
        remediated:
          type: boolean
          description: Indicate if the remediation operation was performed correctly
          example: true
        message:
          type: string
          description: Details of why the compare/remediation operation is not performed
          example: "<error_code> - <error_message>"
        targetRights:
          uniqueItems: true
          type: array
          description: Target right values
          items:
            type: string
        rights:
          uniqueItems: true
          type: array
          description: Right values
          items:
            type: string
    AdminEntitlementDetailsResult:
      required:
      - name
      - type
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the admin entitlement.
          readOnly: true
          example: d866d244-43dc-4a54-bb6d-fe31ed81d822
        name:
          type: string
          description: Name of the admin entitlement.
          example: adminEntitlement
        label:
          type: string
          description: Localization name of the admin entitlement.
          example: Admin Entitlement
        description:
          type: string
          description: Description of the admin entitlement.
          example: Admin Entitlement
        type:
          type: string
          description: Type of the admin entitlement.
          enum:
          - role
          - permission
        subType:
          type: string
          description: Sub type of the admin entitlement.
          enum:
          - regular
          - dynamic
        ootb:
          type: boolean
          description: Out Of the box content
        disabled:
          type: boolean
          description: Indicate if the admin entitlement is disabled.
          readOnly: true
          example: false
        status:
          type: string
          description: Status of a dynamic admin entitlement
          readOnly: true
          example: active
          enum:
          - waiting
          - inprogress
          - reviewpublish
          - active
          - active_waiting
          - active_inprogress
          - active_reviewpublish
          - inactive
        hasScope:
          type: integer
          description: Indicate the the entitlement has scope. If the value is 0 the
            entitlement doesn't have scope, otherwise the entitlement has scope.
          format: int32
          readOnly: true
          example: 0
          enum:
          - 0
          - 1
        assignPolicy:
          type: integer
          description: Indicate the assign policy of the entitlement. If the value
            is 0 the entitlement can be assigned manually, otherwise the entitlement
            can not be assigned by the user.
          format: int32
          readOnly: true
          example: 0
          enum:
          - 0
          - 1
        subscription:
          type: string
          description: Subscription of the admin entitlement.
          example: cig
        countChildren:
          type: integer
          description: Number of entitlement contained in the role
          format: int32
          readOnly: true
        creationUserDetails:
          "$ref": "#/components/schemas/User_0"
        lastModUserDetails:
          "$ref": "#/components/schemas/User_0"
        properties:
          "$ref": "#/components/schemas/AdminEntitlementProperties"
        conditionSet:
          type: array
          description: Condition set to determine the users that belong to this role.
            And, Example value:[{"erDepartment":[{"op":"eq","vl":"Security"},{"op":"ne","vl":"Sales"}],"erPersonType":[{"op":"sw","vl":"Employee"},{"op":"ne","vl":"Contractor"}]},{"erDepartment":[{"op":"eq","vl":"Marketing"}]}]
          items:
            type: object
            additionalProperties:
              type: array
              items:
                "$ref": "#/components/schemas/Operation_and_Value"
        countChildrenPermissions:
          type: integer
          description: Number of permissions contained in the role
          format: int32
          readOnly: true
        countUsers:
          type: integer
          description: Number of users granted
          format: int32
          readOnly: true
        countGroups:
          type: integer
          description: Number of groups granted
          format: int32
          readOnly: true
        evaluationStartTime:
          type: string
          description: Evaluation start time
          format: date-time
          readOnly: true
        evaluationEndTime:
          type: string
          description: Evaluation end time
          format: date-time
          readOnly: true
        errorMessage:
          type: string
          description: Error message for failed admin entitlement
          readOnly: true
        updatedConditionSet:
          type: array
          description: Condition set to determine the users that belong to this role.
            And, Example value:[{"erDepartment":[{"op":"eq","vl":"Security"},{"op":"ne","vl":"Sales"}],"erPersonType":[{"op":"sw","vl":"Employee"},{"op":"ne","vl":"Contractor"}]},{"erDepartment":[{"op":"eq","vl":"Marketing"}]}]
          items:
            type: object
            additionalProperties:
              type: array
              items:
                "$ref": "#/components/schemas/Operation_and_Value"
        creationUser:
          type: string
          description: Indicate the id of who is the creator of the admin entitlement.
          readOnly: true
          example: 6000005EKH
        creationDate:
          type: string
          description: Indicate the creation date of the admin entitlement.
          format: date-time
          readOnly: true
        lastModUser:
          type: string
          description: Indicate the id of who is the last user that has changed the
            admin entitlement.
          readOnly: true
          example: 6000005EKH
        lastModTime:
          type: string
          description: Indicate the last modification date of the entitlement.
          format: date-time
          readOnly: true
    EntitlementRelation:
      required:
      - application
      - name
      - type
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the entitlement
          readOnly: true
          example: d865f244-43dc-4a54-bb6d-fe31ed81d821
        name:
          type: string
          description: Name of the entitlement. Unique accross the application
          example: Test entitlement unique name
        description:
          type: string
          description: Description
          example: Test entitlement description
        type:
          type: string
          description: Type of the entitlement
          enum:
          - role
          - permission
        subType:
          type: string
          description: Sub type of the entitlement.
          enum:
          - regular
          - dynamic
        disabled:
          type: boolean
          description: Indicate if the entitlement is disabled.
          readOnly: true
          example: false
        status:
          type: string
          description: Status of a dynamic entitlement
          readOnly: true
          example: active
          enum:
          - waiting
          - inprogress
          - reviewpublish
          - active
          - active_waiting
          - active_inprogress
          - active_reviewpublish
          - inactive
        application:
          type: string
          description: Unique identifier of the application
          example: "<unique identifier>"
        category:
          type: string
          description: Category of the entitlement.
          example: Test category
        rights:
          type: boolean
          description: Indicate if the entitlement has rights
          readOnly: true
        extRef:
          type: string
          description: Unique identifier of the mapped object in the connected application.
          example: "<unique_identifier>"
        assignPolicy:
          type: integer
          description: Indicate the assign policy of the entitlement. If the value
            is 0 the entitlement can be assigned manually, otherwise the entitlement
            can not be assigned by the user.
          format: int32
          readOnly: true
          example: 0
          enum:
          - 0
          - 1
        properties:
          "$ref": "#/components/schemas/EntitlementProperties"
        lvl:
          type: integer
          description: Indicate the level of the entitlement.
          format: int32
          readOnly: true
        path:
          type: string
          description: Indicate the path of the entitlement.
          readOnly: true
          example: "/<parent_code>/<child_code>/"
        group:
          type: string
          description: Code of the group.
          readOnly: true
          example: 50CFD1VTR1
        direct:
          type: boolean
          description: Indicate if the entitlement granted directly.
          readOnly: true
        creationUser:
          type: string
          description: Indicate the id of who is the creator of the entitlement
          readOnly: true
          example: 6000005EKH
        creationDate:
          type: string
          description: Indicate the creation date of the entitlement
          format: date-time
          readOnly: true
        lastModUser:
          type: string
          description: Indicate the id of who is the last user that has changed the
            entitlement
          readOnly: true
          example: 6000005EKH
        lastModTime:
          type: string
          description: Indicate the last modification date of the entitlement
          format: date-time
          readOnly: true
    UserToEntitlementRevoke:
      required:
      - user
      type: object
      properties:
        user:
          type: string
          description: Unique identifier of the user.
          example: 50T65SKD8C
        group:
          type: string
          description: Code of the group.
          example: 50CFD1VTR1
      description: Object used to revoke an entitlement to a user.
    AccessDetailsResult:
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the entitlement
          readOnly: true
          example: "<unique identifier>"
        name:
          type: string
          description: Name of the entitlement. Unique accross the application
          readOnly: true
          example: Test entitlement unique name
        description:
          type: string
          description: Description
          readOnly: true
          example: Test entitlement description
        accessType:
          type: string
          description: Type of the entitlement
          readOnly: true
          enum:
          - permission
          - app role
        application:
          type: string
          description: Unique identifier of the application
          readOnly: true
          example: "<unique identifier>"
        hasRights:
          type: boolean
          description: Indicate if the entitlement has rights.
          readOnly: true
        properties:
          "$ref": "#/components/schemas/EntitlementProperties"
        applicationDetails:
          "$ref": "#/components/schemas/ApplicationDetails"
        fixedRights:
          type: array
          description: Fixed right values of the entitlement
          items:
            "$ref": "#/components/schemas/EntitlementRight"
        countChildren:
          type: integer
          description: Indicate the number of children for the entitlement
          format: int32
          readOnly: true
        countChildrenPermissions:
          type: integer
          description: Number of permissions contained in the role
          format: int32
          readOnly: true
    ListBulkGrantRevokeAdminDelegationString:
      type: object
      properties:
        grant:
          type: array
          description: List of entitlements to grant
          items:
            "$ref": "#/components/schemas/AdminDelegation"
        revoke:
          type: array
          description: List of entitlements to revoke
          items:
            type: string
      description: Bulk object used to grant / revoke one or more entitlements
    EnvironmentDetails:
      type: object
      properties:
        service:
          type: string
        build:
          type: string
        cbi:
          type: string
        hostname:
          type: string
    AccessRequestResponse:
      type: object
      properties:
        success:
          type: boolean
          description: True if the operation was performed correctly, false otherwise
          readOnly: true
        code:
          type: string
          description: Unique identifier
          readOnly: true
          example: "<unique_identifier>"
        messageId:
          type: string
          description: Unique identifier of the message error.
          readOnly: true
          example: "<message_error_id>"
        messageDescription:
          type: string
          description: Description of the error.
          readOnly: true
          example: "<message_text>"
      description: Response for an operation on access request.
    UserToAdminEntitlementGrant:
      required:
      - user
      type: object
      properties:
        user:
          type: string
          description: Unique identifier of the user.
          example: 50T65SKD8C
        group:
          type: string
          description: Code of the group.
          example: 50CFD1VTR1
      description: Object used to grant an entitlement to a user.
    AdminEntitlementToUser:
      required:
      - entitlement
      type: object
      properties:
        entitlement:
          type: string
          description: Unique identifier of the admin entitlement.
          example: d866d244-43dc-4a54-bb6d-fe31ed81d822
        group:
          type: string
          description: Code of the group
          example: 50CFD1VTR1
      description: Object used to grant/revoke an admin entitlement to a user
    AdminEntitlementResourceGrouped:
      type: object
      properties:
        entitlement:
          type: string
          description: Unique identifier of the admin entitlement.
          readOnly: true
          example: d866d244-43dc-4a54-bb6d-fe31ed81d822
        scopeRestriction:
          type: boolean
          description: True when the user has limited scope for the current entitlement,
            false when user can access all resources without any limitation.
          readOnly: true
        count:
          type: integer
          description: Total number of resources for the entitlement.
          format: int32
          readOnly: true
        resources:
          type: array
          description: List of resources.
          items:
            "$ref": "#/components/schemas/AdminResource"
        messageId:
          type: string
          description: Unique identifier of the message error.
          readOnly: true
          example: "<message_error_id>"
        messageDescription:
          type: string
          description: Description of the error.
          readOnly: true
          example: "<message_text>"
    BulkAddRemoveChildrenEntitlement:
      type: object
      properties:
        add:
          type: array
          description: List of entitlements children to add
          items:
            "$ref": "#/components/schemas/Entitlement_0"
        remove:
          type: array
          description: List of entitlements children to remove
          items:
            type: string
        rights:
          type: array
          description: Fixed right values for each permissions
          items:
            "$ref": "#/components/schemas/EntitlementRight"
      description: Bulk object used to add / remove one or more entitlements children.
    AssignmentSearch:
      type: object
      properties:
        accessInfo:
          "$ref": "#/components/schemas/AccessInfo"
        accessType:
          uniqueItems: true
          type: array
          description: Type of the access
          items:
            type: string
        application:
          uniqueItems: true
          type: array
          description: Unique identifier of the application
          items:
            type: string
        sort:
          "$ref": "#/components/schemas/Sort"
        status:
          uniqueItems: true
          type: array
          description: Status of the access assignment
          items:
            type: string
        assignmentSource:
          uniqueItems: true
          type: array
          description: Type of the access assignment
          items:
            type: string
    AssignmentFulfillment:
      required:
      - entitlement
      - isFulfilled
      - user
      type: object
      properties:
        entitlement:
          "$ref": "#/components/schemas/EntitlementForFulfillment"
        user:
          type: string
          description: User code of the User
        account:
          type: string
          description: Account code of the user
        isFulfilled:
          type: boolean
          description: Determines if the assignment was fulfilled at the target
    AccessAssignment:
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the assignment.
          example: f165f244-43dc-4a54-bb6d-fe3dyd81d8233
        type:
          type: string
          description: Type of the assignment.
          example: USER
          enum:
          - USER
          - GROUP
        group:
          type: string
          description: Code of the group.
          example: 50CFD1VTR1
        entitlement:
          type: string
          description: Code of the entitlement.
          example: d865f244-43dc-4a54-bb6d-fe31ed81d821
        entitlementName:
          type: string
          description: Name of the entitlement.
          example: read
        entitlementDesc:
          type: string
          description: Description of entitlement
        accessType:
          type: string
          description: Type of the entitlement.
          example: role
        application:
          type: string
          description: Id of the application.
          example: '5519128428712589829'
        status:
          type: string
          description: Status of access
          readOnly: true
          enum:
          - active
          - fullfillment_failed
        assignmentSource:
          type: string
          description: Type of access assignment
          readOnly: true
          enum:
          - assigned
          - delegated
        applicationDetails:
          "$ref": "#/components/schemas/ApplicationDetails"
        groupDetails:
          "$ref": "#/components/schemas/Group_1"
      description: Rest representation for an access assignment.
    RemediationOutput:
      type: object
      properties:
        user:
          "$ref": "#/components/schemas/UserTargetRemediationOutput"
    BulkAddRemoveChildrenResponse:
      type: object
      properties:
        success:
          type: boolean
          description: True if the operation was performed correctly, false otherwise
          readOnly: true
        operation:
          type: string
          description: Operation type
          readOnly: true
          enum:
          - add
          - remove
        entitlement:
          type: string
          description: Entitlement on which the operation was performed
          readOnly: true
          example: 48cb02e7-07a5-4cb0-a6ba-c5556e94c184
        messageId:
          type: string
          description: Unique identifier of the message error.
          readOnly: true
          example: "<message_error_id>"
        messageDescription:
          type: string
          description: Description of the error.
          readOnly: true
          example: "<message_text>"
      description: Object used to return a bulk result for the add / remove children
        operation.
    Sort:
      type: object
      properties:
        attribute:
          type: string
          description: Attribute on which results will be sorted
          readOnly: true
          example: name
          enum:
          - name
          - description
        asc:
          type: boolean
          description: Ascending order of sorted results or not
          readOnly: true
      description: Rest representation for sort.
    ReportConfig:
      type: object
      properties:
        page:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
        application:
          type: string
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time
        columns:
          type: array
          items:
            "$ref": "#/components/schemas/ReportColumn"
    ListResponseAdminEntitlement:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/AdminEntitlementResult"
    ListResponseManagedAttribute:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/ReportAttribute"
    BulkGrantRevokeUserGroupToEntitlementGrantUserGroupToEntitlementRevoke:
      type: object
      properties:
        grant:
          "$ref": "#/components/schemas/UserGroupToEntitlementGrant"
        revoke:
          "$ref": "#/components/schemas/UserGroupToEntitlementRevoke"
      description: Bulk object used to grant / revoke one or more entitlements
    DelegateeAdminAssignment:
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the assignment.
          example: f165f244-43dc-4a54-bb6d-fe3dyd81d8233
        user:
          type: string
          description: Code of the user.
          example: 6000005EKH
        userDetails:
          "$ref": "#/components/schemas/User_0"
        startDate:
          type: string
          description: Indicate the start date of the assignment.
          format: date-time
          readOnly: true
        endDate:
          type: string
          description: Indicate the end date of the assignment.
          format: date-time
          readOnly: true
        justification:
          type: string
          description: Reason for this delegation.
          readOnly: true
      description: Rest representation for delegatee admin assignments.
    AdminEntitlementResult:
      required:
      - name
      - type
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the admin entitlement.
          readOnly: true
          example: d866d244-43dc-4a54-bb6d-fe31ed81d822
        name:
          type: string
          description: Name of the admin entitlement.
          example: adminEntitlement
        label:
          type: string
          description: Localization name of the admin entitlement.
          example: Admin Entitlement
        description:
          type: string
          description: Description of the admin entitlement.
          example: Admin Entitlement
        type:
          type: string
          description: Type of the admin entitlement.
          enum:
          - role
          - permission
        subType:
          type: string
          description: Sub type of the admin entitlement.
          enum:
          - regular
          - dynamic
        ootb:
          type: boolean
          description: Out Of the box content
        disabled:
          type: boolean
          description: Indicate if the admin entitlement is disabled.
          readOnly: true
          example: false
        status:
          type: string
          description: Status of a dynamic admin entitlement
          readOnly: true
          example: active
          enum:
          - waiting
          - inprogress
          - reviewpublish
          - active
          - active_waiting
          - active_inprogress
          - active_reviewpublish
          - inactive
        hasScope:
          type: integer
          description: Indicate the the entitlement has scope. If the value is 0 the
            entitlement doesn't have scope, otherwise the entitlement has scope.
          format: int32
          readOnly: true
          example: 0
          enum:
          - 0
          - 1
        assignPolicy:
          type: integer
          description: Indicate the assign policy of the entitlement. If the value
            is 0 the entitlement can be assigned manually, otherwise the entitlement
            can not be assigned by the user.
          format: int32
          readOnly: true
          example: 0
          enum:
          - 0
          - 1
        subscription:
          type: string
          description: Subscription of the admin entitlement.
          example: cig
        countChildren:
          type: integer
          description: Number of entitlement contained in the role
          format: int32
          readOnly: true
        creationUserDetails:
          "$ref": "#/components/schemas/User_0"
        lastModUserDetails:
          "$ref": "#/components/schemas/User_0"
        properties:
          "$ref": "#/components/schemas/AdminEntitlementProperties"
        creationUser:
          type: string
          description: Indicate the id of who is the creator of the admin entitlement.
          readOnly: true
          example: 6000005EKH
        creationDate:
          type: string
          description: Indicate the creation date of the admin entitlement.
          format: date-time
          readOnly: true
        lastModUser:
          type: string
          description: Indicate the id of who is the last user that has changed the
            admin entitlement.
          readOnly: true
          example: 6000005EKH
        lastModTime:
          type: string
          description: Indicate the last modification date of the entitlement.
          format: date-time
          readOnly: true
    SelfAdminAssignment:
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the assignment.
          example: f165f244-43dc-4a54-bb6d-fe3dyd81d8233
        type:
          type: string
          description: Type of the assignment.
          example: USER
          enum:
          - USER
          - GROUP
        reserved:
          type: boolean
          description: Indicate it is a reserved default authorization that can't
            be deleted.
          readOnly: true
          example: false
        entitlement:
          type: string
          description: Code of the entitlement.
          example: d865f244-43dc-4a54-bb6d-fe31ed81d821
        entitlementName:
          type: string
          description: Name of the entitlement.
          example: read
        entitlementType:
          type: string
          description: Type of the entitlement.
          example: role
        entitlementSubType:
          type: string
          description: Sub type of the entitlement.
          example: regular
        entitlementDesc:
          type: string
          description: Description of the entitlement.
          example: role
        user:
          type: string
          description: Code of the user.
          example: 6000005EKH
        group:
          type: string
          description: Code of the group.
          example: 50CFD1VTR1
        delegator:
          type: string
          description: Code of the delegator.
          example: 50CFD1VTR1
        delegatorDetails:
          "$ref": "#/components/schemas/User_0"
        enable:
          type: boolean
          description: Indicate if the assignment is enabled or not.
        vv:
          type: boolean
          description: Indicate if the entitlement is in visibility violation.
        brt:
          type: boolean
          description: If true the entitlement is granted for each users in the group.
        justification:
          type: string
          description: Indicate the justification of the assignment.
          readOnly: true
        startDate:
          type: string
          description: Indicate the start date of the assignment.
          format: date-time
          readOnly: true
        endDate:
          type: string
          description: Indicate the end date of the assignment.
          format: date-time
          readOnly: true
        creationUser:
          type: string
          description: Indicate the id of who is the creator of the entitlement.
          readOnly: true
          example: 6000005EKH
        creationDate:
          type: string
          description: Indicate the creation date of the entitlement.
          format: date-time
          readOnly: true
        lastModUser:
          type: string
          description: Indicate the id of who is the last user that has changed the
            entitlement.
          readOnly: true
          example: 6000005EKH
        lastModTime:
          type: string
          description: Indicate the last modification date of the entitlement.
          format: date-time
          readOnly: true
        delegatees:
          type: array
          description: List of delegatees for this assignment
          items:
            "$ref": "#/components/schemas/User_0"
      description: Rest representation for self admin assignments.
    ListResponseReportStatus:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/ReportStatus"
    AdminAssignmentResult:
      required:
      - name
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the admin entitlement.
          readOnly: true
          example: d866d244-43dc-4a54-bb6d-fe31ed81d822
        name:
          type: string
          description: Name of the admin entitlement.
          example: adminEntitlement
        scope:
          type: integer
          description: Scope of the permission.
          format: int32
          example: 1
    ReviewAdminAssignment:
      type: object
      properties:
        type:
          type: string
          description: Type of the assignment.
          example: USER
          enum:
          - USER
        state:
          type: string
          description: State of the assignment.
          example: ADDED
          enum:
          - ADDED
          - REMOVED
        entitlement:
          type: string
          description: Code of the entitlement.
          example: d865f244-43dc-4a54-bb6d-fe31ed81d821
        user:
          type: string
          description: Code of the user.
          example: 6000005EKH
        userDetails:
          "$ref": "#/components/schemas/User_0"
      description: Rest representation for a review admin assignment.
    ListResponseAccesses:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/AccessResult_0"
    ListAdminEntitlementResource:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/AdminEntitlementResourceGrouped"
    EntitlementProperties:
      type: object
      properties:
        rightsRef:
          type: string
          description: Rights reference to lookup rights values.
          readOnly: true
          example: permissionSet
        rightsLabel:
          type: string
          description: Rights label to display on UI.
          readOnly: true
          example: Rights
        mandatory:
          type: string
          description: Indicate if the entitlement is mandatory
          readOnly: true
          example: 'false'
        multivalue:
          type: string
          description: Indicate if the entitlement can have one or more right values
          readOnly: true
          example: 'true'
        type:
          type: string
          description: Indicate the type of the right value
          readOnly: true
          example: reference
        canonicalValues:
          type: array
          description: Indicate the canonical values supported by permission
          example: "[admin, user]"
          items:
            type: string
    EntitylistString:
      type: object
      properties:
        entities:
          type: array
          description: entities
          items:
            type: string
      description: List of entitlements or assignments
    ListResponseEntitlement:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/EntitlementResult"
    ListResourcesResponse:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        scopeRestriction:
          type: boolean
          description: True when the user has limited scope for the current entitlement,
            false when user can access all resources without any limitation.
          readOnly: true
        resources:
          type: array
          description: List of resources
          items:
            "$ref": "#/components/schemas/AdminResource"
      description: Object used to return a list of resources
    ListBulkGrantRevokeStringString:
      type: object
      properties:
        grant:
          type: array
          description: List of entitlements to grant
          items:
            type: string
        revoke:
          type: array
          description: List of entitlements to revoke
          items:
            type: string
      description: Bulk object used to grant / revoke one or more entitlements
    UserGroups:
      type: object
      properties:
        groups:
          type: array
          description: List of user's group code.
          items:
            type: string
    ReviewAssignment:
      type: object
      properties:
        type:
          type: string
          description: Type of the assignment.
          example: USER
          enum:
          - USER
        state:
          type: string
          description: State of the assignment.
          example: ADDED
          enum:
          - ADDED
          - REMOVED
        entitlement:
          type: string
          description: Code of the entitlement.
          example: d865f244-43dc-4a54-bb6d-fe31ed81d821
        user:
          type: string
          description: Code of the user.
          example: 6000005EKH
        userDetails:
          "$ref": "#/components/schemas/User_0"
      description: Rest representation for a reivew assignment.
    RemoveUser:
      required:
      - user
      type: object
      properties:
        user:
          type: string
          description: user
        ownsOtherResource:
          type: boolean
          description: ownsOtherResource
      description: Object used to remove a user from an entitlement.
    BulkGrantRevokeUserGroupToAdminEntitlementGrantUserGroupToEntitlementRevoke:
      type: object
      properties:
        grant:
          "$ref": "#/components/schemas/UserGroupToAdminEntitlementGrant"
        revoke:
          "$ref": "#/components/schemas/UserGroupToEntitlementRevoke"
      description: Bulk object used to grant / revoke one or more entitlements
    AccessAssignmentDetailsResult:
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the assignment.
          example: f165f244-43dc-4a54-bb6d-fe3dyd81d8233
        type:
          type: string
          description: Type of the assignment.
          example: USER
          enum:
          - USER
          - GROUP
        group:
          type: string
          description: Code of the group.
          example: 50CFD1VTR1
        entitlement:
          type: string
          description: Code of the entitlement.
          example: d865f244-43dc-4a54-bb6d-fe31ed81d821
        entitlementName:
          type: string
          description: Name of the entitlement.
          example: read
        entitlementDesc:
          type: string
          description: Description of entitlement
        accessType:
          type: string
          description: Type of the entitlement.
          example: role
        application:
          type: string
          description: Id of the application.
          example: '5519128428712589829'
        status:
          type: string
          description: Status of access
          readOnly: true
          enum:
          - active
          - fullfillment_failed
        assignmentSource:
          type: string
          description: Type of access assignment
          readOnly: true
          enum:
          - assigned
          - delegated
        applicationDetails:
          "$ref": "#/components/schemas/ApplicationDetails"
        groupDetails:
          "$ref": "#/components/schemas/Group_1"
        delegator:
          "$ref": "#/components/schemas/DelegatorDelegateeAccessAssignment"
        delegatees:
          type: array
          description: Delegatee details
          items:
            "$ref": "#/components/schemas/DelegatorDelegateeAccessAssignment"
    EntitylistRequestedEntilement:
      type: object
      properties:
        entities:
          type: array
          description: entities
          items:
            "$ref": "#/components/schemas/RequestedEntilement"
      description: List of entitlements or assignments
    ApplicationInfo:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
          description: Application ID
        name:
          type: string
          description: Application Name
    ListResponseEntitlementStatistics.java:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/EntitlementStatistics"
    EntitlementFilter:
      required:
      - application
      - name
      - type
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the entitlement.
          example: d865f244-43dc-4a54-bb6d-fe31ed81d821
        name:
          type: string
          description: Name of the entitlement. Unique accross the application
          example: Test entitlement unique name
        description:
          type: string
          description: Description
          example: Test entitlement description
        type:
          type: string
          description: Type of the entitlement
          enum:
          - role
          - permission
        subType:
          type: string
          description: Sub type of the entitlement.
          enum:
          - regular
          - dynamic
        application:
          type: string
          description: Unique identifier of the application
          example: "<unique identifier>"
        category:
          type: string
          description: Category of the entitlement.
          example: Test category
        extRef:
          type: string
          description: Unique identifier of the mapped object in the connected application.
          example: "<unique_identifier>"
    UserToEntitlementGrant:
      required:
      - user
      type: object
      properties:
        user:
          type: string
          description: Unique identifier of the user.
          example: 50T65SKD8C
        group:
          type: string
          description: Code of the group.
          example: 50CFD1VTR1
        rights:
          uniqueItems: true
          type: array
          description: Right values
          items:
            type: string
      description: Object used to grant an entitlement to a user.
    BulkAddRemoveIBGroupResponse:
      type: object
      properties:
        success:
          type: boolean
          description: True if the operation was performed correctly, false otherwise
          readOnly: true
        code:
          type: string
          description: Unique identifier of the assignment
          readOnly: true
          example: "<unique_identifier>"
        operation:
          type: string
          description: Operation type
          readOnly: true
          enum:
          - add
          - remove
        messageId:
          type: string
          description: Unique identifier of the message error
          readOnly: true
          example: "<message_error_id>"
        messageDescription:
          type: string
          description: Description of the error
          readOnly: true
          example: "<message_text>"
        ibresource:
          type: string
      description: Object used to return a bulk result for the operation.
    UserInfo:
      type: object
      properties:
        user:
          type: string
        groups:
          type: array
          items:
            type: string
    AdminEntitlementRelation:
      required:
      - name
      - type
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the admin entitlement.
          readOnly: true
          example: d866d244-43dc-4a54-bb6d-fe31ed81d822
        name:
          type: string
          description: Name of the admin entitlement.
          example: adminEntitlement
        label:
          type: string
          description: Localization name of the admin entitlement.
          example: Admin Entitlement
        description:
          type: string
          description: Description of the admin entitlement.
          example: Admin Entitlement
        type:
          type: string
          description: Type of the admin entitlement.
          enum:
          - role
          - permission
        subType:
          type: string
          description: Sub type of the admin entitlement.
          enum:
          - regular
          - dynamic
        ootb:
          type: boolean
          description: Out Of the box content
        disabled:
          type: boolean
          description: Indicate if the admin entitlement is disabled.
          readOnly: true
          example: false
        status:
          type: string
          description: Status of a dynamic admin entitlement
          readOnly: true
          example: active
          enum:
          - waiting
          - inprogress
          - reviewpublish
          - active
          - active_waiting
          - active_inprogress
          - active_reviewpublish
          - inactive
        hasScope:
          type: integer
          description: Indicate the the entitlement has scope. If the value is 0 the
            entitlement doesn't have scope, otherwise the entitlement has scope.
          format: int32
          readOnly: true
          example: 0
          enum:
          - 0
          - 1
        assignPolicy:
          type: integer
          description: Indicate the assign policy of the entitlement. If the value
            is 0 the entitlement can be assigned manually, otherwise the entitlement
            can not be assigned by the user.
          format: int32
          readOnly: true
          example: 0
          enum:
          - 0
          - 1
        subscription:
          type: string
          description: Subscription of the admin entitlement.
          example: cig
        countChildren:
          type: integer
          description: Number of entitlement contained in the role
          format: int32
          readOnly: true
        creationUserDetails:
          "$ref": "#/components/schemas/User_0"
        lastModUserDetails:
          "$ref": "#/components/schemas/User_0"
        properties:
          "$ref": "#/components/schemas/AdminEntitlementProperties"
        lvl:
          type: integer
          description: Indicate the level of the admin entitlement.
          format: int32
          readOnly: true
        path:
          type: string
          description: Indicate the path of the admin entitlement.
          readOnly: true
          example: "/<parent_code>/<child_code>/"
        groupCode:
          type: string
          description: Code of the group.
          readOnly: true
          example: 50CFD1VTR1
        delegator:
          type: string
          description: Code of the delegator.
          example: 50CFD1VTR1
        vv:
          type: boolean
          description: Indicate if the entitlement is in visibility violation.
          readOnly: true
        direct:
          type: boolean
          description: Indicate if the entitlement granted directly.
          readOnly: true
        startDate:
          type: string
          description: Indicate the start date of the assignment.
          format: date-time
          readOnly: true
        endDate:
          type: string
          description: Indicate the end date of the assignment.
          format: date-time
          readOnly: true
        creationUser:
          type: string
          description: Indicate the id of who is the creator of the admin entitlement.
          readOnly: true
          example: 6000005EKH
        creationDate:
          type: string
          description: Indicate the creation date of the admin entitlement.
          format: date-time
          readOnly: true
        lastModUser:
          type: string
          description: Indicate the id of who is the last user that has changed the
            admin entitlement.
          readOnly: true
          example: 6000005EKH
        lastModTime:
          type: string
          description: Indicate the last modification date of the entitlement.
          format: date-time
          readOnly: true
    ListResponseAdminAssignment1:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/AdminAssignmentResult"
    AdminEntitlementFilter:
      required:
      - name
      - type
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the admin entitlement.
          example: d865f244-43dc-4a54-bb6d-fe31ed81d821
        name:
          type: string
          description: Name of the admin entitlement.
          example: adminEntitlement
        description:
          type: string
          description: Description of the admin entitlement.
          example: Admin Entitlement
        type:
          type: string
          description: Type of the admin entitlement.
          enum:
          - role
          - permission
        subType:
          type: string
          description: Sub type of the admin entitlement.
          enum:
          - regular
          - dynamic
        properties:
          "$ref": "#/components/schemas/AdminEntitlementProperties"
        hasScope:
          type: integer
          description: Indicate the the entitlement has scope. If the value is 0 the
            entitlement doesn't have scope, otherwise the entitlement has scope.
          format: int32
          example: 0
          enum:
          - 0
          - 1
    ListResponseEntitlementRelation:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/EntitlementRelation"
    GrantEntitlementToGroup:
      required:
      - brt
      - entitlement
      type: object
      properties:
        entitlement:
          type: string
          description: Unique identifier of the entitlement.
          example: d866d244-43dc-4a54-bb6d-fe31ed81d822
        brt:
          type: boolean
          description: If true the entitlement will be granted to each users in the
            group.
          example: false
        rightValues:
          uniqueItems: true
          type: array
          description: Right values
          items:
            type: string
      description: Object used to grant an entitlement to a group
    ReportAttribute:
      type: object
      properties:
        category:
          type: string
        name:
          type: string
        extName:
          type: string
        label:
          type: string
        dataType:
          type: string
        default:
          type: boolean
      description: Report attribute schema.
    BulkAddRemoveResponse:
      type: object
      properties:
        success:
          type: boolean
          description: True if the operation was performed correctly, false otherwise
          readOnly: true
        code:
          type: string
          description: Unique identifier of the assignment
          readOnly: true
          example: "<unique_identifier>"
        user:
          type: string
          description: Unique identifier of the user
          readOnly: true
          example: "<unique_identifier>"
        operation:
          type: string
          description: Operation type
          readOnly: true
          enum:
          - add
          - remove
        messageId:
          type: string
          description: Unique identifier of the message error
          readOnly: true
          example: "<message_error_id>"
        messageDescription:
          type: string
          description: Description of the error
          readOnly: true
          example: "<message_text>"
      description: Object used to return a bulk result for the operation.
    ListBulkGrantRevokeGrantAdminEntitlementToGroupRevokeEntitlementToGroup:
      type: object
      properties:
        grant:
          type: array
          description: List of entitlements to grant
          items:
            "$ref": "#/components/schemas/GrantAdminEntitlementToGroup"
        revoke:
          type: array
          description: List of entitlements to revoke
          items:
            "$ref": "#/components/schemas/RevokeEntitlementToGroup"
      description: Bulk object used to grant / revoke one or more entitlements
    AccessStatistics:
      required:
      - count
      type: object
      properties:
        count:
          type: integer
          description: Count
          format: int32
      description: Statistics of the access.
    ProvCfg:
      required:
      - provisioning
      - targetId
      - targetKey
      - targetType
      type: object
      properties:
        targetId:
          type: string
          description: Identifier of the target system
          example: '6096872148'
        targetKey:
          type: string
          description: Key of the target system
          example: 549c70ea-89fd-4611-9ccb-d4ce58ec78d0
        targetType:
          type: string
          description: Type of the target system
          example: Salesforce
        provisioning:
          type: integer
          description: Enable or disable provisioning
          format: int32
          enum:
          - 0
          - 1
      description: Rest representation for an application provisioning policy.
    BulkAddRemoveUser:
      type: object
      properties:
        addUsers:
          type: array
          description: addUsers
          items:
            type: string
        removeUsers:
          type: array
          description: removeUsers
          items:
            "$ref": "#/components/schemas/RemoveUser"
        otherUsers:
          type: array
          description: otherUsers
          items:
            type: string
      description: Bulk object used to add / remove one or more users from one entitlement
        for resource.
    RequestedEntilement:
      required:
      - entitlement
      - group
      type: object
      properties:
        entitlement:
          type: string
          description: Unique identifier of the entitlement.
          example: d866d244-43dc-4a54-bb6d-fe31ed81d822
        group:
          type: string
          description: Code of the group
          example: 50CFD1VTR1
        rightValues:
          uniqueItems: true
          type: array
          description: Right values
          items:
            type: string
      description: Object used to represent an entitlement that was requested
    AdminEntitlementChildren:
      required:
      - name
      - type
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the admin entitlement.
          readOnly: true
          example: d866d244-43dc-4a54-bb6d-fe31ed81d822
        name:
          type: string
          description: Name of the admin entitlement.
          example: adminEntitlement
        label:
          type: string
          description: Localization name of the admin entitlement.
          example: Admin Entitlement
        description:
          type: string
          description: Description of the admin entitlement.
          example: Admin Entitlement
        type:
          type: string
          description: Type of the admin entitlement.
          enum:
          - role
          - permission
        subType:
          type: string
          description: Sub type of the admin entitlement.
          enum:
          - regular
          - dynamic
        ootb:
          type: boolean
          description: Out Of the box content
        disabled:
          type: boolean
          description: Indicate if the admin entitlement is disabled.
          readOnly: true
          example: false
        status:
          type: string
          description: Status of a dynamic admin entitlement
          readOnly: true
          example: active
          enum:
          - waiting
          - inprogress
          - reviewpublish
          - active
          - active_waiting
          - active_inprogress
          - active_reviewpublish
          - inactive
        hasScope:
          type: integer
          description: Indicate the the entitlement has scope. If the value is 0 the
            entitlement doesn't have scope, otherwise the entitlement has scope.
          format: int32
          readOnly: true
          example: 0
          enum:
          - 0
          - 1
        assignPolicy:
          type: integer
          description: Indicate the assign policy of the entitlement. If the value
            is 0 the entitlement can be assigned manually, otherwise the entitlement
            can not be assigned by the user.
          format: int32
          readOnly: true
          example: 0
          enum:
          - 0
          - 1
        subscription:
          type: string
          description: Subscription of the admin entitlement.
          example: cig
        countChildren:
          type: integer
          description: Number of entitlement contained in the role
          format: int32
          readOnly: true
        creationUserDetails:
          "$ref": "#/components/schemas/User_0"
        lastModUserDetails:
          "$ref": "#/components/schemas/User_0"
        properties:
          "$ref": "#/components/schemas/AdminEntitlementProperties"
        lvl:
          type: integer
          description: Indicate the level of the admin entitlement.
          format: int32
          readOnly: true
        path:
          type: string
          description: Indicate the path of the admin entitlement.
          readOnly: true
          example: "/<parent_code>/<child_code>/"
        creationUser:
          type: string
          description: Indicate the id of who is the creator of the admin entitlement.
          readOnly: true
          example: 6000005EKH
        creationDate:
          type: string
          description: Indicate the creation date of the admin entitlement.
          format: date-time
          readOnly: true
        lastModUser:
          type: string
          description: Indicate the id of who is the last user that has changed the
            admin entitlement.
          readOnly: true
          example: 6000005EKH
        lastModTime:
          type: string
          description: Indicate the last modification date of the entitlement.
          format: date-time
          readOnly: true
    ListResponseEntitlementChildren:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/EntitlementChildren"
    ReportStatus:
      required:
      - messageCode
      - messageDescription
      - status
      type: object
      properties:
        id:
          type: string
          description: If of the asynchronous report.
          readOnly: true
          example: "<unique identifier>"
        alias:
          type: string
          description: Alias of the asynchronous report.
          readOnly: true
          example: user_entitlement
        status:
          type: integer
          description: 'Status of the asynchronous report. Allowable Values: 0=NOT_STARTED,
            1=ASSIGNED, 2=RUNNING, 3=ERROR, 4=PAUSED, 5=COMPLETED'
          format: int32
        messageCode:
          type: string
          description: Error code for the asynchronous report. It will be filled only
            if the status is 3=ERROR
        messageDescription:
          type: string
          description: Error description for the asynchronous report. It will be filled
            only if the status is 3=ERROR
        creationUser:
          type: string
          description: Id of the creator of the asynchronous report.
          readOnly: true
          example: "<unique identifier>"
        creationDate:
          type: string
          description: Creation date.
          format: date-time
          readOnly: true
        lastModUser:
          type: string
          description: Id of the user that has performed the last update.
          readOnly: true
          example: "<unique identifier>"
        lastModTime:
          type: string
          description: Last modification date.
          format: date-time
          readOnly: true
      description: Status of an asynchronous report.
    ReportColumn:
      type: object
      properties:
        attributeCategory:
          type: string
        attributeName:
          type: string
        attributeKey:
          type: string
        isCustom:
          type: boolean
        filter:
          type: string
        hidden:
          type: boolean
    AdminEntitlementWithChildren:
      required:
      - name
      - type
      type: object
      properties:
        name:
          type: string
          description: Name of the admin entitlement.
          example: adminEntitlement
        description:
          type: string
          description: Description of the admin entitlement.
          example: Admin Entitlement
        type:
          type: string
          description: Type of the admin entitlement.
          enum:
          - role
          - permission
        subType:
          type: string
          description: Sub type of the admin entitlement.
          enum:
          - regular
          - dynamic
        hasScope:
          type: integer
          description: Indicate the the entitlement has scope. If the value is 0 the
            entitlement doesn't have scope, otherwise the entitlement has scope.
          format: int32
          readOnly: true
          example: 0
          enum:
          - 0
          - 1
        properties:
          "$ref": "#/components/schemas/AdminEntitlementProperties"
        conditionSet:
          type: array
          description: Condition set to determine the users that belong to this role.
            And, Example value:[{"erDepartment":[{"op":"eq","vl":"Security"},{"op":"ne","vl":"Sales"}],"erPersonType":[{"op":"sw","vl":"Employee"},{"op":"ne","vl":"Contractor"}]},{"erDepartment":[{"op":"eq","vl":"Marketing"}]}]
          items:
            type: object
            additionalProperties:
              type: array
              items:
                "$ref": "#/components/schemas/Operation_and_Value"
        children:
          type: array
          description: List of unique identifiers of children.
          items:
            type: string
    CodeResult:
      type: object
      properties:
        code:
          type: string
          description: Unique identifier
          readOnly: true
          example: d865f244-43dc-4a54-bb6d-fe31ed81d821
    AccessInfo:
      type: object
      properties:
        name:
          type: string
          description: Name of the access. Unique accross the application
          readOnly: true
          example: Basic access
        description:
          type: string
          description: Description of the access
          readOnly: true
          example: Provides access to the application with basic authorization
      description: Rest representation for AccessInfo.
    BulkAddRemoveAdminChildrenAdminEntitlement:
      type: object
      properties:
        add:
          type: array
          description: List of entitlements children to add
          items:
            "$ref": "#/components/schemas/AdminEntitlement"
        remove:
          type: array
          description: List of entitlements children to remove
          items:
            type: string
      description: Bulk object used to add / remove one or more entitlements children.
    ListResponseString:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            type: string
    EntitlementForFulfillment:
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the entitlement
          readOnly: true
          example: "<unique identifier>"
        category:
          type: string
          description: Category of the entitlement.
          example: Test category
        extRef:
          type: string
          description: Unique identifier of the mapped object in the connected application.
          example: "<unique_identifier>"
      description: Rest representation for an application entitlement fulfillment.
    ListResponseReviewAssignment:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/ReviewAssignment"
    PermissionRemediationResult:
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the permission
          example: d865f244-43dc-4a54-bb6d-fe31ed81d821
        name:
          type: string
          description: Name of the permission
          example: profile
        category:
          type: string
          description: Category of the permission
          example: attribute
        ext_ref:
          type: string
          description: Unique identifier of the permission in the target system
          example: profile
        remediated:
          type: boolean
          description: Indicate if the remediation operation was performed correctly
          example: true
        message:
          type: string
          description: Details of why the compare/remediation operation is not performed
          example: "<error_code> - <error_message>"
        targetRights:
          uniqueItems: true
          type: array
          description: Target right values
          items:
            type: string
    EntitlementToUserRemove:
      required:
      - entitlement
      type: object
      properties:
        entitlement:
          type: string
          description: Unique identifier of the entitlement.
          example: d866d244-43dc-4a54-bb6d-fe31ed81d822
        group:
          type: string
          description: Code of the group
          example: 50CFD1VTR1
      description: Object used to revoke an entitlement to a user
    EntitlementToUserAdd:
      required:
      - entitlement
      type: object
      properties:
        entitlement:
          type: string
          description: Unique identifier of the entitlement.
          example: d866d244-43dc-4a54-bb6d-fe31ed81d822
        group:
          type: string
          description: Code of the group
          example: 50CFD1VTR1
        rightValues:
          uniqueItems: true
          type: array
          description: Right values
          items:
            type: string
      description: Object used to grant an entitlement to a user
    EntitlementDetailsResult:
      required:
      - application
      - name
      - type
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the entitlement
          readOnly: true
          example: d865f244-43dc-4a54-bb6d-fe31ed81d821
        name:
          type: string
          description: Name of the entitlement. Unique accross the application
          example: Test entitlement unique name
        description:
          type: string
          description: Description
          example: Test entitlement description
        type:
          type: string
          description: Type of the entitlement
          enum:
          - role
          - permission
        subType:
          type: string
          description: Sub type of the entitlement.
          enum:
          - regular
          - dynamic
        disabled:
          type: boolean
          description: Indicate if the entitlement is disabled.
          readOnly: true
          example: false
        status:
          type: string
          description: Status of a dynamic entitlement
          readOnly: true
          example: active
          enum:
          - waiting
          - inprogress
          - reviewpublish
          - active
          - active_waiting
          - active_inprogress
          - active_reviewpublish
          - inactive
        application:
          type: string
          description: Unique identifier of the application
          example: "<unique identifier>"
        category:
          type: string
          description: Category of the entitlement.
          example: Test category
        rights:
          type: boolean
          description: Indicate if the entitlement has rights
          readOnly: true
          example: false
        extRef:
          type: string
          description: Unique identifier of the mapped object in the connected application.
          example: "<unique_identifier>"
        assignPolicy:
          type: integer
          description: Indicate the assign policy of the entitlement. If the value
            is 0 the entitlement can be assigned manually, otherwise the entitlement
            can not be assigned by the user.
          format: int32
          readOnly: true
          example: 0
          enum:
          - 0
          - 1
        properties:
          "$ref": "#/components/schemas/EntitlementProperties"
        owner:
          type: string
          description: Id of the user owner of the entitlement.
          readOnly: true
        conditionSet:
          type: array
          description: Condition set to determine the users that belong to this role.
            And, Example value:[{"erDepartment":[{"op":"eq","vl":"Security"},{"op":"ne","vl":"Sales"}],"erPersonType":[{"op":"sw","vl":"Employee"},{"op":"ne","vl":"Contractor"}]},{"erDepartment":[{"op":"eq","vl":"Marketing"}]}]
          items:
            type: object
            additionalProperties:
              type: array
              items:
                "$ref": "#/components/schemas/Operation_and_Value"
        fixedRights:
          type: array
          description: Fixed right values of the entitlement
          items:
            "$ref": "#/components/schemas/EntitlementRight"
        evaluationStartTime:
          type: string
          description: Evaluation start time
          format: date-time
          readOnly: true
        evaluationEndTime:
          type: string
          description: Evaluation end time
          format: date-time
          readOnly: true
        errorMessage:
          type: string
          description: Error message for failed entitlement
          readOnly: true
        updatedConditionSet:
          type: array
          description: Condition set to determine the users that belong to this role.
            And, Example value:[{"erDepartment":[{"op":"eq","vl":"Security"},{"op":"ne","vl":"Sales"}],"erPersonType":[{"op":"sw","vl":"Employee"},{"op":"ne","vl":"Contractor"}]},{"erDepartment":[{"op":"eq","vl":"Marketing"}]}]
          items:
            type: object
            additionalProperties:
              type: array
              items:
                "$ref": "#/components/schemas/Operation_and_Value"
        creationUser:
          type: string
          description: Indicate the id of who is the creator of the entitlement
          readOnly: true
          example: 6000005EKH
        creationDate:
          type: string
          description: Indicate the creation date of the entitlement
          format: date-time
          readOnly: true
        lastModUser:
          type: string
          description: Indicate the id of who is the last user that has changed the
            entitlement
          readOnly: true
          example: 6000005EKH
        lastModTime:
          type: string
          description: Indicate the last modification date of the entitlement
          format: date-time
          readOnly: true
    AccessResult:
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the entitlement
          readOnly: true
          example: "<unique identifier>"
        name:
          type: string
          description: Name of the entitlement. Unique accross the application
          readOnly: true
          example: Test entitlement unique name
        description:
          type: string
          description: Description
          readOnly: true
          example: Test entitlement description
        accessType:
          type: string
          description: Type of the entitlement
          readOnly: true
          enum:
          - permission
          - app role
        application:
          type: string
          description: Unique identifier of the application
          readOnly: true
          example: "<unique identifier>"
        hasRights:
          type: boolean
          description: Indicate if the entitlement has rights.
          readOnly: true
        properties:
          "$ref": "#/components/schemas/EntitlementProperties"
        applicationDetails:
          "$ref": "#/components/schemas/ApplicationDetails"
    EntitlementResult:
      required:
      - application
      - name
      - type
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the entitlement
          readOnly: true
          example: d865f244-43dc-4a54-bb6d-fe31ed81d821
        name:
          type: string
          description: Name of the entitlement. Unique accross the application
          example: Test entitlement unique name
        description:
          type: string
          description: Description
          example: Test entitlement description
        type:
          type: string
          description: Type of the entitlement
          enum:
          - role
          - permission
        subType:
          type: string
          description: Sub type of the entitlement.
          enum:
          - regular
          - dynamic
        disabled:
          type: boolean
          description: Indicate if the entitlement is disabled.
          readOnly: true
          example: false
        status:
          type: string
          description: Status of a dynamic entitlement
          readOnly: true
          example: active
          enum:
          - waiting
          - inprogress
          - reviewpublish
          - active
          - active_waiting
          - active_inprogress
          - active_reviewpublish
          - inactive
        application:
          type: string
          description: Unique identifier of the application
          example: "<unique identifier>"
        category:
          type: string
          description: Category of the entitlement.
          example: Test category
        rights:
          type: boolean
          description: Indicate if the entitlement has rights
          readOnly: true
        extRef:
          type: string
          description: Unique identifier of the mapped object in the connected application.
          example: "<unique_identifier>"
        assignPolicy:
          type: integer
          description: Indicate the assign policy of the entitlement. If the value
            is 0 the entitlement can be assigned manually, otherwise the entitlement
            can not be assigned by the user.
          format: int32
          readOnly: true
          example: 0
          enum:
          - 0
          - 1
        properties:
          "$ref": "#/components/schemas/EntitlementProperties"
        creationUser:
          type: string
          description: Indicate the id of who is the creator of the entitlement
          readOnly: true
          example: 6000005EKH
        creationDate:
          type: string
          description: Indicate the creation date of the entitlement
          format: date-time
          readOnly: true
        lastModUser:
          type: string
          description: Indicate the id of who is the last user that has changed the
            entitlement
          readOnly: true
          example: 6000005EKH
        lastModTime:
          type: string
          description: Indicate the last modification date of the entitlement
          format: date-time
          readOnly: true
    ListResponseApplication:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/ApplicationResult"
    HealthStatus_0:
      type: object
      properties:
        status:
          type: string
        components:
          type: array
          items:
            "$ref": "#/components/schemas/HealthStatusComponent"
        envDetails:
          "$ref": "#/components/schemas/EnvironmentDetails"
        time:
          type: string
        httpCode:
          type: string
          enum:
          - OK
          - CREATED
          - ACCEPTED
          - NO_CONTENT
          - RESET_CONTENT
          - PARTIAL_CONTENT
          - MOVED_PERMANENTLY
          - FOUND
          - SEE_OTHER
          - NOT_MODIFIED
          - USE_PROXY
          - TEMPORARY_REDIRECT
          - BAD_REQUEST
          - UNAUTHORIZED
          - PAYMENT_REQUIRED
          - FORBIDDEN
          - NOT_FOUND
          - METHOD_NOT_ALLOWED
          - NOT_ACCEPTABLE
          - PROXY_AUTHENTICATION_REQUIRED
          - REQUEST_TIMEOUT
          - CONFLICT
          - GONE
          - LENGTH_REQUIRED
          - PRECONDITION_FAILED
          - REQUEST_ENTITY_TOO_LARGE
          - REQUEST_URI_TOO_LONG
          - UNSUPPORTED_MEDIA_TYPE
          - REQUESTED_RANGE_NOT_SATISFIABLE
          - EXPECTATION_FAILED
          - INTERNAL_SERVER_ERROR
          - NOT_IMPLEMENTED
          - BAD_GATEWAY
          - SERVICE_UNAVAILABLE
          - GATEWAY_TIMEOUT
          - HTTP_VERSION_NOT_SUPPORTED
    Group_1:
      type: object
      properties:
        id:
          type: string
          description: Id
          readOnly: true
        name:
          type: string
          description: name
          readOnly: true
      description: Rest representation for a group.
    EntitlementBean_0:
      type: object
      properties:
        code:
          type: string
        name:
          type: string
        tenant:
          type: string
        description:
          type: string
        category:
          type: string
        ootb:
          type: integer
          format: int32
        subscription:
          type: string
        isAdmin:
          type: integer
          format: int32
        hasScope:
          type: integer
          format: int32
        hasRight:
          type: integer
          format: int32
        assignPolicy:
          type: integer
          format: int32
        type:
          type: string
        subType:
          type: string
        applicationCode:
          type: string
        extRef:
          type: string
        dynamicEntitlementCode:
          type: string
        updatedDynamicEntitlementCode:
          type: string
        disabled:
          type: integer
          format: int32
        status:
          type: integer
          format: int32
        deleted:
          type: integer
          format: int32
        reserved:
          type: integer
          format: int32
        owner:
          type: string
        creationUser:
          type: string
        creationDate:
          type: string
          format: date-time
        lastModUser:
          type: string
        lastModTime:
          type: string
          format: date-time
        attr1:
          type: string
        attr2:
          type: string
        attr3:
          type: string
        attr4:
          type: string
        attr5:
          type: string
        lvl:
          type: integer
          format: int32
        path:
          type: string
        groupPath:
          type: string
        accountCode:
          type: string
        groupCode:
          type: string
        visibilityCode:
          type: string
        direct:
          type: integer
          format: int32
        delegator:
          type: string
        enable:
          type: integer
          format: int32
        startDate:
          type: string
          format: date-time
        expireDate:
          type: string
          format: date-time
        inFilter:
          type: object
          additionalProperties:
            uniqueItems: true
            type: array
            items:
              type: string
        notInFilter:
          type: object
          additionalProperties:
            uniqueItems: true
            type: array
            items:
              type: string
        likeOrFilter:
          type: object
          additionalProperties:
            uniqueItems: true
            type: array
            items:
              type: string
        children:
          uniqueItems: true
          type: array
          items:
            "$ref": "#/components/schemas/Entitlement_0"
        rights:
          type: object
          additionalProperties:
            uniqueItems: true
            type: array
            items:
              type: string
        targetRights:
          type: object
          additionalProperties:
            uniqueItems: true
            type: array
            items:
              type: string
        vv:
          type: boolean
        countChildren:
          type: integer
          format: int32
        countChildrenPermissions:
          type: integer
          format: int32
        countUsers:
          type: integer
          format: int32
        countGroups:
          type: integer
          format: int32
        evaluationStartTime:
          type: string
          format: date-time
        evaluationEndTime:
          type: string
          format: date-time
        errorMessage:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
    Operation_and_Value:
      required:
      - op
      - vl
      type: object
      properties:
        op:
          type: string
          description: Operation
          example: eq
        vl:
          type: string
          description: Value
          example: Security
      description: Rest representation for Operation and Value.
    IB_group_resource:
      type: object
      properties:
        add:
          type: array
          items:
            "$ref": "#/components/schemas/IBGroupResource"
        remove:
          type: array
          items:
            type: string
      description: Bulk object used to add / remove permission for IB group resource.
    User_0:
      type: object
      properties:
        id:
          type: string
          description: Id
          readOnly: true
        userName:
          type: string
          description: Username
          readOnly: true
        email:
          type: string
          description: Email
          readOnly: true
        givenName:
          type: string
          description: FirstName
          readOnly: true
        familyName:
          type: string
          description: LastName
          readOnly: true
      description: Rest representation for a user.
    Entitlement_0:
      required:
      - application
      - name
      - type
      type: object
      properties:
        name:
          type: string
          description: Name of the entitlement. Unique accross the application
          example: Test entitlement unique name
        description:
          type: string
          description: Description
          example: Test entitlement description
        type:
          type: string
          description: Type of the entitlement
          enum:
          - role
          - permission
        subType:
          type: string
          description: Sub type of the entitlement.
          enum:
          - regular
          - dynamic
        application:
          type: string
          description: Unique identifier of the application
          example: "<unique identifier>"
        category:
          type: string
          description: Category of the entitlement.
          example: Test category
        extRef:
          type: string
          description: Unique identifier of the mapped object in the connected application.
          example: "<unique_identifier>"
      description: Rest representation for an application entitlement.
    CryptoSigningResponse:
      required:
      - pb64u
      - sa
      - sb64u
      type: object
      properties:
        pb64u:
          type: string
          description: The Base64 URL encoded payload string.
          example: UGF5bG9hZCB0byBzaWdu
        sa:
          type: string
          description: The case-insensitive Java JCA/JCE signing algorithm used.
          example: SHA256WithRSA
        sb64u:
          type: string
          description: The Base64 URL encoded payload signature string.
          example: 2IG-x99hen8m9XBfEtUiyQmO0Fv-da...(truncated)
    CryptoSigning:
      required:
      - p
      - pb64u
      type: object
      properties:
        label:
          type: string
          description: The case-sensitive label/alias to the private key to sign the
            payload with. If this parameter is not provided, then the label of the
            tenant’s ‘default personal certificate’ will be used by default to select
            the signing private key.
          example: server
        p:
          type: string
          description: The original raw payload to sign as a UTF-8 String. The system
            will use the value as-is. This parameter cannot be concurrently specified
            with the ‘pb64u’ parameter in the same JSON input.
          example: Payload to sign
        pb64u:
          type: string
          description: The payload to sign as a Base64 URL encoded UTF-8 String. The
            system will BASE64URL decode this attribute’s value before signing the
            decoded payload data. This parameter cannot be concurrently specified
            with the ‘p’ parameter in the same JSON input.
          example: UGF5bG9hZCB0byBzaWdu
        sa:
          type: string
          description: 'The case-insensitive Java JCA/JCE signing algorithm. For details
            on the possible values, see: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#Signature.
            Avoid the use of SHA1WithRSA as it is considered obsolete and insecure
            and at the minimum, use SHA256WithRSA.Defaults to SHA256WithRSA'
          example: SHA256WithRSA
        format:
          type: string
          description: The case-insensitive signature output format. For example,
            'jwt', 'jws' or 'RFC7515_COMPACT' can be specified  when signing compact’ified
            JWT 'header.claims payloads to get the signature operation output in RFC7515
            Compact Serialization format automatically. In this output format, the
            response content-type will be set to ‘application/octet-stream’. If this
            is missing or its value unsupported/unrecognized, then the system’s default/native
            JSON signature output format will be used and the response content type
            will be set to ‘application/json’.
          example: jwt
    CryptoEncryptionResponse:
      required:
      - cb64u
      - ivb64u
      - kwa
      - pea
      - wkb64u
      type: object
      properties:
        pea:
          type: string
          description: 'The case-insensitive payload symmetric encryption algorithm
            used to encrypt the payload with. For details on the possible values,
            see: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#Cipher.
            Always supply the full transformation string, which includes the cipher,
            operating mode and padding scheme. Defaults to ''AES/CBC/PKCS5Padding''.'
          example: AES/CBC/PKCS5Padding
        kwa:
          type: string
          description: 'The case-insensitive asymmetric encryption algorithm to securely
            ‘wrap’ the randomly generated symmetric secret key used in the actual
            encryption of the payload. For details on the possible values, see: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#Cipher.
            Note that this parameter requires an asymmetric cipher transformation
            (Eg, RSA or Elliptic Curve). The default value is offers excellent security
            at a reasonable resource cost. Unless your application demands it, try
            to avoid the use of the older and less secure RSA PKCS#1 v1.5 scheme.Defaults
            to ''RSA/ECB/OAEPWithSHA-256AndMGF1Padding''.'
          example: RSA/ECB/OAEPWithSHA-256AndMGF1Padding
        cb64u:
          type: string
          description: The Base64 URL encoded encrypted payload String. This value
            is built directly from the output of JCA/JCE standard libraries, with
            no additional processing. In the specialized case of the AES/GCM symmetric
            cipher, this value is actually the AES/GCM cryptext bytes plus the AES/GCM
            auth tag bytes appended to it.
          example: IPGeiDtv0GouQR4BklBy7A
        wkb64u:
          type: string
          description: The Base64 URL encoded wrapped symmetric payload encryption
            key. Note that this symmetric encryption key is randomly generated each
            time.
          example: xujRAQyA3pt6P2IY72pWtZCT9gSK...(truncated)
        ivb64u:
          type: string
          description: the Base64 URL encoded payload encryption IV. Note that the
            symmetric encryption IV bytes are randomly generated each time as required.
            Certain (insecure) cipher transformations do not use IVs.
          example: SGu6mJxe_syQ1y7tx5sy0Q
    CryptoEncryption:
      required:
      - label
      - p
      - pb64u
      type: object
      properties:
        label:
          type: string
          description: 'The case-sensitive label/alias to the recipient’s certificate
            to encrypt (or ‘wrap’) the randomly generated payload symmetric encryption
            secret key with. The referenced certificate must already exist in the
            tenant’s truststore or the request will fail. Additionally, as the label
            is G11N ready, it can contain non-English characters. '
          example: server
        p:
          type: string
          description: The original raw payload to encrypt with, as a UTF-8 String.
            The system will use the value as-is. This parameter cannot be concurrently
            specified with the ‘pb64u’ parameter in the same JSON input.
          example: Payload to sign
        pb64u:
          type: string
          description: The payload to encrypt, as a Base64 URL encoded UTF-8 String.
            The system will BASE64URL decode this attribute’s value before signing
            the decoded payload data. This parameter cannot be concurrently specified
            with the ‘p’ parameter in the same JSON input.
          example: UGF5bG9hZCB0byBzaWdu
        aad:
          type: string
          description: The raw Additional Authenticated Data (AAD) as a UTF8 encoded
            String for AEAD mode capable ciphers (Eg, AES-GCM). The system will use
            the value as-is. This parameter cannot be concurrently specified with
            the ‘aadb64u’ parameter in the same JSON input. Additionally, if the output
            format is RFC7516_COMPACT or JWE, then one of the ‘aad’ or ‘aadb64u’ parameter
            must be present, as required by the spec.
          example: aad
        aadb64u:
          type: string
          description: The raw Additional Authenticated Data (AAD) as a UTF8 encoded
            String for AEAD mode capable ciphers (Eg, AES-GCM). The system will BASE64URL
            decode this parameter’s value before using the decoded AAD data for encryption.
            This parameter cannot be concurrently specified with the aad parameter
            in the same JSON input. Additionally, if the output format is RFC7516_COMPACT
            or JWE, then one of the ‘aad’ or ‘aadb64u’ parameter must be present,
            as required by the spec.
          example: aadb64u
        pea:
          type: string
          description: 'The case-insensitive payload symmetric encryption algorithm
            used to encrypt the payload with. For details on the possible values,
            see: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#Cipher.
            Always supply the full transformation string, which includes the cipher,
            operating mode and padding scheme. Defaults to ''AES/CBC/PKCS5Padding''.'
          example: AES/CBC/PKCS5Padding
        pks:
          type: integer
          description: 'The payload’s symmetric encryption key length in bits. For
            details on the possible values, see: https://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html#importlimits.
            Defaults to ''128''.'
          format: int32
          example: 128
        kwa:
          type: string
          description: 'The case-insensitive asymmetric encryption algorithm to securely
            ‘wrap’ the randomly generated symmetric secret key used in the actual
            encryption of the payload. For details on the possible values, see: https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#Cipher.
            Note that this parameter requires an asymmetric cipher transformation
            (Eg, RSA or Elliptic Curve). The default value offers excellent security
            at a reasonable resource cost. Unless your application demands it, try
            to avoid the use of the older and less secure RSA PKCS#1 v1.5 scheme.Defaults
            to ''RSA/ECB/OAEPWithSHA-256AndMGF1Padding''.'
          example: RSA/ECB/OAEPWithSHA-256AndMGF1Padding
        kms:
          type: string
          description: The case-sensitive key material source to get the signature
            verification certificate from. The possible values are “default:truststore”
            or “signer” OR “default:keystore” or “personal”. If this is missing or
            its value unsupported/unrecognized, then the key material source defaults
            to the tenant’s default truststore.
          example: signer
          enum:
          - default:truststore
          - signer
          - default:keystore
          - personal
        format:
          type: string
          description: 'The case-insensitive encryption output format. For example:
            “jwe” or “RFC7516_COMPACT” can be specified when encrypting compact’ified
            JWE “header” as the AAD and the plaintext payload to get the encryption
            operation output in the RFC7516 Compact Serialization format in the response
            body directly. In this output format, the response content-type will be
            set to ‘application/octet-stream’. If the “split-aesgcm” output format
            is specified, and if the AES/GCM family of payload encryption cipher transformations
            are used, then the JSON encryption output format will be emitted, but
            with separate AES/GCM ciphertext and auth tag values instead of the default
            Java JCA/JCE’s ‘combined’ representation. This is intended for consumption
            by non-Java systems and standards, where this representation is prevalent.
            The response content-type will be set to ‘application/json’. If this is
            missing or its value unrecognized/unsupported, then the system’s default/native
            JSON encryption output format will be used and the response content type
            will be set to ‘application/json’.'
          example: jwt
    CryptoVerify:
      required:
      - label
      - p
      - pb64u
      - sb64u
      type: object
      properties:
        label:
          type: string
          description: The case-sensitive label/alias to the certificate to verify
            the payload signature with. The referenced certificate must already exist
            in the tenant’s truststore or the request will fail. Additionally, as
            the label is G11N ready, it can contain non-English characters. If supplying
            as a query parameter override, remember to URL encode the value prior
            to use.
          example: server
        p:
          type: string
          description: The original raw payload to verify with, as a UTF-8 String.
            The system will use the value as-is. This parameter cannot be concurrently
            specified with the ‘pb64u’ parameter in the same JSON input.
          example: Payload to sign
        pb64u:
          type: string
          description: The payload to verify with, as a Base64 URL encoded UTF-8 String.
            The system will BASE64URL decode this attribute’s value before signing
            the decoded payload data. This parameter cannot be concurrently specified
            with the ‘p’ parameter in the same JSON input.
          example: UGF5bG9hZCB0byBzaWdu
        sa:
          type: string
          description: The case-insensitive Java JCA/JCE signing algorithm. This parameter
            value must match what was used to produce the signature or the request
            will fail with signature verification failure.
          example: SHA256WithRSA
        sb64u:
          type: string
          description: The Base64 URL encoded signature to verify.
          example: 6BnJro240sThFPjrrAMD6Mg4NrPfSxQRpafmr...(truncated)
        kms:
          type: string
          description: The case-sensitive key material source to get the signature
            verification certificate from. The possible values are “default:truststore”
            or “signer” OR “default:keystore” or “personal”. If this is missing or
            its value unsupported/unrecognized, then the key material source defaults
            to the tenant’s default truststore.
          example: signer
          enum:
          - default:truststore
          - signer
          - default:keystore
          - personal
    CryptoDecryptionResponse:
      required:
      - pb64u
      type: object
      properties:
        pb64u:
          type: string
          description: The Base64 URL encoded decrypted string.
          example: UGF5bG9hZCB0byBzaWdu
    CryptoDecryption:
      required:
      - aesgcmatb64u
      - aesgcmcb64u
      - aesgcmtl
      - cb64u
      - kwa
      - pea
      - wkb64u
      type: object
      properties:
        label:
          type: string
          description: 'The case-sensitive label/alias to the recipient’s private
            key to decrypt (or ‘unwrap’) the randomly generated payload symmetric
            encryption secret key with. If this parameter is missing, then the label
            of the tenant’s ‘default personal certificate’ will be used by default
            to select the decryption private key. If even this is missing, then the
            request will fail.The referenced private key must already exist in the
            tenant’s keystore or the request will fail. Additionally, as the label
            is G11N ready, it can contain non-English characters. '
          example: server
        cb64u:
          type: string
          description: The BASE64URL encoded JCA/JCE ‘combined’ cryptext/ciphertext
            to decrypt. The system will Base64URL decode this parameter’s value before
            using the decoded payload data for decryption. If this parameter is present
            and the AES/GCM family of ciphers is used as the payload encryption algorithm
            (pea), then the ‘aesgcmtl’ parameter must also be present. This parameter
            cannot be concurrently specified with the ‘aesgcmcb64u’ and ‘aesgcmatb64u’
            parameter pairs in the same JSON input.
          example: IPGeiDtv0GouQR4BklBy7A
        aesgcmtl:
          type: string
          description: The AES GCM cipher’s authentication tag length parameter in
            bits. This parameter is required if the AES/GCM family of ciphers is used
            as the payload encryption algorithm (’pea’) and if the ‘cb64u’ parameter
            is present. Note that most Java JCA/JCE providers default to 128-bit AES
            GCM authentication tags.
          example: aesgcmtl
        aesgcmcb64u:
          type: string
          description: The Base64 URL encoded AES/GCM ciphertext only string. The
            system will Base64URL decode this parameter’s value before using the data
            for decryption. The ‘aesgcmatb64u’ parameter is required if this parameter
            is present.This parameter requires that the payload encryption algorithm
            (pea) be from the AES/GCM family of ciphers. This parameter cannot be
            concurrently specified with the ‘cb64u’ parameter in the same JSON input.
          example: aesgcmcb64u
        aesgcmatb64u:
          type: string
          description: The Base64 URL encoded AES/GCM Authentication Tag data string.
            The system will Base64URL decode this parameter’s value before using the
            data for decryption. The ‘aesgcmcb64u’ parameter is required if this parameter
            is present. This parameter requires that the payload encryption algorithm
            (pea) be from the AES/GCM family of ciphers. This parameter cannot be
            concurrently specified with the ‘cb64u’ parameter in the same JSON input
          example: aesgcmatb64u
        wkb64u:
          type: string
          description: The ‘wrapped’ payload encryption secret key, encrypted with
            an asymmetric cipher and Base64 URL encoded. The system will Base64URL
            decode this parameter’s value before ‘unwrapping’ the decoded data to
            obtain the payload encryption symmetric secret key.
          example: wkb64u
        ivb64u:
          type: string
          description: 'The Base64URL encoded payload symmetric encryption IV data.
            Note that most symmetric ciphers will require the use of IV data for improved
            security. In those cases, this parameter must be supplied or the decryption
            process will fail. '
          example: SGu6mJxe_syQ1y7tx5sy0Q
        aad:
          type: string
          description: The raw Additional Authenticated Data (AAD) as a UTF8 encoded
            String for AEAD mode capable ciphers (Eg, AES-GCM). The system will use
            the value as-is. This parameter is used to verify the integrity of the
            ciphertext prior to decryption and must be included if it was used in
            the encryption process. This parameter cannot be concurrently specified
            with the ‘aadb64u’ parameter in the same JSON input.
          example: aad
        aadb64u:
          type: string
          description: The Base64URL encoded Additional Authenticated Data (AAD) for
            AEAD mode capable ciphers (Eg, AES-GCM).  The system will BASE64URL decode
            this parameter’s value before using the decoded AAD data for encryption.
            This parameter is used to verify the integrity of the ciphertext prior
            to decryption and must be included if it was used in the encryption process.
            This parameter cannot be concurrently specified with the ‘aad’ parameter
            in the same JSON input.
          example: aadb64u
        pea:
          type: string
          description: The case-insensitive payload symmetric encryption algorithm
            (more precisely, this is the Java JCA/JCE cipher transformation string)
            used to encrypt the payload with. This parameter must match what was supplied
            to the encryption process or decryption will fail.
          example: AES/CBC/PKCS5Padding
        kwa:
          type: string
          description: The case-insensitive asymmetric encryption algorithm (more
            precisely, this is the Java JCA/JCE cipher transformation string) to securely
            ‘wrap’ the randomly generated secret key used in the actual symmetric
            encryption of the payload. This parameter must match what was supplied
            to the encryption process or decryption will fail.
          example: RSA/ECB/OAEPWithSHA-256AndMGF1Padding
    UtilityComputeJob:
      required:
      - args
      - src
      - srcb64u
      - sys
      type: object
      properties:
        src:
          type: string
          description: The JavaScript anonymous function. This section is limited
            to 2MB. Only one of 'src' or 'srcb64u' is allowed in the input JSON at
            the same time. If both are present or if both are missing, then the REST
            API call will fail.
          example: function(args){return TOOLS.randomString()}
        srcb64u:
          type: string
          description: The Base64 URL encoded JavaScript anonymous function. This
            section is limited to 2MB. Only one of 'src' or 'srcb64u' is allowed in
            the input JSON at the same time. If both are present or if both are missing,
            then the REST API call will fail.
          example: Wm5WdVkzUnBiMjRvWVhKbmN5bDdjbVYwZFhKdUlGUlBUMHhUTG5KaGJtUnZiVk4wY21sdVp5Z3BmUT09
        args:
          "$ref": "#/components/schemas/UtilityComputeJobArguments"
        sys:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: 'The compute job''s system settings. The available settings
            are: <br><br> hc.disable_auto_retry: If set to true, then HTTP Client
            will not automatically retry the request on failures. Defaults to ''false''.
            <br><br> hc.tls.trust_all_server_certs: If set to true, then the HTTP
            Client will trust all certificates presented by the TLS server. As a side
            effect, the tenant''s trust store will also not be preloaded. This is
            equivalent to CURL''s --insecure or -k option. Defaults to ''false''.
            <br><br> hc.tls.enable_hostname_verification: If set to false, then the
            HTTP Client will not perform hostname verification when connecting to
            TLS origins. This is useful when you are knowingly connecting to servers
            whose DNS names do not match with what was in the presented server cert.
            Defaults to ''true''. <br><br> hc.tls.enable_v1.0: If set to false, then
            the HTTP Client will refuse to talk to TLS v1.0 servers. Defaults to ''true''.<br><br>
            hc.tls.enable_v1.1: If set to false, then the HTTP Client will refuse
            to talk to TLS v1.1 servers. Defaults to ''true''.<br><br> hc.tls.enable_v1.2:
            If set to false, then the HTTP Client will refuse to talk to TLS v1.2
            servers. Defaults to ''true''.<br><br> hc.max_conn_per_route: The maximum
            number of connections per route that the HTTP Client''s internal connection
            pool will use. Defaults to 5. Limit is 100. <br><br> hc.max_conn_total:
            The maximum total number of connections that the HTTP Client''s internal
            connection pool will use. Defaults to 10. Limit is 200. <br><br> hc.request.pooled_conn_timeout_msecs:
            The HTTP Client will timeout if a connection from the pool cannot be obtained
            after this many milliseconds. This is usually only needed when working
            with very slow servers. Defaults to 1000. Limit is 120000. <br><br> hc.request.conn_timeout_msecs:
            The HTTP Client will timeout if a connection to the origin cannot be established
            after this many milliseconds. Defaults to 5000. Limit is 120000. <br><br>
            hc.request.socket_timeout_msecs: The HTTP Client will timeout if it does
            not receive data from an established connection after this many milliseconds.
            Defaults to 1000. Limit is 120000. <br><br> hc.tls.include_signer_cert_labels:
            The explicit list of the tenant''s signer cert labels to include in the
            HTTP Client''s truststore. If this is not set (This is the default), then
            ALL of the tenant''s signer certs will be included in the HTTP Client''s
            truststore. If this is set to an empty list, then NONE of the tenant''s
            signer certs will be included in the HTTP Client''s truststore. <br><br>
            hc.tls.include_personal_cert_labels: The explicit list of the tenant''s
            personal cert labels to include in the HTTP Client''s keystore. If this
            is not set (This is the default), then ALL of the tenant''s personal certs
            will be included in the HTTP Client''s keystore. If this is set to an
            empty list, then NONE of the tenant''s personal certs will be included
            in the HTTP Client''s keystore. <br>'
    UtilityComputeJobArguments:
      required:
      - arg1
      - arg2
      - arg3
      - arg4
      type: object
      properties:
        arg1:
          type: string
          example: value1
        arg2:
          type: integer
          format: int32
        arg3:
          type: boolean
          example: false
        arg4:
          type: array
          items:
            type: string
    SingleCertificate:
      required:
      - cert
      type: object
      properties:
        cert:
          type: string
          description: The Base64 encoded bytes of the public key of the certificate.
            The example shown has been truncated for readability.
          example: MIICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUFADA........(truncated)
    PostPersonalCertificate:
      required:
      - algorithm
      - cert
      - expire
      - keysize
      - label
      - password
      - subject
      type: object
      properties:
        label:
          type: string
          description: The alias or friendly name that is used to uniquely identify
            the personal certificate. Required for generating a personal certificate.
            Optional for importing a personal certificate. Overrides the alias provided
            in the certificate if provided.
          example: server
        subject:
          type: string
          description: Distinguished name. The person or entity to whom the certificate
            is being issued. This field can also include the certificate recipient's
            organization (O), organization unit (OU), locality (L), state or province
            (ST), and country/region (C). Only required for generating a personal
            certificate.
          example: CN=IBM, OU=IBM, O=IBM, L=city, ST=state, C=country
        expire:
          type: integer
          description: The validity period, in days, for the new certificate. Default
            value is 3650 Only required for generating a personal certificate.
          format: int32
          example: 3650
        keysize:
          type: integer
          description: The size of the new key pair to be created. Valid values are
            1024, 2048 or 4096. Default value is 2048. Only required for generating
            a personal certificate.
          format: int32
          example: 2048
          enum:
          - 1024
          - 2048
          - 4096
        algorithm:
          type: string
          description: The algorithm to use to generate the self signed certificate.
            Default is "SHA256WithRSA". Only required for generating a personal certificate.
          example: SHA256withRSA
        isDefault:
          type: boolean
          description: Flag to specify whether the certificate to be imported or generated
            should be the default one. There can only be one default certificate per
            tenant, so if this flag is set to true, the certificate overwrites the
            previous existing default cert. Use this flag with caution. Changing a
            default certificate may have an impact on the existing applications set
            up for single sign-on. If not specified, this flag defaults to false.
            Optional for both importing or generating a personal certificate.
          example: false
        cert:
          type: string
          description: 'Base64 encoded bytes of a valid .p12 file. The example shown
            has been truncated for readability. Only required for importing a personal
            certificate. For generating a personal certificate, do not provide any
            value for this parameter. '
          example: MIIK6QIBAzCCCq8GCSqGSIb3DQEHAaCCCqAEggqcMIIKmDC........(truncated)
        password:
          type: string
          description: Password to unlock the .p12 file. Only required for importing
            a personal certificate.
          example: password
    PersonalCertificate:
      required:
      - isDefault
      type: object
      properties:
        isDefault:
          type: boolean
          description: Flag to specify whether the specified certificate should be
            the default one. There can only be one default certificate per tenant,
            so if this flag is set to true, it'll overwrite the previous existing
            default cert. Use this flag with caution as changing a default certificate
            may have an impact on the existing applications set-up for single sign-on.
          example: true
    SignerCertificate:
      required:
      - cert
      - label
      type: object
      properties:
        cert:
          type: string
          description: The Base64 encoded bytes of the public key of the certificate
            to be imported. This can be obtained by opening the certificate file in
            any text editor
          example: MIICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUFADAuMQswCQYDVQQGEwJVUzEMMAoGA1UEChMDSUJNMREwDwYDVQQLEwhMb2NhbCBDQTAeFw05OTEyMjIwNTAwMDBaFw0wMDEyMjMwNDU5NTlaMC4xCzAJBgNVBAYTAlVTMQwwCgYDVQQKEwNJQk0xETAPBgNVBAsTCExvY2FsIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD2bZEo7xGaX2/0GHkrNFZvlxBou9v1Jmt/PDiTMPve8r9FeJAQ0QdvFST/0JPQYD20rH0bimdDLgNdNynmyRoS2S/IInfpmf69iyc2G0TPyRvmHIiOZbdCd+YBHQi1adkj17NDcWj6S14tVurFX73zx0sNoMS79q3tuXKrDsxeuwIDAQABo4GQMIGNMEsGCVUdDwGG+EIBDQQ+EzxHZW5lcmF0ZWQgYnkgdGhlIFNlY3VyZVdheSBTZWN1cml0eSBTZXJ2ZXIgZm9yIE9TLzM5MCAoUkFDRikwDgYDVR0PAQH/BAQDAgAGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFJ3+ocRyCTJw067dLSwr/nalx6YMMA0GCSqGSIb3DQEBBQUAA4GBAMaQzt+zaj1GU77yzlr8iiMBXgdQrwsZZWJo5exnAucJAEYQZmOfyLiMD6oYq+ZnfvM0n8G/Y79q8nhwvuxpYOnRSAXFp6xSkrIOeZtJMY1h00LKp/JX3Ng1svZ2agE126JHsQ0bhzN5TKsYfbwfTwfjdWAGy6Vf1nYi/rO+ryMO
        label:
          type: string
          description: The alias or friendly name of the certificate to be imported.
          example: HttpsSSLCert
    Certificate_0:
      required:
      - issuer
      - keysize
      - label
      - notafter
      - notbefore
      - serial_number
      - signature_algorithm
      - subject
      - version
      type: object
      properties:
        keysize:
          type: integer
          description: The key size or key bit length of the certificate.
          format: int32
          example: 2048
        notbefore:
          type: string
          description: The earliest date and time on which the certificate is valid.
          example: 8 Mar 2017 08:14:24 GMT
        subject:
          type: string
          description: The person or entity to whom the certificate is being issued.
            This field can also include the certificate recipient's organization (O),
            organization unit (OU), locality (L), state or province (ST), and country/region
            (C).
          example: CN=IBM, OU=IBM, O=IBM, L=city, ST=state, C=country
        notafter:
          type: string
          description: The time and date after which the certificate is no longer
            valid.
          example: 7 Feb 2027 08:14:24 GMT
        signature_algorithm:
          type: string
          description: The algorithm used to sign the public key certificate.
          example: SHA256withRSA
        serial_number:
          type: string
          description: The serial number used to uniquely identify the certificate
            within the issuer's system.
          example: '145048539'
        label:
          type: string
          description: The alias (friendly name) of the certificate to import.
          example: HttpsSSLCert
        version:
          type: integer
          description: The version number of the certificate format.
          format: int32
          example: 3
        issuer:
          type: string
          description: The name of the entity that issued the certificate.
          example: CN=IBM, OU=IBM, O=IBM, L=city, ST=state, C=country
    AsyncContext:
      type: object
      properties:
        request:
          "$ref": "#/components/schemas/ServletRequest"
        response:
          "$ref": "#/components/schemas/ServletResponse"
        timeout:
          type: integer
          format: int64
    BufferedReader:
      type: object
    ClassLoader:
      type: object
      properties:
        parent:
          "$ref": "#/components/schemas/ClassLoader"
    Cookie:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        comment:
          type: string
        domain:
          type: string
        maxAge:
          type: integer
          format: int32
        path:
          type: string
        secure:
          type: boolean
        version:
          type: integer
          format: int32
        httpOnly:
          type: boolean
    Enumeration:
      type: object
    EnumerationLocale:
      type: object
    EnumerationServlet:
      type: object
    EnumerationString:
      type: object
    FilterRegistration:
      type: object
      properties:
        servletNameMappings:
          type: array
          items:
            type: string
        urlPatternMappings:
          type: array
          items:
            type: string
        name:
          type: string
        className:
          type: string
        initParameters:
          type: object
          additionalProperties:
            type: string
    HttpServletRequest:
      type: object
      properties:
        authType:
          type: string
        cookies:
          type: array
          items:
            "$ref": "#/components/schemas/Cookie"
        headerNames:
          "$ref": "#/components/schemas/EnumerationString"
        method:
          type: string
        pathInfo:
          type: string
        pathTranslated:
          type: string
        contextPath:
          type: string
        queryString:
          type: string
        remoteUser:
          type: string
        userPrincipal:
          "$ref": "#/components/schemas/Principal"
        requestedSessionId:
          type: string
        requestURI:
          type: string
        requestURL:
          "$ref": "#/components/schemas/StringBuffer"
        servletPath:
          type: string
        session:
          "$ref": "#/components/schemas/HttpSession"
        requestedSessionIdValid:
          type: boolean
        requestedSessionIdFromCookie:
          type: boolean
        requestedSessionIdFromURL:
          type: boolean
        requestedSessionIdFromUrl:
          type: boolean
        parts:
          type: array
          items:
            "$ref": "#/components/schemas/Part"
        attributeNames:
          "$ref": "#/components/schemas/EnumerationString"
        characterEncoding:
          type: string
        contentLength:
          type: integer
          format: int32
        contentLengthLong:
          type: integer
          format: int64
        contentType:
          type: string
        inputStream:
          "$ref": "#/components/schemas/ServletInputStream"
        parameterNames:
          "$ref": "#/components/schemas/EnumerationString"
        parameterMap:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        protocol:
          type: string
        scheme:
          type: string
        serverName:
          type: string
        serverPort:
          type: integer
          format: int32
        reader:
          "$ref": "#/components/schemas/BufferedReader"
        remoteAddr:
          type: string
        remoteHost:
          type: string
        locale:
          "$ref": "#/components/schemas/Locale"
        locales:
          "$ref": "#/components/schemas/EnumerationLocale"
        secure:
          type: boolean
        remotePort:
          type: integer
          format: int32
        localName:
          type: string
        localAddr:
          type: string
        localPort:
          type: integer
          format: int32
        servletContext:
          "$ref": "#/components/schemas/ServletContext"
        asyncStarted:
          type: boolean
        asyncSupported:
          type: boolean
        asyncContext:
          "$ref": "#/components/schemas/AsyncContext"
        dispatcherType:
          type: string
          enum:
          - FORWARD
          - INCLUDE
          - REQUEST
          - ASYNC
          - ERROR
    HttpSession:
      type: object
      properties:
        creationTime:
          type: integer
          format: int64
        id:
          type: string
        lastAccessedTime:
          type: integer
          format: int64
        servletContext:
          "$ref": "#/components/schemas/ServletContext"
        maxInactiveInterval:
          type: integer
          format: int32
        sessionContext:
          "$ref": "#/components/schemas/HttpSessionContext"
        attributeNames:
          "$ref": "#/components/schemas/EnumerationString"
        valueNames:
          type: array
          items:
            type: string
        new:
          type: boolean
    HttpSessionContext:
      type: object
      properties:
        ids:
          "$ref": "#/components/schemas/EnumerationString"
    InputStream:
      type: object
    JspConfigDescriptor:
      type: object
      properties:
        taglibs:
          type: array
          items:
            "$ref": "#/components/schemas/TaglibDescriptor"
        jspPropertyGroups:
          type: array
          items:
            "$ref": "#/components/schemas/JspPropertyGroupDescriptor"
    JspPropertyGroupDescriptor:
      type: object
      properties:
        urlPatterns:
          type: array
          items:
            type: string
        elIgnored:
          type: string
        pageEncoding:
          type: string
        scriptingInvalid:
          type: string
        isXml:
          type: string
        includePreludes:
          type: array
          items:
            type: string
        includeCodas:
          type: array
          items:
            type: string
        deferredSyntaxAllowedAsLiteral:
          type: string
        trimDirectiveWhitespaces:
          type: string
        defaultContentType:
          type: string
        buffer:
          type: string
        errorOnUndeclaredNamespace:
          type: string
    Part:
      type: object
      properties:
        inputStream:
          "$ref": "#/components/schemas/InputStream"
        contentType:
          type: string
        name:
          type: string
        submittedFileName:
          type: string
        size:
          type: integer
          format: int64
        headerNames:
          type: array
          items:
            type: string
    Principal:
      type: object
      properties:
        name:
          type: string
    PrintWriter:
      type: object
    ServletContext:
      type: object
      properties:
        contextPath:
          type: string
        majorVersion:
          type: integer
          format: int32
        minorVersion:
          type: integer
          format: int32
        effectiveMajorVersion:
          type: integer
          format: int32
        effectiveMinorVersion:
          type: integer
          format: int32
        servlets:
          "$ref": "#/components/schemas/EnumerationServlet"
        servletNames:
          "$ref": "#/components/schemas/EnumerationString"
        serverInfo:
          type: string
        initParameterNames:
          "$ref": "#/components/schemas/EnumerationString"
        attributeNames:
          "$ref": "#/components/schemas/EnumerationString"
        servletContextName:
          type: string
        servletRegistrations:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/ServletRegistration"
        filterRegistrations:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/FilterRegistration"
        sessionCookieConfig:
          "$ref": "#/components/schemas/SessionCookieConfig"
        defaultSessionTrackingModes:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - COOKIE
            - URL
            - SSL
        effectiveSessionTrackingModes:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - COOKIE
            - URL
            - SSL
        jspConfigDescriptor:
          "$ref": "#/components/schemas/JspConfigDescriptor"
        classLoader:
          "$ref": "#/components/schemas/ClassLoader"
        virtualServerName:
          type: string
    ServletInputStream:
      type: object
      properties:
        finished:
          type: boolean
        ready:
          type: boolean
    ServletOutputStream:
      type: object
      properties:
        ready:
          type: boolean
    ServletRegistration:
      type: object
      properties:
        mappings:
          type: array
          items:
            type: string
        runAsRole:
          type: string
        name:
          type: string
        className:
          type: string
        initParameters:
          type: object
          additionalProperties:
            type: string
    ServletRequest:
      type: object
      properties:
        attributeNames:
          "$ref": "#/components/schemas/EnumerationString"
        characterEncoding:
          type: string
        contentLength:
          type: integer
          format: int32
        contentLengthLong:
          type: integer
          format: int64
        contentType:
          type: string
        inputStream:
          "$ref": "#/components/schemas/ServletInputStream"
        parameterNames:
          "$ref": "#/components/schemas/EnumerationString"
        parameterMap:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        protocol:
          type: string
        scheme:
          type: string
        serverName:
          type: string
        serverPort:
          type: integer
          format: int32
        reader:
          "$ref": "#/components/schemas/BufferedReader"
        remoteAddr:
          type: string
        remoteHost:
          type: string
        locale:
          "$ref": "#/components/schemas/Locale"
        locales:
          "$ref": "#/components/schemas/EnumerationLocale"
        secure:
          type: boolean
        remotePort:
          type: integer
          format: int32
        localName:
          type: string
        localAddr:
          type: string
        localPort:
          type: integer
          format: int32
        servletContext:
          "$ref": "#/components/schemas/ServletContext"
        asyncStarted:
          type: boolean
        asyncSupported:
          type: boolean
        asyncContext:
          "$ref": "#/components/schemas/AsyncContext"
        dispatcherType:
          type: string
          enum:
          - FORWARD
          - INCLUDE
          - REQUEST
          - ASYNC
          - ERROR
    ServletResponse:
      type: object
      properties:
        characterEncoding:
          type: string
        contentType:
          type: string
        outputStream:
          "$ref": "#/components/schemas/ServletOutputStream"
        writer:
          "$ref": "#/components/schemas/PrintWriter"
        bufferSize:
          type: integer
          format: int32
        committed:
          type: boolean
        locale:
          "$ref": "#/components/schemas/Locale"
    SessionCookieConfig:
      type: object
      properties:
        name:
          type: string
        domain:
          type: string
        path:
          type: string
        comment:
          type: string
        httpOnly:
          type: boolean
        secure:
          type: boolean
        maxAge:
          type: integer
          format: int32
    StringBuffer:
      type: object
    TaglibDescriptor:
      type: object
      properties:
        taglibURI:
          type: string
        taglibLocation:
          type: string
    DeviceManager:
      required:
      - identitySourceEnabled
      - identitySourceId
      - instanceName
      - jitpEnabled
      - mdmProps
      - uniqueUserIdentifier
      type: object
      properties:
        status:
          type: string
          description: The configured status.
          example: configured
        instanceName:
          type: string
          description: A descriptive name to represent this instance.
          example: TryISV MTLS-Auth provider
        enabled:
          type: boolean
          description: Specify whether this instance is enabled.
        identitySourceId:
          type: string
          description: The identity provider id.
          example: "<UUID>"
        jitpEnabled:
          type: boolean
          description: Specify whether Just-In-Time-Provisioning is enabled.
        syncUserDeviceInfo:
          type: boolean
          description: Flag to indicate IBM Security Verify, if we should contact
            MDM provider to fetch user/device information.
        uniqueUserIdentifier:
          type: string
          description: The unique attribute that is used to identify an existing user
            in the Verify identity provider or perform a JITP with its value for userName
        attributeMappings:
          type: array
          description: The attribute mappings configuration.
          items:
            "$ref": "#/components/schemas/AttributeMapping_0"
        identitySourceEnabled:
          type: boolean
          description: Read only information about the configured identity provider's
            enabled status.
        mdmProps:
          "$ref": "#/components/schemas/MdmProps"
        deviceManagerId:
          type: string
          description: Read only and generated after creating this provider.
          example: "<UUID>"
        fetchAttributes:
          type: array
          description: The names of the user attributes to fetch.
          example: '["country", "department", "employeeId"]'
          items:
            type: string
        csrUidLocation:
          type: string
          description: Whether the user identifier is part of CSR's Subject or SAN
            field.
          example: sanEmail
        uniqueUserIdentifierRequestRule:
          type: string
          description: The custom rule to evaluate the uniqueUserIdentifier attribute
            value.
          example: requestContext.userPrincipalName.split('@')[0]
    MdmProps:
      required:
      - authentication
      - authenticationType
      - scepChallengePassword
      - tenantName
      - type
      type: object
      properties:
        tenantName:
          type: string
          description: The MDM tenant name.
          example: tryisv.com
        type:
          type: string
          description: The MDM type.
          example: MicrosoftIntune
          enum:
          - MicrosoftIntune
          - Jamf
        authenticationType:
          type: string
          description: The authentication type supported in the MDM tenant.
          example: OAuth
          enum:
          - OAuth
          - Basic
        maxClientCertsPerDevice:
          type: integer
          description: Maximum number of client certificates that can be issued per
            device per user.
          format: int32
          example: 3
        userDeviceStatusCacheTimeout:
          type: integer
          description: The user/device cache timeout in minutes.
          format: int32
          example: 720
        scepChallengePassword:
          type: string
          description: The SCEP challenge password for Jamf, this field is required
            when "type" is "Jamf" and the value of "scepChallengeType" is "static".
          example: Ohn0id0nTl1keUs1ngAsT^T1Ccha11enGepA55w0rDwHenDynAm1c1sp00s1ble
        scepChallengeType:
          type: string
          description: The SCEP Challenge Type for Jamf, required when type is Jamf.
          example: dynamic
          enum:
          - dynamic
          - static
        authentication:
          "$ref": "#/components/schemas/Authentication_0"
        scepChallengeWebhookConfigured:
          type: boolean
          description: Flag to indicate if webhoook configuration is completed on
            the MDM tenant and can now be persisted in the device manager.
        webhooks:
          "$ref": "#/components/schemas/Webhooks"
    PostEvalOptions:
      required:
      - custom
      - id
      type: object
      properties:
        id:
          type: string
          description: The post evaluation operation id.
          example: base64encoding
        custom:
          type: string
          description: The post evaluation operation custom rule.
          example: idsuser.$property[0]
    ScepChallenge:
      type: object
      properties:
        username:
          type: string
          description: The username of the webhook SCEP challenge. Should be aplhanumeric.
          example: scep challenge username
        password:
          type: string
          description: The password of the webhook SCEP challenge. Should be aplhanumeric,
            atleast 8 characters long and maximum of 32 characters.
          example: scepChallengePassword
    ServiceAccount:
      required:
      - accountEmail
      - serviceAccountEmail
      - serviceAccountPrivateKey
      type: object
      properties:
        serviceAccountEmail:
          type: string
          description: The service account's email id.
          example: ibmsecurityverify-mdm@tryisv.iam.gserviceaccount.com
        accountEmail:
          type: string
          description: The tenant admin account's email.
          example: admin@tryisv.com
        serviceAccountPrivateKey:
          type: string
          description: The service account's private key
          example: "<Private key as a single line string>"
    Webhooks:
      type: object
      properties:
        scepChallenge:
          "$ref": "#/components/schemas/ScepChallenge"
    MdmConnection:
      required:
      - identitySourceId
      - mdmProps
      type: object
      properties:
        mdmProps:
          "$ref": "#/components/schemas/MdmConnectionProps"
        identitySourceId:
          type: string
          description: The identity source Id.
          example: a231aea8-27ae-4620-8d04-667b51e71ed7
        syncUserDeviceInfo:
          type: boolean
          description: Flag to indicate CI, if we should contact mdm provider to fetch
            user/device info or not
        uniqueUserIdentifier:
          type: string
          description: The name of the attribute to be used as the unique identifier.
          example: id
        realm:
          type: string
    MdmConnectionProps:
      required:
      - authentication
      - tenantName
      type: object
      properties:
        tenantName:
          type: string
          description: The MDM tenant name.
          example: tryisv.com
        authentication:
          "$ref": "#/components/schemas/Authentication_0"
    SmartcardProvider:
      required:
      - identitySourceEnabled
      - identitySourceId
      - instanceName
      - jitpEnabled
      - subjectKeyIdentifier
      - uniqueUserIdentifier
      type: object
      properties:
        instanceName:
          type: string
          description: A descriptive name to represent this instance.
          example: TryISV MTLS-Auth provider
        enabled:
          type: boolean
          description: Specify whether this instance is enabled.
        identitySourceId:
          type: string
          description: The identity provider id.
          example: "<UUID>"
        jitpEnabled:
          type: boolean
          description: Specify whether Just-In-Time-Provisioning is enabled.
        uniqueUserIdentifier:
          type: string
          description: The unique attribute that is used to identify an existing user
            in the Verify identity provider or perform a JITP with its value for userName
        attributeMappings:
          type: array
          description: The attribute mappings configuration.
          items:
            "$ref": "#/components/schemas/AttributeMapping_0"
        identitySourceEnabled:
          type: boolean
          description: Read only information about the configured identity provider's
            enabled status.
        smartcardProviderId:
          type: string
          description: Read only and generated after creating this provider.
          example: "<UUID>"
        uniqueUserIdentifierRequestRule:
          type: string
          description: The custom rule to evaluate the uniqueUserIdentifier attribute
            value.
          example: requestContext.subjectCN[0].split('@')[0]
        subjectKeyIdentifier:
          type: string
          description: Subject Key Identifier of the immediate certificate authority
            that is issuing the X.509 client certificates.
          example: 6D:55:3E:F9:5D:82:14:C5:03:D2:93:4A:64:D9:0A:A1:CC:FB:B9:A0
    AttributeMapping_0:
      required:
      - attrId
      - idsAttrName
      - jitpOption
      type: object
      properties:
        idsAttrName:
          type: string
          description: The incoming attribute name.
          example: mail
        attrId:
          type: string
          description: The internal user attribute id.
          example: '3'
        jitpOption:
          type: string
          description: The JITP option on the attribute.
          example: ALWAYS
        postEval:
          "$ref": "#/components/schemas/PostEvalOptions"
    Authentication_0:
      required:
      - clientId
      - clientSecret
      - password
      - serviceAccount
      - username
      type: object
      properties:
        clientId:
          type: string
          description: The clientid of the MicrosoftIntune tenant.
          example: f106a7b3-cc2a-444d-a356-c71ec161e145
        clientSecret:
          type: string
          description: The clientSecret of the MicrosoftIntune tenant.
          example: clientsecret value
        username:
          type: string
          description: The username of the Jamf tenant Basic Authentication.
          example: Basic Authentication username
        password:
          type: string
          description: The password of the Jamf tenant Basic Authentication.
          example: Basic Authentication password value
        serviceAccount:
          "$ref": "#/components/schemas/ServiceAccount"
    TenantCounterUpdateModel:
      type: object
      properties:
        emailCount:
          type: integer
          description: the email count
          format: int32
        smsCount:
          type: integer
          description: the sms count
          format: int32
        voiceCount:
          type: integer
          description: the voice count
          format: int32
        pushCount:
          type: integer
          description: the push count
          format: int32
    TenantCounterModel:
      type: object
      properties:
        uuid:
          type: string
        hostname:
          type: string
        customerType:
          type: string
        emailCount:
          type: integer
          format: int32
        smsCount:
          type: integer
          format: int32
        voiceCount:
          type: integer
          format: int32
        pushCount:
          type: integer
          format: int32
        emailQuota:
          type: integer
          format: int32
        smsQuota:
          type: integer
          format: int32
        voiceQuota:
          type: integer
          format: int32
        pushQuota:
          type: integer
          format: int32
    HealthCheckResponse:
      required:
      - components
      - status
      type: object
      properties:
        components:
          type: array
          description: The health check status for all of the Notification Service
            components.
          items:
            "$ref": "#/components/schemas/Component_3"
        status:
          type: string
          description: The overall status result of the health check.
          example: good
          enum:
          - good
          - bad
          - marginal
    FakeEmailAddressPattern:
      required:
      - patterns
      type: object
      properties:
        patterns:
          type: array
          description: pattern
          items:
            type: string
    FakeEmailAddressItem:
      type: object
      properties:
        tenantId:
          type: string
          description: tenantId
        patterns:
          type: array
          description: patterns
          items:
            type: string
    VoiceConfig:
      type: object
      properties:
        primaryProvider:
          type: string
          description: the primary email provider
    EmailConfig:
      type: object
      properties:
        primaryProvider:
          type: string
          description: the primary email provider
    SMSConfig:
      type: object
      properties:
        primaryProvider:
          type: string
          description: the primary email provider
    SMSOTPNotification:
      required:
      - content
      - correlation
      - expiry
      - otp
      - recipient
      type: object
      properties:
        recipient:
          type: string
          description: the international phone number with country code, e.g. 18005551212
        content:
          type: string
          description: the message body
          example: Your passcode is 123456
        contentType:
          type: string
          description: Optional. If specified, must be 'text'
          example: text
        otp:
          type: string
          description: The one-time password value
          example: '123456'
        correlation:
          type: string
          description: A value to be associated with the verification. It will be
            prefixed to the one-time password in the SMS to be sent.
          example: '4579'
        expiry:
          type: integer
          description: The number of seconds until the one-time password expires
          format: int32
          example: 300
    App:
      type: object
      properties:
        appId:
          type: string
          description: the id of the custom app that will receive the push. See Push
            Credentials Management endpoints for storing credentials for a custom
            push app.
        useDevCreds:
          type: boolean
          description: When set to true, use the dev creds stored for the custom push
            app indicated by appId. Default behavior if not supplied is to use the
            production creds. See Push Credentials Management endpoints for storing
            dev and prod credentials for a custom push app.
    FirebaseNotification:
      type: object
      properties:
        app:
          "$ref": "#/components/schemas/App"
        payload:
          type: string
          description: String representation of JSON payload to be sent directly to
            the push service. If provided, takes precedence over 'json' field
        json:
          type: object
          properties: {}
          description: JSON payload to be sent directly to the push service. Used
            only when string 'payload' field is not provided
    ApnsNotification:
      required:
      - deviceToken
      type: object
      properties:
        app:
          "$ref": "#/components/schemas/App"
        deviceToken:
          type: string
          description: the target device token
        payload:
          type: string
          description: String representation of JSON payload to be sent directly to
            the push service. If provided, takes precedence over 'json' field
        json:
          type: object
          properties: {}
          description: JSON payload to be sent directly to the push service. Used
            only when string 'payload' field is not provided
    EmailNotification:
      required:
      - content
      - contentType
      - recipients
      - subject
      type: object
      properties:
        recipients:
          "$ref": "#/components/schemas/Recipients"
        subject:
          type: string
          description: the subject line
          example: Subject Here
        content:
          type: string
          description: the message body
          example: Message Here
        contentType:
          type: string
          description: the content type
          example: text/html
        category:
          type: string
          description: the email category
          example: TenantCreate
    Recipients:
      required:
      - to
      type: object
      properties:
        to:
          type: array
          description: email addresses of recipients
          items:
            type: string
    Message:
      required:
      - body
      type: object
      properties:
        title:
          type: string
          description: the title of the notification
          example: Title Here
        body:
          type: string
          description: the message body
          example: Message Here
    VoiceNotification:
      required:
      - content
      - otp
      - recipient
      type: object
      properties:
        recipient:
          type: string
          description: the international phone number with country code, e.g. 18005551212
        content:
          type: string
          description: the message body
          example: Your passcode is 123456.<break> Use the passcode to complete your
            request.
        otp:
          type: string
          description: The OTP code. Max 10 chars.
          example: '123456'
        language:
          type: string
          description: Optional. The language used for voice message translation.
          example: en-US
    NotificationEvent:
      type: object
      properties:
        notificationId:
          type: string
        subtype:
          type: string
        provider:
          type: string
        providerMessageId:
          type: string
        status:
          type: string
        statusMessage:
          type: string
        deliveryStatus:
          type: string
        recipient:
          type: string
        sender:
          type: string
        time:
          type: string
        appId:
          type: string
        tenantname:
          type: string
        tenantid:
          type: string
    SMSNotification:
      required:
      - content
      - recipient
      type: object
      properties:
        recipient:
          type: string
          description: the international phone number with country code, e.g. 18005551212
        content:
          type: string
          description: the message body
          example: Your passcode is 123456
        contentType:
          type: string
          description: Optional. If specified, must be 'text'
          example: text
    APNSPushConfig:
      type: object
      properties:
        developmentCreds:
          "$ref": "#/components/schemas/APNSPushCredentials"
        productionCreds:
          "$ref": "#/components/schemas/APNSPushCredentials"
    APNSPushCredentials:
      required:
      - base64Cert
      - certPassword
      type: object
      properties:
        base64Cert:
          type: string
          description: the certificate store in base64 format
        certPassword:
          type: string
          description: the password for the certificate store
    FirebasePushConfig:
      type: object
      properties:
        developmentCreds:
          "$ref": "#/components/schemas/FirebasePushCredentials"
        productionCreds:
          "$ref": "#/components/schemas/FirebasePushCredentials"
    FirebasePushCredentials:
      required:
      - serviceAccountJSON
      type: object
      properties:
        serviceAccountJSON:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: the service account JSON sourced from Firebase account of the
            mobile app
    PushCredentials:
      required:
      - appId
      type: object
      properties:
        appId:
          type: string
          description: the unique app identifier of the mobile app (mobile app App
            ID or Project ID)
        apnsPushConfig:
          "$ref": "#/components/schemas/APNSPushConfig"
        firebasePushConfig:
          "$ref": "#/components/schemas/FirebasePushConfig"
    Credential:
      required:
      - appId
      - id
      type: object
      properties:
        apnsPushConfig:
          "$ref": "#/components/schemas/APNSPushConfig"
        firebasePushConfig:
          "$ref": "#/components/schemas/FirebasePushConfig"
        appId:
          type: string
          description: The unique app identifier of the mobile app (mobile app App
            ID or Project ID)
        id:
          type: string
          description: The CI assigned identifier of the push credential set
    Credentials:
      required:
      - credentials
      type: object
      properties:
        credentials:
          type: array
          description: The push credentials
          items:
            "$ref": "#/components/schemas/Credential"
    BlockedPhoneNumberParm:
      type: object
      properties:
        patterns:
          type: array
          description: patterns
          items:
            type: string
        countryFilterType:
          type: string
          description: allow or block
        countries:
          type: array
          description: countries
          items:
            type: string
    EmailSuppression:
      type: object
      properties:
        recipient:
          type: string
          description: recipient
    BlockedPhoneNumberItem:
      type: object
      properties:
        tenantId:
          type: string
          description: tenantId
        patterns:
          type: array
          description: patterns
          items:
            type: string
        countryFilterType:
          type: string
          description: countryFilterType
        countries:
          type: array
          description: countries
          items:
            type: string
    Component_3:
      required:
      - details
      - name
      - status
      type: object
      properties:
        name:
          type: string
          description: The name of the component that is being checked.
          example: Zookeeper
        status:
          type: string
          description: The status result of the health check.
          example: good
        details:
          type: string
          description: A message about what was checked.
          example: The connection to Zookeeper is successful.
          enum:
          - good
          - bad
          - marginal
    PushNotification_0:
      required:
      - platform
      - recipient
      type: object
      properties:
        platform:
          type: string
          description: the device platform - Android or IOS
        app:
          "$ref": "#/components/schemas/App"
        recipient:
          type: string
          description: the device registration token
        message:
          "$ref": "#/components/schemas/Message"
        data:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: custom data to be sent to the app. JSONObject containing key-value
            pairs.
    FunctionStringString:
      type: object
    AdditionalConfiguration:
      type: object
      properties:
        clientAuthMethod:
          type: string
          description: Client authentication method.
        validateClientAssertionJti:
          type: boolean
          description: Whether need to validate the jti of incoming client auth JWT.
        allowedClientAssertionVerificationKeys:
          type: array
          description: List of allowed key IDs to use for verifying incoming JWT signature.
          items:
            type: string
        tlsClientAuthAttribute:
          type: string
          description: MTLS client authentication attribute.
        tlsClientAuthAttributeValue:
          type: string
          description: MTLS client authentication attribute value.
        certificateBoundAccessTokens:
          type: boolean
          description: Indicates if certificate bound access tokens must be issued.
        oidcv3:
          type: boolean
          description: Indicator whether the client configuration is for OIDC v3.
        requirePushAuthorize:
          type: boolean
          description: Whether only push authorize requests will be processed.
        introspectAuthorization:
          type: string
          description: Option of which client(s) are authorized to perform introspection.  Default
            is 'any'
          example: self
          enum:
          - self
          - any
          - app
        responseTypes:
          type: array
          description: List of response types allowed at authorize endpoint. If not
            specified, the restriction is solely based on grant type enabled.
          items:
            type: string
        responseModes:
          type: array
          description: List of response modes allowed at authorize endpoint.
          items:
            type: string
        authorizeRequestMap:
          type: array
          description: List of enrichment mapping for authorize endpoint request.
          items:
            "$ref": "#/components/schemas/ClientEnrichmentMap"
        authorizeResponseMap:
          type: array
          description: List of enrichment mapping for authorize endpoint response.
          items:
            "$ref": "#/components/schemas/ClientEnrichmentMap"
        tokenRequestMap:
          type: array
          description: List of enrichment mapping for token endpoint request.
          items:
            "$ref": "#/components/schemas/ClientEnrichmentMap"
        tokenResponseMap:
          type: array
          description: List of enrichment mapping for token endpoint response.
          items:
            "$ref": "#/components/schemas/ClientEnrichmentMap"
        introspectResponseMap:
          type: array
          description: List of enrichment mapping for introspect endpoint response.
          items:
            "$ref": "#/components/schemas/ClientEnrichmentMap"
        userInfoResponseMap:
          type: array
          description: List of enrichment mapping for userinfo endpoint response.
          items:
            "$ref": "#/components/schemas/ClientEnrichmentMap"
        userinfoRspSigningAlg:
          type: string
          description: Userinfo response JWT signing algorithm.
        userinfoRspSigningKey:
          type: string
          description: Userinfo response JWT signing key.
        userinfoRspEncryptionAlg:
          type: string
          description: Userinfo response JWT encryption algorithm.
        userinfoRspEncryptionEnc:
          type: string
          description: Userinfo response JWT encryption content algorithm.
        userinfoRspEncryptionKey:
          type: string
          description: Userinfo response JWT encryption key.
        authorizeRspSigningAlg:
          type: string
          description: Authorize response JWT signing algorithm.
        authorizeRspSigningKey:
          type: string
          description: Authorize response JWT signing key.
        authorizeRspEncryptionAlg:
          type: string
          description: Authorize response JWT encryption algorithm.
        authorizeRspEncryptionEnc:
          type: string
          description: Authorize response JWT encryption content algorithm.
        authorizeRspEncryptionKey:
          type: string
          description: Authorize response JWT encryption key.
        requestObjectSigningAlg:
          type: string
          description: Request object signing algorithm.
        requestObjectEncryptionAlg:
          type: string
          description: Request object encryption algorithm.
        requestObjectEncryptionEnc:
          type: string
          description: Request object encryption content algorithm.
        requestObjectParametersOnly:
          type: boolean
          description: All the request parameters are only in the request object.
        requestObjectRequireExp:
          type: boolean
          description: Whether exp is required in the request object.
        requestObjectMaxExpFromNbf:
          "$ref": "#/components/schemas/Number"
        requestUris:
          type: array
          description: Array of URLs using the https scheme referencing JWT Objects
            resource containing the request parameters.
          items:
            type: string
        clientAssertionSigningAlg:
          type: string
          description: The signing algorithm for the client assertion.
        dpopBoundAccessTokens:
          type: boolean
          description: Whether generate the DPoP bound access token.
        validateDPoPProofJti:
          type: boolean
          description: Whether need to validate the jti of incoming DPoP JWT.
        dpopProofSigningAlg:
          type: string
          description: DPoP JWT signing algorithm.
        subjectTokenTypes:
          type: array
          description: Allowed subject token types.
          items:
            type: string
        actorTokenTypes:
          type: array
          description: Allowed actor token types.
          items:
            type: string
        requestedTokenTypes:
          type: array
          description: Allowed requested token types.
          items:
            type: string
        validateJwtBearerJti:
          type: boolean
          description: Whether need to validate the jti of incoming JWT bearer assertion.
            If not specified, the default is true.
        clientGroups:
          "$ref": "#/components/schemas/ClientGroups"
        exchangeForSSOSessionOption:
          type: string
          description: Options to exchange token for SSO session. If this is not set,
            or is set to 'default', the configuration in the OIDC federation settings
            will take effect.
          example: default
          enum:
          - default
          - deny
          - allow
          - allow_and_revoke
        refreshAttributeMapClaimNames:
          type: array
          description: List of ID token and user info claim names that will be updated
            during a refresh token flow.
          items:
            type: string
        refreshIntrospectMapClaimNames:
          type: array
          description: List of JWT access token and introspect claim names that will
            be updated during a refresh token flow.
          items:
            type: string
        jwks:
          "$ref": "#/components/schemas/ClientJwks"
    ClientAttributeMap:
      required:
      - function
      - name
      - sourceId
      type: object
      properties:
        name:
          type: string
          description: Claim name.
        sourceId:
          type: string
          description: Attribute Source Id that this claim mapping to.
        isDefault:
          type: boolean
          description: Whether this claim will always be returned.
        function:
          "$ref": "#/components/schemas/ClientAttributeRule"
        refresh:
          type: boolean
          description: Whether this claim will be refreshed during refresh token flow.
            Default is false.
    ClientAttributeRule:
      type: object
      properties:
        name:
          type: string
          description: Transformation rule name.
        custom:
          type: string
          description: Custom rule.
        predefined:
          type: string
          description: Pre-defined rule identifier.
    ClientEnrichmentMap:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Attribute name.
        type:
          type: string
          description: Attribute type. Default is 'parameter'
          example: header
          enum:
          - header
          - parameter
        custom:
          type: string
          description: Rule associated with this mapping.
        predefined:
          type: string
          description: Predefined rule associated with this mapping.
    ClientGroups:
      type: object
      properties:
        tokenExchange:
          type: array
          description: List of token exchange groups associated with this client.
          items:
            type: string
        introspect:
          type: array
          description: List of introspection groups associated with this client.
          items:
            type: string
    ClientJwks:
      required:
      - keys
      type: object
      properties:
        keys:
          type: array
          description: Array of JWKs.
          items:
            type: object
            additionalProperties:
              type: object
              properties: {}
    ClientOverrides:
      type: object
      properties:
        signKeyLabel:
          type: string
          description: Key label used to perform the signing.
        authorizationCodeLifetime:
          "$ref": "#/components/schemas/Number"
        accessTokenLifetime:
          "$ref": "#/components/schemas/Number"
        refreshTokenLifetime:
          "$ref": "#/components/schemas/Number"
        maxAuthorizationGrantLifetime:
          "$ref": "#/components/schemas/Number"
        renewRefreshToken:
          type: boolean
          description: When set to true, refresh token lifetime will be used. Default
            is false.
        tcmBehavior:
          type: string
          description: Trusted client management behavior.
          example: never_prompt
          enum:
          - never_prompt
          - always_prompt
        restrictScopes:
          type: boolean
          description: Restrict custom scopes, true or false. Default is false.
        scopes:
          type: array
          description: List of allowed custom scopes.
          items:
            "$ref": "#/components/schemas/CustomScope"
    CreateOidcClient:
      required:
      - clientName
      - grantTypes
      type: object
      properties:
        isDynamicClient:
          type: boolean
          description: Indicator of dynamic client. Only set to true for dynamic client.
        apiClientOwners:
          type: array
          description: API Client IDs that own this client.
          items:
            type: string
        clientName:
          type: string
          description: Display name. Maximum 256 characters.
        clientSecret:
          type: string
          description: Client secret. Maximum 512 characters. Will be auto-generated
            if this parameter is not provided. Empty string value is for public client.
        category:
          type: string
          description: Client category. Maximum 32 characters.
        definitionId:
          type: string
          description: Definition ID that this client is associated with. The Definition
            must already exist. If not specified, the client will be attached to the
            default definition.
        appId:
          type: string
          description: Application ID that this client is associated with.
        idSources:
          type: array
          description: List of allowed ID Sources based on priority.
          items:
            type: string
        requirePkceVerification:
          type: boolean
          description: Require PKCE verification. If not provided, the value will
            be set to false.
        enabled:
          type: boolean
          description: Enable the client. If not provided, the value will be set to
            true.
        grantTypes:
          type: array
          description: List of allowed grant types. Must be subset of Definition's
            grant types (grant_types_supported) listed at /oidc/endpoint/{definition_id}/.well-known/openid-configuration
          items:
            type: string
        policyAppliedAPIGrantTypes:
          type: array
          description: List of API-based grant types which access policy must be applied.
            Must be subset of allowed API-based grant types.
          items:
            type: string
        policyId:
          type: string
          description: Access policy ID associated with this client. Only applicable
            for API client and Application API client.
        birthRightAccess:
          type: boolean
          description: Birth right access. Default is false.
        redirectUris:
          type: array
          description: List of redirect URIs.
          items:
            type: string
        requestUris:
          type: array
          description: List of request URIs.
          items:
            type: string
        jwkSet:
          "$ref": "#/components/schemas/ClientJwks"
        jwkUri:
          type: string
          description: JSON Web Key (JWK) URI. This will be used instead of requestVerifyKey
            and idTokenEncryptKey if those are not provided. If specified, JSON Web
            Key (JWK) Set should not be specified.
        idTokenSigningAlg:
          type: string
          description: ID token signing algorithm. List of algorithms (id_token_signing_alg_values_supported)
            available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration
        idTokenEncryptAlg:
          type: string
          description: ID token key management encryption algorithm. List of algorithms
            (id_token_encryption_alg_values_supported) available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration
        idTokenEncryptEnc:
          type: string
          description: ID token content encryption algorithm. List of algorithms (id_token_encryption_enc_values_supported)
            available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration
        idTokenEncryptKey:
          type: string
          description: ID token encryption public key label.
        requestSigningAlg:
          type: string
          description: Request signing algorithm. List of algorithms (request_object_signing_alg_values_supported)
            available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration
        requestEncryptAlg:
          type: string
          description: Request key management encryption algorithm. List of algorithms
            (request_object_encryption_alg_values_supported) available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration
        requestEncryptEnc:
          type: string
          description: Request content encryption algorithm. List of algorithms (request_object_encryption_enc_values_supported)
            available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration
        requestVerifyKey:
          type: string
          description: Request signature verification public key label.
        accessTokenType:
          type: string
          description: Type of access token to be generated. Default is 'default'
          example: default
          enum:
          - default
          - jwt
        audiences:
          type: array
          description: List of audiences.
          items:
            type: string
        introspectMap:
          type: array
          description: List of application specific claim mapping to attribute source
            for introspection and JWT access token.
          items:
            "$ref": "#/components/schemas/ClientAttributeMap"
        restrictEntitlements:
          type: boolean
          description: Restrict entitlements, true or false. Default is true.
        entitlements:
          type: array
          description: List of entitlements assigned to this client.
          items:
            type: string
        defaultEntitlements:
          type: array
          description: List of default entitlements assigned to this client.
          items:
            type: string
        sendAllClaims:
          type: boolean
          description: If true, always return all supported claims. Default is false.
        attributeMap:
          type: array
          description: List of application specific claim mapping to attribute source
            for id token and user info.
          items:
            "$ref": "#/components/schemas/ClientAttributeMap"
        overrideSettings:
          "$ref": "#/components/schemas/ClientOverrides"
        jwtBearerIdentifier:
          "$ref": "#/components/schemas/JwtBearerIdentifier"
        generateDeviceFlowQRCode:
          type: boolean
          description: If true, generate QR Code for the full verification URI. Default
            is false.
        companyName:
          type: string
          description: Company name. Maximum 1024 characters.
        companyUrl:
          type: string
          description: Company URL.
        contactPerson:
          type: string
          description: Contact person. Maximum 256 characters.
        contactType:
          type: string
          description: Contact type.
          enum:
          - technical
          - support
          - administrative
          - billing
          - other
        email:
          type: string
          description: Email address.
        phone:
          type: string
          description: Phone number. Maximum 128 characters. No validation done, other
            than length.
        otherInfo:
          type: string
          description: Other miscellaneous information. Maximum 2048 characters.
        themeId:
          type: string
          description: Template pages theme to use for all pages related to this OIDC
            application. Maximum 50 characters.
        description:
          type: string
          description: Description of this client.
        additionalProperties:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Additional properties associated with this client.
        ipFilterOp:
          type: string
          description: Operation of IP filter. Default is null, which means IP filter
            is disabled.
          enum:
          - allow
          - deny
        ipFilters:
          type: array
          description: List of IP filter.
          items:
            type: string
        consentType:
          type: string
          description: Type of consent used by this client. The default is null. For
            new application client and 'isamconnect' client the value will be 'dpcm'.
          enum:
          - dpcm
        additionalConfig:
          "$ref": "#/components/schemas/AdditionalConfiguration"
    CustomScope:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of custom scope.
        description:
          type: string
          description: Description of custom scope.
    JwtBearerIdentifier:
      type: object
      properties:
        searchBy:
          type: string
          description: Method to find the User identified by JWT-Bearer sub. Default
            is by 'uid'
        defaultIdSource:
          type: string
          description: Default identity source when multiple Users of different realm
            are found.
        defaultRealm:
          type: string
          description: Default realm name when multiple Users of different realm are
            found. Auto-populated based on defaultIdSource.
        function:
          type: string
          description: Custom function to identify User. Required when search by custom
            function.
    UpdateOidcClient:
      required:
      - clientName
      - grantTypes
      type: object
      properties:
        secretIssuedAt:
          type: integer
          description: Time at which the client secret was issued as the number of
            seconds from 1970-01-01T00:00:00Z.
          format: int64
        isDynamicClient:
          type: boolean
          description: Indicator of dynamic client. Only set to true for dynamic client.
        apiClientOwners:
          type: array
          description: API Client IDs that own this client.
          items:
            type: string
        clientName:
          type: string
          description: Display name. Maximum 256 characters.
        clientSecret:
          type: string
          description: Client secret. Maximum 512 characters. Will be auto-generated
            if not specified and previously empty string. Empty string value is for
            public client.
        category:
          type: string
          description: Client category. Maximum 32 characters.
        definitionId:
          type: string
          description: Definition ID that this client is associated with. The Definition
            must already exist. If not specified, the client will still be attached
            to original definition. If the specified one is different than the original
            definition, the client will be moved under the specified definition.
        appId:
          type: string
          description: Application ID that this client is associated with.
        idSources:
          type: array
          description: List of allowed ID Sources based on priority.
          items:
            type: string
        requirePkceVerification:
          type: boolean
          description: Require PKCE verification. If not provided, the value will
            be set to false.
        enabled:
          type: boolean
          description: Enable or disable the client.
        grantTypes:
          type: array
          description: List of allowed grant types. Must be subset of Definition's
            grant types (grant_types_supported) listed at /oidc/endpoint/{definition_id}/.well-known/openid-configuration
          items:
            type: string
        policyAppliedAPIGrantTypes:
          type: array
          description: List of API-based grant types that access policy will be applied.
            Must be subset of selected API-based grant types.
          items:
            type: string
        policyId:
          type: string
          description: Access policy ID associated with this client. Only applicable
            for API client and Application API client.
        birthRightAccess:
          type: boolean
          description: Birth right access. Default is false.
        redirectUris:
          type: array
          description: List of redirect URIs.
          items:
            type: string
        requestUris:
          type: array
          description: List of request URIs.
          items:
            type: string
        jwkSet:
          "$ref": "#/components/schemas/ClientJwks"
        jwkUri:
          type: string
          description: JSON Web Key (JWK) URI. This will be used instead of requestVerifyKey
            and idTokenEncryptKey if those are not provided. If specified, JSON Web
            Key (JWK) Set should not be specified.
        idTokenSigningAlg:
          type: string
          description: ID token signing algorithm. List of algorithms (id_token_signing_alg_values_supported)
            available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration
        idTokenEncryptAlg:
          type: string
          description: ID token key management encryption algorithm. List of algorithms
            (id_token_encryption_alg_values_supported) available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration
        idTokenEncryptEnc:
          type: string
          description: ID token content encryption algorithm. List of algorithms (id_token_encryption_enc_values_supported)
            available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration
        idTokenEncryptKey:
          type: string
          description: ID token encryption public key label.
        requestSigningAlg:
          type: string
          description: Request signing algorithm. List of algorithms (request_object_signing_alg_values_supported)
            available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration
        requestEncryptAlg:
          type: string
          description: Request key management encryption algorithm. List of algorithms
            (request_object_encryption_alg_values_supported) available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration
        requestEncryptEnc:
          type: string
          description: Request content encryption algorithm. List of algorithms (request_object_encryption_enc_values_supported)
            available at /oidc/endpoint/{definition_id}/.well-known/openid-configuration
        requestVerifyKey:
          type: string
          description: Request signature verification public key label.
        accessTokenType:
          type: string
          description: Type of access token to be generated. Default is 'default'
          example: default
          enum:
          - default
          - jwt
        audiences:
          type: array
          description: List of audiences.
          items:
            type: string
        introspectMap:
          type: array
          description: List of application specific claim mapping to attribute source
            for introspection and JWT access token.
          items:
            "$ref": "#/components/schemas/ClientAttributeMap"
        restrictEntitlements:
          type: boolean
          description: Restrict entitlements, true or false. Default is true.
        entitlements:
          type: array
          description: List of entitlements assigned to this client.
          items:
            type: string
        defaultEntitlements:
          type: array
          description: List of default entitlements assigned to this client.
          items:
            type: string
        sendAllClaims:
          type: boolean
          description: If true, always return all supported claims. Default is false.
        attributeMap:
          type: array
          description: List of application specific claim mapping to attribute source
            for id_token and user info.
          items:
            "$ref": "#/components/schemas/ClientAttributeMap"
        overrideSettings:
          "$ref": "#/components/schemas/ClientOverrides"
        jwtBearerIdentifier:
          "$ref": "#/components/schemas/JwtBearerIdentifier"
        generateDeviceFlowQRCode:
          type: boolean
          description: If true, generate QR Code for the full verification URI. Default
            is false.
        companyName:
          type: string
          description: Company name. Maximum 1024 characters.
        companyUrl:
          type: string
          description: Company URL.
        contactPerson:
          type: string
          description: Contact person. Maximum 256 characters.
        contactType:
          type: string
          description: Contact type.
          enum:
          - technical
          - support
          - administrative
          - billing
          - other
        email:
          type: string
          description: Email address.
        phone:
          type: string
          description: Phone number. Maximum 128 characters. No validation done, other
            than length.
        otherInfo:
          type: string
          description: Other miscellaneous information. Maximum 2048 characters.
        themeId:
          type: string
          description: Template pages theme to use for all pages related to this OIDC
            application.
        description:
          type: string
          description: Description of this client.
        additionalProperties:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Additional properties associated with this client.
        ipFilterOp:
          type: string
          description: Operation of IP filter. Default is null, which means IP filter
            is disabled.
          enum:
          - allow
          - deny
        ipFilters:
          type: array
          description: List of IP filter.
          items:
            type: string
        consentType:
          type: string
          description: Type of consent used by this client.
          enum:
          - oidc
          - dpcm
        additionalConfig:
          "$ref": "#/components/schemas/AdditionalConfiguration"
    ClientList:
      type: object
      properties:
        count:
          type: integer
          description: Maximum result requested
          format: int32
          readOnly: true
        limit:
          type: integer
          description: Number of result per page
          format: int32
          readOnly: true
        page:
          type: integer
          description: Requested page number
          format: int32
          readOnly: true
        total:
          type: integer
          description: Total result returned in this request
          format: int32
          readOnly: true
        clients:
          type: array
          description: List of result that match the query
          items:
            "$ref": "#/components/schemas/Client_0"
    PatchClient:
      type: object
      properties:
        birthRightAccess:
          type: boolean
          description: Birth right access. Default is false.
        policyId:
          type: string
          description: Access policy ID associated with this client.
    UpdateBirthRightAccess:
      type: object
      properties:
        birthRightAccess:
          type: boolean
          description: Birth right access. Default is false.
    PatchEntry:
      required:
      - op
      - path
      type: object
      properties:
        op:
          type: string
          description: The operation to be performed.
          enum:
          - test
          - remove
          - add
          - replace
          - move
          - copy
          - retrieve
        from:
          type: string
          description: The path to copy or move from.
        path:
          type: string
          description: The path to perform the specified operation on.
        value:
          type: object
          properties: {}
          description: The value to add, replace, or verify. For retrieve operation,
            the value will be put here.
        result:
          type: string
          description: The result of the operation.
          enum:
          - success
          - failure.
        error:
          type: string
          description: A requester locale specific descriptive message.
        location:
          type: string
          description: Location of a successful add operation, when applicable.
    PatchResponse:
      type: object
      properties:
        messageId:
          type: string
          description: The message key identifier.
          readOnly: true
        messageDescription:
          type: string
          description: A requester locale specific descriptive message.
          readOnly: true
        results:
          type: array
          description: The individual results of the PATCH operation.
          items:
            "$ref": "#/components/schemas/PatchEntry"
    ClientPatchEntry:
      required:
      - op
      - path
      type: object
      properties:
        op:
          type: string
          description: The operation that is to be performed.
          example: remove
          enum:
          - add
          - remove
          - replace
          - retrieve
        path:
          type: string
          description: "The path on which to perform the operation. \n To \"add\"
            a client, set the path as /. \n To \"replace\", \"remove\", or \"retrieve\"
            a client set path as /{Client Identifier}."
          example: "/52a3374e-604b-4d8a-bedb-a51ceb96389b"
        value:
          type: boolean
          description: The client JSON payload to be added or replaced. Required for
            the "add" or "replace" operation.
    USCConsent:
      type: object
      properties:
        id:
          type: string
          description: The consent identifier.
          readOnly: true
          example: 52a3374e-604b-4d8a-bedb-a51ceb96389b
        appId:
          type: string
          description: The application ID. For API client grants, this property is
            null.
          readOnly: true
          example: '2919856898870752436'
        category:
          type: string
          description: The category of the OIDC client.
          readOnly: true
          enum:
          - application
          - api_client
          - ibm_verify
          - default
        clientId:
          type: string
          description: The API client's or OIDC application's client ID.
          readOnly: true
          example: 6f1bdd22-eb94-456d-b2c3-ae97181053a3
        clientName:
          type: string
          description: The OIDC application name or API client name.
          readOnly: true
        name:
          type: string
          description: The name of the user. For API client grants, this value is
            null.
          readOnly: true
        preferred_username:
          type: string
          description: The preferred user name. For API client grants, this value
            is null.
          readOnly: true
        realmName:
          type: string
          description: The realm name.
          readOnly: true
          example: cloudIdentityRealm
        username:
          type: string
          description: The user's unique ID. For API client grants, this value is
            the client ID.
          readOnly: true
        entitlements:
          uniqueItems: true
          type: array
          description: The list of entitlements that were consented.
          items:
            type: string
        entitlementLabels:
          uniqueItems: true
          type: array
          description: The list of entitlement labels that were consented.
          items:
            type: string
        scopes:
          uniqueItems: true
          type: array
          description: The list of scopes that were consented.
          items:
            type: string
        issuedOn:
          type: string
          description: The time when the consent was issued.
          readOnly: true
          example: '2018-06-20T02:04:58Z'
        lastUsed:
          type: string
          description: The time when the consent was last used.
          readOnly: true
          example: '2018-06-20T02:05:58Z'
        readOnly:
          type: boolean
          description: Flag to indicate the consent is only viewable or can be modified.
          readOnly: true
    USCConsentList:
      type: object
      properties:
        count:
          type: integer
          description: Maximum result requested
          format: int32
          readOnly: true
        limit:
          type: integer
          description: Number of result per page
          format: int32
          readOnly: true
        page:
          type: integer
          description: Requested page number
          format: int32
          readOnly: true
        total:
          type: integer
          description: Total result returned in this request
          format: int32
          readOnly: true
        consents:
          type: array
          description: List of result that match the query
          items:
            "$ref": "#/components/schemas/USCConsent"
    ConsentPatchEntry:
      required:
      - op
      - path
      type: object
      properties:
        op:
          type: string
          description: The operation that is to be performed.
          example: remove
          enum:
          - remove
        path:
          type: string
          description: "The path on which to perform the operation. \n To \"remove\"
            a consent, the path is /{Consent Identifier}. \n To \"remove\" a scope
            from a consent, the path is /{Consent Identifier}/scopes/{Scope}. \n To
            \"remove\" an entitlement from a consent, the path is /{Consent Identifier}/entitlements/{Entitlement}."
          example: "/52a3374e-604b-4d8a-bedb-a51ceb96389b/scopes/openid"
    SummaryData:
      type: object
      properties:
        id:
          type: string
          description: Summary data identifier. For clients, it is the client ID.
            For countries, it is the country code. For IP addresses, it is the IP
            address itself. For users, it is the unique user identifier.
          readOnly: true
        label:
          type: string
          description: The client name. Applicable for clients summary only.
          readOnly: true
        preferred_username:
          type: string
          description: The preferred user name. Applicable for users summary only.
          readOnly: true
        realmName:
          type: string
          description: The realm name. Applicable for users summary only.
          readOnly: true
          example: cloudIdentityRealm
        count:
          type: integer
          description: Summary data count.
          format: int64
          readOnly: true
    USCConsentSummary:
      type: object
      properties:
        clients:
          type: array
          description: Distinct clients in consent data.
          items:
            "$ref": "#/components/schemas/SummaryData"
        entitlements:
          type: array
          description: Distinct entitlements in consent data.
          items:
            "$ref": "#/components/schemas/SummaryData"
        scopes:
          type: array
          description: Distinct entitlements in consent data.
          items:
            "$ref": "#/components/schemas/SummaryData"
        users:
          type: array
          description: Distinct users in consent data.
          items:
            "$ref": "#/components/schemas/SummaryData"
        total_unique:
          type: integer
          description: Total unique clients or users or entitlements in consent data.
          format: int64
          readOnly: true
    GenerateOidcDeviceSecret:
      type: object
      properties:
        deviceSecretAlg:
          type: string
          description: Device secret JWE key encryption algorithm. Default algorithm
            is ECDH-ES.
        deviceSecretEnc:
          type: string
          description: Device secret JWE content encryption algorithm. Default algorithm
            is A128GCM.
    Definition:
      required:
      - accessTokenLength
      - accessTokenLifetime
      - enforceSingleAccessTokenPerGrant
      - grantTypes
      - name
      - tokenCharSet
      type: object
      properties:
        id:
          type: string
          description: Definition ID. This value will be auto-generated during creation.
          readOnly: true
        name:
          type: string
          description: Display name. Maximum 256 characters.
        description:
          type: string
          description: Description of this definition. Maximum 1024 characters.
        dateCreated:
          type: integer
          description: Creation timestamp.
          format: int64
          readOnly: true
        dateModified:
          type: integer
          description: Last modified timestamp.
          format: int64
          readOnly: true
        preMappingRuleId:
          type: string
          description: ID of the pre-token mapping rule. Leave this empty to use default
            mapping rule.
        postMappingRuleId:
          type: string
          description: ID of the post-token mapping rule. Leave this empty to use
            default mapping rule.
        grantTypes:
          type: array
          description: 'List of allowed grant types: authorization_code, implicit,
            password, refresh_token, client_credentials'
          items:
            type: string
        tcmBehavior:
          type: string
          description: Trusted client management behavior.
          example: never_prompt
          enum:
          - never_prompt
          - always_prompt
          - prompt_once_and_remember
        tokenCharSet:
          type: string
          description: Token character set. This affects authorization code, access
            token, and refresh token. Does not affect JWTs (i.e. ID token). Only alphanumeric
            characters allowed. Case-sensitive.
        accessTokenLifetime:
          type: integer
          description: Access token lifetime, in seconds. Maximum 2147483647, minimum
            1.
          format: int32
        accessTokenLength:
          type: integer
          description: Access token length. Maximum 200, minimum 6.
          format: int32
        enforceSingleAccessTokenPerGrant:
          type: boolean
          description: Enforce single access token per grant.
        authorizationCodeLifetime:
          type: integer
          description: Authorization code lifetime, in seconds. Maximum 2147483647,
            minimum 1. Required only if authorization_code grant type is enabled.
          format: int32
        authorizationCodeLength:
          type: integer
          description: Authorization code length. Maximum 200, minimum 6. Required
            only if authorization_code grant type is enabled.
          format: int32
        maxAuthorizationGrantLifetime:
          type: integer
          description: Authorization grant lifetime, in seconds. Maximum 2147483647,
            minimum 1. Required only when refresh_token grant type is enabled.
          format: int32
        refreshTokenLifetime:
          type: integer
          description: Refresh token lifetime, in seconds. Maximum 2147483647, minimum
            1. Can be specified when refresh_token grant type is enabled.
          format: int32
        refreshTokenLength:
          type: integer
          description: Refresh token length. Maximum 200, minimum 6. Required only
            when refresh_token grant type is enabled.
          format: int32
        refreshTokenFaultToleranceLifetime:
          type: integer
          description: Refresh token fault tolerance lifetime, in seconds. Maximum
            86400, minimum 300.
          format: int32
        refreshTokenFaultToleranceOption:
          type: string
          description: Refresh token fault tolerance option.
          example: fault_tolerance_lifetime
          enum:
          - fault_tolerance_lifetime
          - revoke
        enableMultipleRefreshTokensForFaultTolerance:
          type: boolean
          description: Allow multiple refresh tokens for fault tolerance. Required
            only when refresh_token grant type is enabled.
        pinPolicyEnabled:
          type: boolean
          description: Enable PIN policy. Required only when refresh_token grant type
            is enabled.
        pinLength:
          type: integer
          description: PIN length. Maximum 12, minimum 3. Required only when refresh_token
            grant type is enabled.
          format: int32
        deviceFlowPollingInterval:
          type: integer
          description: Device-flow polling interval in seconds. Maximum 3600, minimum
            2. Default is 5 seconds. Available only when device-flow grant type is
            enabled.
          format: int32
        deviceFlowCodeLifetime:
          type: integer
          description: Device-flow device code and user code lifetime, in seconds.
            Maximum 86400, minimum 1. Default is 300 seconds. Available only when
            device-flow grant type is enabled.
          format: int32
        deviceFlowUserCodeLength:
          type: integer
          description: Device-flow user code length. Maximum 200, minimum 6. Default
            is 6. Available only when device-flow grant type is enabled.
          format: int32
        deviceFlowUserCodeCharset:
          type: string
          description: Device-flow user code character set. Only alphanumeric characters
            allowed. Case-sensitive. Available only when device-flow grant type is
            enabled.
        oidcEnabled:
          type: boolean
          description: Enable OpenID Connect. Default to false if not provided.
        issuerIdentifier:
          type: string
          description: Issuer of this token. Must be in a valid URI format. Required
            only when OpenID Connect is enabled for this definition. When left empty
            and OpenID Connect is enabled, this defaults to https://{tenant_hostname}/oidc/endpoint/{definition_id}
        idTokenLifetime:
          type: integer
          description: ID token lifetime, in seconds. Maximum 2147483647, minimum
            1. Required only when OpenID Connect is enabled for this definition.
          format: int32
        oidcKeys:
          "$ref": "#/components/schemas/DefinitionKeys"
        defaultClaims:
          type: array
          description: Default claims that will be output for scope openid.
          items:
            type: string
        sendExtendedAttributes:
          type: boolean
          description: Set extended attributes in 'ext'.
        jwtValidationTimeSkewInSeconds:
          type: integer
          description: Time skew for JWT 'iat', 'exp' and 'nbf' validation in seconds.
            Maximum 300, minimum 0. Default is 0.
          format: int32
        excludeAlgInJwks:
          type: boolean
          description: Setting to exclude 'alg' in JWKS.
        extraMetadataAttributes:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Top level attributes for well-known endpoint to override the
            existing attribute.
        parDefaultLifetime:
          type: integer
          description: Pushed authorization requests default lifetime.
          format: int32
        parUriPrefix:
          type: string
          description: Pushed authorization requests uri prefix.
        excludeJWKSCertificateChain:
          type: boolean
          description: Setting to exclude 'x5c' in JWKS.
        excludeJWKSCertificateThumbprint:
          type: boolean
          description: Setting to exclude 'x5t' and 'x5t#S256' in JWKS.
        mtlsEndpointBaseURI:
          type: string
          description: Base URL for MTLS endpoints. This must include the protocol
            scheme like https.
        tokenExchangeIdTokenToleranceWindow:
          type: integer
          description: Maximum elapsed seconds since the expiry of an ID Token that
            it can still be used in token exchange scenario. If not set, no validation
            is done on the ID token expiry. Maximum 86400, minimum 5.
          format: int32
        deviceSecretJWKS:
          type: array
          description: JWKS document containing private keys to issue and verify device
            secret JWE.
          items:
            type: object
            additionalProperties:
              type: object
              properties: {}
        deviceSecretEncKey:
          type: string
          description: Key identifier of JWK private key used to issue device secret
            JWE.
        deviceSecretAlg:
          type: string
          description: Device secret JWE key encryption algorithm.
        deviceSecretEnc:
          type: string
          description: Device secret JWE content encryption algorithm. When device
            secret JWE key encryption algorithm is specified, the default for JWE
            content encryption algorithm is A128GCM.
        exchangeForSSOSessionOption:
          type: string
          description: Options to exchange token for SSO session. When this is not
            set, token exchange for SSO session will be allowed.
          example: allow
          enum:
          - deny
          - allow
          - allow_and_revoke
    DefinitionKeys:
      type: object
      properties:
        rsaSignKey:
          type: string
          description: RSA signing key label.
        rsaDecryptKey:
          type: string
          description: RSA decryption key label.
    DefinitionList:
      type: object
      properties:
        count:
          type: integer
          description: Maximum result requested
          format: int32
          readOnly: true
        limit:
          type: integer
          description: Number of result per page
          format: int32
          readOnly: true
        page:
          type: integer
          description: Requested page number
          format: int32
          readOnly: true
        total:
          type: integer
          description: Total result returned in this request
          format: int32
          readOnly: true
        definitions:
          type: array
          description: List of result that match the query
          items:
            "$ref": "#/components/schemas/Definition"
    CreateOidcDefinition:
      required:
      - accessTokenLength
      - accessTokenLifetime
      - enforceSingleAccessTokenPerGrant
      - grantTypes
      - name
      - tokenCharSet
      type: object
      properties:
        name:
          type: string
          description: Display name. Maximum 256 characters.
        description:
          type: string
          description: Description of this definition. Maximum 1024 characters.
        preMappingRuleId:
          type: string
          description: ID of the pre-token mapping rule. Leave this empty to use default
            mapping rule.
        postMappingRuleId:
          type: string
          description: ID of the post-token mapping rule. Leave this empty to use
            default mapping rule.
        grantTypes:
          type: array
          description: 'List of allowed grant types: authorization_code, implicit,
            password, refresh_token, client_credentials'
          items:
            type: string
        tcmBehavior:
          type: string
          description: Trusted client management behavior.
          example: never_prompt
          enum:
          - never_prompt
          - always_prompt
          - prompt_once_and_remember
        tokenCharSet:
          type: string
          description: Token character set. This affects authorization code, access
            token, and refresh token. Does not affect JWTs (i.e. ID token). Only alphanumeric
            characters allowed. Case-sensitive.
        accessTokenLifetime:
          type: integer
          description: Access token lifetime, in seconds. Maximum 2147483647, minimum
            1.
          format: int32
        accessTokenLength:
          type: integer
          description: Access token length. Maximum 200, minimum 6.
          format: int32
        enforceSingleAccessTokenPerGrant:
          type: boolean
          description: Enforce single access token per grant.
        authorizationCodeLifetime:
          type: integer
          description: Authorization code lifetime, in seconds. Maximum 2147483647,
            minimum 1. Required only if authorization_code grant type is enabled.
          format: int32
        authorizationCodeLength:
          type: integer
          description: Authorization code length. Maximum 200, minimum 6. Required
            only if authorization_code grant type is enabled.
          format: int32
        maxAuthorizationGrantLifetime:
          type: integer
          description: Authorization grant lifetime, in seconds. Maximum 2147483647,
            minimum 1. Required only when refresh_token grant type is enabled.
          format: int32
        refreshTokenLifetime:
          type: integer
          description: Refresh token lifetime, in seconds. Maximum 2147483647, minimum
            1. Can be specified when refresh_token grant type is enabled.
          format: int32
        refreshTokenLength:
          type: integer
          description: Refresh token length. Maximum 200, minimum 6. Required only
            when refresh_token grant type is enabled.
          format: int32
        refreshTokenFaultToleranceLifetime:
          type: integer
          description: Refresh token fault tolerance lifetime, in seconds. Maximum
            86400, minimum 300.
          format: int32
        refreshTokenFaultToleranceOption:
          type: string
          description: Refresh token fault tolerance option.
          example: fault_tolerance_lifetime
          enum:
          - fault_tolerance_lifetime
          - revoke
        enableMultipleRefreshTokensForFaultTolerance:
          type: boolean
          description: Allow multiple refresh tokens for fault tolerance. Required
            only when refresh_token grant type is enabled.
        pinPolicyEnabled:
          type: boolean
          description: Enable PIN policy. Required only when refresh_token grant type
            is enabled.
        pinLength:
          type: integer
          description: PIN length. Maximum 12, minimum 3. Required only when refresh_token
            grant type is enabled.
          format: int32
        deviceFlowPollingInterval:
          type: integer
          description: Device-flow polling interval in seconds. Maximum 3600, minimum
            2. Default is 5 seconds. Available only when device-flow grant type is
            enabled.
          format: int32
        deviceFlowCodeLifetime:
          type: integer
          description: Device-flow device code and user code lifetime, in seconds.
            Maximum 86400, minimum 1. Default is 300 seconds. Available only when
            device-flow grant type is enabled.
          format: int32
        deviceFlowUserCodeLength:
          type: integer
          description: Device-flow user code length. Maximum 200, minimum 6. Default
            is 6. Available only when device-flow grant type is enabled.
          format: int32
        deviceFlowUserCodeCharset:
          type: string
          description: Device-flow user code character set. Only alphanumeric characters
            allowed. Case-sensitive. Available only when device-flow grant type is
            enabled.
        oidcEnabled:
          type: boolean
          description: Enable OpenID Connect. Default to false if not provided.
        issuerIdentifier:
          type: string
          description: Issuer of this token. Must be in a valid URI format. Required
            only when OpenID Connect is enabled for this definition. When left empty
            and OpenID Connect is enabled, this defaults to https://{tenant_hostname}/oidc/endpoint/{definition_id}
        idTokenLifetime:
          type: integer
          description: ID token lifetime, in seconds. Maximum 2147483647, minimum
            1. Required only when OpenID Connect is enabled for this definition.
          format: int32
        oidcKeys:
          "$ref": "#/components/schemas/DefinitionKeys"
        defaultClaims:
          type: array
          description: Default claims that will be output for scope openid.
          items:
            type: string
        sendExtendedAttributes:
          type: boolean
          description: Set extended attributes in 'ext'.
        jwtValidationTimeSkewInSeconds:
          type: integer
          description: Time skew for JWT 'iat', 'exp' and 'nbf' validation in seconds.
            Maximum 300, minimum 0. Default is 0.
          format: int32
        excludeAlgInJwks:
          type: boolean
          description: Setting to exclude 'alg' in JWKS. New definition will always
            have this set to true.
        extraMetadataAttributes:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Top level attributes for well-known endpoint to override the
            existing attribute.
        parDefaultLifetime:
          type: integer
          description: Pushed authorization requests default lifetime.
          format: int32
        parUriPrefix:
          type: string
          description: Pushed authorization requests uri prefix.
        excludeJWKSCertificateChain:
          type: boolean
          description: Setting to exclude 'x5c' in JWKS.
        excludeJWKSCertificateThumbprint:
          type: boolean
          description: Setting to exclude 'x5t' and 'x5t#S256' in JWKS.
        mtlsEndpointBaseURI:
          type: string
          description: Base URL for MTLS endpoints. This must include the protocol
            scheme like https.
        tokenExchangeIdTokenToleranceWindow:
          type: integer
          description: Maximum elapsed seconds since the creation of an ID Token that
            it can still be used in token exchange scenario.
          format: int32
        deviceSecretJWKS:
          type: array
          description: JWKS document containing private keys to issue and verify device
            secret JWE.
          items:
            type: object
            additionalProperties:
              type: object
              properties: {}
        deviceSecretEncKey:
          type: string
          description: Key identifier of JWK private key used to issue device secret
            JWE.
        deviceSecretAlg:
          type: string
          description: Device secret JWE key encryption algorithm.
        deviceSecretEnc:
          type: string
          description: Device secret JWE content encryption algorithm. When device
            secret JWE key encryption algorithm is specified, the default for JWE
            content encryption algorithm is A128GCM.
        exchangeForSSOSessionOption:
          type: string
          description: Options to exchange token for SSO session. When this is not
            set, token exchange for SSO session will be allowed.
          example: allow
          enum:
          - deny
          - allow
          - allow_and_revoke
    UpdateOidcDefinition:
      required:
      - accessTokenLength
      - accessTokenLifetime
      - enforceSingleAccessTokenPerGrant
      - grantTypes
      - name
      - tokenCharSet
      type: object
      properties:
        name:
          type: string
          description: Display name. Maximum 256 characters.
        description:
          type: string
          description: Description of this definition. Maximum 1024 characters.
        preMappingRuleId:
          type: string
          description: ID of the pre-token mapping rule. Leave this empty to use default
            mapping rule.
        postMappingRuleId:
          type: string
          description: ID of the post-token mapping rule. Leave this empty to use
            default mapping rule.
        grantTypes:
          type: array
          description: 'List of allowed grant types: authorization_code, implicit,
            password, refresh_token, client_credentials'
          items:
            type: string
        tcmBehavior:
          type: string
          description: Trusted client management behavior.
          example: never_prompt
          enum:
          - never_prompt
          - always_prompt
          - prompt_once_and_remember
        tokenCharSet:
          type: string
          description: Token character set. This affects authorization code, access
            token, and refresh token. Does not affect JWTs (i.e. ID token). Only alphanumeric
            characters allowed. Case-sensitive.
        accessTokenLifetime:
          type: integer
          description: Access token lifetime, in seconds. Maximum 2147483647, minimum
            1.
          format: int32
        accessTokenLength:
          type: integer
          description: Access token length. Maximum 200, minimum 6.
          format: int32
        enforceSingleAccessTokenPerGrant:
          type: boolean
          description: Enforce single access token per grant.
        authorizationCodeLifetime:
          type: integer
          description: Authorization code lifetime, in seconds. Maximum 2147483647,
            minimum 1. Required only if authorization_code grant type is enabled.
          format: int32
        authorizationCodeLength:
          type: integer
          description: Authorization code length. Maximum 200, minimum 6. Required
            only if authorization_code grant type is enabled.
          format: int32
        maxAuthorizationGrantLifetime:
          type: integer
          description: Authorization grant lifetime, in seconds. Maximum 2147483647,
            minimum 1. Required only when refresh_token grant type is enabled.
          format: int32
        refreshTokenLifetime:
          type: integer
          description: Refresh token lifetime, in seconds. Maximum 2147483647, minimum
            1. Can be specified when refresh_token grant type is enabled.
          format: int32
        refreshTokenLength:
          type: integer
          description: Refresh token length. Maximum 200, minimum 6. Required only
            when refresh_token grant type is enabled.
          format: int32
        refreshTokenFaultToleranceLifetime:
          type: integer
          description: Refresh token fault tolerance lifetime, in seconds. Maximum
            86400, minimum 300.
          format: int32
        refreshTokenFaultToleranceOption:
          type: string
          description: Refresh token fault tolerance option.
          example: fault_tolerance_lifetime
          enum:
          - fault_tolerance_lifetime
          - revoke
        enableMultipleRefreshTokensForFaultTolerance:
          type: boolean
          description: Allow multiple refresh tokens for fault tolerance. Required
            only when refresh_token grant type is enabled.
        pinPolicyEnabled:
          type: boolean
          description: Enable PIN policy. Required only when refresh_token grant type
            is enabled.
        pinLength:
          type: integer
          description: PIN length. Maximum 12, minimum 3. Required only when refresh_token
            grant type is enabled.
          format: int32
        deviceFlowPollingInterval:
          type: integer
          description: Device-flow polling interval in seconds. Maximum 3600, minimum
            2. Default is 5 seconds. Available only when device-flow grant type is
            enabled.
          format: int32
        deviceFlowCodeLifetime:
          type: integer
          description: Device-flow device code and user code lifetime, in seconds.
            Maximum 86400, minimum 1. Default is 300 seconds. Available only when
            device-flow grant type is enabled.
          format: int32
        deviceFlowUserCodeLength:
          type: integer
          description: Device-flow user code length. Maximum 200, minimum 6. Default
            is 6. Available only when device-flow grant type is enabled.
          format: int32
        deviceFlowUserCodeCharset:
          type: string
          description: Device-flow user code character set. Only alphanumeric characters
            allowed. Case-sensitive. Available only when device-flow grant type is
            enabled.
        oidcEnabled:
          type: boolean
          description: Enable OpenID Connect. Default to false if not provided.
        issuerIdentifier:
          type: string
          description: Issuer of this token. Must be in a valid URI format. Required
            only when OpenID Connect is enabled for this definition. When left empty
            and OpenID Connect is enabled, this defaults to https://{tenant_hostname}/oidc/endpoint/{definition_id}
        idTokenLifetime:
          type: integer
          description: ID token lifetime, in seconds. Maximum 2147483647, minimum
            1. Required only when OpenID Connect is enabled for this definition.
          format: int32
        oidcKeys:
          "$ref": "#/components/schemas/DefinitionKeys"
        defaultClaims:
          type: array
          description: Default claims that will be output for scope openid.
          items:
            type: string
        sendExtendedAttributes:
          type: boolean
          description: Set extended attributes in 'ext'.
        jwtValidationTimeSkewInSeconds:
          type: integer
          description: Time skew for JWT 'iat', 'exp' and 'nbf' validation in seconds.
            Maximum 300, minimum 0. Default is 0.
          format: int32
        excludeAlgInJwks:
          type: boolean
          description: Setting to exclude 'alg' in JWKS. When not specified, it will
            take in previous value.
        extraMetadataAttributes:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Top level attributes for well-known endpoint to override the
            existing attribute.
        parDefaultLifetime:
          type: integer
          description: Pushed authorization requests default lifetime.
          format: int32
        parUriPrefix:
          type: string
          description: Pushed authorization requests uri prefix.
        excludeJWKSCertificateChain:
          type: boolean
          description: Setting to exclude 'x5c' in JWKS.
        excludeJWKSCertificateThumbprint:
          type: boolean
          description: Setting to exclude 'x5t' and 'x5t#S256' in JWKS.
        mtlsEndpointBaseURI:
          type: string
          description: Base URL for MTLS endpoints. This must include the protocol
            scheme like https.
        tokenExchangeIdTokenToleranceWindow:
          type: integer
          description: Maximum elapsed seconds since the creation of an ID Token that
            it can still be used in token exchange scenario.
          format: int32
        deviceSecretJWKS:
          type: array
          description: JWKS document containing private keys to issue and verify device
            secret JWE.
          items:
            type: object
            additionalProperties:
              type: object
              properties: {}
        deviceSecretEncKey:
          type: string
          description: Key identifier of JWK private key used to issue device secret
            JWE.
        deviceSecretAlg:
          type: string
          description: Device secret JWE key encryption algorithm.
        deviceSecretEnc:
          type: string
          description: Device secret JWE content encryption algorithm. When device
            secret JWE key encryption algorithm is specified, the default for JWE
            content encryption algorithm is A128GCM.
        exchangeForSSOSessionOption:
          type: string
          description: Options to exchange token for SSO session. When this is not
            set, token exchange for SSO session will be allowed.
          example: allow
          enum:
          - deny
          - allow
          - allow_and_revoke
    UpdateOidcDynClientProfile:
      required:
      - grant_types
      type: object
      properties:
        grant_types:
          type: array
          description: 'List of default grant types. Valid values are: authorization_code,
            implicit, password, urn:ietf:params:oauth:grant-type:device_code, urn:ietf:params:oauth:grant-type:jwt-bearer
            and refresh_token.'
          items:
            type: string
        id_token_claims:
          type: array
          description: List of default claims for ID token and user info.
          items:
            type: string
        token_claims:
          type: array
          description: List of default claims for introspection and JWT access token.
          items:
            type: string
        access_token_type:
          type: string
          description: Type of access token to be generated. Default is 'default'.
          example: default
          enum:
          - default
          - jwt
        id_token_signed_response_alg:
          type: string
          description: ID token signing algorithm. Default is 'RS256'. When accessTokenType
            is jwt, asymmetric algorithm should be set as default.
        consent_action:
          type: string
          description: Trusted client management behavior. Default is 'always_prompt'.
          example: never_prompt
          enum:
          - never_prompt
          - always_prompt
        access_token_lifetime:
          "$ref": "#/components/schemas/Number"
        refresh_token_lifetime:
          "$ref": "#/components/schemas/Number"
        enforce_pkce:
          type: boolean
          description: Enforce PKCE verification. If not provided, the value will
            be set to true.
        all_users_entitled:
          type: boolean
          description: Whether all users are entitled to use this client. If not provided,
            the value will be set to false.
        allow_custom_client_creds:
          type: boolean
          description: Whether custom client credentials are allowed. If not provided,
            the value will be set to false.
        req_allowed_signing_algs:
          type: array
          description: List of allowed signing algorithms for the signed request JWT.
          items:
            type: string
        request_object_require_exp:
          type: boolean
          description: Whether exp is required in the request object.
        request_object_max_exp_from_nbf:
          "$ref": "#/components/schemas/Number"
        legacy_post_response_code:
          type: boolean
          description: When legacy POST response code is set to true, it will return
            200 on POST operation. Otherwise as per specification it should be 201.
    DynamicClientProfile:
      required:
      - grant_types
      type: object
      properties:
        grant_types:
          type: array
          description: 'List of default grant types. Valid values are: authorization_code,
            implicit, password, urn:ietf:params:oauth:grant-type:device_code, urn:ietf:params:oauth:grant-type:jwt-bearer
            and refresh_token.'
          items:
            type: string
        id_token_claims:
          type: array
          description: List of default claims for ID token and user info.
          items:
            type: string
        token_claims:
          type: array
          description: List of default claims for introspection and JWT access token.
          items:
            type: string
        access_token_type:
          type: string
          description: Type of access token to be generated. Default is 'default'.
          example: default
          enum:
          - default
          - jwt
        id_token_signed_response_alg:
          type: string
          description: ID token signing algorithm. Default is 'RS256'. When accessTokenType
            is jwt, asymmetric algorithm should be set as default.
        consent_action:
          type: string
          description: Trusted client management behavior. Default is 'always_prompt'.
          example: never_prompt
          enum:
          - never_prompt
          - always_prompt
        access_token_lifetime:
          "$ref": "#/components/schemas/Number"
        refresh_token_lifetime:
          "$ref": "#/components/schemas/Number"
        enforce_pkce:
          type: boolean
          description: Enforce PKCE verification. If not provided, the value will
            be set to true.
        all_users_entitled:
          type: boolean
          description: Whether all users are entitled to use this client. If not provided,
            the value will be set to false.
        allow_custom_client_creds:
          type: boolean
          description: Whether custom client credentials are allowed. If not provided,
            the value will be set to false.
        req_allowed_signing_algs:
          type: array
          description: List of allowed signing algorithms for the signed request JWT.
          items:
            type: string
        request_object_require_exp:
          type: boolean
          description: Whether exp is required in the request object.
        request_object_max_exp_from_nbf:
          "$ref": "#/components/schemas/Number"
        legacy_post_response_code:
          type: boolean
          description: When legacy POST response code is set to true, it will return
            200 on POST operation. Otherwise as per specification it should be 201.
    UpdateOidcFederation:
      required:
      - idTokenLifetime
      - issuerHostname
      type: object
      properties:
        issuerHostname:
          type: string
          description: Host name used for the JWT issuer. It must be the tenant host
            name or one of the vanity host names. The full issuer string will be https://{issuerHostname}/oidc/endpoint/default
        idTokenLifetime:
          "$ref": "#/components/schemas/Number"
        sendExtendedAttributes:
          type: boolean
          description: Add extended attributes to the 'ext' claim in ID token or user
            info.
        jwtValidationTimeSkewInSeconds:
          type: integer
          description: Time skew for JWT 'iat', 'exp' and 'nbf' validation in seconds.
            Maximum 300, minimum 0. Default is 0.
          format: int32
        deviceFlowPollingInterval:
          "$ref": "#/components/schemas/Number"
        deviceFlowCodeLifetime:
          "$ref": "#/components/schemas/Number"
        extraMetadataAttributes:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Top level attributes for well-known endpoint to override the
            existing attribute.
        excludeJWKSCertificateChain:
          type: boolean
          description: Setting to exclude 'x5c' in JWKS.
        excludeJWKSCertificateThumbprint:
          type: boolean
          description: Setting to exclude 'x5t' and 'x5t#S256' in JWKS.
        mtlsEndpointBaseURI:
          type: string
          description: Base URL for MTLS endpoints. This must include the protocol
            scheme like https.
        defaultSigningKey:
          type: string
          description: Default signing key for JWT.
        defaultEncryptionKey:
          type: string
          description: Default encryption key for JWT.
        refreshTokenFaultToleranceLifetime:
          "$ref": "#/components/schemas/Number"
        refreshTokenFaultToleranceOption:
          type: string
          description: Refresh token fault tolerance option.
          example: fault_tolerance_lifetime
          enum:
          - fault_tolerance_lifetime
          - revoke
        tokenExchangeIdTokenToleranceWindow:
          "$ref": "#/components/schemas/Number"
        exchangeForSSOSessionOption:
          type: string
          description: Options to exchange token for SSO session. When this is not
            set, token exchange for SSO session will be allowed.
          example: allow
          enum:
          - deny
          - allow
          - allow_and_revoke
    FederationSettings:
      required:
      - idTokenLifetime
      - issuerHostname
      type: object
      properties:
        issuerHostname:
          type: string
          description: Issuer of this token. Must be in a valid URI format. Required
            only when OpenID Connect is enabled for this definition. When left empty
            and OpenID Connect is enabled, this defaults to https://{tenant_hostname}/oidc/endpoint/{definition_id}
        idTokenLifetime:
          type: integer
          description: ID token lifetime, in seconds. Maximum 2147483647, minimum
            1.
          format: int32
        jwtValidationTimeSkewInSeconds:
          type: integer
          description: Time skew for JWT 'iat', 'exp' and 'nbf' validation in seconds.
            Maximum 300, minimum 0. Default is 0.
          format: int32
        sendExtendedAttributes:
          type: boolean
          description: Add extended attributes to the 'ext' claim in ID token or user
            info.
        deviceFlowPollingInterval:
          type: integer
          description: Device-flow polling interval in seconds. Maximum 3600, minimum
            2.
          format: int32
        deviceFlowCodeLifetime:
          type: integer
          description: Device-flow device code and user code lifetime, in seconds.
            Maximum 86400, minimum 1.
          format: int32
        extraMetadataAttributes:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Top level attributes for well-known endpoint to override the
            existing attribute.
        excludeJWKSCertificateChain:
          type: boolean
          description: Setting to exclude 'x5c' in JWKS.
        excludeJWKSCertificateThumbprint:
          type: boolean
          description: Setting to exclude 'x5t' and 'x5t#S256' in JWKS.
        mtlsEndpointBaseURI:
          type: string
          description: Base URL for MTLS endpoints. This must include the protocol
            scheme like https.
        defaultSigningKey:
          type: string
          description: Default signing key.
        defaultEncryptionKey:
          type: string
          description: Default encryption key.
        refreshTokenFaultToleranceLifetime:
          type: integer
          description: Refresh token fault tolerance lifetime, in seconds. Maximum
            86400, minimum 300.
          format: int32
        refreshTokenFaultToleranceOption:
          type: string
          description: Refresh token fault tolerance option.
          example: fault_tolerance_lifetime
          enum:
          - fault_tolerance_lifetime
          - revoke
        tokenExchangeIdTokenToleranceWindow:
          type: integer
          description: Maximum elapsed seconds since the expiry of an ID Token that
            it can still be used in token exchange scenario. If not set, no validation
            is done on the ID token expiry. Maximum 86400, minimum 5.
          format: int32
        exchangeForSSOSessionOption:
          type: string
          description: Options to exchange token for SSO session. When this is not
            set, token exchange for SSO session will be allowed.
          example: allow
          enum:
          - deny
          - allow
          - allow_and_revoke
    GrantPatchEntry:
      required:
      - op
      - path
      type: object
      properties:
        op:
          type: string
          description: The operation to be performed.
          example: replace
          enum:
          - remove
          - replace
        path:
          type: string
          description: "The path to perform the operation on. \n For \"remove\" operations,
            the path is /{Grant Identifier} \n For \"replace\" operations, the path
            is /{Grant Identifier}/enabled"
          example: "/52a3374e-604b-4d8a-bedb-a51ceb96389b/enabled"
        value:
          type: boolean
          description: Replace the existing value with this value. Required for the
            "replace" operation only.
    GrantAttribute:
      type: object
      properties:
        value:
          type: string
        id:
          type: string
          description: The attribute id.
          readOnly: true
        name:
          type: string
          description: The attribute name.
          readOnly: true
        values:
          type: array
          description: The attribute values.
          items:
            type: string
        sensitive:
          type: boolean
          description: Specifies whether attribute values contain sensitive data.
          readOnly: true
        readOnly:
          type: boolean
          description: Specifies whether attribute values can be modified.
          readOnly: true
    USCGrant:
      type: object
      properties:
        id:
          type: string
          description: The grant identifier.
          readOnly: true
          example: 52a3374e-604b-4d8a-bedb-a51ceb96389b
        appId:
          type: string
          description: The application ID. For API client grants, this property is
            null.
          readOnly: true
          example: '2919856898870752436'
        clientId:
          type: string
          description: The API client's or OIDC application's client ID.
          readOnly: true
          example: 6f1bdd22-eb94-456d-b2c3-ae97181053a3
        clientName:
          type: string
          description: The OIDC application name or API client name.
          readOnly: true
        category:
          type: string
          description: The category of the OIDC client.
          readOnly: true
          enum:
          - application
          - api_client
          - ibm_verify
          - default
        name:
          type: string
          description: The name of the user. For API client grants, this value is
            null.
          readOnly: true
        username:
          type: string
          description: The user's unique ID. For API client grants, this value is
            the client ID.
          readOnly: true
        preferred_username:
          type: string
          description: The preferred user name. For API client grants, this value
            is null.
          readOnly: true
        realmName:
          type: string
          description: The realm name.
          readOnly: true
          example: cloudIdentityRealm
        originIP:
          type: string
          description: The origin IP address where this grant was created.
          readOnly: true
        location:
          type: array
          description: The location where this grant was created. The array contains
            in this sequence, the country, state, and city of the location.
          items:
            type: string
        countryCode:
          type: string
          description: The country code where this grant was created.
          readOnly: true
        tokens:
          uniqueItems: true
          type: array
          description: A list of token types that have been associated with the grant.
            The list can include tokens other than the currently active token types.
          items:
            type: string
        issuedOn:
          type: string
          description: The time when the grant was issued.
          readOnly: true
          example: '2018-06-20T02:04:58Z'
        lastUsed:
          type: string
          description: The time when the grant was last used.
          readOnly: true
          example: '2018-06-20T02:05:58Z'
        disabledOn:
          type: string
          description: The time when the grant was disabled.
          readOnly: true
          example: '2018-06-20T02:05:58Z'
        retainUntil:
          type: string
          description: The time when the grant will be deleted.
          readOnly: true
          example: '2018-06-20T02:05:58Z'
        enabled:
          type: boolean
          description: Specifies whether the grant is enabled.
          readOnly: true
        readOnly:
          type: boolean
          description: Flag to indicate the grant is only viewable or can be modified.
          readOnly: true
        attributes:
          type: array
          description: A list of attributes that are associated with the grant.
          items:
            "$ref": "#/components/schemas/GrantAttribute"
        scope:
          type: string
          description: Scope associated with the grant.
          readOnly: true
        sessionId:
          type: string
          description: Session Id associated with this grant.
          readOnly: true
        uaSessionId:
          type: string
          description: User-Agent session Id associated with this grant.
          readOnly: true
        getgrantGroupID:
          type: string
          description: Grant Group Id, an attribute that can be associated with multiple
            grants
          readOnly: true
        deviceName:
          type: string
          description: Device used to acquire this grant.
          readOnly: true
    USCGrantList:
      type: object
      properties:
        count:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
          readOnly: true
        grants:
          type: array
          items:
            "$ref": "#/components/schemas/USCGrant"
    USCGrantSummary:
      type: object
      properties:
        clients:
          type: array
          description: Distinct clients in grant data.
          items:
            "$ref": "#/components/schemas/SummaryData"
        countries:
          type: array
          description: Distinct countries in grant data.
          items:
            "$ref": "#/components/schemas/SummaryData"
        ipaddresses:
          type: array
          description: Distinct IP addresses in grant data.
          items:
            "$ref": "#/components/schemas/SummaryData"
        users:
          type: array
          description: Distinct users in grant data.
          items:
            "$ref": "#/components/schemas/SummaryData"
        total_unique:
          type: integer
          description: Total unique clients or countries or IP addresses or users
            in grant data.
          format: int64
          readOnly: true
    USCGrantV2:
      type: object
      properties:
        id:
          type: string
          description: The grant identifier.
          readOnly: true
          example: 52a3374e-604b-4d8a-bedb-a51ceb96389b
        enabled:
          type: boolean
          description: Specifies whether the grant is enabled.
          readOnly: true
        readOnly:
          type: boolean
          description: Flag to indicate the grant is only viewable or can be modified.
          readOnly: true
        appId:
          type: string
          description: The application ID. For API client or STS client grants, this
            property is null.
          readOnly: true
        clientId:
          type: string
          description: The client ID.
          readOnly: true
        clientName:
          type: string
          description: The client name.
          readOnly: true
        category:
          type: string
          description: The category of the OIDC client.
          readOnly: true
        subject:
          type: string
          description: The user's unique ID. When there is no user associated with
            the grant, this value is the client ID.
          readOnly: true
        name:
          type: string
          description: The name of the user. When there is no user associated with
            the grant, this value is null.
          readOnly: true
        preferred_username:
          type: string
          description: The preferred user name. When there is no user associated with
            the grant, this value is null.
          readOnly: true
        realmName:
          type: string
          description: The realm name.
          readOnly: true
          example: cloudIdentityRealm
        originIP:
          type: string
          description: The origin IP address where this grant was created.
          readOnly: true
        location:
          type: array
          description: The location where this grant was created. The array contains
            in this sequence, the country, state, and city of the location.
          items:
            type: string
        countryCode:
          type: string
          description: The country code where this grant was created.
          readOnly: true
        tokens:
          uniqueItems: true
          type: array
          description: A list of token types that have been associated with the grant.
            The list can include tokens other than the currently active token types.
          items:
            type: string
        scope:
          type: string
          description: Scope associated with the grant.
          readOnly: true
        issuedOn:
          type: string
          description: The time when the grant was issued.
          readOnly: true
          example: '2018-06-20T02:04:58Z'
        lastModified:
          type: string
          description: The time when the grant was last modified.
          readOnly: true
          example: '2018-06-20T02:05:58Z'
        disabledOn:
          type: string
          description: The time when the grant was disabled.
          readOnly: true
          example: '2018-06-20T02:05:58Z'
        retainUntil:
          type: string
          description: The time when the grant will be deleted.
          readOnly: true
          example: '2018-06-20T02:05:58Z'
        sessionId:
          type: string
          description: Session ID associated with this grant.
          readOnly: true
        uaSessionId:
          type: string
          description: User-agent session ID associated with this grant.
          readOnly: true
        groupID:
          type: string
          description: Grant group ID, an attribute that can be associated with multiple
            grants
          readOnly: true
        deviceName:
          type: string
          description: Device used to acquire this grant.
          readOnly: true
    USCGrantV2List:
      type: object
      properties:
        count:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
          readOnly: true
        grants:
          type: array
          items:
            "$ref": "#/components/schemas/USCGrantV2"
    STSModule:
      required:
      - condition
      - properties
      type: object
      properties:
        id:
          type: string
          description: Module ID. This is a predefined ID.
          readOnly: true
        description:
          type: string
          description: Short description.
        properties:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Module properties.
        condition:
          type: string
          description: Module condition.
    UpdateOidcSTSChain:
      required:
      - id
      - modules
      - name
      - requestedTokenTypes
      - subjectTokenTypes
      type: object
      properties:
        id:
          type: string
          description: STS Chain ID.
        name:
          type: string
          description: STS Chain name.
        description:
          type: string
          description: STS Chain description.
        subjectTokenTypes:
          type: array
          description: Allowed subject token types.
          items:
            type: string
        actorTokenTypes:
          type: array
          description: Allowed actor token types.
          items:
            type: string
        requestedTokenTypes:
          type: array
          description: Allowed requested token types.
          items:
            type: string
        modules:
          type: array
          description: Sequence of modules in the chain
          items:
            "$ref": "#/components/schemas/STSModule"
    STSChain:
      required:
      - modules
      - name
      - requestedTokenTypes
      - subjectTokenTypes
      type: object
      properties:
        id:
          type: string
          description: STS Chain ID.
        name:
          type: string
          description: STS Chain Name.
        description:
          type: string
          description: STS Chain description.
        subjectTokenTypes:
          type: array
          description: Allowed subject token types.
          items:
            type: string
        actorTokenTypes:
          type: array
          description: Allowed actor token types.
          items:
            type: string
        requestedTokenTypes:
          type: array
          description: Allowed requested token types.
          items:
            type: string
        modules:
          type: array
          description: Sequence of modules in the chain.
          items:
            "$ref": "#/components/schemas/STSModule"
    STSChainList:
      type: object
      properties:
        count:
          type: integer
          description: Maximum result requested
          format: int32
          readOnly: true
        limit:
          type: integer
          description: Number of result per page
          format: int32
          readOnly: true
        page:
          type: integer
          description: Requested page number
          format: int32
          readOnly: true
        total:
          type: integer
          description: Total result returned in this request
          format: int32
          readOnly: true
        stschains:
          type: array
          description: List of result that match the query
          items:
            "$ref": "#/components/schemas/STSChain"
    CreateOidcSTSChain:
      required:
      - modules
      - name
      - requestedTokenTypes
      - subjectTokenTypes
      type: object
      properties:
        id:
          type: string
          description: STS Chain ID.
        name:
          type: string
          description: STS Chain name.
        description:
          type: string
          description: STS Chain description.
        subjectTokenTypes:
          type: array
          description: Allowed subject token types.
          items:
            type: string
        actorTokenTypes:
          type: array
          description: Allowed actor token types.
          items:
            type: string
        requestedTokenTypes:
          type: array
          description: Allowed requested token types.
          items:
            type: string
        modules:
          type: array
          description: Sequence of modules in the chain
          items:
            "$ref": "#/components/schemas/STSModule"
    STSClient:
      required:
      - clientAuthentication
      - clientName
      - tokenExchangeSettings
      type: object
      properties:
        clientName:
          type: string
          description: Display name. Maximum 256 characters.
        enabled:
          type: boolean
          description: Enable the client. If not provided, the value will be set to
            true.
        policyId:
          type: string
          description: Access policy ID associated with this client.
        clientGroups:
          "$ref": "#/components/schemas/ClientGroups"
        clientAuthentication:
          "$ref": "#/components/schemas/STSClientAuthentication"
        tokenExchangeSettings:
          "$ref": "#/components/schemas/STSClientTokenExchange"
        tokenSettings:
          "$ref": "#/components/schemas/STSClientTokenSettings"
    STSClientAuthentication:
      type: object
      properties:
        clientAuthMethod:
          type: string
          description: Method to authentication the client.
          enum:
          - default
          - client_secret_basic
          - client_secret_post
          - private_key_jwt
          - tls_client_auth
        clientSecret:
          type: string
          description: Client secret. Will be auto-generated if this parameter is
            not provided. Empty string value is for public client.
        clientAssertionSigningAlg:
          type: string
          description: The expected signing algorithm of 'private_key_jwt' client
            assertion.
        validateClientAssertionJti:
          type: boolean
          description: Set this to true if 'private_key_jwt' client assertion should
            only be used once.
        allowedClientAssertionVerificationKeys:
          type: array
          description: List of allowed key IDs used to sign the 'private_key_jwt'
            client assertion.
          items:
            type: string
        tlsClientAuthAttribute:
          type: string
          description: The name of MTLS client certificate's attribute that need to
            be verified when using 'tls_client_auth' authentication method.
          enum:
          - subject_dn
          - san_dns
          - san_uri
          - san_ip
          - san_email
        tlsClientAuthAttributeValue:
          type: string
          description: The value of MTLS client certificate's attribute that need
            to be verified when using 'tls_client_auth' authentication method.
    STSClientList:
      type: object
      properties:
        count:
          type: integer
          description: Maximum result requested
          format: int32
          readOnly: true
        limit:
          type: integer
          description: Number of result per page
          format: int32
          readOnly: true
        page:
          type: integer
          description: Requested page number
          format: int32
          readOnly: true
        total:
          type: integer
          description: Total result returned in this request
          format: int32
          readOnly: true
        clients:
          type: array
          description: List of result that match the query
          items:
            "$ref": "#/components/schemas/STSClient"
    STSClientTokenExchange:
      required:
      - requestedTokenTypes
      - subjectTokenTypes
      type: object
      properties:
        subjectTokenTypes:
          type: array
          description: Allowed subject token types.
          items:
            type: string
        actorTokenTypes:
          type: array
          description: Allowed actor token types.
          items:
            type: string
        requestedTokenTypes:
          type: array
          description: Allowed requested token types.
          items:
            type: string
    STSClientTokenSettings:
      type: object
      properties:
        signingAlg:
          type: string
          description: Signing algorithm used when signing the ID token or JWT access
            token issued by authorization server.
        signingKeyLabel:
          type: string
          description: Personal key label used to sign the ID token or JWT access
            token issued by authorization server. Leave it empty to use default personal
            key.
        encryptAlg:
          type: string
          description: Key management encryption algorithm used when encrypting ID
            token issued by authorization server.
        encryptEnc:
          type: string
          description: Content encryption algorithm used when encrypting ID token
            issued by authorization server.
        encryptKey:
          type: string
          description: Encryption public key used when encrypting ID token issued
            by authorization server.
        jwksUri:
          type: string
          description: JSON Web Keys (JWKS) URI that publish the public key used when
            encrypting ID token issued by authorization server.
        attributeMap:
          type: array
          description: List of claim mapping used to enrich the requested token.
          items:
            "$ref": "#/components/schemas/ClientAttributeMap"
        accessTokenLifetime:
          "$ref": "#/components/schemas/Number"
        accessTokenType:
          type: string
          description: Type of access token issued by authorization server. Default
            is 'default'
          example: default
          enum:
          - default
          - jwt
        introspectMap:
          type: array
          description: List of claim mapping used to enrich JWT access token issued
            by authorization server.
          items:
            "$ref": "#/components/schemas/ClientAttributeMap"
        certificateBoundAccessTokens:
          type: boolean
          description: Indicates that generated access tokens must be bound to MTLS
            client certificate. When set to true, token exchange requests must be
            done over MTLS.
        dpopBoundAccessTokens:
          type: boolean
          description: Indicates that generated access tokens must be bound to the
            sender key that signed DPoP header. When set to true, DPoP header must
            be sent when performing token exchange requests.
        validateDPoPProofJti:
          type: boolean
          description: Set this to true if DPoP header should only be used once.
        dpopProofSigningAlg:
          type: string
          description: The expected DPoP header signing algorithm.
        restrictEntitlements:
          type: boolean
          description: Restrict entitlements, true or false. Default is true.
        entitlements:
          type: array
          description: List of entitlements that will be associated with the generated
            access token.
          items:
            type: string
        restrictScopes:
          type: boolean
          description: Restrict custom scopes that can be requested, true or false.
            Default is false.
        scopes:
          type: array
          description: List of allowed custom scopes.
          items:
            "$ref": "#/components/schemas/CustomScope"
        exchangeForSSOSessionOption:
          type: string
          description: Options to exchange token for SSO session. If this is not set,
            or is set to 'default', the configuration in the OIDC federation settings
            will take effect.
    IdentityAttributeMap:
      required:
      - attributeId
      - function
      - name
      type: object
      properties:
        name:
          type: string
          description: The token claim to take the value from.
        attributeId:
          type: string
          description: IBM Security Verify attribute ID.
        function:
          "$ref": "#/components/schemas/ClientAttributeRule"
        jitpOption:
          type: string
          description: Specify whether the attribute is stored and updated in the
            user profile.<br>"CREATE" will only store the attribute value during user
            provisioning and will not update it during subsequent logins.<br>"ALWAYS"
            will store and update the attribute value during subsequent logins as
            well.<br>"DISABLED" will not store this attribute value in the user profile.
          enum:
          - ALWAYS
          - CREATE
          - DISABLED
    IdentityMapping:
      type: object
      properties:
        attributeMappings:
          type: array
          description: Attribute mapping.
          items:
            "$ref": "#/components/schemas/IdentityAttributeMap"
        jitp:
          type: boolean
          description: Enables the creation and update of the user account in the
            identity source realm that is associated with the token.
        realm:
          type: string
          description: Realm name of the identity provider that the user will be linked
            to.
        subjectId:
          type: string
          description: The incoming token attribute that is used to link the unique
            user identifier in IBM Security Verify.
        searchBy:
          type: string
          description: The unique user identifier in IBM Security Verify to map to.
            Default is 'uid'.
    UpdateOidcSTSTokenType:
      required:
      - name
      - type
      type: object
      properties:
        id:
          type: string
          description: Token type ID.
          readOnly: true
        name:
          type: string
          description: Token type name.
        type:
          type: string
          description: Base token type that this token type adopt.
        description:
          type: string
          description: Token type description.
        issuer:
          type: string
          description: Token type issuer.
        jwksUri:
          type: string
          description: JSON Web Keys (JWKs) URI.
        identityMapping:
          "$ref": "#/components/schemas/IdentityMapping"
        validate:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Configuration for validation mode.
    CreateOidcSTSTokenType:
      required:
      - name
      - type
      type: object
      properties:
        id:
          type: string
          description: Token type ID.
          readOnly: true
        name:
          type: string
          description: Token type name.
        type:
          type: string
          description: Base token type that this token type adopt.
        description:
          type: string
          description: Token type description.
        issuer:
          type: string
          description: Token type issuer.
        jwksUri:
          type: string
          description: JSON Web Keys (JWKs) URI.
        identityMapping:
          "$ref": "#/components/schemas/IdentityMapping"
        validate:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Configuration for validation mode.
    STSTokenType:
      required:
      - identityMapping
      - issuer
      - name
      - type
      - validate
      type: object
      properties:
        id:
          type: string
          description: Token type ID. If not specified during token type creation,
            it will be auto-generated. The ID cannot be changed after it is created.
        name:
          type: string
          description: A unique name for the token type. This name is used as the
            value of subject_token_type or actor_token_type during token exchange.
            The name cannot be changed after it is created.
        type:
          type: string
          description: Base token type of this custom token type.
          enum:
          - urn:ietf:params:oauth:token-type:jwt
        description:
          type: string
          description: Token type description.
        issuer:
          type: string
          description: The issuer of this custom token type.
        jwksUri:
          type: string
          description: URL referencing the JSON Web Key Set (JWKS) document that contains
            public keys to be used for JSON Web Token (JWT) validation.
        identityMapping:
          "$ref": "#/components/schemas/IdentityMapping"
        validate:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Configuration for token validation.
    STSTokenTypeList:
      type: object
      properties:
        count:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        ststokenTypes:
          type: array
          items:
            "$ref": "#/components/schemas/STSTokenType"
    StatusBean:
      type: object
      properties:
        id:
          type: string
          description: Job ID.
          readOnly: true
        status:
          type: string
          description: Job status.
          readOnly: true
    FunctionStringString1:
      type: object
    Function_0:
      type: object
    Client_0:
      required:
      - clientName
      - grantTypes
      type: object
      properties:
        issuedAt:
          type: integer
          description: Time at which the client was issued as the number of seconds
            from 1970-01-01T00:00:00Z. This value will be auto-generated during creation.
          format: int64
          readOnly: true
        isDynamicClient:
          type: boolean
          description: Indicator of dynamic client. Only set to true for dynamic client.
        apiClientOwners:
          type: array
          description: API Client IDs that own this client.
          items:
            type: string
        clientId:
          type: string
          description: Client ID. This value will be auto-generated during creation.
          readOnly: true
        clientName:
          type: string
          description: Display name. Maximum 256 characters.
        clientSecret:
          type: string
          description: Client secret. Maximum 512 characters. Will be auto-generated
            if this parameter is not provided. Empty string value is for public client.
        category:
          type: string
          description: Client category. Maximum 32 characters.
        definitionId:
          type: string
          description: Definition ID that this client is associated with. The Definition
            must already exist. If not specified, the client will be attached to the
            default definition.
        appId:
          type: string
          description: Application ID that this client is associated with.
        idSources:
          type: array
          description: List of allowed ID Sources based on priority.
          items:
            type: string
        requirePkceVerification:
          type: boolean
          description: Require PKCE verification. If not provided, the value will
            be set to false.
        enabled:
          type: boolean
          description: Enable the client. If not provided, the value will be set to
            true.
        grantTypes:
          type: array
          description: List of allowed grant types. Must be subset of Definition's
            grant types (grant_types_supported) listed at /oidc/v1.0/endpoint/{definition_id}/.well-known/openid-configuration
          items:
            type: string
        policyAppliedAPIGrantTypes:
          type: array
          description: List of API-based grant types which access policy must be applied.
            Must be subset of allowed API-based grant types.
          items:
            type: string
        policyId:
          type: string
          description: Access policy ID associated with this client. Only applicable
            for API client and Application API client.
        birthRightAccess:
          type: boolean
          description: Birth right access. Default is false.
        redirectUris:
          type: array
          description: List of redirect URIs.
          items:
            type: string
        requestUris:
          type: array
          description: List of request URIs.
          items:
            type: string
        jwkSet:
          "$ref": "#/components/schemas/ClientJwks"
        jwkUri:
          type: string
          description: JSON Web Key (JWK) URI. This will be used instead of requestVerifyKey
            and idTokenEncryptKey if those are not provided. If specified, JSON Web
            Key (JWK) Set should not be specified.
        idTokenSigningAlg:
          type: string
          description: ID token signing algorithm. List of algorithms (id_token_signing_alg_values_supported)
            available at /oidc/v1.0/endpoint/{definition_id}/.well-known/openid-configuration
        idTokenEncryptAlg:
          type: string
          description: ID token key management encryption algorithm. List of algorithms
            (id_token_encryption_alg_values_supported) available at /oidc/v1.0/endpoint/{definition_id}/.well-known/openid-configuration
        idTokenEncryptEnc:
          type: string
          description: ID token content encryption algorithm. List of algorithms (id_token_encryption_enc_values_supported)
            available at /oidc/v1.0/endpoint/{definition_id}/.well-known/openid-configuration
        idTokenEncryptKey:
          type: string
          description: ID token encryption public key label.
        requestSigningAlg:
          type: string
          description: Request signing algorithm. List of algorithms (request_object_signing_alg_values_supported)
            available at /oidc/v1.0/endpoint/{definition_id}/.well-known/openid-configuration
        requestEncryptAlg:
          type: string
          description: Request key management encryption algorithm. List of algorithms
            (request_object_encryption_alg_values_supported) available at /oidc/v1.0/endpoint/{definition_id}/.well-known/openid-configuration
        requestEncryptEnc:
          type: string
          description: Request content encryption algorithm. List of algorithms (request_object_encryption_enc_values_supported)
            available at /oidc/v1.0/endpoint/{definition_id}/.well-known/openid-configuration
        requestVerifyKey:
          type: string
          description: Request signature verification public key label.
        accessTokenType:
          type: string
          description: Type of access token to be generated. Default is 'default'
          example: default
          enum:
          - default
          - jwt
        audiences:
          type: array
          description: List of audiences.
          items:
            type: string
        introspectMap:
          type: array
          description: List of application specific claim mapping to attribute source
            for introspection and JWT access token.
          items:
            "$ref": "#/components/schemas/ClientAttributeMap"
        restrictEntitlements:
          type: boolean
          description: Restrict entitlements, true or false. Default is true.
        entitlements:
          type: array
          description: List of entitlements assigned to this client.
          items:
            type: string
        defaultEntitlements:
          type: array
          description: List of default entitlements assigned to this client.
          items:
            type: string
        sendAllClaims:
          type: boolean
          description: If true, always return all supported claims. Default is false.
        attributeMap:
          type: array
          description: List of application specific claim mapping to attribute source
            for id_token and user info.
          items:
            "$ref": "#/components/schemas/ClientAttributeMap"
        overrideSettings:
          "$ref": "#/components/schemas/ClientOverrides"
        jwtBearerIdentifier:
          "$ref": "#/components/schemas/JwtBearerIdentifier"
        generateDeviceFlowQRCode:
          type: boolean
          description: If true, generate QR Code for the full verification URI. Default
            is false.
        companyName:
          type: string
          description: Company name. Maximum 1024 characters.
        companyUrl:
          type: string
          description: Company URL.
        contactPerson:
          type: string
          description: Contact person. Maximum 256 characters.
        contactType:
          type: string
          description: Contact type.
          enum:
          - technical
          - support
          - administrative
          - billing
          - other
        email:
          type: string
          description: Email address.
        phone:
          type: string
          description: Phone number. Maximum 128 characters. No validation done, other
            than length.
        otherInfo:
          type: string
          description: Other miscellaneous information. Maximum 2048 characters.
        themeId:
          type: string
          description: Template pages theme to use for all pages related to this OIDC
            application.
        description:
          type: string
          description: Description of this client.
        additionalProperties:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Additional properties associated with this client.
        ipFilterOp:
          type: string
          description: Operation of IP filter. Default is null, which means IP filter
            is disabled.
          enum:
          - allow
          - deny
        ipFilters:
          type: array
          description: List of IP filter.
          items:
            type: string
        consentType:
          type: string
          description: Type of consent used by this client.
          enum:
          - oidc
          - dpcm
        additionalConfig:
          "$ref": "#/components/schemas/AdditionalConfiguration"
    Function1_0:
      type: object
    EntityTag:
      type: object
      properties:
        value:
          type: string
        weak:
          type: boolean
    MediaType:
      type: object
      properties:
        type:
          type: string
        subtype:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        wildcardType:
          type: boolean
        wildcardSubtype:
          type: boolean
    NewCookie:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        version:
          type: integer
          format: int32
        path:
          type: string
        domain:
          type: string
        comment:
          type: string
        maxAge:
          type: integer
          format: int32
        expiry:
          type: string
          format: date-time
        secure:
          type: boolean
        httpOnly:
          type: boolean
    Response:
      type: object
      properties:
        status:
          type: integer
          format: int32
        statusInfo:
          "$ref": "#/components/schemas/StatusType"
        entity:
          type: object
          properties: {}
        mediaType:
          "$ref": "#/components/schemas/MediaType"
        language:
          "$ref": "#/components/schemas/Locale"
        length:
          type: integer
          format: int32
        allowedMethods:
          uniqueItems: true
          type: array
          items:
            type: string
        cookies:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/NewCookie"
        entityTag:
          "$ref": "#/components/schemas/EntityTag"
        date:
          type: string
          format: date-time
        lastModified:
          type: string
          format: date-time
        location:
          type: string
          format: uri
        links:
          uniqueItems: true
          type: array
          items:
            "$ref": "#/components/schemas/Link_0"
        metadata:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
              properties: {}
        headers:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
              properties: {}
        stringHeaders:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    StatusType:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
        family:
          type: string
          enum:
          - INFORMATIONAL
          - SUCCESSFUL
          - REDIRECTION
          - CLIENT_ERROR
          - SERVER_ERROR
          - OTHER
        reasonPhrase:
          type: string
    UriBuilder:
      type: object
    BlankResponse:
      type: object
    TokenResponse:
      required:
      - access_token
      - expires_in
      - grant_id
      - token_type
      type: object
      properties:
        access_token:
          type: string
          description: The access token that is issued by the authorization server.
        id_token:
          type: string
          description: The ID token that is issued by the authorization server, when
            the requested scope contains 'openid'.
        grant_id:
          type: string
          description: The grant identifier of this authorization grant.
        expires_in:
          type: integer
          description: The lifetime, in seconds, of the access token.
          format: int32
        token_type:
          type: string
          example: Bearer
          description: The type of the access token.
        scope:
          type: string
          description: A space-delimited list of scopes that are associated with this
            access token.
        refresh_token:
          type: string
          description: The refresh token that is used to obtain new access tokens.
            It is only available for authorization_code grant if the refresh_token
            grant is enabled.
    UserInfoResponse:
      type: object
      properties:
        displayName:
          type: string
          description: The display name that is associated with the subject of this
            token. This attribute is only available for grants other than client_credentials
            grants when it is configured to be returned by default, or when requested
            in the scope or claim parameters.
        sub:
          type: string
          description: The subject of the token. For client_credentials grants, the
            subject is the client_id. For other grants, the subject is the unique
            user identifier.
        userType:
          type: string
          description: The user type that is associated with the subject of this token.
            This attribute is only available for grants other than client_credentials
            grants.
        uniqueSecurityName:
          type: string
          description: The unique security name that is associated with this token.
        preferred_username:
          type: string
          description: The preferred user name that is associated with the subject
            of this token. This attribute is only available for grants other than
            client_credentials grant.
        realmName:
          type: string
          description: The realm name that is associated with this token.
        ext:
          additionalProperties:
            type: string
          type: object
          description: The extension map that is associated with this token.
        name:
          type: string
          description: The name that is associated with the subject of this token.
            This attribute is only available for grants other than client_credentials
            grants when it is configured to be returned by default or requested in
            the scope or claim parameters.
    JwkResponse:
      type: object
      properties:
        kty:
          type: string
          description: The key type (RSA, EC, and so on).
          readOnly: true
        use:
          type: string
          description: The public key usage (for signing, encryption, and so on).
          readOnly: true
        kid:
          type: string
          description: The key identifier value.
          readOnly: true
        x5c:
          type: array
          description: The X.509 certificate chain value.
          items:
            type: string
        x5t:
          type: string
          description: The X.509 certificate thumbprint.
          readOnly: true
        "n":
          type: string
          description: The RSA n value.
          readOnly: true
        e:
          type: string
          description: The RSA e value.
          readOnly: true
    JwksResponse:
      required:
      - keys
      type: object
      properties:
        keys:
          type: array
          description: A list of keys.
          items:
            "$ref": "#/components/schemas/JwkResponse"
    DeviceAuthorizeResponse:
      required:
      - device_code
      - expires_in
      - user_code
      - verification_uri
      type: object
      properties:
        device_code:
          type: string
          description: The device verification code that is issued by the authorization
            server.
        user_code:
          type: string
          description: The user verification code that is issued by the authorization
            server.
        verification_uri:
          type: string
          description: The user verification URI on the authorization server.
        verification_uri_complete:
          type: string
          description: A verification URI that includes the user code.
        verification_uri_complete_qrcode:
          type: string
          description: A complete verification URI in QR code format, Base64 encoded.
        expires_in:
          type: integer
          description: The lifetime, in seconds, of the device code and user code.
          format: int32
        interval:
          type: integer
          description: The minimum amount of time in seconds that the client must
            wait between polling requests to the token endpoint.
          format: int32
    DefinitionMetadata:
      required:
      - authorization_endpoint
      - issuer
      - response_types_supported
      type: object
      properties:
        issuer:
          type: string
          description: The OpenID provider issuer identifier.
        authorization_endpoint:
          type: string
          description: The URL of the OpenID provider authorization endpoint.
        token_endpoint:
          type: string
          description: The URL of the OpenID provider token endpoint.
        introspection_endpoint:
          type: string
          description: The URL of the OpenID provider introspect endpoint.
        userinfo_endpoint:
          type: string
          description: The URL of the OpenID provider userinfo endpoint.
        revocation_endpoint:
          type: string
          description: The URL of the OpenID provider revoke endpoint.
        device_authorization_endpoint:
          type: string
          description: The URL of the OpenID provider device authorization endpoint.
        user_authorization_endpoint:
          type: string
          description: The URL of the OpenID provider user authorization endpoint.
        registration_endpoint:
          type: string
          description: The URL of the OpenID provider dynamic client registration
            endpoint.
        jwks_uri:
          type: string
          description: The URL of the OpenID provider JSON Web Key Set endpoint.
        response_types_supported:
          type: array
          description: The JSON array that contains a list of the response_type values
            that this OpenID provider supports.
          items:
            type: string
        response_modes_supported:
          type: array
          description: The JSON array that contains a list of the response_mode values
            that this OpenID provider supports.
          items:
            type: string
        grant_types_supported:
          type: array
          description: The JSON array that contains a list of the grant_type values
            that this OpenID provider supports.
          items:
            type: string
        token_endpoint_auth_methods_supported:
          type: array
          description: The JSON array that contains a list of client authentication
            methods that are supported by this token endpoint.
          items:
            type: string
        id_token_signing_alg_values_supported:
          uniqueItems: true
          type: array
          description: The JSON array that contains a list of the JSON Web Signature
            (JWS) signing algorithms that are supported by the OpenID provider for
            the ID token to encode the claims in a JSON Web Token.
          items:
            type: string
        id_token_encryption_alg_values_supported:
          uniqueItems: true
          type: array
          description: The JSON array that contains a list of the JSON Web Encryption
            (JWE) algorithms that are supported by the OpenID provider for the ID
            token to encode the claims in a JSON Web Token.
          items:
            type: string
        id_token_encryption_enc_values_supported:
          uniqueItems: true
          type: array
          description: The JSON array that contains a list of the JSON Web Encryption
            (JWE) encryption algorithms that are supported by the OpenID provider
            for the ID token to encode the claims in a JSON Web Token.
          items:
            type: string
        userinfo_signing_alg_values_supported:
          uniqueItems: true
          type: array
          description: The JSON array that contains a list of the JSON Web Signature
            (JWS) signing algorithms that are supported by the UserInfo endpoint to
            encode the claims in a JSON Web Token.
          items:
            type: string
        userinfo_encryption_alg_values_supported:
          uniqueItems: true
          type: array
          description: The JSON array that contains a list of the JSON Web Encryption
            (JWE) algorithms that are supported by the UserInfo endpoint to encode
            the claims in a JSON Web Token.
          items:
            type: string
        userinfo_encryption_enc_values_supported:
          uniqueItems: true
          type: array
          description: The JSON array that contains a list of the JSON Web Encryption
            (JWE) encryption algorithms that are supported by the UserInfo endpoint
            to encode the claims in a JSON Web Token.
          items:
            type: string
        request_object_signing_alg_values_supported:
          uniqueItems: true
          type: array
          description: The JSON array that contains a list of the JSON Web Signature
            (JWS) signing algorithms that are supported by the OpenID provider for
            request objects.
          items:
            type: string
        request_object_encryption_alg_values_supported:
          uniqueItems: true
          type: array
          description: The JSON array that contains a list of the JSON Web Encryption
            (JWE) algorithms that are supported by the OpenID provider for request
            objects.
          items:
            type: string
        request_object_encryption_enc_values_supported:
          uniqueItems: true
          type: array
          description: The JSON array that contains a list of the JSON Web Encryption
            (JWE) encryption algorithms that are supported by the OpenID provider
            for request objects.
          items:
            type: string
        subject_types_supported:
          type: array
          description: The JSON array containing a list of the Subject Identifier
            types that this OP supports.
          items:
            type: string
        scopes_supported:
          type: array
          description: The JSON array that contains a list of the scope values that
            this server supports.
          items:
            type: string
        claims_supported:
          type: array
          description: The JSON array that contains a list of the names of the claims
            that the OpenID provider might be able to supply values for.
          items:
            type: string
        claim_types_supported:
          type: array
          description: The JSON array that contains a list of the claim types that
            the OpenID provider supports.
          items:
            type: string
        claims_parameter_supported:
          type: boolean
          description: A Boolean value that specifies whether the OpenID provider
            supports the use the claims parameter.
        request_parameter_supported:
          type: boolean
          description: A Boolean value that specifies whether the OpenID provider
            supports the use the request parameter.
        request_uri_parameter_supported:
          type: boolean
          description: A Boolean value that specifies whether the OpenID provider
            supports the use of the request_uri parameter.
        require_request_uri_registration:
          type: boolean
          description: A Boolean value that specifies whether the OpenID provider
            requires that all request_uri values be pre-registered before use. These
            values are registered by using the request_uris registration parameter.
    DynamicClientResponse:
      required:
      - client_id
      - client_name
      - client_secret
      - client_secret_expires_at
      - redirect_uris
      type: object
      properties:
        client_id:
          type: string
          description: Client identifier.
        client_id_issued_at:
          type: string
          description: Time at which the client identifier was assigned.
        client_secret:
          type: string
          description: Client secret.
        client_secret_expires_at:
          type: string
          description: Time at which the client secret expires.
        registration_client_uri:
          type: string
          description: URL of the client configuration endpoint for this client.
        registration_access_token:
          type: string
          description: Access token that is used to run subsequent operations at the
            client configuration endpoint.
        client_name:
          type: string
          description: Client name.
        redirect_uris:
          type: array
          description: Array of redirection URIs for use in redirect-based flows.
          items:
            type: string
        grant_types:
          type: array
          description: Array of grant types that the client can use. The allowed grant
            types are 'authorization_code', 'implicit', 'password', 'refresh_token'
            and 'urn:ietf:params:oauth:grant-type:device_code'.
          items:
            type: string
        id_token_signed_response_alg:
          type: string
          description: Token signing algorithm. Required for signing the ID token
            assigned for this client.
        initiate_login_uri:
          type: string
          description: URI that uses the https scheme that a third party can use to
            initiate a login by the RP.
        all_users_entitled:
          type: boolean
          description: Set to true if all users are entitled to use this client.
    CreateDynamicClient:
      required:
      - client_id
      - client_name
      - client_secret
      - redirect_uris
      type: object
      properties:
        client_name:
          type: string
          description: Client name.
        client_id:
          type: string
          description: Client ID. Will be automatically generated if not provided.
        client_secret:
          type: string
          description: Client secret. Will be automatically generated if not provided.
        redirect_uris:
          type: array
          description: Array of redirection URIs for use in redirect-based flows.
          items:
            type: string
        request_uris:
          type: array
          description: Array of request_uri values that are pre-registered by the
            RP for use at the OP.
          items:
            type: string
        response_types:
          type: array
          description: Array of the OAuth 2.0 response types that the client may use.
          items:
            type: string
        grant_types:
          type: array
          description: Array of grant types that the client may use. The allowed grant
            types are 'authorization_code', 'implicit', 'password', 'refresh_token'
            and 'urn:ietf:params:oauth:grant-type:device_code'.
          items:
            type: string
        jwks_uri:
          type: string
          description: URL referencing the client's JSON Web Key Set document representing
            the client's public keys.
        id_token_signed_response_alg:
          type: string
          description: Token signing algorithm. Required for signing the ID token
            issued for this client.
        userinfo_signed_response_alg:
          type: string
          description: Userinfo response JWT signing algorithm.
        userinfo_encrypted_response_alg:
          type: string
          description: Userinfo response JWT encryption algorithm.
        userinfo_encrypted_response_enc:
          type: string
          description: Userinfo response JWT encryption content algorithm.
        request_object_signing_alg:
          type: string
          description: JWS alg algorithm that MUST be used for signing request objects
            sent to the OP.
        request_object_encryption_alg:
          type: string
          description: JWE alg algorithm the RP is declaring that it may use for encrypting
            request objects sent to the OP.
        request_object_encryption_enc:
          type: string
          description: JWE enc algorithm the RP is declaring that it may use for encrypting
            request objects sent to the OP.
        token_endpoint_auth_method:
          type: string
          description: Requested authentication method for the token endpoint.
        token_endpoint_auth_signing_alg:
          type: string
          description: JWS alg algorithm that MUST be used for signing the JWT used
            to authenticate the Client at the Token Endpoint for the private_key_jwt
            and client_secret_jwt authentication methods.
        initiate_login_uri:
          type: string
          description: URI using the https scheme that a third party can use to initiate
            a login by the RP.
        all_users_entitled:
          type: boolean
          description: Set to true if all users are entitled to use this client.
        consent_action:
          type: boolean
          description: Request for user consent.
        enforce_pkce:
          type: boolean
          description: Enforce the usage of PKCE.
        tls_client_certificate_bound_access_tokens:
          type: boolean
          description: Indicates if certificate binding for access token is required.
        tls_client_auth_subject_dn:
          type: string
          description: The expected subject distinguished name of the certificate
            that the client will use in mutual TLS authentication.
        tls_client_auth_san_dns:
          type: string
          description: The expected DNS name SAN entry in the certificate that the
            client will use in mutual TLS authentication.
        tls_client_auth_san_uri:
          type: string
          description: The expected URI SAN entry in the certificate that the client
            will use in mutual TLS authentication.
        tls_client_auth_san_ip:
          type: string
          description: The expected IP address SAN entry in the certificate that the
            client will use in mutual TLS authentication.
        tls_client_auth_san_email:
          type: string
          description: The expected email address SAN entry in the certificate that
            the client will use in mutual TLS authentication.
    PushAuthorizeResponse:
      required:
      - expires_in
      - request_uri
      type: object
      properties:
        request_uri:
          type: string
          description: The request URI corresponding to the authorization request
            posted.
        expires_in:
          type: integer
          description: The lifetime, in seconds, of the request_uri.
          format: int32
    ErrorResponse1:
      required:
      - error
      type: object
      properties:
        error:
          type: string
          description: The OIDC error.
        error_description:
          type: string
          description: The OIDC error description.
    Function_1:
      type: object
    Link_0:
      type: object
      properties:
        uri:
          type: string
          format: uri
        uriBuilder:
          "$ref": "#/components/schemas/UriBuilder"
        rel:
          type: string
        rels:
          type: array
          items:
            type: string
        title:
          type: string
        type:
          type: string
        params:
          type: object
          additionalProperties:
            type: string
    ErrorResponse_1:
      required:
      - error
      type: object
      properties:
        error:
          type: string
          description: The OIDC error.
        error_description:
          type: string
          description: The OIDC error description.
    IntrospectResponse_0:
      required:
      - active
      type: object
      properties:
        active:
          type: boolean
          description: The Boolean indicator that indicates whether the presented
            token is currently active.
        scope:
          type: string
          description: A space-delimited list of scopes that are associated with this
            token.
        client_id:
          type: string
          description: The API client's or OIDC application's client ID.
        token_type:
          type: string
          description: The type of the token.
          example: access_token
          enum:
          - access_token
          - refresh_token
        exp:
          type: integer
          description: The timestamp, in the POSIX time format, indicating when this
            token will expire.
          format: int32
        iat:
          type: integer
          description: The time stamp, in the POSIX time format, that indicates when
            this token was originally issued.
          format: int32
        grant_type:
          type: string
          description: The grant type that is used to request this token.
        realmName:
          type: string
          description: The realm name that is associated with this token.
        sub:
          type: string
          description: The subject of the token. For client_credentials grants, the
            subject is the client_id. For other grants, the subject is the unique
            user identifier.
        uniqueSecurityName:
          type: string
          description: The unique security name of the token.
        preferred_username:
          type: string
          description: The preferred user name that is associated with the subject
            of this token. This attribute is only available for grants other than
            client_credentials grants.
        userType:
          type: string
          description: The user type that is associated with the subject of this token.
            This attribute is only available for grants other than client_credentials
            grants.
          example: regular
          enum:
          - regular
          - federated
        groupIds:
          type: array
          description: The list of group IDs that are associated with the subject
            of this token. This attribute is only available for grants other than
            client_credentials grants.
          items:
            type: string
        ext:
          type: object
          additionalProperties:
            type: string
          description: The extension map of attributes that are associated with this
            token.
    Function1_1:
      type: object
    AllEventsResponse:
      required:
      - events
      - search_after
      type: object
      properties:
        events:
          type: array
          description: The events.
          items:
            "$ref": "#/components/schemas/Events"
        search_after:
          "$ref": "#/components/schemas/AllEventsSearchAfter"
    AllEventsSearchAfter:
      required:
      - max_size_limit
      - total_events
      type: object
      properties:
        total_events:
          type: integer
          description: The total number of events.
          format: int32
        max_size_limit:
          type: string
          description: Indicates if the maximum number of events that can be returned
            were returned.
        id:
          type: string
          description: The ID of the last event that was returned.
        time:
          type: string
          description: The timestamp of the last event that was returned.
        range_type:
          type: string
          description: The RANGE_TYPE (time/indexed_at) selected_by the user.
    Events:
      type: object
    Duration:
      type: object
      properties:
        seconds:
          type: integer
          format: int64
        units:
          type: array
          items:
            "$ref": "#/components/schemas/TemporalUnit"
        zero:
          type: boolean
        negative:
          type: boolean
        nano:
          type: integer
          format: int32
    HealthCheckComponentStatus:
      type: object
      properties:
        status:
          type: string
          enum:
          - BAD
          - MARGINAL
          - GOOD
        details:
          type: string
        name:
          type: string
        others:
          type: object
          additionalProperties:
            type: object
            properties: {}
    ServiceHealth:
      type: object
      properties:
        status:
          type: string
        time:
          "$ref": "#/components/schemas/Duration"
        components:
          type: array
          items:
            "$ref": "#/components/schemas/HealthCheckComponentStatus"
    TemporalUnit:
      type: object
      properties:
        duration:
          "$ref": "#/components/schemas/Duration"
        durationEstimated:
          type: boolean
        dateBased:
          type: boolean
        timeBased:
          type: boolean
    ServletConfig:
      type: object
      properties:
        servletName:
          type: string
        servletContext:
          "$ref": "#/components/schemas/ServletContext"
        initParameterNames:
          "$ref": "#/components/schemas/EnumerationString"
    CSVExportRecord:
      required:
      - state
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the export request.
        state:
          type: string
          description: The state of the export request.
          enum:
          - cancelled
          - completed
          - running
          - failed
          - queued
        fileName:
          type: string
          description: fileName of csv file.
        totalEventCount:
          type: integer
          description: total events count.
          format: int32
        parameters:
          type: object
          additionalProperties:
            type: string
          description: Request Payload for the export request.
        category:
          type: string
          enum:
          - OPERATIONAL_STATUS
          - AUDIT
          - USER_STATUS
          - STATUS
        statistics:
          "$ref": "#/components/schemas/CSVExportStats"
    CSVExportStats:
      required:
      - creationTime
      - duration
      - size
      - version
      type: object
      properties:
        startTime:
          type: string
          description: The time that the export request started.
        endTime:
          type: string
          description: The time that the export request was completed or cancelled.
        creationTime:
          type: string
          description: The creation time of the report
        size:
          type: integer
          description: The size of the report
          format: int32
        version:
          type: string
          description: The report request version
        duration:
          type: string
          description: The total processing time of the export request.
    CSVExportJob:
      type: object
      properties:
        jobId:
          type: string
    StatusReportParameters:
      required:
      - columns
      type: object
      properties:
        filter:
          type: string
          description: The SCIM compliant search filter. For example, "((emails sw
            \\\"example\\\") or (active eq \\\"true\\\"))"
        columns:
          type: array
          description: The list of columns that are used when populating the corresponding
            CSV file.
          items:
            "$ref": "#/components/schemas/UserComplianceColumns"
    UserComplianceColumns:
      type: object
      properties:
        attributeCategory:
          type: string
        attributeName:
          type: string
        attributeKey:
          type: string
    Hits:
      required:
      - _id
      - _index
      - _source
      - _type
      - sort
      type: object
      properties:
        _index:
          type: string
          description: The index name.
        _type:
          type: string
          description: The type.
        _source:
          type: object
          properties: {}
          description: The event details.
        _id:
          type: string
          description: The ID of an event.
        sort:
          type: array
          description: The parameters to sort by. For example, time and ID.
          items:
            type: string
    ReportResponse:
      required:
      - hits
      - total
      type: object
      properties:
        hits:
          type: array
          description: The response for each operation.
          items:
            "$ref": "#/components/schemas/Hits"
        total:
          type: integer
          description: The total.
          format: int32
    ReportResponseTemplate:
      required:
      - success
      type: object
      properties:
        success:
          type: boolean
          description: The success value.
        reportResponse:
          "$ref": "#/components/schemas/ReportResponse"
    ScheduledCSVJob:
      required:
      - columns
      - frequency
      - owner
      - type
      type: object
      properties:
        description:
          type: string
          description: A description for the export request.
        type:
          type: string
          description: Type for the export request.
        frequency:
          type: string
          description: frequency for the export request to run.
          enum:
          - daily
          - weekly
          - monthly
        columns:
          type: array
          description: Column headers for the export csv to select.
          items:
            type: string
        owner:
          type: string
          description: owner of a report.
        jobId:
          type: string
        tenantId:
          type: string
        timeRange:
          type: string
        createdOn:
          type: string
    ScheduledCSVJobs:
      type: object
      properties:
        schduledJobs:
          type: array
          items:
            "$ref": "#/components/schemas/ScheduledCSVJob"
    Report:
      type: object
      properties:
        responseJson:
          type: object
          additionalProperties:
            type: object
            properties: {}
        message:
          type: string
        success:
          type: boolean
        defaultFormat:
          type: string
          enum:
          - JSON
          - CSV
          - CSVDOWNLOAD
    CSVExportHeaderNames:
      type: object
      properties:
        headerNames:
          type: array
          description: List of header names allowed as CSV file headers.
          items:
            type: string
    CloudantMetadataStoreId:
      required:
      - tenantId
      type: object
      properties:
        tenantId:
          type: string
          description: The tenant UUID for the export request.
        customAttributes:
          type: string
          description: custom Attirbutes.
        jobId:
          type: string
    CloudantMetadataRecord:
      required:
      - tenantId
      type: object
      properties:
        get_id:
          type: string
          description: Unique identifier for the metadata request.
        tenantId:
          type: string
          description: The tenant UUID for the export request.
        userId:
          type: string
          description: Requested UserId.
        reportName:
          type: string
          description: Requested Report Name.
        reportType:
          type: string
          description: Requested Report Type.
        attributes:
          type: string
    CloudantMetadataRecords:
      type: object
      properties:
        records:
          type: array
          description: A list of customized column configurations.
          items:
            "$ref": "#/components/schemas/CloudantMetadataRecord"
    OperationalReportParameters:
      required:
      - columns
      type: object
      properties:
        filter:
          type: string
          description: The SCIM compliant search filter. For example, "((emails sw
            \\\"example\\\") or (active eq \\\"true\\\"))"
        columns:
          type: array
          description: The list of columns that are used when populating the corresponding
            CSV file.
          items:
            "$ref": "#/components/schemas/UserComplianceColumns"
    CSVExportRecords:
      type: object
      properties:
        jobs:
          type: array
          description: A list of CSV export requests.
          items:
            "$ref": "#/components/schemas/CSVExportRecord"
    CloudantResourceUnitsRecord:
      required:
      - aa_ru
      - active_users
      - cia_ru
      - cig_ru
      - mfa_ru
      - sso_ru
      - tenantId
      - tenantName
      - total_ru
      type: object
      properties:
        get_id:
          type: string
          description: Unique identifier for the metadata request.
        tenantId:
          type: string
          description: The tenant UUID for the export request.
        creationDate:
          type: string
          description: creation date
          format: date
        aa_ru:
          type: number
          description: aa_ru.
          format: double
        mfa_ru:
          type: number
          description: mfa_ru.
          format: double
        cia_ru:
          type: number
          description: cia_ru.
          format: double
        cig_ru:
          type: number
          description: cig_ru.
          format: double
        sso_ru:
          type: number
          description: sso_ru.
          format: double
        active_users:
          type: integer
          description: active_users.
          format: int32
        total_ru:
          type: number
          description: total_ru.
          format: double
        tenantName:
          type: string
          description: tenantName.
    CloudantResourceUnitsRecords:
      type: object
      properties:
        records:
          type: array
          description: A list of reource unit configurations.
          items:
            "$ref": "#/components/schemas/CloudantResourceUnitsRecord"
    CSVJobStatus:
      required:
      - description
      - owner
      - size
      - status
      type: object
      properties:
        description:
          type: string
          description: description value.
        status:
          type: string
          description: The state of the import request.
          enum:
          - cancelled
          - completed
          - running
          - failed
        size:
          type: string
          description: size value.
        owner:
          type: string
          description: owner of a report.
        jobId:
          type: string
        reportName:
          type: string
        startTime:
          type: string
        endTime:
          type: string
        expirationTime:
          type: string
        createdOn:
          type: string
    ReportConfiguration:
      type: object
      properties:
        name:
          type: string
        body:
          type: string
        path:
          type: string
        isPublic:
          type: boolean
        parameters:
          type: object
          additionalProperties:
            type: string
        formats:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/ReportFormatConfiguration"
    ReportFormatConfiguration:
      type: object
      properties:
        selector:
          type: string
        wrapResponse:
          type: boolean
        wrapResponseLabel:
          type: string
        postProcessingFormating:
          type: boolean
        default:
          type: boolean
    TraceLevelModel_0:
      required:
      - level
      type: object
      properties:
        microservice:
          type: string
          description: The microservice trace to set, that is the IAM_MSVC_NAME.  If
            not specified, the default is "reporting".
        level:
          type: string
          description: The trace level to set.
          enum:
          - INFO
          - FINE
          - FINER
          - FINEST
        tenants:
          type: array
          description: The tenant trace levels to set.
          items:
            "$ref": "#/components/schemas/TenantTraceModel"
    AccessRequestOperation:
      required:
      - action
      - requestId
      type: object
      properties:
        requestId:
          type: string
          description: ID of the request
        justification:
          type: string
          description: Justification to add (Max length is 1024)
        action:
          type: string
          description: Action to execute
          enum:
          - approve
          - reject
          - need_action_by_requestor
      description: Object that contains the information of the bulk operation
    RequestStatistics:
      required:
      - count
      type: object
      properties:
        count:
          type: integer
          description: Count
          format: int32
      description: Statistics of the request
    RundeckRequestUpdateInput:
      required:
      - password
      - userName
      type: object
      properties:
        userName:
          type: string
          description: User Name
        password:
          type: string
          description: Password
      description: Object used to run rundeck jobs for updating requests.
    DeleteOperation:
      required:
      - requestId
      type: object
      properties:
        requestId:
          type: string
          description: ID of the request
        justification:
          type: string
          description: Justification to add (Max length is 1024)
      description: Object that contains the information of the bulk operation
    ListResponseWorkflow:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/Workflow"
    ListResponseRequestStatistics:
      type: object
      properties:
        totalCount:
          type: integer
          description: Total number of objects
          format: int32
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/RequestStatistics"
    Justification:
      type: object
      properties:
        userId:
          type: string
        userName:
          type: string
        timestamp:
          type: string
          format: date-time
        content:
          type: string
    ApplicationSearch:
      type: object
      properties:
        application:
          uniqueItems: true
          type: array
          description: Unique identifier of the application
          items:
            type: string
      description: List of applications to filter the payload response
    ListResponseRequestStatsSummary:
      required:
      - needMyAction
      - needOthersAction
      - otherCount
      - totalCount
      type: object
      properties:
        totalCount:
          type: integer
          description: Total count of requests
          format: int32
        needMyAction:
          type: integer
          description: Number of requests waiting for callers action
          format: int32
        needOthersAction:
          type: integer
          description: Number of requests waiting for others action
          format: int32
        otherCount:
          type: integer
          description: Number of requests in non-waiting state
          format: int32
    UpdateEntitlementOperation:
      required:
      - op
      - path
      type: object
      properties:
        op:
          type: string
          description: Operation to be performed
          example: add
          enum:
          - add
          - remove
          - replace
        path:
          type: string
          description: 'The string that contains an attribute path that describes
            the target of the operation. The "path" attribute is required for all
            operations. Examples of valid "path" specification formats include: <br>
            <br>     "path":"entitlement.name" <br>     "path":"entitlement.description"
            <br>     "path":"entitlement.category" <br>     "path":"entitlement.groups"
            <br>'
          example: entitlement.name
          enum:
          - entitlement
          - entitlement.name
          - entitlement.description
          - entitlement.category
          - entitlement.groups
        value:
          type: string
          description: 'The attribute content used for the operation. The "value"
            attribute is required for the "add" and "replace" operations. The "value"
            attribute is allowed with "remove" operations only when the "path" identifies  a
            single object (specified by a selection filter), and the attribute path
            identifies an array attribute.  Currently, this usage is for removing
            values from a custom attribute''s values array only. <br> <br> The following
            example shows a patch operation removing a single value from "entitlement.description"  and
            multiple values from "entitlement.groups": <br>  <table> <tr><td> {  "Operations":  [    {      "op":"replace",      "path":"entitlement.description",      "value":"entitlement
            for required access",    },    {      "op":"remove",      "path":"entitlement.groups",      "value":          [             "Basic
            Access",             "Gues Access"          ]    }  ]}</td></tr></table>'
          example: Basic Access
    ApprovalHistory:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        givenName:
          type: string
        familyName:
          type: string
        formatted:
          type: string
        email:
          type: string
        userType:
          type: string
        realm:
          type: string
        approverPersona:
          type: string
          enum:
          - UM
          - AM
        actionDate:
          type: string
          format: date-time
        action:
          type: string
          enum:
          - NEW
          - PENDING
          - SUBMITTED
          - NEED_ACTION_BY_REQUESTOR
          - COMPLETED
          - APPROVED
          - REJECTED
          - EXECUTING
          - INVALIDATED
          - CANCELED
          - SUPERSEDED
    AccessRequest:
      required:
      - requests
      type: object
      properties:
        justification:
          type: string
          description: Justification
        requests:
          type: array
          description: List of accesses that needs to be granted
          items:
            "$ref": "#/components/schemas/BulkAccessOperation"
      description: Object used to create a fine grained access request
    Workflow:
      type: object
      properties:
        applicationId:
          type: string
        isAMrequired:
          type: boolean
        isUMrequired:
          type: boolean
    RequestActionResponse:
      type: object
      properties:
        id:
          type: string
          description: ID of the request
          readOnly: true
        executed:
          type: boolean
          description: Boolean value that indicates whether the request operation
            was performed correctly
          readOnly: true
        errorCode:
          type: string
          description: Contains the error code
          readOnly: true
        errorMessage:
          type: string
          description: 'Contains the error message '
          readOnly: true
      description: Object used to return a result for the request action
    UpdateByApplication:
      required:
      - Operations
      type: object
      properties:
        Operations:
          type: array
          description: An array of operation objects to be performed.  Operation objects
            must have exactly one "op" member, whose value indicates the operation
            to perform. Its value must be one of "add", "remove", or "replace". Values
            are errors.
          items:
            "$ref": "#/components/schemas/UpdateApplicationOperation"
      description: JSON object used to update all the requests filtered by the application
    BulkRequestOperation:
      required:
      - applicationId
      - entitlement
      - requestType
      type: object
      properties:
        requestType:
          type: string
          description: Type of request
          enum:
          - APPLICATION
          - PERMISSION
          - ROLE
        applicationId:
          type: string
          description: ID of the application to request
        entitlement:
          type: string
          description: ID of the entitlement to request
      description: Object that contains the information of the request operation
    BulkRequestInput:
      required:
      - accessesToAdd
      type: object
      properties:
        justification:
          type: string
          description: Justification
        accessesToAdd:
          type: array
          description: List of accesses that needs to be granted
          items:
            "$ref": "#/components/schemas/BulkRequestOperation"
      description: Object used to create a fine grained access request for self
    CatalogApplication:
      type: object
      properties:
        id:
          type: string
        pendingRequest:
          type: boolean
        details:
          "$ref": "#/components/schemas/CatalogApplicationDetails"
        groups:
          type: array
          items:
            type: string
    CatalogApplicationDetails:
      type: object
      properties:
        name:
          type: string
        icon:
          type: string
        linkName:
          type: string
        url:
          type: string
        applicationState:
          type: string
    CountErrorMessage:
      type: object
      properties:
        messageId:
          type: string
        messageDescription:
          type: string
        counter:
          type: integer
          format: int32
    RequestBulkDeleteOperation:
      required:
      - requests
      type: object
      properties:
        justification:
          type: string
          description: Common justification that is used for the BulkOperation objects
            that don't have a justification.
        requests:
          type: array
          description: List of objects that contains the information that is used
            for each request
          items:
            "$ref": "#/components/schemas/DeleteOperation"
      description: The object used to approve or reject one or more requests.
    ListResponseRequestPreview:
      type: object
      properties:
        totalCount:
          type: integer
          description: Total number of objects
          format: int32
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/RequestPreview"
    UpdateByEntitlement:
      required:
      - Operations
      type: object
      properties:
        Operations:
          type: array
          description: An array of operation objects to be performed.  Operation objects
            must have exactly one "op" member, whose value indicates the operation
            to perform. Its value must be one of "add", "remove", or "replace". Values
            are errors.
          items:
            "$ref": "#/components/schemas/UpdateEntitlementOperation"
      description: JSON object used to update all the requests filtered by entitlement.
    ProvisioningStatusInput:
      required:
      - entitlement
      - user
      type: object
      properties:
        user:
          type: string
          description: ID of the user
        entitlement:
          type: string
          description: ID of the entitlement
        fulfilled:
          type: boolean
      description: Object used to notify provisioning status
    ListResponseApproverRequestPreview:
      type: object
      properties:
        totalCount:
          type: integer
          description: Total number of objects
          format: int32
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/ApproverRequestPreview"
    ListResponseAccessStatistics.java:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/AccessStatistics"
    RequestBulkRequestOperation:
      required:
      - requests
      type: object
      properties:
        justification:
          type: string
          description: Common justification that is used for the BulkOperation objects
            that don't have a justification.
        requests:
          type: array
          description: List of objects that contains the information that is used
            for each request
          items:
            "$ref": "#/components/schemas/AccessRequestOperation"
      description: The object used to approve or reject one or more requests.
    RequestInput:
      required:
      - applicationId
      - justification
      - requestType
      type: object
      properties:
        requestType:
          type: string
          description: Type of request
          enum:
          - application
        applicationId:
          type: string
          description: ID of the application to request
        justification:
          type: string
          description: Justification
      description: Object used to create a self request
    AddJustification:
      required:
      - justification
      type: object
      properties:
        justification:
          type: string
          description: Text of the justification
      description: Object used to add a justification in the request
    Reminder:
      type: object
      properties:
        enable:
          type: boolean
    Request:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        reference:
          type: string
        rev:
          type: string
        tenantId:
          type: string
        requestType:
          type: string
          enum:
          - APPLICATION
          - PERMISSION
          - ROLE
          - USER_REGISTRATION
        status:
          type: string
          enum:
          - NEW
          - PENDING
          - SUBMITTED
          - NEED_ACTION_BY_REQUESTOR
          - COMPLETED
          - APPROVED
          - REJECTED
          - EXECUTING
          - INVALIDATED
          - CANCELED
          - SUPERSEDED
        requestor:
          "$ref": "#/components/schemas/User_1"
        requestee:
          "$ref": "#/components/schemas/User_1"
        beneficiary:
          "$ref": "#/components/schemas/User_1"
        nextApproverPersona:
          type: string
          enum:
          - UM
          - AM
        nextApprovers:
          type: array
          items:
            "$ref": "#/components/schemas/User_1"
        approvalHistory:
          type: array
          items:
            "$ref": "#/components/schemas/ApprovalHistory"
        requestDate:
          type: string
          format: date-time
        workflow:
          "$ref": "#/components/schemas/Workflow"
        lastChangeDate:
          type: string
          format: date-time
        lastChangeUserId:
          type: string
        application:
          "$ref": "#/components/schemas/Application_1"
        operation:
          type: string
          enum:
          - ACCESS_ADD
          - USER_REGISTRATION
        entitlement:
          "$ref": "#/components/schemas/Entitlement_1"
        reminder:
          "$ref": "#/components/schemas/Reminder"
        justifications:
          type: array
          items:
            "$ref": "#/components/schemas/Justification"
        user:
          type: object
          additionalProperties:
            type: string
    EntitlementGroupSearch:
      type: object
      properties:
        accessInfo:
          "$ref": "#/components/schemas/AccessInfo_0"
        accessType:
          uniqueItems: true
          type: array
          description: Type of the access
          items:
            type: string
        application:
          uniqueItems: true
          type: array
          description: Unique identifier of the application
          items:
            type: string
        sort:
          "$ref": "#/components/schemas/Sort"
    BulkAccessOperation:
      required:
      - applicationId
      - entitlement
      - requestType
      type: object
      properties:
        beneficiary:
          type: string
          description: Beneficiary of the request
        requestType:
          type: string
          description: Type of request
          enum:
          - APPLICATION
          - PERMISSION
          - ROLE
        applicationId:
          type: string
          description: ID of the application to request
        entitlement:
          type: string
          description: ID of the entitlement to request
      description: Object that contains the information of the request operation
    RequestPreview:
      type: object
      properties:
        id:
          type: string
          description: ID
        reference:
          type: string
          description: Reference
        status:
          type: string
          description: Status
        requestor:
          "$ref": "#/components/schemas/User_1"
        beneficiary:
          "$ref": "#/components/schemas/User_1"
        nextApproverPersona:
          type: string
          description: Indicates who the next approver is
        nextApprovers:
          type: array
          description: List of approvers
          items:
            "$ref": "#/components/schemas/User_1"
        requestDate:
          type: string
          description: Creation date
          format: date-time
        lastChangeDate:
          type: string
          description: Last change date
          format: date-time
        lastChangeUserId:
          type: string
          description: ID of the user that made the last change
        application:
          "$ref": "#/components/schemas/Application_1"
        operation:
          type: string
          description: Operation
        entitlement:
          "$ref": "#/components/schemas/Entitlement_1"
        reminder:
          "$ref": "#/components/schemas/Reminder"
        approvalHistory:
          type: array
          description: User that performed the operation for a step of the request
          items:
            "$ref": "#/components/schemas/ApprovalHistory"
        justifications:
          type: array
          description: List of justifications
          items:
            "$ref": "#/components/schemas/Justification"
        user:
          type: object
          additionalProperties:
            type: string
          description: User to be registered
        requestNumber:
          type: string
      description: Preview of the request
    ApproverRequestPreview:
      type: object
      properties:
        id:
          type: string
          description: ID
        reference:
          type: string
          description: Reference
        status:
          type: string
          description: Status
        requestor:
          "$ref": "#/components/schemas/User_1"
        beneficiary:
          "$ref": "#/components/schemas/User_1"
        nextApproverPersona:
          type: string
          description: Indicates who the next approver is
        nextApprovers:
          type: array
          description: List of approvers
          items:
            "$ref": "#/components/schemas/User_1"
        requestDate:
          type: string
          description: Creation date
          format: date-time
        lastChangeDate:
          type: string
          description: Last change date
          format: date-time
        lastChangeUserId:
          type: string
          description: ID of the user that made the last change
        application:
          "$ref": "#/components/schemas/Application_1"
        operation:
          type: string
          description: Operation
        entitlement:
          "$ref": "#/components/schemas/Entitlement_1"
        reminder:
          "$ref": "#/components/schemas/Reminder"
        approvalHistory:
          type: array
          description: User that performed the operation for a step of the request
          items:
            "$ref": "#/components/schemas/ApprovalHistory"
        justifications:
          type: array
          description: List of justifications
          items:
            "$ref": "#/components/schemas/Justification"
        user:
          type: object
          additionalProperties:
            type: string
          description: User to be registered
        loggedUserStatus:
          type: string
          description: Logged user status
          readOnly: true
        requestNumber:
          type: string
      description: Preview of the request for an approver
    UpdateApplicationOperation:
      required:
      - op
      - path
      type: object
      properties:
        op:
          type: string
          description: Operation to be performed
          example: replace
          enum:
          - remove
          - replace
        path:
          type: string
          description: 'The string that contains an attribute path that describes
            the target of the operation. The "path" attribute is required for all
            operations. Examples of valid "path" specification formats include: <br>
            <br>     "path":"application.name" <br>     "path":"application.description"
            <br>     "path":"application.icon" <br>'
          example: application.name
          enum:
          - application
          - application.name
          - application.description
          - application.icon
        value:
          type: string
          description: 'The attribute content used for the operation. The "value"
            attribute is required for the "replace" operations. The "value" attribute
            is allowed with "remove" operations only when the "path" identifies  a
            single object (specified by a selection filter). <br> <br> The following
            example shows a put operation replacing a single value from "application.name"  and
            removing a single value from "application.icon": <br>  <table> <tr><td>
            {  "Operations":  [    {      "op":"replace",      "path":"application.name",      "value":"Service
            Now Application",    },    {      "op":"remove",      "path":"application.icon"     }  ]}</td></tr></table>'
          example: Service Now
    ListResponseCatalogApplication:
      type: object
      properties:
        count:
          type: integer
          description: Number of objects filtered
          format: int32
        page:
          type: integer
          description: Page number to be returned
          format: int32
        limit:
          type: integer
          description: Max elements to be returned
          format: int32
        resources:
          type: array
          description: List of objects
          items:
            "$ref": "#/components/schemas/CatalogApplication"
    EntitlementProperties_0:
      type: object
      properties:
        rightsRef:
          type: string
          description: Rights reference to lookup rights values.
          readOnly: true
          example: permissionSet
        rightsLabel:
          type: string
          description: Rights label to display on UI.
          readOnly: true
          example: Rights
        mandatory:
          type: string
          description: Indicates whether the entitlement is mandatory.
          readOnly: true
          example: 'false'
        multivalue:
          type: string
          description: Indicate if the entitlement can have one or more right values
          readOnly: true
          example: 'true'
        type:
          type: string
          description: Indicate the type of the right value
          readOnly: true
          example: reference
        canonicalValues:
          type: array
          description: Indicate the canonical values supported by permission
          example: "[admin, user]"
          items:
            type: string
    Application_1:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        icon:
          type: string
        url:
          type: string
        description:
          type: string
    User_1:
      type: object
      properties:
        id:
          type: string
        userName:
          type: string
        givenName:
          type: string
        familyName:
          type: string
        formatted:
          type: string
        email:
          type: string
        userType:
          type: string
        realm:
          type: string
    AccessInfo_0:
      type: object
      properties:
        name:
          type: string
          description: Name of the access. It must be unique for the application.
          readOnly: true
          example: Basic access
        description:
          type: string
          description: Description of the access
          readOnly: true
          example: Provides access to the application with basic authorization
      description: Rest representation for AccessInfo.
    AccessResult_0:
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the entitlement
          readOnly: true
          example: "<unique identifier>"
        name:
          type: string
          description: Name of the entitlement. It must be unique across the application
          readOnly: true
          example: Test entitlement unique name
        description:
          type: string
          description: Description
          readOnly: true
          example: Test entitlement description
        accessType:
          type: string
          description: Type of the entitlement
          readOnly: true
          enum:
          - permission
          - app role
        application:
          type: string
          description: Unique identifier of the application
          readOnly: true
          example: "<unique identifier>"
        hasRights:
          type: boolean
          description: Indicate whether the entitlement has rights.
          readOnly: true
        properties:
          "$ref": "#/components/schemas/EntitlementProperties_0"
        applicationDetails:
          "$ref": "#/components/schemas/ApplicationDetails"
        accessStatus:
          type: string
          description: Indicate whether an entitlement is granted to the user or not
          readOnly: true
    Entitlement_1:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
    AccessDetailsResult_0:
      type: object
      properties:
        code:
          type: string
          description: Unique identifier of the entitlement
          readOnly: true
          example: "<unique identifier>"
        name:
          type: string
          description: Name of the entitlement. It must be unique across the application
          readOnly: true
          example: Test entitlement unique name
        description:
          type: string
          description: Description
          readOnly: true
          example: Test entitlement description
        accessType:
          type: string
          description: Type of the entitlement
          readOnly: true
          enum:
          - permission
          - app role
        application:
          type: string
          description: Unique identifier of the application
          readOnly: true
          example: "<unique identifier>"
        hasRights:
          type: boolean
          description: Indicate whether the entitlement has rights.
          readOnly: true
        properties:
          "$ref": "#/components/schemas/EntitlementProperties_0"
        applicationDetails:
          "$ref": "#/components/schemas/ApplicationDetails"
        accessStatus:
          type: string
          description: Indicate whether an entitlement is granted to the user or not
          readOnly: true
        fixedRights:
          type: array
          description: Fixed right values of the entitlement
          items:
            "$ref": "#/components/schemas/EntitlementRight"
        countChildren:
          type: integer
          description: Indicate the number of children for the entitlement
          format: int32
          readOnly: true
        countChildrenPermissions:
          type: integer
          description: Number of permissions contained in the role
          format: int32
          readOnly: true
    V4PolicyMigrationRequestBody:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        creationTime:
          type: string
        author:
          type: string
        lastModifiedOn:
          type: string
        lastModifiedBy:
          type: string
        predefined:
          type: boolean
        schemaVersion:
          type: string
        validations:
          "$ref": "#/components/schemas/Validations_0"
        containsFirstFactor:
          type: boolean
        enforcementType:
          type: string
          enum:
          - fedSSO
          - nativeApp
          - nativeAppMobile
          - nativeAppWeb
          - adaptiveNativeAppWeb
          - adaptiveNativeAppMobile
        rules:
          type: array
          items:
            "$ref": "#/components/schemas/AccessPolicyRule_0"
    PolicyValidations:
      type: object
      properties:
        subscriptionsNeeded:
          type: array
          items:
            type: string
    AttributeContext:
      type: object
      properties:
        appId:
          type: boolean
        ipAddress:
          type: boolean
        userAgent:
          type: boolean
        devicePlatform:
          type: boolean
        deviceCompliance:
          type: boolean
        evaluationContext:
          type: boolean
        evaluationData:
          type: boolean
        evaluationDataType:
          type: boolean
        originalGrantType:
          type: boolean
        grantType:
          type: boolean
        grantId:
          type: boolean
        tenantId:
          type: boolean
        tenantName:
          type: boolean
    ServerSideAction:
      type: object
      properties:
        actionId:
          type: string
        version:
          type: string
      description: The server side actions for the policy
    IntegrationConfig:
      type: object
      properties:
        get_links:
          "$ref": "#/components/schemas/Links1"
        name:
          type: string
        id:
          type: string
        webhookId:
          type: string
    Self1:
      type: object
      properties:
        href:
          type: string
    AccessPolicyRequest:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the policy
          example: my custom access policy
        description:
          type: string
          description: The description of the policy
          example: custom access policy
        containsFirstFactor:
          type: boolean
          description: Policy contains firstFactor rules or not.
          example: true
        rules:
          type: array
          items:
            "$ref": "#/components/schemas/AccessPolicyRule_0"
        meta:
          "$ref": "#/components/schemas/Metadata_0"
        validations:
          "$ref": "#/components/schemas/PolicyValidations"
      description: The request payload to create or update a policy
    PolicyMetadata:
      required:
      - state
      type: object
      properties:
        state:
          type: string
          description: The state of the revision
          example: ACTIVE
          enum:
          - IDLE
          - DRAFT
          - DRY
          - ACTIVE
        schema:
          type: string
          description: The schema version of this policy
          example: urn:access:policy:5.0:schema
        revision:
          type: integer
          description: The revision number for this policy
          format: int32
          readOnly: true
          example: 0
        label:
          type: string
          description: A label for the revision
          example: Initial revision
        predefined:
          type: boolean
          description: Is the policy predefined
          readOnly: true
          example: false
        created:
          type: integer
          description: The time when this revision was created
          format: int64
          readOnly: true
          example: 1603939885
        createdBy:
          type: string
          description: The user who created this revision
          readOnly: true
          example: 6000000ABC
        lastActive:
          type: integer
          description: When was this revision's state last 'ACTIVE'
          format: int64
          readOnly: true
          example: 1603939885
        modified:
          type: integer
          description: The time when this revision was last modified
          format: int64
          readOnly: true
          example: 1603939885
        modifiedBy:
          type: string
          description: The user who last modified this revision
          readOnly: true
          example: 6000000ABC
        scope:
          uniqueItems: true
          type: array
          description: Which scopes are permitted to apply this policy
          example: '["administrators"]'
          items:
            type: string
            enum:
            - administrators
            - developers
        enforcementType:
          type: string
          enum:
          - fedSSO
          - nativeApp
          - nativeAppMobile
          - nativeAppWeb
          - adaptiveNativeAppWeb
          - adaptiveNativeAppMobile
        referencedBy:
          uniqueItems: true
          type: array
          description: Which policies reference this policy
          example: "[123, 456]"
          items:
            type: integer
            format: int64
        references:
          uniqueItems: true
          type: array
          description: Which policies does this policy reference
          example: "[123, 456]"
          items:
            type: integer
            format: int64
        tenantDefaultPolicy:
          type: boolean
          description: should this policy be the default
          example: false
      description: Metadata for a policy
    IntegrationAttributes:
      type: object
      properties:
        integrations:
          type: array
          items:
            "$ref": "#/components/schemas/IntegrationConfig"
        totalCount:
          type: integer
          format: int32
    ReferencedRule:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Links1:
      type: object
      properties:
        self:
          "$ref": "#/components/schemas/Self1"
    PolicyContext:
      type: object
      properties:
        id:
          type: boolean
        policyName:
          type: boolean
        contextPolicyId:
          type: boolean
        policyEnforcementType:
          type: boolean
        contextPolicyName:
          type: boolean
    ReferencedPolicies:
      type: object
      properties:
        policies:
          type: array
          description: Total number of attributes that are referenced int he access
            polcies.
          example: '"policies": []'
          items:
            "$ref": "#/components/schemas/ReferencedPolicy"
        totalCount:
          type: integer
          description: Total number of access polcies referneced by a particular custom
            attribute.
          format: int32
          readOnly: true
          example: 1
    ReferencedPolicy:
      required:
      - get_links
      - id
      - name
      - rules
      type: object
      properties:
        get_links:
          "$ref": "#/components/schemas/Links"
        id:
          type: integer
          description: Referenced access policy Id
          format: int64
          readOnly: true
          example: 1234546
        name:
          type: string
          description: Referenced access policy name
          readOnly: true
          example: Sample policy
        rules:
          type: array
          description: List of rules containing custom attributes.
          example: '"rules":[]'
          items:
            "$ref": "#/components/schemas/ReferencedRule"
    IntegrationProcessingEndpoint:
      type: object
      properties:
        redirectUri:
          type: string
    AccessPolicyCondition:
      type: object
      properties:
        type:
          type: string
    AdaptiveContext:
      type: object
      properties:
        riskScore:
          type: boolean
        decision:
          type: boolean
        reason:
          type: boolean
        reasonId:
          type: boolean
        recommendation:
          type: boolean
        userBehavioralScore:
          type: boolean
        userBehavioralScorePassed:
          type: boolean
        newDevice:
          type: boolean
        riskyDevice:
          type: boolean
        riskyConnection:
          type: boolean
        country:
          type: boolean
        city:
          type: boolean
        isp:
          type: boolean
        newLocation:
          type: boolean
        behavioralAnomaly:
          type: boolean
        continent:
          type: boolean
        region:
          type: boolean
        browser:
          type: boolean
        browserVersion:
          type: boolean
        os:
          type: boolean
        ruleAction:
          type: boolean
        trusteerAvailable:
          type: boolean
        adaptiveRiskScoreBasedDecision:
          type: boolean
        snippetId:
          type: boolean
        previousSuccessfulMFA:
          type: boolean
        remoteAccessToolIndication:
          type: boolean
        deviceAuthenticationStatus:
          type: boolean
        gdId:
          type: boolean
    EvaluationOutboundAttributesV1:
      type: object
      properties:
        sessionContext:
          "$ref": "#/components/schemas/SessionContext"
        attributeContext:
          "$ref": "#/components/schemas/AttributeContext"
        policyContext:
          "$ref": "#/components/schemas/PolicyContext"
        adaptiveContext:
          "$ref": "#/components/schemas/AdaptiveContext"
        customAttributes:
          type: array
          items:
            type: string
    SessionContext:
      type: object
      properties:
        uid:
          type: boolean
        sessionId:
          type: boolean
        emailAddr:
          type: boolean
        mobileNumber:
          type: boolean
        workNumber:
          type: boolean
        deviceId:
          type: boolean
        preferredUsername:
          type: boolean
        userType:
          type: boolean
        groupIds:
          type: boolean
    Links:
      type: object
      properties:
        self:
          "$ref": "#/components/schemas/Self_0"
    Policy_0:
      required:
      - name
      type: object
      properties:
        id:
          type: integer
          description: The policy identifier
          format: int64
          readOnly: true
          example: 123456
        name:
          type: string
          description: The name of the policy
          example: my custom access policy
        description:
          type: string
          description: The description of the policy
          example: custom access policy
        rules:
          type: array
          items:
            "$ref": "#/components/schemas/AccessPolicyRule_0"
        meta:
          "$ref": "#/components/schemas/PolicyMetadata"
        validations:
          "$ref": "#/components/schemas/PolicyValidations"
        requiredSubscriptions:
          uniqueItems: true
          type: array
          items:
            type: string
      description: A policy
    Custom_Attributes_and_Supported_Attributes_Referenced_in_Integration_Configs:
      type: object
      properties:
        get_embedded:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/IntegrationAttributes"
          description: Map of custom attributes and supported attributes referenced
            Integration configs.
          example: '{ "id1" : { "integrations": []} } '
        totalCount:
          type: integer
          description: Total number of attributes that are referenced in the integration
            configs.
          format: int32
          readOnly: true
          example: 1
      description: Maps of Custom Attributes and Supported Attributes Referenced in
        Integration Configs.
    AccessPolicyRule_0:
      required:
      - alwaysRun
      - firstFactor
      - name
      type: object
      properties:
        id:
          type: string
          description: The rule identifier
          readOnly: true
          example: '123456'
        name:
          type: string
          description: The name of the rule
          example: My rule
        description:
          type: string
          description: The description of the rule
          example: My rule
        alwaysRun:
          type: boolean
          description: Should this rule always run
          example: true
        firstFactor:
          type: boolean
          description: Is this a first factor rule
          example: true
        conditions:
          type: array
          items:
            "$ref": "#/components/schemas/AccessPolicyCondition"
        result:
          "$ref": "#/components/schemas/AccessPolicyResult_0"
      description: An access policy rule
    Metadata_0:
      required:
      - state
      type: object
      properties:
        state:
          type: string
          description: The state of the revision
          example: ACTIVE
          enum:
          - IDLE
          - DRAFT
          - DRY
          - ACTIVE
        schema:
          type: string
          description: The schema version of this policy
          example: urn:access:policy:5.0:schema
        label:
          type: string
          description: A label for the revision
          example: Initial revision
        scope:
          uniqueItems: true
          type: array
          description: Which scopes are permitted to apply this policy
          example: '["administrators"]'
          items:
            type: string
            enum:
            - administrators
            - developers
        enforcementType:
          type: string
          description: The enforcement type of the policy
          example: fedSSO
          enum:
          - fedSSO
          - nativeApp
          - nativeAppMobile
          - nativeAppWeb
          - adaptiveNativeAppWeb
          - adaptiveNativeAppMobile
        evaluationContext:
          type: object
          additionalProperties:
            type: string
          description: Sub-policy evaluation details
          example: '{"landing":"12345665"}'
        tenantDefaultPolicy:
          type: boolean
          description: should this policy be the default
          example: false
      description: Metadata for a access policy
    Attribute1_0:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
    Self_0:
      required:
      - href
      type: object
      properties:
        href:
          type: string
          description: URL to get the referenced access policy.
          readOnly: true
          example: "/ui/admin/accesspolicy/399844"
    Validations_0:
      type: object
      properties:
        subscriptionsNeeded:
          type: array
          items:
            type: string
    AccessPolicyResult_0:
      required:
      - authnMethods
      type: object
      properties:
        action:
          type: string
          enum:
          - ACTION_DENY
          - ACTION_ALLOW
          - ACTION_MFA_ALWAYS
          - ACTION_MFA_PER_SESSION
          - ACTION_DENY_OVERRIDE
          - ACTION_MFA_OVERRIDE
          - ACTION_ALLOW_OVERRIDE
          - ACTION_DENY_AND_REDIRECT
          - ACTION_REDIRECT
          - ACTION_CONTINUE
        serverSideActions:
          type: array
          items:
            "$ref": "#/components/schemas/ServerSideAction"
        authnMethods:
          type: array
          description: The authentication methods
          example: '["anyfactor"]'
          items:
            type: string
      description: The result of an access policy
    PolicyVaultList_0:
      required:
      - count
      - limit
      - page
      - total
      type: object
      properties:
        total:
          type: integer
          description: The total number of resources found
          format: int32
          readOnly: true
          example: 1
        count:
          type: integer
          description: The  number of resources returned
          format: int32
          readOnly: true
          example: 1
        limit:
          type: integer
          description: The limit of the number of resources
          format: int32
          readOnly: true
          example: 200
        page:
          type: integer
          description: The current page of results
          format: int32
          readOnly: true
          example: 0
        policies:
          type: array
          items:
            "$ref": "#/components/schemas/Policy_0"
      description: A paginated list of policies
    Third_Party_Risk_Integration_Configuration:
      type: object
      properties:
        id:
          type: string
          format: uuid
        webhookId:
          type: string
          format: uuid
        referenceId:
          type: integer
          format: int32
        created:
          type: integer
          format: int64
        name:
          type: string
        version:
          type: integer
          format: int32
        evaluationOutboundAttributes:
          "$ref": "#/components/schemas/EvaluationOutboundAttributesV1"
        supportedAttributes:
          type: array
          items:
            "$ref": "#/components/schemas/Attribute1_0"
        integrationProcessingEndpoint:
          "$ref": "#/components/schemas/IntegrationProcessingEndpoint"
        enabled:
          type: boolean
      description: A configuration to enable third party risk evaluations
    Custom_Attributes_Referenced_Policies:
      required:
      - totalCount
      type: object
      properties:
        _embedded:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/ReferencedPolicies"
        totalCount:
          type: integer
          description: Total number of attributes that are referenced int he access
            polcies.
          format: int32
          readOnly: true
          example: 1
      description: Map of Custom Attributes Referenced Policies.
    ClientAuthentication:
      type: object
      properties:
        client_id:
          description: The OIDC client ID that is required when the basic authorization
            header is not set.
          type: string
        client_secret:
          description: The OIDC client secret that is required when the basic authorization
            header is not set and the client is not a public client.
          type: string
        client_assertion:
          description: The JWT assertion being used to authenticate the client.
          type: string
        client_assertion_type:
          description: The format of client assertion.
          type: string
          enum:
          - urn:ietf:params:oauth:client-assertion-type:jwt-bearer
    CommonAuthorizeRequest:
      description: The request payload for /authorize and /par endpoints.
      type: object
      properties:
        response_type:
          description: 'A space-delimited list of response types. Valid response types
            are: code, token, id_token.'
          type: string
        response_mode:
          description: The response mode. It defaults to query for the authorization_code
            flow, and to fragment for the implicit or hybrid flow.
          type: string
          enum:
          - query
          - fragment
          - form_post
          - query.jwt
          - fragment.jwt
          - form_post.jwt
        redirect_uri:
          description: The redirect URI.
          type: string
        state:
          description: The state. An opaque value that is used to maintain the state
            between the request and the callback.
          type: string
        nonce:
          description: Nonce. The string value that is used to associate a client
            session with an ID Token to mitigate replay attacks. This attribute is
            required when the response type includes id_token.
          type: string
        prompt:
          description: Whether the user is prompted for reauthentication. When the
            value is "login", the user is reauthenticated. When the value is "none",
            the user is not be prompted for authentication.
          type: string
          enum:
          - none
          - login
        max_age:
          description: Maximum authentication age. Specifies the allowable elapsed
            time, in seconds, since the last time the user was authenticated.
          type: string
        code_challenge:
          description: Code challenge. Required if the OIDC client is configured to
            require proof key for code exchange (PKCE).
          type: string
        code_challenge_method:
          description: Code challenge method for PKCE. Defaults to plain if not specified.
          type: string
          enum:
          - plain
          - S256
        scope:
          description: A space-delimited list of scopes that are associated with this
            authorization request.
          type: string
        claims:
          description: The JSON that contains the claims for id_token or userinfo
            endpoint.
          type: string
        login_hint:
          description: Login hint. Value to use when prompting the user for login.
            Optional for OIDC request. This value is the username as a string (e.g.
            john@ibm.com).
          type: string
        request:
          description: The request object in the form of a signed JWT. This can be
            used as an alternative to sending the individual properties in the form.
          type: string
        request_uri:
          description: The URI referencing the request object.
          type: string
    AuthorizeRequest:
      allOf:
      - type: object
        required:
        - client_id
        properties:
          client_id:
            description: The OIDC client ID.
            type: string
      - "$ref": "#/components/schemas/CommonAuthorizeRequest"
    PushAuthorizeRequest:
      allOf:
      - "$ref": "#/components/schemas/CommonAuthorizeRequest"
      - "$ref": "#/components/schemas/ClientAuthentication"
    TokenRequest:
      allOf:
      - type: object
        required:
        - grant_type
        properties:
          grant_type:
            description: The grant type.
            type: string
            enum:
            - client_credentials
            - authorization_code
            - refresh_token
            - password
            - urn:ietf:params:oauth:grant-type:token-exchange
          scope:
            description: A space-delimited list of scopes that are associated with
              generated access token.
            type: string
          code:
            description: The authorization code. It is only required for "authorization_code"
              grant types.
            type: string
          code_verifier:
            description: The code verifier. This is used to verify the code challenge
              that was sent at the authorize endpoint. Required if the OIDC client
              is configured to require proof key for code exchange (PKCE)
            type: string
          redirect_uri:
            description: The redirect URI. It is only required for "authorization_code"
              grant types.
            type: string
          refresh_token:
            description: The refresh token. It is only required for "refresh_token"
              grant types.
            type: string
          username:
            description: The user credential of resource owner. It is only required
              for "password" grant types.
            type: string
          password:
            description: The password credential of resource owner. It is only required
              for "password" grant types.
            type: string
          subject_token:
            description: The token identifying the subject for a token exchange flow.
            type: string
          subject_token_type:
            description: The token type of the subject_token.
            type: string
          actor_token:
            description: The token identifying the acting party in a token exchange
              flow.
            type: string
          actor_token_type:
            description: The token type of the actor_token.
          requested_token_type:
            description: The type of token that should be returned as part of the
              token exchange flow.
            type: string
      - "$ref": "#/components/schemas/ClientAuthentication"
    IntrospectRequest:
      allOf:
      - type: object
        required:
        - token
        properties:
          token:
            description: The token that is being introspected.
            type: string
          token_type_hint:
            description: The token type. This attribute is an optional hint about
              the token that is being introspected.
            type: string
      - "$ref": "#/components/schemas/ClientAuthentication"
    RevokeRequest:
      allOf:
      - type: object
        required:
        - token
        properties:
          token:
            description: The token that is being revoked.
            type: string
          token_type_hint:
            description: The token type. This attribute is an optional hint about
              the token that is being revoked.
            type: string
      - "$ref": "#/components/schemas/ClientAuthentication"
    MetadataResponse:
      description: ProviderMetadata defines the metadata of the provider
      type: object
      required:
      - issuer
      - authorization_endpoint
      properties:
        issuer:
          type: string
          description: The OpenID provider issuer identifier.
          example: https://DefaultTenant/oauth2
        authorization_endpoint:
          type: string
          description: The URL of the OpenID provider authorization endpoint.
          example: https://DefaultTenant/oauth2/authorize
        token_endpoint:
          type: string
          description: The URL of the OpenID provider token endpoint.
          example: https://DefaultTenant/oauth2/token
        introspection_endpoint:
          type: string
          description: The URL of the OpenID provider introspect endpoint.
          example: https://DefaultTenant/oauth2/introspect
        userinfo_endpoint:
          type: string
          description: The URL of the OpenID provider userinfo endpoint.
          example: https://DefaultTenant/oauth2/userinfo
        revocation_endpoint:
          type: string
          description: The URL of the OpenID provider revoke endpoint.
          example: https://DefaultTenant/oauth2/revoke
        device_authorization_endpoint:
          type: string
          description: The URL of the OpenID provider device authorization endpoint.
        user_authorization_endpoint:
          type: string
          description: The URL of the OpenID provider user authorization endpoint.
        pushed_authorization_request_endpoint:
          type: string
          description: The URL of the OpenID provider pushed authorization request
            endpoint.
          example: https://DefaultTenant/oauth2/par
        registration_endpoint:
          type: string
          description: The URL of the OpenID provider dynamic client registration
            endpoint.
          example: https://DefaultTenant/oauth2/register
        jwks_uri:
          type: string
          description: The URL of the OpenID provider JSON Web Key Set endpoint.
          example: https://DefaultTenant/oauth2/jwks
        response_types_supported:
          type: array
          items:
            type: string
          description: The JSON array that contains a list of the response_type values
            that this OpenID provider supports.
          example:
          - none
          - code
          - token
          - id_token
          - code token
          - code id_token
          - token id_token
          - code token id_token
        response_modes_supported:
          type: array
          items:
            type: string
          description: The JSON array that contains a list of the response_mode values
            that this OpenID provider supports.
          example:
          - query
          - fragment
          - form_post
          - query.jwt
          - fragment.jwt
          - form_post.jwt
        grant_types_supported:
          type: array
          items:
            type: string
          description: The JSON array that contains a list of the grant_type values
            that this OpenID provider supports.
          example:
          - authorization_code
          - implicit
          - password
          - refresh_token
          - client_credentials
        token_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
          description: The JSON array that contains a list of client authentication
            methods that are supported by this token endpoint.
          example:
          - client_secret_basic
          - client_secret_post
          - private_key_jwt
          - tls_client_auth
        id_token_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: The JSON array that contains a list of the JSON Web Signature
            (JWS) signing algorithms that are supported by the OpenID provider for
            the ID token to encode the claims in a JSON Web Token.
          example:
          - RS256
          - RS384
          - RS512
          - PS256
          - PS384
          - PS512
          - ES256
          - ES384
          - ES512
        id_token_encryption_alg_values_supported:
          type: array
          items:
            type: string
          description: The JSON array that contains a list of the JSON Web Encryption
            (JWE) algorithms that are supported by the OpenID provider for the ID
            token to encode the claims in a JSON Web Token.
          example:
          - none
          - RSA-OAEP
          - RSA-OAEP-256
        id_token_encryption_enc_values_supported:
          type: array
          items:
            type: string
          description: The JSON array that contains a list of the JSON Web Encryption
            (JWE) encryption algorithms that are supported by the OpenID provider
            for the ID token to encode the claims in a JSON Web Token.
          example:
          - none
          - A128GCM
          - A192GCM
          - A256GCM
        userinfo_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: The JSON array that contains a list of the JSON Web Signature
            (JWS) signing algorithms that are supported by the UserInfo endpoint to
            encode the claims in a JSON Web Token.
          example:
          - none
        userinfo_encryption_alg_values_supported:
          type: array
          items:
            type: string
          description: The JSON array that contains a list of the JSON Web Encryption
            (JWE) algorithms that are supported by the UserInfo endpoint to encode
            the claims in a JSON Web Token.
          example:
          - none
        userinfo_encryption_enc_values_supported:
          type: array
          items:
            type: string
          description: The JSON array that contains a list of the JSON Web Encryption
            (JWE) encryption algorithms that are supported by the UserInfo endpoint
            to encode the claims in a JSON Web Token.
          example:
          - none
        request_object_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: The JSON array that contains a list of the JSON Web Signature
            (JWS) signing algorithms that are supported by the OpenID provider for
            request objects.
          example:
          - none
        request_object_encryption_alg_values_supported:
          type: array
          items:
            type: string
          description: The JSON array that contains a list of the JSON Web Encryption
            (JWE) algorithms that are supported by the OpenID provider for request
            objects.
          example:
          - none
        request_object_encryption_enc_values_supported:
          type: array
          items:
            type: string
          description: The JSON array that contains a list of the JSON Web Encryption
            (JWE) encryption algorithms that are supported by the OpenID provider
            for request objects.
          example:
          - none
        subject_types_supported:
          type: array
          items:
            type: string
          description: The JSON array containing a list of the Subject Identifier
            types that this OP supports.
          example:
          - public
        scopes_supported:
          type: array
          items:
            type: string
          description: The JSON array that contains a list of the scope values that
            this server supports.
          example:
          - openid
          - profile
          - email
          - phone
          - address
        claims_supported:
          type: array
          items:
            type: string
          description: The JSON array that contains a list of the names of the claims
            that the OpenID provider might be able to supply values for.
          example:
          - groupIds
          - uid
          - family_name
          - tenantId
          - employee_id
          - upn
          - preferred_username
          - email
          - given_name
          - mobile_number
          - job_title
          - realmName
          - name
          - department
          - iss
        claim_types_supported:
          type: array
          items:
            type: string
          description: The JSON array that contains a list of the claim types that
            the OpenID provider supports.
          example:
          - normal
        claims_parameter_supported:
          type: boolean
          description: A Boolean value that specifies whether the OpenID provider
            supports the use the claims parameter.
          example: true
        request_parameter_supported:
          type: boolean
          description: A Boolean value that specifies whether the OpenID provider
            supports the use the request parameter.
          example: true
        request_uri_parameter_supported:
          type: boolean
          description: A Boolean value that specifies whether the OpenID provider
            supports the use of the request_uri parameter.
          example: false
        require_request_uri_registration:
          type: boolean
          description: A Boolean value that specifies whether the OpenID provider
            requires that all request_uri values be pre-registered before use. These
            values are registered by using the request_uris registration parameter.
          example: false
        tls_client_certificate_bound_access_tokens:
          type: boolean
          example: true
        mtls_endpoint_aliases:
          type: object
          additionalProperties:
            type: string
    ClientMetadata:
      required:
      - redirect_uris
      type: object
      properties:
        access_policy:
          type: string
          description: Access Policy ID.
        all_users_entitled:
          type: boolean
          description: Set to true if all users are entitled to use this client.
        api_entitlements:
          type: array
          description: List of API entitlements.
          items:
            type: string
        authorization_encrypted_response_alg:
          type: string
          description: JWE 'alg' algorithm required for encrypting authorization responses.
        authorization_encrypted_response_enc:
          type: string
          description: JWE 'enc' algorithm required for encrypting authorization responses.
        authorization_signed_response_alg:
          type: string
          description: JWS 'alg' required for signing authorization responses.
        authorize_request_mapping:
          type: array
          description: Configuration to add request parameters for authorize endpoint
          items:
            type: object
            properties:
              name:
                type: string
                description: The name of the target parameter. 'context' sets the
                  rule for authorization context. 'scope' sets the rule for the Consent
                  request. 'intentId' sets the rule for the Open Banking intent ID.
                enum:
                - context
                - scope
                - intentId
              custom:
                type: string
                description: The custom rule that defines the value of the target
                  parameter to be set.
        authorize_response_mapping:
          type: array
          description: Configuration to add response parameters for authorize endpoint
          items:
            type: object
            properties:
              name:
                type: string
                description: The name of the target parameter.
              custom:
                type: string
                description: The custom rule that defines the value of the target
                  parameter to be set.
              type:
                type: string
                description: The type of the target parameter. Allowed values are
                  'header' or 'parameter'.
                enum:
                - header
                - parameter
        client_name:
          type: string
          description: Client name.
        consent_action:
          type: string
          description: Request for user consent.
          enum:
          - never_prompt
          - always_prompt
        enforce_pkce:
          type: boolean
          description: Enforce the usage of PKCE.
        grant_types:
          items:
            type: string
          type: array
          description: Array of grant types that the client may use. The allowed grant
            types are 'authorization_code', 'implicit', 'password', and 'refresh_token'.
        id_token_encrypted_response_alg:
          type: string
          description: JWE alg algorithm required for encrypting the ID Token assigned
            to this client.
        id_token_encrypted_response_enc:
          type: string
          description: JWE enc algorithm required for encrypting the ID Token assigned
            to this client.
        id_token_signed_response_alg:
          type: string
          description: Token signing algorithm required for signing the ID token issued
            for this client.
        identity_providers:
          type: array
          description: List of identity providers.
          items:
            type: string
        initiate_login_uri:
          type: string
          description: URI that uses the https scheme that a third party can use to
            initiate a login by the RP.
        jwks_uri:
          type: string
          description: URL referencing the client's JSON Web Key Set document representing
            the client's public keys.
        redirect_uris:
          items:
            type: string
          type: array
          description: Array of redirection URIs for use in redirect-based flows.
        request_object_check_expiry:
          type: boolean
          description: Flag to indicate whether expiry claims should be set in the
            request object.
        request_object_encryption_alg:
          type: string
          description: JWE 'alg' algorithm the RP is declaring that it can use for
            encrypting Request Objects sent to the OP.
        request_object_encryption_enc:
          type: string
          description: JWE 'enc' algorithm the RP is declaring that it can use for
            encrypting Request Objects sent to the OP.
        request_object_lifetime:
          type: integer
          description: The lifetime of the request object.
        request_object_parameters_only:
          type: boolean
          description: Flag to suggest whether all the request parameters should only
            be in the request object.
        request_object_signing_alg:
          type: string
          description: JWS 'alg' algorithm that MUST be used for signing Request Objects
            sent to the OP.
        require_pushed_authorization_requests:
          type: boolean
          description: Flag to indicate whether pushed authorization request (PAR)
            is required.
        request_uris:
          type: array
          description: Array of request_uri values that are pre-registered by the
            RP for use at the OP.
          items:
            type: string
        response_types:
          items:
            type: string
          type: array
          description: Array of the OAuth 2.0 response types that the client may use.
        restrict_api_entitlements:
          type: boolean
          description: Flag to indicate whether API entitlements should be restricted.
        scope:
          description: A space-delimited string of allowed scopes.
          type: string
        software_id:
          type: string
          description: A unique identifier string that identifies the client software
            to be digitally registered.
        software_statement:
          type: string
          description: A signed JWT that asserts metadata values about the client
            software as a bundle.
        theme_id:
          type: string
          description: The theme ID, if any.
        tls_client_auth_san_dns:
          type: string
          description: The expected DNS name SAN entry in the certificate that the
            client will use in mutual TLS authentication.
        tls_client_auth_subject_dn:
          type: string
          description: The expected subject distinguished name of the certificate
            that the client will use in mutual TLS authentication.
        tls_client_auth_san_email:
          type: string
          description: The expected email address SAN entry in the certificate that
            the client will use in mutual TLS authentication.
        tls_client_auth_san_ip:
          type: string
          description: The expected IP address SAN entry in the certificate that the
            client will use in mutual TLS authentication.
        tls_client_auth_san_uri:
          type: string
          description: The expected URI SAN entry in the certificate that the client
            will use in mutual TLS authentication.
        tls_client_certificate_bound_access_tokens:
          type: boolean
          description: Indicates if certificate binding for access token is required.
        token_endpoint_auth_method:
          type: string
          description: The client authentication method for the token endpoint.
          enum:
          - default
          - client_secret_basic
          - client_secret_post
          - private_key_jwt
          - tls_client_auth
        token_endpoint_auth_signing_alg:
          type: string
          description: JWS 'alg' algorithm that must be used for signing the JWT used
            to authenticate the client at the Token Endpoint for the 'private_key_jwt'
            authentication methods.
        token_endpoint_auth_single_use_jti:
          type: boolean
          description: Flag to indicate whether the JTI for token endpoint is single-use
            only.
        token_request_mapping:
          type: array
          description: Configuration to add request parameters for token endpoint
          items:
            type: object
            properties:
              name:
                type: string
                description: The name of the target parameter.
              custom:
                type: string
                description: The custom rule that defines the value of the target
                  parameter to be set.
        token_response_mapping:
          type: array
          description: Configuration to add response parameters for token endpoint
          items:
            type: object
            properties:
              name:
                type: string
                description: The name of the target parameter.
              custom:
                type: string
                description: The custom rule that defines the value of the target
                  parameter to be set.
              type:
                type: string
                description: The type of the target parameter. Allowed values are
                  'header' or 'parameter'.
                enum:
                - header
                - parameter
        userinfo_encrypted_response_alg:
          type: string
          description: Userinfo response JWT encryption algorithm.
        userinfo_encrypted_response_enc:
          type: string
          description: Userinfo response JWT encryption content algorithm.
        userinfo_signed_response_alg:
          type: string
          description: Userinfo response JWT signing algorithm.
    DynamicClientRequest:
      allOf:
      - "$ref": "#/components/schemas/ClientMetadata"
      - type: object
        properties:
          client_id:
            type: string
            description: Client ID. Will be automatically generated if not provided.
          client_secret:
            type: string
            description: Client secret. Will be automatically generated if not provided.
          id_token_claims:
            items:
              type: string
            type: array
            description: List of claims for id_token and user information.
          token_claims:
            items:
              type: string
            type: array
            description: List of claims for introspect and JWT access token.
    IntrospectResponse_1:
      required:
      - active
      type: object
      properties:
        active:
          type: boolean
          description: The Boolean indicator that indicates whether the presented
            token is currently active.
        client_id:
          type: string
          description: The OIDC client ID.
        userType:
          enum:
          - regular
          - federated
          type: string
          example: regular
          description: The user type that is associated with the subject of this token.
            This attribute is only available for grants other than client_credentials
            grants.
        preferred_username:
          type: string
          description: The preferred user name that is associated with the subject
            of this token. This attribute is only available for grants other than
            client_credentials grants.
        uniqueSecurityName:
          type: string
          description: The unique security name of the token.
        token_type:
          enum:
          - access_token
          - refresh_token
          type: string
          example: access_token
          description: The type of the token.
        realmName:
          type: string
          description: The realm name that is associated with this token.
        ext:
          additionalProperties:
            type: string
          type: object
          description: The extension map of attributes that are associated with this
            token.
        groupIds:
          items:
            type: string
          type: array
          description: The list of group IDs that are associated with the subject
            of this token. This attribute is only available for grants other than
            client_credentials grants.
        exp:
          type: integer
          description: The timestamp, in the POSIX time format, indicating when this
            token will expire.
          format: int32
        iat:
          type: integer
          description: The time stamp, in the POSIX time format, that indicates when
            this token was originally issued.
          format: int32
        scope:
          type: string
          description: A space-delimited list of scopes that are associated with this
            token.
        grant_type:
          type: string
          description: The grant type that is used to request this token.
        sub:
          type: string
          description: The subject of the token. For client_credentials grants, the
            subject is the client_id. For other grants, the subject is the unique
            user identifier.
    DynamicClientResponse_0:
      allOf:
      - "$ref": "#/components/schemas/ClientMetadata"
      - type: object
        properties:
          client_id:
            description: Client identifier.
            type: string
          client_id_issued_at:
            description: Time at which the client identifier was assigned.
            type: string
          client_secret:
            description: Client secret.
            type: string
          client_secret_expires_at:
            description: Time at which the client secret expires.
            type: string
          id_token_map:
            type: array
            description: The attributes that should be present in the generated ID
              token.
            items:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the attribute to be shown in the ID Token.
                attribute_id:
                  type: string
                  description: The ID of the attribute to retrieve the value for the
                    ID Token from.
          registration_access_token:
            type: string
            description: Access token that is used to run subsequent operations at
              the client configuration endpoint.
          registration_client_uri:
            type: string
            description: URL of the client configuration endpoint for this client.
          token_map:
            type: array
            description: List of claims for introspect and JWT access token.
            items:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the attribute to be shown in the token.
                attribute_id:
                  type: string
                  description: The ID of the attribute to retrieve the value for the
                    token from.
    Error_0:
      type: object
      required:
      - error
      properties:
        error:
          type: string
          description: The OIDC error.
        error_description:
          type: string
          description: The OIDC error description.
    batchCheckOp:
      type: object
      properties:
        function:
          type: string
          description: Function to check
          example: args.user.id
          x-go-name: Function
      description: BatchOp is the domain model describing a single operation for a
        batch check request
      x-go-name: BatchOp
      x-go-package: github.ibm.com/sec-ci/rule-service/pkg/models/api/check
    batchCheckRequest:
      type: object
      properties:
        envType:
          type: string
          description: Environment to check the function in
          example: attribute
          x-go-name: EnvType
        ops:
          type: array
          description: Array of operations
          items:
            "$ref": "#/components/schemas/batchCheckOp"
          x-go-name: Ops
        sys:
          type: object
          additionalProperties:
            type: object
          description: System level config parameters for the CEL rule
          example:
            trace: true
          x-go-name: Sys
      description: BatchRequest is the domain model for the request payload of a batch
        check request
      x-go-name: BatchRequest
      x-go-package: github.ibm.com/sec-ci/rule-service/pkg/models/api/check
    batchCheckResponse:
      type: object
      properties:
        error:
          "$ref": "#/components/schemas/VerifyError"
        results:
          type: array
          description: Results of the batch evaluation of supplied rules
          items:
            "$ref": "#/components/schemas/checkResponse"
          x-go-name: Results
      description: BatchResponse domain model for the response payload of a batch
        check request
      x-go-name: BatchResponse
      x-go-package: github.ibm.com/sec-ci/rule-service/pkg/models/api/check
    batchOp:
      type: object
      properties:
        ctx:
          type: object
          additionalProperties:
            type: object
          x-go-name: Ctx
        function:
          type: string
          description: Function to evaluate
          example: args.user.id
          x-go-name: Function
      description: BatchOp is the domain model describing a single operation for a
        batch run request
      x-go-name: BatchOp
      x-go-package: github.ibm.com/sec-ci/rule-service/pkg/models/api/run
    batchRunRequest:
      type: object
      properties:
        args:
          type: object
          additionalProperties:
            type: object
          description: Relevant arguments to help evaluate the function
          example:
            idsuser:
              preferred_username:
              - preferred_username
              realmName:
              - realmname
            user:
              emails:
              - type: work
                value: userobject@userobject.com
              name:
                familyName: familyName
                formatted: formatted-name
                givenName: givenName
                middleName: middleName
          x-go-name: Args
        envType:
          type: string
          description: Environment to evaluate the function in
          example: attribute
          x-go-name: EnvType
        ops:
          type: array
          description: Array of operations
          items:
            "$ref": "#/components/schemas/batchOp"
          x-go-name: Ops
        sys:
          type: object
          additionalProperties:
            type: object
          x-go-name: Sys
      description: BatchRequest is the domain model for the request payload of a batch
        run request
      x-go-name: BatchRequest
      x-go-package: github.ibm.com/sec-ci/rule-service/pkg/models/api/run
    batchRunResponse:
      type: object
      properties:
        error:
          "$ref": "#/components/schemas/VerifyError"
        results:
          type: array
          description: Results of the batch evaluation of supplied rules
          items:
            "$ref": "#/components/schemas/runResponse"
          x-go-name: Results
      description: BatchResponse domain model for the response payload of a batch
        run request
      x-go-name: BatchResponse
      x-go-package: github.ibm.com/sec-ci/rule-service/pkg/models/api/run
    checkRequest:
      type: object
      properties:
        envType:
          type: string
          description: Environment to evaluate the function in
          example: attribute
          x-go-name: EnvType
        function:
          type: string
          description: Function to check
          example: args.user.id
          x-go-name: Function
        sys:
          type: object
          additionalProperties:
            type: object
          description: System level config parameters for the CEL rule
          example:
            trace: true
          x-go-name: Sys
      description: Request is the domain model for the request payload of the POST
        /check API
      x-go-name: Request
      x-go-package: github.ibm.com/sec-ci/rule-service/pkg/models/api/check
    checkResponse:
      type: object
      properties:
        error:
          "$ref": "#/components/schemas/VerifyError"
        result:
          type: boolean
          description: Result of the rule's syntax check
          example: true
          x-go-name: Result
      description: Response is the domain model for the response payload of the /check
        API
      x-go-name: Response
      x-go-package: github.ibm.com/sec-ci/rule-service/pkg/models/api/check
    runRequest:
      type: object
      properties:
        args:
          type: object
          additionalProperties:
            type: object
          description: Relevant arguments to help evaluate the function
          example:
            idsuser:
              preferred_username:
              - preferred_username
              realmName:
              - realmname
            user:
              emails:
              - type: work
                value: userobject@userobject.com
              name:
                familyName: familyName
                formatted: formatted-name
                givenName: givenName
                middleName: middleName
          x-go-name: Args
        envType:
          type: string
          description: Environment to evaluate the function in
          example: attribute
          x-go-name: EnvType
        function:
          type: string
          description: Function to evaluate
          example: args.user.id
          x-go-name: Function
        sys:
          type: object
          additionalProperties:
            type: object
          x-go-name: Sys
      description: Request is the domain model for the request payload of the POST
        /run API
      x-go-name: Request
      x-go-package: github.ibm.com/sec-ci/rule-service/pkg/models/api/run
    runResponse:
      type: object
      properties:
        error:
          "$ref": "#/components/schemas/VerifyError"
        result:
          type: object
          description: Result of evaluating the supplied rule
          example: '{"result":"userobject-id"}'
          x-omitempty: true
          x-go-name: Result
        trace:
          type: string
          description: Trace, if any
          x-omitempty: true
          x-go-name: Trace
      description: Response is the domain model for the response payload of the POST
        /run API
      x-go-name: Response
      x-go-package: github.ibm.com/sec-ci/rule-service/pkg/models/api/run
    AssertionSettings:
      type: object
      properties:
        assertionValidAfter:
          type: integer
          format: int32
        assertionValidBefore:
          type: integer
          format: int32
    Federation:
      type: object
      properties:
        protocol:
          type: string
        role:
          type: string
        id:
          type: string
        name:
          type: string
        templateName:
          type: string
        configuration:
          "$ref": "#/components/schemas/FederationConfiguration"
      description: WS-Federation Models
    FederationConfiguration:
      type: object
      properties:
        pointOfContactUrl:
          type: string
        companyName:
          type: string
        providerId:
          type: string
        sessionTimeout:
          type: integer
          format: int32
        messageValidTime:
          type: integer
          format: int32
        crlEnabled:
          type: boolean
        keySelectionCriteria:
          type: string
        identityMapping:
          "$ref": "#/components/schemas/IdentityMapping_0"
        nameIDFormat:
          "$ref": "#/components/schemas/NameIdFormat"
        organization:
          "$ref": "#/components/schemas/Organization"
        manageNameIDService:
          type: array
          items:
            "$ref": "#/components/schemas/Saml20Service"
        encryptionSettings:
          "$ref": "#/components/schemas/EncryptionSettings"
        artifactLifeTime:
          type: integer
          format: int32
        artifactResolutionService:
          type: array
          items:
            "$ref": "#/components/schemas/Saml20BindingService"
        singleLogoutService:
          type: array
          items:
            "$ref": "#/components/schemas/Saml20Service"
        attributeMapping:
          "$ref": "#/components/schemas/Saml20AttributeMapping"
    EncryptionSettings:
      type: object
      properties:
        decryptionKeyIdentifier:
          "$ref": "#/components/schemas/Saml20KeyIdentifier"
    NameIdFormat:
      type: object
      properties:
        defaultFormat:
          type: string
        supported:
          type: array
          items:
            type: string
    Organization:
      type: object
      properties:
        organizationName:
          type: string
        organizationDisplayName:
          type: string
        organizationURL:
          type: string
    Property:
      type: object
      properties:
        identityMappingRule:
          type: string
        identityMappingRuleReference:
          type: string
        ruleType:
          type: string
        uri:
          type: string
        sslKeyStore:
          type: string
        authType:
          type: string
        basicAuthUsername:
          type: string
        basicAuthPassword:
          type: string
        clientKeyStore:
          type: string
        clientKeyAlias:
          type: string
        messageFormat:
          type: string
        issuerUri:
          type: string
        appliesTo:
          type: string
    Saml20AttributeMapping:
      type: object
      properties:
        map:
          type: array
          items:
            "$ref": "#/components/schemas/AttributeMapping_1"
    Saml20BindingService:
      type: object
      properties:
        binding:
          type: string
        url:
          type: string
        index:
          type: integer
          format: int64
        default:
          type: boolean
    Saml20KeyIdentifier:
      type: object
      properties:
        keystore:
          type: string
        label:
          type: string
    Saml20Service:
      type: object
      properties:
        binding:
          type: string
        url:
          type: string
    V2Model:
      type: object
      properties:
        protocol:
          type: string
        role:
          type: string
        id:
          type: string
        name:
          type: string
        templateName:
          type: string
        configuration:
          "$ref": "#/components/schemas/FederationConfiguration"
    ActiveProfileSettings:
      type: object
      properties:
        defaultRealm:
          type: string
    AuditTrace:
      required:
      - enabled
      type: object
      properties:
        enabled:
          type: boolean
          description: Enable audit logging of the Security Token Response in WS-Federation
            or WS-Trust response.
          example: true
        allUsers:
          type: boolean
          description: Enable audit logging of the Security Token Response in WS-Federation
            or WS-Trust response for all users.
          example: false
        users:
          type: array
          description: Specify the list of users' uids, for whom to enable audit logging
            of the Security Token Response in the WS-Federation or WS-Trust response.
            This is required when enabled is set to true and allUsers is set to false.
          items:
            type: string
        expiry:
          type: string
          description: Enable audit logging of the Security Token Response in WS-Federation
            or WS-Trust response for the specified period. The value can be specified
            in seconds, minutes or hours. e.g. 120s, 10m, 1h. If the expiry is not
            specified or invalid format, the default expiry will be used, which is
            10 minutes.The maximum expiry is 1 hour, if the expiry specified is more
            than 1 hour, e.g. 2h, the maximum expiry 1 hour will be used.
          example: 10m
    ConfigProperty:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    PartnerConfiguration:
      type: object
      properties:
        providerId:
          type: string
        callbackURL:
          type: string
        appId:
          type: string
        attributeMappings:
          type: array
          items:
            "$ref": "#/components/schemas/AttributeMapping_1"
        additionalProperties:
          type: array
          items:
            "$ref": "#/components/schemas/ConfigProperty"
        multipleDomainsEnabled:
          type: boolean
        idSources:
          type: array
          items:
            type: string
        themeId:
          type: string
        signingSettings:
          "$ref": "#/components/schemas/SigningSettings"
        activeProfile:
          "$ref": "#/components/schemas/ActiveProfileSettings"
        birthright:
          type: boolean
        policyId:
          type: string
        auditTrace:
          "$ref": "#/components/schemas/AuditTrace"
    SigningSettings:
      type: object
      properties:
        signAssertion:
          type: boolean
        keyLabel:
          type: string
        signatureAlgorithm:
          type: string
    PartnerPatch:
      type: object
      properties:
        birthright:
          type: boolean
        policyId:
          type: string
    PartnerEntitlement:
      type: object
      properties:
        birthright:
          type: boolean
    FederationAuditTrace:
      required:
      - enabled
      - providerId
      type: object
      properties:
        enabled:
          type: boolean
          description: Enable audit logging of the Security Token Response in WS-Federation
            or WS-Trust response.
          example: true
        allUsers:
          type: boolean
          description: Enable audit logging of the Security Token Response in WS-Federation
            or WS-Trust response for all users.
          example: false
        users:
          type: array
          description: Specify the list of users' uids, for whom to enable audit logging
            of the Security Token Response in the WS-Federation or WS-Trust response.
            This is required when enabled is set to true and allUsers is set to false.
          items:
            type: string
        expiry:
          type: string
          description: Enable audit logging of the Security Token Response in WS-Federation
            or WS-Trust response for the specified period. The value can be specified
            in seconds, minutes or hours. e.g. 120s, 10m, 1h. If the expiry is not
            specified or invalid format, the default expiry will be used, which is
            10 minutes.The maximum expiry is 1 hour, if the expiry specified is more
            than 1 hour, e.g. 2h, the maximum expiry 1 hour will be used.
          example: 10m
        providerId:
          type: string
          description: Enable audit logging of the Security Token Response in WS-Federation
            or WS-Trust response for the partner with the specified provider ID
          example: urn:federation:MicrosoftOnline
    Alias:
      type: object
      properties:
        uuid:
          type: string
          description: The alias's identifier
          example: uuidcd62e8bb-d4aa-4a6a-883e-00bc853ffae7
        userId:
          type: string
          description: The user's unique ID
          example: 5010XT81MV
        tenantUuid:
          type: string
          description: The tenant's identifier
          example: af270768-5cd1-4c77-9c5e-dccc206ef825
        partnerUuid:
          type: string
          description: The SAML partner's identifier
          example: uuida2d53c5f-438f-44ab-b93b-8d22fef6504a
        appId:
          type: string
          description: The Application's identifier
          example: '1832654797987322725'
        appName:
          type: string
          description: The Application's name
          example: Custom SAML App - Persistent
    AliasList:
      type: object
      properties:
        limit:
          type: integer
          format: int32
          example: 20
        page:
          type: integer
          format: int32
          example: 1
        total:
          type: integer
          format: int32
          example: 1
        aliases:
          type: array
          items:
            "$ref": "#/components/schemas/Alias"
    Domain:
      type: object
      properties:
        capabilities:
          uniqueItems: true
          type: array
          items:
            type: string
        domainName:
          type: string
        properties:
          type: array
          items:
            "$ref": "#/components/schemas/DomainProperties"
        capabilitiesAsString:
          type: string
    DomainProperties:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    PartnerConfigProperty:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    PartnerEncryptionOptions:
      type: object
      properties:
        encryptNameID:
          type: boolean
        encryptAssertion:
          type: boolean
        encryptAssertionAttributes:
          type: boolean
    PartnerEncryptionSettings:
      type: object
      properties:
        encryptionKeyIdentifier:
          "$ref": "#/components/schemas/Saml20KeyIdentifier1"
        blockEncryptionAlgorithm:
          type: string
        encryptionKeyTransportAlgorithm:
          type: string
        encryptionOptions:
          "$ref": "#/components/schemas/PartnerEncryptionOptions"
        decryptionKeyIdentifier:
          "$ref": "#/components/schemas/Saml20KeyIdentifier1"
    PartnerIdentityMapping:
      type: object
      properties:
        activeDelegateId:
          type: string
        properties:
          "$ref": "#/components/schemas/Property1"
    PartnerNameIdFormat:
      type: object
      properties:
        defaultFormat:
          type: string
    PartnerSoapClientAuthSettings:
      type: object
      properties:
        method:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
    PartnerSoapSettings:
      type: object
      properties:
        serverCertValidation:
          "$ref": "#/components/schemas/Saml20KeyIdentifier1"
        clientAuth:
          "$ref": "#/components/schemas/PartnerSoapClientAuthSettings"
    CommandInfo:
      type: object
      properties:
        commandName:
          type: string
        commandClass:
          type: string
    DataFlavor:
      type: object
      properties:
        mimeType:
          type: string
        humanPresentableName:
          type: string
        primaryType:
          type: string
        subType:
          type: string
        mimeTypeSerializedObject:
          type: boolean
        defaultRepresentationClassAsString:
          type: string
        representationClassInputStream:
          type: boolean
        representationClassReader:
          type: boolean
        representationClassCharBuffer:
          type: boolean
        representationClassByteBuffer:
          type: boolean
        representationClassSerializable:
          type: boolean
        representationClassRemote:
          type: boolean
        flavorSerializedObjectType:
          type: boolean
        flavorRemoteObjectType:
          type: boolean
        flavorJavaFileListType:
          type: boolean
        flavorTextType:
          type: boolean
    DataHandler:
      type: object
      properties:
        dataSource:
          "$ref": "#/components/schemas/DataSource"
        name:
          type: string
        contentType:
          type: string
        inputStream:
          "$ref": "#/components/schemas/InputStream"
        outputStream:
          "$ref": "#/components/schemas/OutputStream"
        transferDataFlavors:
          type: array
          items:
            "$ref": "#/components/schemas/DataFlavor"
        preferredCommands:
          type: array
          items:
            "$ref": "#/components/schemas/CommandInfo"
        allCommands:
          type: array
          items:
            "$ref": "#/components/schemas/CommandInfo"
        content:
          type: object
          properties: {}
    DataSource:
      type: object
      properties:
        inputStream:
          "$ref": "#/components/schemas/InputStream"
        outputStream:
          "$ref": "#/components/schemas/OutputStream"
        contentType:
          type: string
        name:
          type: string
    IAttachment:
      type: object
      properties:
        contentId:
          type: string
        contentType:
          "$ref": "#/components/schemas/MediaType1"
        dataHandler:
          "$ref": "#/components/schemas/DataHandler"
        headers:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    IMultipartBody:
      type: object
      properties:
        type:
          "$ref": "#/components/schemas/MediaType1"
        allAttachments:
          type: array
          items:
            "$ref": "#/components/schemas/IAttachment"
        childAttachments:
          type: array
          items:
            "$ref": "#/components/schemas/IAttachment"
        rootAttachment:
          "$ref": "#/components/schemas/IAttachment"
    OutputStream:
      type: object
    FederationIp:
      allOf:
      - "$ref": "#/components/schemas/Federation1"
      - type: object
        properties:
          assertionValidBefore:
            type: integer
            format: int32
            example: 300
          assertionValidAfter:
            type: integer
            format: int32
            example: 300
    FederationSp:
      allOf:
      - "$ref": "#/components/schemas/Federation1"
      - type: object
        properties:
          clockSkew:
            type: integer
            format: int32
            example: 0
          includeAllAttributes:
            type: boolean
            example: false
          allowedTargetUrls:
            type: array
            items:
              type: string
          skipTargetUrlValidation:
            type: boolean
            example: false
          signingKeyLabel:
            type: string
            example: server
          signatureAlgorithm:
            type: string
            example: RSA-SHA256
            enum:
            - RSA-SHA1
            - RSA-SHA256
            - RSA-SHA512
            - ECDSA-SHA256
            - ECDSA-SHA384
            - ECDSA-SHA512
          decryptionKeyLabel:
            type: string
            example: server
    Locale1:
      type: object
      properties:
        language:
          type: string
        script:
          type: string
        country:
          type: string
        variant:
          type: string
        extensionKeys:
          uniqueItems: true
          type: array
          items:
            type: string
        unicodeLocaleAttributes:
          uniqueItems: true
          type: array
          items:
            type: string
        unicodeLocaleKeys:
          uniqueItems: true
          type: array
          items:
            type: string
        iso3Language:
          type: string
        iso3Country:
          type: string
        displayLanguage:
          type: string
        displayScript:
          type: string
        displayCountry:
          type: string
        displayVariant:
          type: string
        displayName:
          type: string
    IdentityMapping1:
      type: object
      properties:
        activeDelegateId:
          type: string
        properties:
          "$ref": "#/components/schemas/Property1"
    Organization1:
      type: object
      properties:
        organizationName:
          type: string
        organizationDisplayName:
          type: string
        organizationURL:
          type: string
    Saml20AttributeMapping1:
      type: object
      properties:
        map:
          type: array
          items:
            "$ref": "#/components/schemas/AttributeMapping1"
    NameIdFormat1:
      type: object
      properties:
        defaultFormat:
          type: string
        supported:
          type: array
          items:
            type: string
    Saml20Service1:
      type: object
      properties:
        binding:
          type: string
        url:
          type: string
    PartnerPatch1:
      type: object
      properties:
        birthright:
          type: boolean
        policyId:
          type: string
    Federation1:
      required:
      - role
      type: object
      properties:
        role:
          type: string
          readOnly: true
          enum:
          - ip
          - sp
        messageValidTime:
          type: integer
          format: int32
          example: 300
        keySelectionCriteria:
          type: string
          example: only.alias
          enum:
          - only.alias
          - shortest.lifetime
          - longest.lifetime
        crlEnabled:
          type: boolean
          example: true
        defaultNameIDFormat:
          type: string
          example: urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress
          enum:
          - urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress
          - urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified
        organizationName:
          type: string
        organizationDisplayName:
          type: string
        organizationURL:
          type: string
      discriminator:
        propertyName: role
    MediaType1:
      type: object
      properties:
        type:
          type: string
        subtype:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        wildcardType:
          type: boolean
        wildcardSubtype:
          type: boolean
    EntityTag1:
      type: object
      properties:
        value:
          type: string
        weak:
          type: boolean
    EncryptionSettings1:
      type: object
      properties:
        decryptionKeyIdentifier:
          "$ref": "#/components/schemas/Saml20KeyIdentifier1"
    UriBuilder1:
      type: object
    Property1:
      type: object
      properties:
        identityMappingRule:
          type: string
        ruleType:
          type: string
    NewCookie1:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        version:
          type: integer
          format: int32
        path:
          type: string
        domain:
          type: string
        comment:
          type: string
        maxAge:
          type: integer
          format: int32
        expiry:
          type: string
          format: date-time
        secure:
          type: boolean
        httpOnly:
          type: boolean
    Saml20KeyIdentifier1:
      type: object
      properties:
        keystore:
          type: string
        label:
          type: string
    Response1:
      type: object
      properties:
        status:
          type: integer
          format: int32
        statusInfo:
          "$ref": "#/components/schemas/StatusType1"
        entity:
          type: object
          properties: {}
        mediaType:
          "$ref": "#/components/schemas/MediaType1"
        language:
          "$ref": "#/components/schemas/Locale1"
        length:
          type: integer
          format: int32
        allowedMethods:
          uniqueItems: true
          type: array
          items:
            type: string
        cookies:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/NewCookie1"
        entityTag:
          "$ref": "#/components/schemas/EntityTag1"
        date:
          type: string
          format: date-time
        lastModified:
          type: string
          format: date-time
        location:
          type: string
          format: uri
        links:
          uniqueItems: true
          type: array
          items:
            "$ref": "#/components/schemas/Link1"
        metadata:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
              properties: {}
        headers:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
              properties: {}
        stringHeaders:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    FederationConfiguration1:
      type: object
      properties:
        pointOfContactUrl:
          type: string
        companyName:
          type: string
        providerId:
          type: string
        sessionTimeout:
          type: integer
          format: int32
        messageValidTime:
          type: integer
          format: int32
        crlEnabled:
          type: boolean
        keySelectionCriteria:
          type: string
        identityMapping:
          "$ref": "#/components/schemas/IdentityMapping1"
        nameIDFormat:
          "$ref": "#/components/schemas/NameIdFormat1"
        organization:
          "$ref": "#/components/schemas/Organization1"
        manageNameIDService:
          type: array
          items:
            "$ref": "#/components/schemas/Saml20Service1"
        encryptionSettings:
          "$ref": "#/components/schemas/EncryptionSettings1"
        artifactLifeTime:
          type: integer
          format: int32
        artifactResolutionService:
          type: array
          items:
            "$ref": "#/components/schemas/Saml20BindingService1"
        singleLogoutService:
          type: array
          items:
            "$ref": "#/components/schemas/Saml20Service1"
        attributeMapping:
          "$ref": "#/components/schemas/Saml20AttributeMapping1"
    StatusType1:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
        family:
          type: string
          enum:
          - INFORMATIONAL
          - SUCCESSFUL
          - REDIRECTION
          - CLIENT_ERROR
          - SERVER_ERROR
          - OTHER
        reasonPhrase:
          type: string
    V2Model1:
      type: object
      properties:
        protocol:
          type: string
        role:
          type: string
        id:
          type: string
        name:
          type: string
        templateName:
          type: string
        configuration:
          "$ref": "#/components/schemas/FederationConfiguration1"
    AttributeMapping1:
      type: object
      properties:
        name:
          type: string
        format:
          type: string
        source:
          type: string
    Saml20BindingService1:
      type: object
      properties:
        binding:
          type: string
        url:
          type: string
        index:
          type: integer
          format: int64
        default:
          type: boolean
    PartnerEntitlement1:
      type: object
      properties:
        birthright:
          type: boolean
    Link1:
      type: object
      properties:
        uri:
          type: string
          format: uri
        uriBuilder:
          "$ref": "#/components/schemas/UriBuilder1"
        rel:
          type: string
        rels:
          type: array
          items:
            type: string
        title:
          type: string
        type:
          type: string
        params:
          type: object
          additionalProperties:
            type: string
    AttributeMapping_1:
      type: object
      properties:
        name:
          type: string
        format:
          type: string
        attrId:
          type: string
    IdentityMapping_0:
      type: object
      properties:
        activeDelegateId:
          type: string
        properties:
          "$ref": "#/components/schemas/Property"
    Link_1:
      type: object
      properties:
        uri:
          type: string
          format: uri
        uriBuilder:
          "$ref": "#/components/schemas/UriBuilder"
        rel:
          type: string
        rels:
          type: array
          items:
            type: string
        title:
          type: string
        type:
          type: string
        params:
          type: object
          additionalProperties:
            type: string
    Response_0:
      type: object
      properties:
        status:
          type: integer
          format: int32
        statusInfo:
          "$ref": "#/components/schemas/StatusType"
        entity:
          type: object
          properties: {}
        mediaType:
          "$ref": "#/components/schemas/MediaType"
        language:
          "$ref": "#/components/schemas/Locale"
        length:
          type: integer
          format: int32
        allowedMethods:
          uniqueItems: true
          type: array
          items:
            type: string
        cookies:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/NewCookie"
        entityTag:
          "$ref": "#/components/schemas/EntityTag"
        date:
          type: string
          format: date-time
        lastModified:
          type: string
          format: date-time
        location:
          type: string
          format: uri
        links:
          uniqueItems: true
          type: array
          items:
            "$ref": "#/components/schemas/Link_1"
        metadata:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
              properties: {}
        headers:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
              properties: {}
        stringHeaders:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    WS-Federation_Partner_Resource:
      type: object
      properties:
        id:
          type: string
        enabled:
          type: boolean
        name:
          type: string
        role:
          type: string
        configuration:
          "$ref": "#/components/schemas/PartnerConfiguration"
    Federation_Partner_V2:
      type: object
      properties:
        enabled:
          type: boolean
        id:
          type: string
        name:
          type: string
        role:
          type: string
        templateName:
          type: string
        configuration:
          "$ref": "#/components/schemas/Federation_Partner_V2"
    PaginationParameters:
      type: object
      properties:
        count:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
    CustomizedTemplateListModel:
      type: object
      properties:
        count:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        customizedTemplates:
          type: array
          items:
            "$ref": "#/components/schemas/Id"
    Id:
      type: object
      properties:
        component:
          type: string
        name:
          type: string
        revision:
          type: integer
          format: int64
        locale:
          type: string
        variant:
          type: string
        tenant:
          type: string
        adopter:
          type: string
        fileName:
          type: string
    TemplateFile:
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/Id"
        content:
          type: string
        alias:
          type: string
        aliasedFileName:
          type: string
        deleted:
          type: boolean
    Template:
      type: object
      properties:
        registration:
          "$ref": "#/components/schemas/TemplateRegistration"
        files:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/TemplateFile"
    TemplateRegistration:
      required:
      - description
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/TemplateRegistration.Id"
        description:
          type: string
        parameters:
          "$ref": "#/components/schemas/TemplateRegistration.Parameters"
        contentMaxSize:
          type: integer
          format: int32
        subscriptions:
          uniqueItems: true
          type: array
          items:
            type: string
        serviceTemplate:
          type: boolean
          xml:
            name: isServiceTemplate
    TemplateRegistration.Id:
      type: object
      properties:
        component:
          type: string
        name:
          type: string
        revision:
          type: integer
          format: int64
    TemplateRegistration.OptionalParameter:
      type: object
      properties:
        key:
          type: string
        description:
          type: string
        default:
          type: string
    TemplateRegistration.Parameters:
      type: object
      properties:
        required:
          type: array
          items:
            "$ref": "#/components/schemas/TemplateRegistration.RequiredParameter"
        optional:
          type: array
          items:
            "$ref": "#/components/schemas/TemplateRegistration.OptionalParameter"
    TemplateRegistration.RequiredParameter:
      type: object
      properties:
        key:
          type: string
        description:
          type: string
    TemplateRequestId:
      type: object
      properties:
        component:
          type: string
        name:
          type: string
        revision:
          type: integer
          format: int64
        locale:
          type: string
        variant:
          type: string
        adopter:
          type: string
        fileName:
          type: string
    TemplateResponse:
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/TemplateRequestId"
        content:
          type: string
        status:
          type: integer
          format: int32
        messageId:
          type: string
        messageDescription:
          type: string
    TemplateRequest:
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/TemplateRequestId"
        templateCandidates:
          type: array
          items:
            type: string
    ThemeRegistration:
      type: object
      properties:
        name:
          type: string
        tenantId:
          type: string
        themeId:
          type: string
        description:
          type: string
    Configuration:
      type: object
      properties:
        tenant_id:
          type: string
          description: ''
          example: Tenant id, default is GLOBAL
        config_id:
          type: string
          description: ''
          example: Configuration id, default is DEFAULT
        config_name:
          type: string
          description: ''
          example: Configuration name
        config_desc:
          type: string
          description: ''
          example: Configuration description
        policy_id:
          type: string
          description: Policy identifier is created internally when TI configuration
            is created
          example: Policy identifier created for TI configuration, default value is
            0
        status:
          type: string
          description: This configuration status would be determined by policy_id
            is attached to tenant or not, will be active or inactive, Auth broker
            service determine status
          example: Configuration status, default is 'inactive'
        ip_filter:
          type: object
          properties:
            allow_ip_list:
              type: array
              items:
                type: string
                description: List of allow IP addresses
                example: 1.1.1.1, 2.2.2.2
            deny_ip_list:
              type: array
              items:
                type: string
                description: List of deny or blocked IP addresses
                example: 3.3.3.3
        created:
          type: number
          description: ''
          example: 1686552590000
        created_by:
          type: string
          description: ''
          example: Admin - username who created this threat configuration
        modified:
          type: number
          description: ''
          example: 1686552590000
        modified_by:
          type: string
          description: ''
          example: Admin - username who modified this threat configuration
        notification_list:
          type: array
          items:
            type: string
            description: List of users for notification of threat alerts
            example: UID000001
        rules:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: Id of threat rule
                example: ibm:threat_multiple_failed_logins/ibm:threat_actionable_ips/ibm:threat_compromised_credentials/ibm:threat_login_deviations/ibm:threat_credentials_stuffing
              name:
                type: string
                description: Name of threat rule
                example: ''
              description:
                type: string
                description: Description of threat rule
                example: ''
              config:
                type: object
                properties:
                  warning:
                    type: object
                    properties:
                      action:
                        type: string
                        description: Action on threat
                        example: ACTION_ALLOW or ACTION_DENY
                      notification_alert:
                        type: boolean
                        description: Enable or disable notification alert for warning
                          threat rule
                        example: false
                      notification_type:
                        type: string
                        description: Notification type to set for warning threat rule
                        example: Either email or none
                  critical:
                    type: object
                    properties:
                      action:
                        type: string
                        description: Action on threat
                        example: ACTION_ALLOW or ACTION_DENY
                      notification_alert:
                        type: boolean
                        description: Enable or disable notification alert for critical
                          threat rule
                      notification_type:
                        type: string
                        description: Notification type to set for critical threat
                          rule
                        example: Either email or none
    Configuration_post:
      type: object
      properties:
        created_by:
          type: string
          description: ''
          example: Admin - username who created this configuration
        notification_list:
          type: array
          items:
            type: string
            description: List of users for notification of alerts
            example: UID000001
        config_name:
          type: string
          description: ''
          example: Threat configuration
        config_desc:
          type: string
          description: ''
          example: Threat Configuration description
        ip_filter:
          type: object
          properties:
            allow_ip_list:
              type: array
              items:
                type: string
                description: List of allow IP addresses
                example: 1.1.1.1, 2.2.2.2
            deny_ip_list:
              type: array
              items:
                type: string
                description: List of deny or blocked IP addresses
                example: 3.3.3.3
        rules:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: Id of threat rule
                example: ibm:threat_multiple_failed_logins/ibm:threat_actionable_ips/ibm:threat_compromised_credentials/ibm:threat_login_deviations/ibm:threat_credentials_stuffing
              name:
                type: string
                description: Name of threat rule
                example: ''
              description:
                type: string
                description: Description of threat rule
                example: ''
              config:
                type: object
                properties:
                  warning:
                    type: object
                    properties:
                      action:
                        type: string
                        description: Action on warning threat rule
                        example: ACTION_ALLOW
                      notification_alert:
                        type: boolean
                        description: Enable or disable notification alert for warning
                          threat rule
                        example: false
                      notification_type:
                        type: string
                        description: Notification type to set for warning threat rule
                        example: email
                  critical:
                    type: object
                    properties:
                      action:
                        type: string
                        description: Action on critical threat rule
                        example: ACTION_DENY
                      notification_alert:
                        type: boolean
                        description: Enable or disable notification alert for critical
                          threat rule
                        example: true
                      notification_type:
                        type: string
                        description: Notification type to set for critical threat
                          rule
                        example: email
    Configuration_put:
      type: object
      properties:
        modified_by:
          type: string
          description: ''
          example: Admin - username who created this configuration
        notification_list:
          type: array
          items:
            type: string
            description: List of users for notification of alerts
            example: UID000001
        config_name:
          type: string
          description: ''
          example: Threat configuration
        config_desc:
          type: string
          description: ''
          example: Threat Configuration description
        ip_filter:
          type: object
          properties:
            allow_ip_list:
              type: array
              items:
                type: string
                description: List of allow IP addresses
                example: 1.1.1.1, 2.2.2.2
            deny_ip_list:
              type: array
              items:
                type: string
                description: List of deny or blocked IP addresses
                example: 3.3.3.3
        rules:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: Id of threat rule
                example: ibm:threat_multiple_failed_logins/ibm:threat_actionable_ips/ibm:threat_compromised_credentials/ibm:threat_login_deviations/ibm:threat_credentials_stuffing
              name:
                type: string
                description: Name of threat rule
                example: ''
              description:
                type: string
                description: Description of threat rule
                example: ''
              config:
                type: object
                properties:
                  warning:
                    type: object
                    properties:
                      action:
                        type: string
                        description: Action on warning threat rule
                        example: ACTION_ALLOW
                      notification_alert:
                        type: boolean
                        description: Enable or disable notification alert for warning
                          threat rule
                        example: false
                      notification_type:
                        type: string
                        description: Notification type to set for warning threat rule
                        example: email
                  critical:
                    type: object
                    properties:
                      action:
                        type: string
                        description: Action on critical threat rule
                        example: ACTION_DENY
                      notification_alert:
                        type: boolean
                        description: Enable or disable notification alert for critical
                          threat rule
                        example: true
                      notification_type:
                        type: string
                        description: Notification type to set for critical threat
                          rule
                        example: email
    Configuration_put_status:
      type: object
      properties:
        status:
          type: string
          description: Threat status configuration, eg active or inactive
          example: active
    Created_Configuration:
      type: object
      properties:
        tenant_id:
          type: string
          description: Name of tenant id
          example: e54f5faa-d3f0-43cc-ab58-d6204d60fe3d
        config_id:
          type: string
          description: Name of configuration id
          example: c64f5fac-e3f1-53cd-cb58-f6204d60fe9a
        policy_id:
          type: integer
          description: Policy identifier for Threat configuration id
          example: 1106607
    ipAddress:
      type: object
      properties:
        ipAddress:
          type: string
          format: String
          example: 10.1.0.1
    Status:
      type: object
      properties:
        version:
          type: string
          description: ''
          example: v1.0
        results:
          type: object
          properties:
            decision:
              type: string
              description: ''
              example: ACTION_ALLOW or ACTION_DENY
            message:
              type: string
              description: ''
              example: reason for decision returned
        attributes:
          type: object
          properties:
            ibm:threat_actionable_ips:
              type: string
              description: ''
              example: critical
            ibm:threat_credentials_stuffing:
              type: string
              description: ''
              example: critical
            ibm:threat_multiple_failed_logins:
              type: string
              description: ''
              example: critical
            ibm:threat_compromised_credentials:
              type: string
              description: ''
              example: critical
            ibm:threat_login_deviations:
              type: string
              description: ''
              example: critical
            ibm:threat_all_failures:
              type: boolean
              description: ''
              example: true
            ibm:threat_xfe_risk_score:
              type: number
              description: ''
              example: 9
    AuthenticationHeader:
      required:
      - key
      type: object
      properties:
        key:
          type: string
          description: Key to use in a HTTP header name
        sensitive:
          type: boolean
          description: |-
            Sensitive indicates that this HTTP header is a sensitive value.
            Will make the value presented write only.
        value:
          type: string
          description: Value to use in a HTTP header value
      description: AuthenticationHeader is a config value for header authentication,
        contains details and whether its value is sensitive
    BasicAuthentication:
      required:
      - password
      - username
      type: object
      properties:
        password:
          type: string
          description: |-
            Password to populate the authorization header with.
            Once populated, cannot be retrieved.
        username:
          type: string
          description: Username to populate the authorization header with
      description: BasicAuthentication is the structure that backs a basic scheme
        provider
    Clause:
      required:
      - key
      - operation
      - value
      type: object
      properties:
        key:
          type: string
          description: |-
            Key into the event data to match on.
            Only top level and data keys are allowed.
          example: event_type, data.resource
        operation:
          type: string
          description: |-
            Operation indicates what sort of clause this is. Valid values are 'include' and 'exclude'. Required.

            All include clauses must be satisfied to include a event

            If any exclude clause is matched, the event will not be included
        value:
          type: string
          description: |-
            Value to match against.
            Full text must match.
      description: |-
        Clause is a particular predicate for an event to satisfy to potentially be
        sent. include clauses are chained togther with and AND. Exclude clauses are
        chained with OR.
    Clauses:
      title: |-
        Clauses is a set of matches which must evaluate to true for a given
        notification to be included.
      type: array
      description: |2-

        All clauses must be satisfied to indicate interests.
      items:
        "$ref": "#/components/schemas/Clause"
    DeadLetter:
      type: object
      properties:
        eventId:
          type: string
    DeadLetterDeleteResponse:
      type: object
      properties:
        count:
          type: integer
          format: int64
        webhookId:
          type: string
    DeadLetterFlushBody:
      type: object
      properties:
        from:
          type: string
          format: date-time
        limit:
          type: integer
          format: int64
        to:
          type: string
          format: date-time
    DeadLetterListResponse:
      type: object
      properties:
        count:
          type: integer
          format: int64
        events:
          type: array
          items:
            "$ref": "#/components/schemas/DeadLetter"
        webhookId:
          type: string
    DeadLetterResponse:
      type: object
      properties:
        eventId:
          type: string
        webhookId:
          type: string
    DeadletterCount:
      type: object
      properties:
        count:
          type: integer
          format: int64
        webhookId:
          type: string
          format: uuid
    Failure:
      type: object
      properties:
        id:
          type: string
        message:
          type: string
        url:
          type: string
      description: Failure is a structure presented to the fail handler to identify
        a webhook payload failure
    FlushState:
      type: object
      properties:
        actioned:
          type: integer
          description: Number of deadletters which are impacted by this reconciliation
          format: int64
        arguments:
          type: object
          additionalProperties:
            type: object
          description: The arguments included when this reconciliation was initiated.
        finished:
          type: string
          description: Time the recon completed. Note all reconciliations have a maxiumum
            runtime of two hours.
          format: date-time
        runtime:
          type: string
          description: How long the reconciliation has been running/ran for
        started:
          type: string
          description: Time the reconciliation started
          format: date-time
        status:
          "$ref": "#/components/schemas/FlushStateValue"
      description: This state represents the current state of a currently running
        or previously running reconciliation
    FlushStateValue:
      type: string
      description: FlushStateValue indicates how a flush execution is going
    Header:
      title: A Header represents the key-value pairs in an HTTP header.
      type: object
      properties:
        key:
          type: string
        value:
          type: string
      additionalProperties:
        type: array
        items:
          type: string
      description: |-
        The keys should be in canonical form, as returned by
        CanonicalHeaderKey.
    HeaderAuthentication:
      type: object
      properties:
        values:
          type: array
          items:
            "$ref": "#/components/schemas/AuthenticationHeader"
      description: HeaderAuthentication contains a list of headers used to authenticate
    HealthResponse:
      type: object
      properties:
        lastFailure:
          type: string
          description: |-
            Indicates the last failure time of this webhook across all URLs.
            May be null if the webhook has not experienced a failure.
          format: date-time
        lastSuccess:
          type: string
          description: |-
            Indicates when this webhook was last used successfully across all URLs.
            May be null if the webhook has not been successfully.
          format: date-time
        status:
          "$ref": "#/components/schemas/status"
    JWTAuthentication:
      required:
      - alg
      - httpHeaderName
      - lifetime
      - sub
      type: object
      properties:
        additionalClaims:
          type: object
          additionalProperties:
            type: object
          description: Additional claims to add to the JWT claims.
        alg:
          type: string
          description: Algorithm to sign the JWT with. Valid values are HS256, HS384,
            HS512, RS256, RS384, RS512, ES256, ES384, ES512, PS256, PS384, PS512.
        header:
          type: object
          additionalProperties:
            type: object
          description: Map of values to add to the JWT header.
        httpHeaderName:
          type: string
          description: The HTTP header name to put the JWT value into.
        httpHeaderPrefix:
          type: string
          description: Optional value to add a prefix to the JWT header value. For
            example coulld specify "bearer " to identify the JWT as a bearer token.
        lifetime:
          type: integer
          description: How long the JWT should be valid for. Must be greater than
            60 seconds.
          format: int64
        personalCertificateLabel:
          type: string
          description: Personal certificate to use when signing the JWT. Required
            when alg is one of RS256, RS384, RS512, ES256, ES384, ES512, PS256, PS384,
            PS512.
        secretKey:
          type: string
          description: Secret key material. Required when alg is one of HS256, HS384,
            HS512.
        sub:
          type: string
          description: Value to populate the 'sub' claim with.
    Latency:
      type: object
      properties:
        average:
          type: integer
          format: uint64
        count:
          type: integer
          format: uint64
        max:
          type: integer
          format: uint64
        min:
          type: integer
          format: uint64
        total:
          type: integer
          format: uint64
      description: Latency captures a count of requests and request time, as well
        as high/low values
    NotificationDeadletters:
      type: object
      properties:
        autoFlushEnabled:
          type: boolean
          description: |-
            autoFlushEnabled indicates whether the webhook should check a healthy
            webhook for deadletters and attempt to reconcile them.
        flushIntervalMins:
          type: integer
          description: |-
            flushIntervalMins indicates how often an automated flush may be
            triggered.
          format: int64
      description: |-
        NotificationDeadletters is the configuration pertaining to the deadletters
        recorded by this webhook
    NotificationInterest:
      required:
      - clauses
      - name
      type: object
      properties:
        clauses:
          "$ref": "#/components/schemas/Clauses"
        description:
          type: string
          description: Description helps identify this interest
        name:
          type: string
      description: NotificationInterest is a set of notification selection criteria
    NotificationWebhookConfig:
      required:
      - enabled
      - interests
      type: object
      properties:
        deadletters:
          "$ref": "#/components/schemas/NotificationDeadletters"
        enabled:
          type: boolean
          description: Enabled is used to disable a notification webhook when not
            in use
        interests:
          type: array
          description: |-
            Interests contains the selection critiera for notifications this webhooks
            should be invoked with. If any one interests is satisfied for a given
            event, it will be sent

            For example to configure a webhook which gets both management and sso
            events, the webhook would have two intrests. One in events where the type
            is SSO, and one where the type is management
          items:
            "$ref": "#/components/schemas/NotificationInterest"
        recordDeadletters:
          type: boolean
          description: |-
            RecordDeadletters indicates whether or not failed delivery attempts
            should be recorded for manual reconciliation.
      description: |-
        NotificationWebhookConfig is the criteria used to select notifications for
        sending
    OAuthAuthentication:
      required:
      - client_id
      - client_secret
      - token_endpoint
      - token_endpoint_auth_method
      type: object
      properties:
        client_id:
          type: string
          description: ID is the client_id to use in the request to the token endpoint
        client_secret:
          type: string
          description: Secret is the client_secret to use in the request to the token
            endpoint
        expires_in:
          type: integer
          description: |-
            DefaultExpires is a value to use as an alternative if no expires_in value
            is returned in the token endpoint response.

            Does not override the value returned from the token endpoint.
          format: int64
        personalCertificateLabel:
          type: string
          description: personalCertificateLabel
        scope:
          type: string
          description: |-
            Scope is a space seperated list of strings to include in the the request
            for an access token.
        token_endpoint:
          type: string
          description: TokenEndpoint is the URL to retrieve an oauth token from
        token_endpoint_auth_method:
          type: string
          description: |-
            TokenEndpointAuthMethod how credentials should be presented to the token endpoint
            Valid values are client_secret_post, client_secret_basic, tls_client_auth
        window:
          type: integer
          description: |-
            Window indicates an offset to apply to access token lifetime, to prevent
            token from expriting while it is inflight. If not provided, defaults to
            120 seconds.
          format: int64
      description: OAuthAuthentication contains the oauth standard fields used to
        perform a client-credentials flow
    Purpose:
      type: object
      properties:
        description:
          type: string
        id:
          type: string
        name:
          type: string
    Purposes:
      type: object
      properties:
        purposes:
          type: array
          items:
            "$ref": "#/components/schemas/Purpose"
    Reference:
      type: object
      properties:
        created:
          type: string
          description: When this reference was created
          format: date-time
        location:
          type: string
          description: Location of the API holding this reference
        metadata:
          type: object
          additionalProperties:
            type: object
          description: metadata contains arbitrary data about this reference
        name:
          type: string
          description: Name of the entity holding this reference
      description: |-
        A reference contains information about IBM Security Verify
        capabilities currently using this relying party. References are read only.
    RelyingParties:
      type: object
      properties:
        relyingParties:
          type: array
          items:
            "$ref": "#/components/schemas/RelyingParty"
    RelyingParty:
      required:
      - configuration
      - name
      type: object
      properties:
        configuration:
          "$ref": "#/components/schemas/RelyingPartyConfiguration"
        metadata:
          "$ref": "#/components/schemas/Metadata_1"
        name:
          type: string
          description: Friendly name of this relying party. Must be unique.
        references:
          type: array
          description: References of the relying party. The relying party cannot be
            deleted if it has any references
          items:
            "$ref": "#/components/schemas/Reference"
    RelyingPartyConfiguration:
      required:
      - client_id
      - grant_type
      - issuer
      - response_type
      type: object
      properties:
        authorization_url:
          type: string
          description: authorize_url for this relying party to use. Required if metadata_url
            is not present.
        authorizeHTTPMethod:
          type: string
          description: authorizeHTTPMethod is the HTTP Method to use when contacting
            authorize_url. Valid values are GET and POST
        client_id:
          type: string
          description: client_id issued to this relying party.
        client_secret:
          type: string
          description: client_secret issued to this relying party.
        grant_type:
          type: string
          description: Which grant type this RP will perform. Valid values are 'implicit'
            and 'authorization_code'
        issuer:
          type: string
          description: The 'iss' claim in the id_token recieved from the OP will be
            checked to match this value.
        jwks_uri:
          type: string
          description: jwks_url for this relying party to use.
        metadata_url:
          type: string
          description: |-
            metadata_url for this relying party. Will be used to source the authorize_url and token_url if specified.
            Required if authorize_url is not present
        response_mode:
          type: string
          description: response_mode to include in the request to /authorize. Vaild
            values are 'form_post"
        response_type:
          type: array
          description: |-
            response_type values to include in the request to /authorize. Valid
            values to include are 'code', 'token' and 'id_token'
          items:
            type: string
        scopes:
          type: array
          description: scope to include in the authorization requests.
          items:
            type: string
        token_endpoint_auth_method:
          "$ref": "#/components/schemas/TokenEndpointAuthMethod"
        token_url:
          type: string
          description: token_url for this relying party to use. Required if grant_type
            is 'authorization_code'
      description: |-
        Contains all of the relevent fields for an OpenID Connect Relying party to
        use in integrations
    RelyingPartyResponse:
      required:
      - configuration
      - name
      type: object
      properties:
        configuration:
          "$ref": "#/components/schemas/RelyingPartyConfiguration"
        id:
          type: string
          description: Unique identifier of the relying party
        metadata:
          "$ref": "#/components/schemas/Metadata_1"
        name:
          type: string
          description: Friendly name of this relying party. Must be unique.
        references:
          type: array
          description: References of the relying party. The relying party cannot be
            deleted if it has any references
          items:
            "$ref": "#/components/schemas/Reference"
    TLSAuthentication:
      type: object
      properties:
        personalCertificateLabel:
          type: string
    TokenEndpointAuthMethod:
      type: string
    TransformBody:
      type: object
      properties:
        JSON:
          type: object
          additionalProperties:
            type: object
        Raw:
          type: array
          items:
            type: integer
            format: uint8
      description: TransformBody is either a valid UTF-8 string, or a valid JSON object
    TransformObject:
      title: The following fields are used to execute both incoming and outgoing transform
        tests.
      type: object
      properties:
        authentication_header:
          type: object
          additionalProperties:
            type: string
          description: AuthenticationHeader is an outgoing transform parameter.
        body:
          "$ref": "#/components/schemas/TransformBody"
        header:
          "$ref": "#/components/schemas/Header"
        host:
          type: string
          description: Host is an outgoing transform parameter, and will only be populated
            in webhook usage when all the URLs configured have a consistent host
        method:
          type: string
          description: Method is an outgoing transform parameter.
        path:
          type: string
          description: Path is an outgoing transform parameter.
        request:
          "$ref": "#/components/schemas/TransformObject"
        statusCode:
          type: integer
          description: StatusCode is an incoming transform parameter.
          format: int64
    TransformRequest:
      type: object
      properties:
        input:
          "$ref": "#/components/schemas/TransformObject"
        mode:
          type: string
        transform:
          type: string
    TransformResponse:
      type: object
      properties:
        result:
          "$ref": "#/components/schemas/TransformObject"
    WebhookAuthentication:
      required:
      - type
      type: object
      properties:
        basic:
          "$ref": "#/components/schemas/BasicAuthentication"
        header:
          "$ref": "#/components/schemas/HeaderAuthentication"
        jwt:
          "$ref": "#/components/schemas/JWTAuthentication"
        mtls:
          "$ref": "#/components/schemas/TLSAuthentication"
        oauth:
          "$ref": "#/components/schemas/OAuthAuthentication"
        type:
          type: string
          description: |-
            Type selects the authentication method to use.
            Valid values are: header, basic, oauth, mtls
      description: WebhookAuthentication composes all of the different supported authentication
        types for webhook requests
    WebhookConfig:
      required:
      - name
      - purpose
      - type
      - urls
      type: object
      properties:
        authentication:
          "$ref": "#/components/schemas/WebhookAuthentication"
        expectedStatus:
          type: array
          description: |-
            ExpectedStatus is the HTTP status expected from the API invoked by this webhook.
            If not present a status code between 200 and 299 is expected (inclusive).
            Expected status is checked prior to the incoming transform executing.
          items:
            type: integer
            format: int64
        headers:
          type: array
          description: |-
            Headers with static values to include in the requests made by this
            webhook when invoked.
            Can be overridden using a transform.
          items:
            "$ref": "#/components/schemas/Header"
        metadata:
          "$ref": "#/components/schemas/Metadata_1"
        name:
          type: string
          description: Name of the webhook
        notification:
          "$ref": "#/components/schemas/NotificationWebhookConfig"
        purpose:
          type: array
          description: |-
            Purpose of this webhook. What extensions or integrations is it achieving.
            Valid purposes can be found using the purposes API.
          items:
            type: string
        references:
          type: array
          description: |-
            References to this webhook by extensions or integrations. Readonly.
            A Webhook cannot be deleted while it has any references.
          items:
            "$ref": "#/components/schemas/Reference"
        resources:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/Resource_0"
          description: Resources defined by this webhook.
        transform:
          "$ref": "#/components/schemas/WebhookTransform"
        type:
          type: string
          description: Type of webhook. Options are 'realtime' and 'notification'
        urls:
          type: array
          description: |-
            URLs this webhook should use when invoked. Accessed in round-robin
            manner. Often failing URLs will be dropped from rotation for 5 minutes.
            At least one URL must be provided.

            When a URL is configured with the protocol 'http://' the connection made
            to the webhook will be insecure. Use the protocol 'https://' to establish
            a secure connection. The IBM Security Verify truststores will be used.
          items:
            type: string
      description: WebhookConfig contains all of the fields needed to perform a call
        out to an external rest API
    WebhookConfigResponse:
      allOf:
      - required:
        - name
        - purpose
        - type
        - urls
        type: object
        properties:
          authentication:
            "$ref": "#/components/schemas/WebhookAuthentication"
          expectedStatus:
            type: array
            description: |-
              ExpectedStatus is the HTTP status expected from the API invoked by this webhook.
              If not present a status code between 200 and 299 is expected (inclusive).
              Expected status is checked prior to the incoming transform executing.
            items:
              type: integer
              format: int64
          headers:
            type: array
            description: |-
              Headers with static values to include in the requests made by this
              webhook when invoked.
              Can be overridden using a transform.
            items:
              "$ref": "#/components/schemas/Header"
          metadata:
            "$ref": "#/components/schemas/Metadata_1"
          name:
            type: string
            description: Name of the webhook
          notification:
            "$ref": "#/components/schemas/NotificationWebhookConfig"
          purpose:
            type: array
            description: |-
              Purpose of this webhook. What extensions or integrations is it achieving.
              Valid purposes can be found using the purposes API.
            items:
              type: string
          references:
            type: array
            description: |-
              References to this webhook by extensions or integrations. Readonly.
              A Webhook cannot be deleted while it has any references.
            items:
              "$ref": "#/components/schemas/Reference"
          resources:
            type: object
            additionalProperties:
              "$ref": "#/components/schemas/Resource_0"
            description: Resources defined by this webhook.
          transform:
            "$ref": "#/components/schemas/WebhookTransform"
          type:
            type: string
            description: Type of webhook. Options are 'realtime' and 'notification'
          urls:
            type: array
            description: |-
              URLs this webhook should use when invoked. Accessed in round-robin
              manner. Often failing URLs will be dropped from rotation for 5 minutes.
              At least one URL must be provided.

              When a URL is configured with the protocol 'http://' the connection made
              to the webhook will be insecure. Use the protocol 'https://' to establish
              a secure connection. The IBM Security Verify truststores will be used.
            items:
              type: string
      - type: object
        properties:
          id:
            type: string
            description: Unique identifier of the webhook
    WebhookListConfigResponse:
      type: object
      properties:
        webhooks:
          type: array
          items:
            "$ref": "#/components/schemas/WebhookConfigResponse"
    WebhookStatResponse:
      allOf:
      - type: object
        properties:
          date:
            type: string
            format: date-time
          hourlyAverage:
            type: integer
            format: uint64
          lastFailure:
            "$ref": "#/components/schemas/Failure"
          lastSuccess:
            type: string
            format: date-time
          max:
            type: integer
            format: uint64
          min:
            type: integer
            format: uint64
          totalCallsLast24Hours:
            type: integer
            format: uint64
          urls:
            type: object
            additionalProperties:
              "$ref": "#/components/schemas/Stats_0"
      - type: object
        properties:
          id:
            type: string
            description: ID of the webhook
    WebhookTestResponse:
      type: object
      properties:
        callDurationMs:
          type: integer
          format: uint64
        error:
          "$ref": "#/components/schemas/VerifyError"
        requestID:
          type: string
        responseBody:
          type: object
        responseHeaders:
          "$ref": "#/components/schemas/Header"
        statusCode:
          type: integer
          format: int64
    WebhookTransform:
      type: object
      properties:
        incoming:
          type: string
          description: |-
            IncomingTransform is CEL applied to the HTTP response from the invoked API.
            It can be used to modify the:
            Incoming HTTP headers
            Incoming JSON/body
        outgoing:
          type: string
          description: |-
            OutgoingTransform is CEL applied to the HTTP request being made by this webhook invocation.
            It can be used to modify the:
            HTTP Method
            Request URL
            Content-type
            Outgoing headers
            Outgoing JSON/body
            Skip applying configured authentication
    status:
      title: status indicates at a glance health of the webhook.
      type: string
      description: |-
        Potential values are:
        no-data - No usage data available.
        down - No URLs have a successful usage
        recovered - at least one URL has a successful usage, but there has been an error in the last 5 minutes
        marginal - At least one URL has no errors, but at least one other URL has errors
        good - No errors present
    Metadata_1:
      title: Metadata contains metadata about a configuration.
      type: object
      properties:
        connector:
          type: string
          description: Connector is used by the UX to modify presentation of the configuration
        contactEmail:
          type: string
          description: ContactEmail is the email address of an external entity to
            contact about this configuration
        contactName:
          type: string
          description: ContactName is the name of an external entity to contact about
            this configuration.
        createdBy:
          type: string
          description: |-
            CreatedBy is the userID who created the configuration
            Readonly
        createdByType:
          type: string
          description: |-
            CreatedByType is the type of user who created the configuration
            Readonly
        dateCreated:
          type: string
          description: |-
            DateCreated will indicate when this configuration was first created
            Readonly.
          format: date-time
        dateModified:
          type: string
          description: |-
            DateModified will indicate when this configuration was last modified
            Readonly
          format: date-time
        modifiedBy:
          type: string
          description: |-
            CreatedBy is the userID who last modified the configuration
            Readonly
        modifiedByType:
          type: string
          description: |-
            ModifiedByType is the type of user who last modified the configuration
            Readonly
        properties:
          type: object
          additionalProperties:
            type: object
          description: |-
            Properties are aribtrary non functional properties of this configuration.
            Not used at runtime.
    Resource_0:
      type: object
      properties:
        expectedStatus:
          type: array
          description: |-
            ExpectedStatus is the HTTP status expected from the API invoked by this webhook.
            If not present a status code between 200 and 299 is expected (inclusive).
            Expected status is checked prior to the incoming transform executing.
          items:
            type: integer
            format: int64
        method:
          type: string
          description: |-
            Method modifies the outgoing HTTP method from POST to whatever is specified.
            Valid values are: POST, PUT, GET, DELETE, PATCH.
            Method can be modified with an out going transform.
        suffix:
          type: string
          description: |-
            Suffix to add to the base URL being used in this request. Such that the request made by invoking this webhooks resource will go to :
            selected URL + suffix.
            No slashes are added beyond what is defined in configuration.
            The outgoing request URL can be modified using an outgoing transform.
        transform:
          "$ref": "#/components/schemas/WebhookTransform"
      description: |-
        Resource
        A resource identifies an API invoked by a webhook.
        Used when a given purpose, such as external MFA needs to invoke more than one API as part of its flows
    Stats_0:
      type: object
      properties:
        5minLatency:
          "$ref": "#/components/schemas/Latency"
        dayLatency:
          "$ref": "#/components/schemas/Latency"
        lastFailure:
          "$ref": "#/components/schemas/Failure"
        lastSuccess:
          type: string
          format: date-time
        latency:
          "$ref": "#/components/schemas/Latency"
      description: Stats pertain to a particular URL, tracks the last success and
        latency over varied periods
  securitySchemes:
    api_key:
      type: apiKey
      name: Authorization
      in: header
  responses:
    noContent:
      description: No content
      content: {}
    relyingParty:
      description: The relying party configuration
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/RelyingPartyResponse"
    relyingPartyList:
      description: ''
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/RelyingParties"
    relyingPartyReference:
      description: ''
      content:
        application/json:
          schema:
            allOf:
            - type: object
              properties:
                created:
                  type: string
                  description: When this reference was created
                  format: date-time
                location:
                  type: string
                  description: Location of the API holding this reference
                metadata:
                  type: object
                  additionalProperties:
                    type: object
                  description: metadata contains arbitrary data about this reference
                name:
                  type: string
                  description: Name of the entity holding this reference
            - type: object
              properties:
                id:
                  type: string
    relyingPartyReferences:
      description: ''
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              allOf:
              - type: object
                properties:
                  created:
                    type: string
                    description: When this reference was created
                    format: date-time
                  location:
                    type: string
                    description: Location of the API holding this reference
                  metadata:
                    type: object
                    additionalProperties:
                      type: object
                    description: metadata contains arbitrary data about this reference
                  name:
                    type: string
                    description: Name of the entity holding this reference
              - type: object
                properties:
                  id:
                    type: string
    testWebhook:
      description: Webhook Test object
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/WebhookTestResponse"
    testWebhookTransform:
      description: TransformResponse is the output of the transform test
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/TransformResponse"
    weberror400:
      description: The request cannot be processed because the request body contains
        improperly structured JSON.
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/VerifyError"
    weberror401:
      description: The unauthenticated user does not have the permissions to perform
        the requested operation.
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/VerifyError"
    weberror403:
      description: The unauthenticated user does not have the permissions to perform
        the requested operation.
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/VerifyError"
    weberror404:
      description: The resource cannot be found.
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/VerifyError"
    weberror500:
      description: Internal Server Error.
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/VerifyError"
    webhook:
      description: The webhook configuration
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/WebhookConfigResponse"
    webhookCheckFlushDeadletterResponse:
      description: ''
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/FlushState"
    webhookCountDeadletterResponse:
      description: The count of deadletters
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/DeadletterCount"
    webhookDeadletter:
      description: An undelivered notification for this webhook
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/DeadLetterResponse"
    webhookDeadletters:
      description: This notification webhooks undelivered messages
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/DeadLetterListResponse"
    webhookDeletedDeadletters:
      description: The deleted undelivered messages
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/DeadLetterDeleteResponse"
    webhookExecute200:
      description: ''
      content:
        application/json:
          schema:
            type: object
            additionalProperties:
              type: object
    webhookHealth:
      description: |-
        At a glance health information about a webhook.
        Interprets the stats API response
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/HealthResponse"
    webhookPurposes:
      description: The webhook configuration
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Purposes"
    webhookReference:
      description: ''
      content:
        application/json:
          schema:
            allOf:
            - type: object
              properties:
                created:
                  type: string
                  description: TimeCreated is when this reference was created
                  format: date-time
                location:
                  type: string
                  description: Location of the API holding this reference
                metadata:
                  type: object
                  additionalProperties:
                    type: object
                  description: Metadata contains additional data about this reference
                name:
                  type: string
                  description: Name of the entity holding this reference
            - type: object
              properties:
                id:
                  type: string
    webhookReferences:
      description: ''
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              allOf:
              - type: object
                properties:
                  created:
                    type: string
                    description: TimeCreated is when this reference was created
                    format: date-time
                  location:
                    type: string
                    description: Location of the API holding this reference
                  metadata:
                    type: object
                    additionalProperties:
                      type: object
                    description: Metadata contains additional data about this reference
                  name:
                    type: string
                    description: Name of the entity holding this reference
              - type: object
                properties:
                  id:
                    type: string
    webhooksList:
      description: ''
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/WebhookListConfigResponse"
    webhookstat:
      description: Webhook Statistics object
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/WebhookStatResponse"
x-original-swagger-version: '2.0'
x-explorer-enabled: false
